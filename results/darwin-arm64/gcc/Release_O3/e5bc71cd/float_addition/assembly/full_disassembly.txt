
/Users/vinhq/Library/CloudStorage/OneDrive-Chalmers/Desktop/Q22025/BenchEverything/build/darwin-arm64/gcc/Release_O3/experiments/float_addition/float_addition_benchmark:	file format mach-o arm64

Disassembly of section __TEXT,__text:

0000000100003448 <BM_FloatAddition(benchmark::State&)>:
100003448:     	sub	sp, sp, #64
10000344c:     	stp	x22, x21, [sp, #16]
100003450:     	stp	x20, x19, [sp, #32]
100003454:     	stp	x29, x30, [sp, #48]
100003458:     	add	x29, sp, #48
10000345c:     	mov	x19, x0
100003460:     	str	wzr, [sp, #12]
100003464:     	ldr	w21, [x0, #28]
100003468:     	ldr	x20, [x0, #16]
10000346c:     	bl	0x1000040c4 <benchmark::State::StartKeepRunning()>
100003470:     	cmp	w21, #0
100003474:     	ccmp	x20, #0, #4, eq
100003478:     	b.eq	0x100003490 <BM_FloatAddition(benchmark::State&)+0x48>
10000347c:     	mov	w8, #1115947008
100003480:     	add	x9, sp, #12
100003484:     	str	w8, [sp, #12]
100003488:     	subs	x20, x20, #1
10000348c:     	b.ne	0x100003484 <BM_FloatAddition(benchmark::State&)+0x3c>
100003490:     	mov	x0, x19
100003494:     	bl	0x100004170 <benchmark::State::FinishKeepRunning()>
100003498:     	ldp	x29, x30, [sp, #48]
10000349c:     	ldp	x20, x19, [sp, #32]
1000034a0:     	ldp	x22, x21, [sp, #16]
1000034a4:     	add	sp, sp, #64
1000034a8:     	ret

00000001000034ac <_main>:
1000034ac:     	sub	sp, sp, #80
1000034b0:     	stp	x20, x19, [sp, #48]
1000034b4:     	stp	x29, x30, [sp, #64]
1000034b8:     	add	x29, sp, #64
1000034bc:     	mov	x19, x1
1000034c0:     	adrp	x8, 0x100034000 <__GLOBAL__sub_I_benchmark.cpp+0x1c>
1000034c4:     	ldr	x8, [x8, #928]
1000034c8:     	ldr	x8, [x8]
1000034cc:     	stur	x8, [x29, #-24]
1000034d0:     	str	w0, [sp, #20]
1000034d4:     	adrp	x8, 0x100031000 <__GLOBAL__sub_I_benchmark.cpp+0x24>
1000034d8:     	add	x8, x8, #1857
1000034dc:     	ldr	x8, [x8]
1000034e0:     	str	x8, [sp, #24]
1000034e4:     	mov	w8, #107
1000034e8:     	strh	w8, [sp, #32]
1000034ec:     	add	x8, sp, #24
1000034f0:     	str	x8, [sp, #8]
1000034f4:     	cbnz	x1, 0x100003504 <_main+0x58>
1000034f8:     	mov	w8, #1
1000034fc:     	str	w8, [sp, #20]
100003500:     	add	x19, sp, #8
100003504:     	adrp	x2, 0x100006000 <_main+0x64>
100003508:     	add	x2, x2, #1976
10000350c:     	add	x0, sp, #20
100003510:     	mov	x1, x19
100003514:     	bl	0x1000067d8 <benchmark::Initialize(int*, char**, void (*)())>
100003518:     	ldr	w0, [sp, #20]
10000351c:     	mov	x1, x19
100003520:     	bl	0x100006844 <benchmark::ReportUnrecognizedArguments(int, char**)>
100003524:     	tbz	w0, #0, 0x100003530 <_main+0x84>
100003528:     	mov	w0, #1
10000352c:     	b	0x10000353c <_main+0x90>
100003530:     	bl	0x100004594 <benchmark::RunSpecifiedBenchmarks()>
100003534:     	bl	0x100006804 <benchmark::Shutdown()>
100003538:     	mov	w0, #0
10000353c:     	ldur	x8, [x29, #-24]
100003540:     	adrp	x9, 0x100034000 <__GLOBAL__sub_I_benchmark.cpp+0x9c>
100003544:     	ldr	x9, [x9, #928]
100003548:     	ldr	x9, [x9]
10000354c:     	cmp	x9, x8
100003550:     	b.ne	0x100003564 <_main+0xb8>
100003554:     	ldp	x29, x30, [sp, #64]
100003558:     	ldp	x20, x19, [sp, #48]
10000355c:     	add	sp, sp, #80
100003560:     	ret
100003564:     	bl	0x10002f0d4 <_vsnprintf+0x10002f0d4>

0000000100003568 <__GLOBAL__sub_I_benchmark.cpp>:
100003568:     	sub	sp, sp, #80
10000356c:     	stp	x22, x21, [sp, #32]
100003570:     	stp	x20, x19, [sp, #48]
100003574:     	stp	x29, x30, [sp, #64]
100003578:     	add	x29, sp, #64
10000357c:     	bl	0x10000363c <benchmark::internal::InitializeStreams()>
100003580:     	mov	w0, #224
100003584:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100003588:     	mov	x19, x0
10000358c:     	mov	w8, #16
100003590:     	strb	w8, [sp, #23]
100003594:     	adrp	x8, 0x100031000 <benchmark::internal::InitializeStreams()+0x10>
100003598:     	add	x8, x8, #1840
10000359c:     	ldr	q0, [x8]
1000035a0:     	str	q0, [sp]
1000035a4:     	strb	wzr, [sp, #16]
1000035a8:     	mov	w21, #1
1000035ac:     	mov	x1, sp
1000035b0:     	bl	0x10000d52c <benchmark::internal::Benchmark::Benchmark(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
1000035b4:     	adrp	x8, 0x100034000 <benchmark::internal::InitializeStreams()+0x3c>
1000035b8:     	add	x8, x8, #1312
1000035bc:     	add	x8, x8, #16
1000035c0:     	str	x8, [x19]
1000035c4:     	adrp	x8, 0x100003000 <__GLOBAL__sub_I_benchmark.cpp+0x5c>
1000035c8:     	add	x8, x8, #1096
1000035cc:     	str	x8, [x19, #216]
1000035d0:     	mov	w21, #0
1000035d4:     	mov	x0, x19
1000035d8:     	bl	0x10000d278 <benchmark::internal::RegisterBenchmarkInternal(benchmark::internal::Benchmark*)>
1000035dc:     	mov	x20, x0
1000035e0:     	ldrsb	w8, [sp, #23]
1000035e4:     	tbz	w8, #31, 0x1000035f0 <__GLOBAL__sub_I_benchmark.cpp+0x88>
1000035e8:     	ldr	x0, [sp]
1000035ec:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000035f0:     	adrp	x8, 0x100038000 <benchmark::internal::InitializeStreams()+0x88>
1000035f4:     	str	x20, [x8, #40]
1000035f8:     	ldp	x29, x30, [sp, #64]
1000035fc:     	ldp	x20, x19, [sp, #48]
100003600:     	ldp	x22, x21, [sp, #32]
100003604:     	add	sp, sp, #80
100003608:     	ret
10000360c:     	mov	x20, x0
100003610:     	ldrsb	w8, [sp, #23]
100003614:     	tbz	w8, #31, 0x100003628 <__GLOBAL__sub_I_benchmark.cpp+0xc0>
100003618:     	ldr	x0, [sp]
10000361c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100003620:     	tbnz	w21, #0, 0x10000362c <__GLOBAL__sub_I_benchmark.cpp+0xc4>
100003624:     	b	0x100003634 <__GLOBAL__sub_I_benchmark.cpp+0xcc>
100003628:     	cbz	w21, 0x100003634 <__GLOBAL__sub_I_benchmark.cpp+0xcc>
10000362c:     	mov	x0, x19
100003630:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100003634:     	mov	x0, x20
100003638:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010000363c <benchmark::internal::InitializeStreams()>:
10000363c:     	stp	x20, x19, [sp, #-32]!
100003640:     	stp	x29, x30, [sp, #16]
100003644:     	add	x29, sp, #16
100003648:     	adrp	x8, 0x100038000 <benchmark::State::State(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, long long, std::__1::vector<long long, std::__1::allocator<long long>> const&, int, int, benchmark::internal::ThreadTimer*, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0x14>
10000364c:     	add	x8, x8, #80
100003650:     	ldaprb	w8, [x8]
100003654:     	tbz	w8, #0, 0x100003668 <benchmark::internal::InitializeStreams()+0x2c>
100003658:     	mov	w0, #0
10000365c:     	ldp	x29, x30, [sp, #16]
100003660:     	ldp	x20, x19, [sp], #32
100003664:     	ret
100003668:     	adrp	x0, 0x100038000 <benchmark::State::State(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, long long, std::__1::vector<long long, std::__1::allocator<long long>> const&, int, int, benchmark::internal::ThreadTimer*, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0x34>
10000366c:     	add	x0, x0, #80
100003670:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
100003674:     	cbz	w0, 0x100003658 <benchmark::internal::InitializeStreams()+0x1c>
100003678:     	adrp	x19, 0x100038000 <benchmark::State::State(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, long long, std::__1::vector<long long, std::__1::allocator<long long>> const&, int, int, benchmark::internal::ThreadTimer*, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0x44>
10000367c:     	add	x19, x19, #56
100003680:     	mov	x0, x19
100003684:     	bl	0x10002efc0 <_vsnprintf+0x10002efc0>
100003688:     	adrp	x0, 0x100034000 <benchmark::State::State(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, long long, std::__1::vector<long long, std::__1::allocator<long long>> const&, int, int, benchmark::internal::ThreadTimer*, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0x44>
10000368c:     	ldr	x0, [x0, #608]
100003690:     	adrp	x2, 0x100000000 <benchmark::internal::InitializeStreams()+0x48>
100003694:     	add	x2, x2, #0
100003698:     	mov	x1, x19
10000369c:     	bl	0x10002f044 <_vsnprintf+0x10002f044>
1000036a0:     	add	x0, x19, #24
1000036a4:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
1000036a8:     	mov	w0, #0
1000036ac:     	ldp	x29, x30, [sp, #16]
1000036b0:     	ldp	x20, x19, [sp], #32
1000036b4:     	ret
1000036b8:     	mov	x19, x0
1000036bc:     	adrp	x0, 0x100038000 <benchmark::State::State(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, long long, std::__1::vector<long long, std::__1::allocator<long long>> const&, int, int, benchmark::internal::ThreadTimer*, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0x88>
1000036c0:     	add	x0, x0, #80
1000036c4:     	bl	0x10002f074 <_vsnprintf+0x10002f074>
1000036c8:     	mov	x0, x19
1000036cc:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

00000001000036d0 <std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::~map[abi:ue170006]()>:
1000036d0:     	stp	x20, x19, [sp, #-32]!
1000036d4:     	stp	x29, x30, [sp, #16]
1000036d8:     	add	x29, sp, #16
1000036dc:     	mov	x19, x0
1000036e0:     	ldr	x1, [x0, #8]
1000036e4:     	bl	0x10000a254 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*)>
1000036e8:     	mov	x0, x19
1000036ec:     	ldp	x29, x30, [sp, #16]
1000036f0:     	ldp	x20, x19, [sp], #32
1000036f4:     	ret

00000001000036f8 <benchmark::internal::GetGlobalContext()>:
1000036f8:     	adrp	x0, 0x100038000 <benchmark::State::State(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, long long, std::__1::vector<long long, std::__1::allocator<long long>> const&, int, int, benchmark::internal::ThreadTimer*, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0xc4>
1000036fc:     	add	x0, x0, #504
100003700:     	ret

0000000100003704 <benchmark::internal::UseCharPointer(char const volatile*)>:
100003704:     	ret

0000000100003708 <benchmark::State::State(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, long long, std::__1::vector<long long, std::__1::allocator<long long>> const&, int, int, benchmark::internal::ThreadTimer*, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)>:
100003708:     	stp	x28, x27, [sp, #-96]!
10000370c:     	stp	x26, x25, [sp, #16]
100003710:     	stp	x24, x23, [sp, #32]
100003714:     	stp	x22, x21, [sp, #48]
100003718:     	stp	x20, x19, [sp, #64]
10000371c:     	stp	x29, x30, [sp, #80]
100003720:     	add	x29, sp, #80
100003724:     	mov	x22, x7
100003728:     	mov	x23, x6
10000372c:     	mov	x24, x5
100003730:     	mov	x25, x4
100003734:     	mov	x26, x1
100003738:     	mov	x19, x0
10000373c:     	stp	xzr, xzr, [x0]
100003740:     	str	x2, [x0, #16]
100003744:     	strh	wzr, [x0, #24]
100003748:     	add	x20, x0, #32
10000374c:     	stur	xzr, [x0, #28]
100003750:     	stur	xzr, [x0, #44]
100003754:     	stur	xzr, [x0, #36]
100003758:     	str	wzr, [x0, #52]
10000375c:     	ldp	x21, x8, [x3]
100003760:     	subs	x27, x8, x21
100003764:     	b.eq	0x100003794 <benchmark::State::State(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, long long, std::__1::vector<long long, std::__1::allocator<long long>> const&, int, int, benchmark::internal::ThreadTimer*, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0x8c>
100003768:     	tbnz	x27, #63, 0x10000388c <benchmark::State::State(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, long long, std::__1::vector<long long, std::__1::allocator<long long>> const&, int, int, benchmark::internal::ThreadTimer*, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0x184>
10000376c:     	mov	x0, x27
100003770:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100003774:     	asr	x8, x27, #3
100003778:     	stp	x0, x0, [x19, #32]
10000377c:     	add	x28, x0, x8, lsl #3
100003780:     	str	x28, [x19, #48]
100003784:     	mov	x1, x21
100003788:     	mov	x2, x27
10000378c:     	bl	0x10002f1c4 <_vsnprintf+0x10002f1c4>
100003790:     	str	x28, [x19, #40]
100003794:     	ldr	x8, [x29, #16]
100003798:     	mov	x27, x19
10000379c:     	str	xzr, [x27, #72]!
1000037a0:     	mov	x21, x19
1000037a4:     	str	x27, [x21, #64]!
1000037a8:     	stur	xzr, [x21, #-8]
1000037ac:     	str	xzr, [x21, #16]
1000037b0:     	ldr	q0, [x26]
1000037b4:     	ldr	x9, [x26, #16]
1000037b8:     	str	x9, [x21, #40]
1000037bc:     	stur	q0, [x21, #24]
1000037c0:     	stp	xzr, xzr, [x26, #8]
1000037c4:     	str	xzr, [x26]
1000037c8:     	stp	w25, w24, [x21, #48]
1000037cc:     	stp	x23, x22, [x21, #56]
1000037d0:     	str	x8, [x21, #72]
1000037d4:     	adrp	x24, 0x100038000 <benchmark::State::State(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, long long, std::__1::vector<long long, std::__1::allocator<long long>> const&, int, int, benchmark::internal::ThreadTimer*, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0x1a0>
1000037d8:     	add	x24, x24, #8
1000037dc:     	ldaprb	w8, [x24]
1000037e0:     	adrp	x22, 0x100038000 <benchmark::State::State(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, long long, std::__1::vector<long long, std::__1::allocator<long long>> const&, int, int, benchmark::internal::ThreadTimer*, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0x1ac>
1000037e4:     	tbz	w8, #0, 0x100003844 <benchmark::State::State(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, long long, std::__1::vector<long long, std::__1::allocator<long long>> const&, int, int, benchmark::internal::ThreadTimer*, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0x13c>
1000037e8:     	add	x23, x21, #24
1000037ec:     	ldr	x0, [x22]
1000037f0:     	cbz	x0, 0x100003804 <benchmark::State::State(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, long long, std::__1::vector<long long, std::__1::allocator<long long>> const&, int, int, benchmark::internal::ThreadTimer*, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0xfc>
1000037f4:     	adrp	x1, 0x100031000 <benchmark::State::State(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, long long, std::__1::vector<long long, std::__1::allocator<long long>> const&, int, int, benchmark::internal::ThreadTimer*, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0x1a4>
1000037f8:     	add	x1, x1, #2254
1000037fc:     	mov	w2, #34
100003800:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100003804:     	ldaprb	w8, [x24]
100003808:     	tbz	w8, #0, 0x100003868 <benchmark::State::State(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, long long, std::__1::vector<long long, std::__1::allocator<long long>> const&, int, int, benchmark::internal::ThreadTimer*, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0x160>
10000380c:     	ldr	x0, [x22]
100003810:     	cbz	x0, 0x100003824 <benchmark::State::State(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, long long, std::__1::vector<long long, std::__1::allocator<long long>> const&, int, int, benchmark::internal::ThreadTimer*, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0x11c>
100003814:     	adrp	x1, 0x100031000 <benchmark::State::State(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, long long, std::__1::vector<long long, std::__1::allocator<long long>> const&, int, int, benchmark::internal::ThreadTimer*, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0x1c4>
100003818:     	add	x1, x1, #2289
10000381c:     	mov	w2, #38
100003820:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100003824:     	mov	x0, x19
100003828:     	ldp	x29, x30, [sp, #80]
10000382c:     	ldp	x20, x19, [sp, #64]
100003830:     	ldp	x22, x21, [sp, #48]
100003834:     	ldp	x24, x23, [sp, #32]
100003838:     	ldp	x26, x25, [sp, #16]
10000383c:     	ldp	x28, x27, [sp], #96
100003840:     	ret
100003844:     	adrp	x0, 0x100038000 <benchmark::State::PauseTiming()+0x34>
100003848:     	add	x0, x0, #8
10000384c:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
100003850:     	cbz	w0, 0x1000037e8 <benchmark::State::State(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, long long, std::__1::vector<long long, std::__1::allocator<long long>> const&, int, int, benchmark::internal::ThreadTimer*, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0xe0>
100003854:     	str	xzr, [x22]
100003858:     	adrp	x0, 0x100038000 <benchmark::State::PauseTiming()+0x48>
10000385c:     	add	x0, x0, #8
100003860:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
100003864:     	b	0x1000037e8 <benchmark::State::State(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, long long, std::__1::vector<long long, std::__1::allocator<long long>> const&, int, int, benchmark::internal::ThreadTimer*, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0xe0>
100003868:     	adrp	x0, 0x100038000 <benchmark::State::PauseTiming()+0x58>
10000386c:     	add	x0, x0, #8
100003870:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
100003874:     	cbz	w0, 0x10000380c <benchmark::State::State(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, long long, std::__1::vector<long long, std::__1::allocator<long long>> const&, int, int, benchmark::internal::ThreadTimer*, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0x104>
100003878:     	str	xzr, [x22]
10000387c:     	adrp	x0, 0x100038000 <benchmark::State::PauseTiming()+0x6c>
100003880:     	add	x0, x0, #8
100003884:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
100003888:     	b	0x10000380c <benchmark::State::State(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, long long, std::__1::vector<long long, std::__1::allocator<long long>> const&, int, int, benchmark::internal::ThreadTimer*, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0x104>
10000388c:     	mov	x0, x20
100003890:     	bl	0x10000a2cc <std::__1::vector<long long, std::__1::allocator<long long>>::__throw_length_error[abi:ue170006]() const>
100003894:     	brk	#0x1
100003898:     	mov	x22, x0
10000389c:     	ldrsb	w8, [x19, #111]
1000038a0:     	tbz	w8, #31, 0x1000038ac <benchmark::State::State(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, long long, std::__1::vector<long long, std::__1::allocator<long long>> const&, int, int, benchmark::internal::ThreadTimer*, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0x1a4>
1000038a4:     	ldr	x0, [x23]
1000038a8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000038ac:     	ldr	x1, [x27]
1000038b0:     	mov	x0, x21
1000038b4:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
1000038b8:     	b	0x1000038c0 <benchmark::State::State(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, long long, std::__1::vector<long long, std::__1::allocator<long long>> const&, int, int, benchmark::internal::ThreadTimer*, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0x1b8>
1000038bc:     	mov	x22, x0
1000038c0:     	ldr	x0, [x20]
1000038c4:     	cbz	x0, 0x1000038d0 <benchmark::State::State(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, long long, std::__1::vector<long long, std::__1::allocator<long long>> const&, int, int, benchmark::internal::ThreadTimer*, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0x1c8>
1000038c8:     	str	x0, [x19, #40]
1000038cc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000038d0:     	mov	x0, x22
1000038d4:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

00000001000038d8 <benchmark::State::State(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, long long, std::__1::vector<long long, std::__1::allocator<long long>> const&, int, int, benchmark::internal::ThreadTimer*, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)>:
1000038d8:     	ldr	x8, [sp]
1000038dc:     	str	x8, [sp]
1000038e0:     	b	0x100003708 <benchmark::State::State(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, long long, std::__1::vector<long long, std::__1::allocator<long long>> const&, int, int, benchmark::internal::ThreadTimer*, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)>

00000001000038e4 <benchmark::State::PauseTiming()>:
1000038e4:     	sub	sp, sp, #192
1000038e8:     	stp	d9, d8, [sp, #80]
1000038ec:     	stp	x28, x27, [sp, #96]
1000038f0:     	stp	x26, x25, [sp, #112]
1000038f4:     	stp	x24, x23, [sp, #128]
1000038f8:     	stp	x22, x21, [sp, #144]
1000038fc:     	stp	x20, x19, [sp, #160]
100003900:     	stp	x29, x30, [sp, #176]
100003904:     	add	x29, sp, #176
100003908:     	mov	x20, x0
10000390c:     	adrp	x19, 0x100038000 <benchmark::State::PauseTiming()+0xfc>
100003910:     	add	x19, x19, #8
100003914:     	ldaprb	w8, [x19]
100003918:     	tbz	w8, #0, 0x100003c3c <benchmark::State::PauseTiming()+0x358>
10000391c:     	ldr	x0, [x20, #120]
100003920:     	bl	0x100003cd0 <benchmark::internal::ThreadTimer::StopTimer()>
100003924:     	ldr	x23, [x20, #136]
100003928:     	cbz	x23, 0x100003c00 <benchmark::State::PauseTiming()+0x31c>
10000392c:     	mov	x24, #-17
100003930:     	movk	x24, #32767, lsl #48
100003934:     	stp	xzr, xzr, [sp, #8]
100003938:     	str	xzr, [sp, #24]
10000393c:     	ldp	x9, x8, [x23, #48]
100003940:     	cmp	x8, x9
100003944:     	b.eq	0x100003ab0 <benchmark::State::PauseTiming()+0x1cc>
100003948:     	add	x0, x23, #360
10000394c:     	add	x1, x23, #24
100003950:     	bl	0x10002952c <benchmark::internal::PerfCounterValues::Read(std::__1::vector<int, std::__1::allocator<int>> const&)>
100003954:     	ldp	x9, x8, [x23]
100003958:     	sub	x8, x8, x9
10000395c:     	asr	x8, x8, #2
100003960:     	ldrb	w9, [x23, #72]
100003964:     	cmp	w9, #0
100003968:     	ccmp	x0, x8, #0, ne
10000396c:     	cset	w8, eq
100003970:     	strb	w8, [x23, #72]
100003974:     	ldp	x8, x9, [x23, #48]
100003978:     	cmp	x9, x8
10000397c:     	b.eq	0x100003a84 <benchmark::State::PauseTiming()+0x1a0>
100003980:     	mov	x25, #0
100003984:     	mov	x26, #0
100003988:     	mov	x27, #-6148914691236517206
10000398c:     	movk	x27, #43691
100003990:     	b	0x1000039d4 <benchmark::State::PauseTiming()+0xf0>
100003994:     	ldr	q0, [sp, #32]
100003998:     	ldr	x9, [sp, #48]
10000399c:     	str	x9, [x8, #16]
1000039a0:     	str	q0, [x8]
1000039a4:     	ldr	d0, [sp, #56]
1000039a8:     	str	d0, [x8, #24]
1000039ac:     	add	x8, x8, #32
1000039b0:     	str	x8, [sp, #16]
1000039b4:     	add	x26, x26, #1
1000039b8:     	ldp	x8, x9, [x23, #48]
1000039bc:     	sub	x9, x9, x8
1000039c0:     	asr	x9, x9, #3
1000039c4:     	mul	x9, x9, x27
1000039c8:     	add	x25, x25, #24
1000039cc:     	cmp	x26, x9
1000039d0:     	b.hs	0x100003a84 <benchmark::State::PauseTiming()+0x1a0>
1000039d4:     	add	x9, x23, x26, lsl #3
1000039d8:     	ldr	d8, [x9, #360]
1000039dc:     	ldr	d9, [x9, #80]
1000039e0:     	add	x8, x8, x25
1000039e4:     	ldrsb	w9, [x8, #23]
1000039e8:     	tbnz	w9, #31, 0x100003a00 <benchmark::State::PauseTiming()+0x11c>
1000039ec:     	ldr	q0, [x8]
1000039f0:     	ldr	x8, [x8, #16]
1000039f4:     	str	x8, [sp, #48]
1000039f8:     	str	q0, [sp, #32]
1000039fc:     	b	0x100003a48 <benchmark::State::PauseTiming()+0x164>
100003a00:     	ldp	x21, x28, [x8]
100003a04:     	cmp	x28, #22
100003a08:     	b.hi	0x100003a18 <benchmark::State::PauseTiming()+0x134>
100003a0c:     	strb	w28, [sp, #55]
100003a10:     	add	x0, sp, #32
100003a14:     	b	0x100003a3c <benchmark::State::PauseTiming()+0x158>
100003a18:     	cmp	x28, x24
100003a1c:     	b.hi	0x100003c30 <benchmark::State::PauseTiming()+0x34c>
100003a20:     	orr	x8, x28, #0xf
100003a24:     	add	x22, x8, #1
100003a28:     	mov	x0, x22
100003a2c:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100003a30:     	orr	x8, x22, #0x8000000000000000
100003a34:     	stp	x28, x8, [sp, #40]
100003a38:     	str	x0, [sp, #32]
100003a3c:     	add	x2, x28, #1
100003a40:     	mov	x1, x21
100003a44:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
100003a48:     	ucvtf	d0, d8
100003a4c:     	ucvtf	d1, d9
100003a50:     	fsub	d0, d0, d1
100003a54:     	str	d0, [sp, #56]
100003a58:     	ldp	x8, x9, [sp, #16]
100003a5c:     	cmp	x8, x9
100003a60:     	b.lo	0x100003994 <benchmark::State::PauseTiming()+0xb0>
100003a64:     	add	x0, sp, #8
100003a68:     	add	x1, sp, #32
100003a6c:     	bl	0x1000068c8 <void std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>>>::__push_back_slow_path<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>&&)>
100003a70:     	ldrsb	w8, [sp, #55]
100003a74:     	tbz	w8, #31, 0x1000039b4 <benchmark::State::PauseTiming()+0xd0>
100003a78:     	ldr	x0, [sp, #32]
100003a7c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100003a80:     	b	0x1000039b4 <benchmark::State::PauseTiming()+0xd0>
100003a84:     	ldrb	w8, [x23, #72]
100003a88:     	cbnz	w8, 0x100003ab0 <benchmark::State::PauseTiming()+0x1cc>
100003a8c:     	ldaprb	w8, [x19]
100003a90:     	adrp	x21, 0x100038000 <benchmark::State::PauseTiming()+0x280>
100003a94:     	tbz	w8, #0, 0x100003c64 <benchmark::State::PauseTiming()+0x380>
100003a98:     	ldr	x0, [x21]
100003a9c:     	cbz	x0, 0x100003ab0 <benchmark::State::PauseTiming()+0x1cc>
100003aa0:     	adrp	x1, 0x100031000 <benchmark::State::PauseTiming()+0x274>
100003aa4:     	add	x1, x1, #2328
100003aa8:     	mov	w2, #36
100003aac:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100003ab0:     	ldp	x25, x26, [sp, #8]
100003ab4:     	cmp	x25, x26
100003ab8:     	b.eq	0x100003bb8 <benchmark::State::PauseTiming()+0x2d4>
100003abc:     	add	x20, x20, #64
100003ac0:     	add	x28, sp, #32
100003ac4:     	adrp	x8, 0x100032000 <benchmark::State::PauseTiming()+0x29c>
100003ac8:     	ldr	d8, [x8, #2784]
100003acc:     	adrp	x21, 0x100032000 <benchmark::State::PauseTiming()+0x2a4>
100003ad0:     	add	x21, x21, #2853
100003ad4:     	b	0x100003ae4 <benchmark::State::PauseTiming()+0x200>
100003ad8:     	add	x25, x25, #32
100003adc:     	cmp	x25, x26
100003ae0:     	b.eq	0x100003bb4 <benchmark::State::PauseTiming()+0x2d0>
100003ae4:     	ldrsb	w8, [x25, #23]
100003ae8:     	tbnz	w8, #31, 0x100003b0c <benchmark::State::PauseTiming()+0x228>
100003aec:     	ldr	q0, [x25]
100003af0:     	ldr	x8, [x25, #16]
100003af4:     	str	x8, [sp, #48]
100003af8:     	str	q0, [sp, #32]
100003afc:     	ldr	d9, [x25, #24]
100003b00:     	ldaprb	w8, [x19]
100003b04:     	tbnz	w8, #0, 0x100003b60 <benchmark::State::PauseTiming()+0x27c>
100003b08:     	b	0x100003b94 <benchmark::State::PauseTiming()+0x2b0>
100003b0c:     	ldp	x22, x27, [x25]
100003b10:     	cmp	x27, #22
100003b14:     	b.hi	0x100003b24 <benchmark::State::PauseTiming()+0x240>
100003b18:     	strb	w27, [sp, #55]
100003b1c:     	add	x0, sp, #32
100003b20:     	b	0x100003b48 <benchmark::State::PauseTiming()+0x264>
100003b24:     	cmp	x27, x24
100003b28:     	b.hi	0x100003c24 <benchmark::State::PauseTiming()+0x340>
100003b2c:     	orr	x8, x27, #0xf
100003b30:     	add	x23, x8, #1
100003b34:     	mov	x0, x23
100003b38:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100003b3c:     	orr	x8, x23, #0x8000000000000000
100003b40:     	stp	x27, x8, [sp, #40]
100003b44:     	str	x0, [sp, #32]
100003b48:     	add	x2, x27, #1
100003b4c:     	mov	x1, x22
100003b50:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
100003b54:     	ldr	d9, [x25, #24]
100003b58:     	ldaprb	w8, [x19]
100003b5c:     	tbz	w8, #0, 0x100003b94 <benchmark::State::PauseTiming()+0x2b0>
100003b60:     	str	x28, [sp, #72]
100003b64:     	add	x1, sp, #32
100003b68:     	add	x3, sp, #72
100003b6c:     	add	x4, sp, #64
100003b70:     	mov	x0, x20
100003b74:     	mov	x2, x21
100003b78:     	bl	0x10000a2e0 <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>, std::__1::tuple<>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>&&, std::__1::tuple<>&&)>
100003b7c:     	stp	d9, d8, [x0, #56]
100003b80:     	ldrsb	w8, [sp, #55]
100003b84:     	tbz	w8, #31, 0x100003ad8 <benchmark::State::PauseTiming()+0x1f4>
100003b88:     	ldr	x0, [sp, #32]
100003b8c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100003b90:     	b	0x100003ad8 <benchmark::State::PauseTiming()+0x1f4>
100003b94:     	mov	x0, x19
100003b98:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
100003b9c:     	cbz	w0, 0x100003b60 <benchmark::State::PauseTiming()+0x27c>
100003ba0:     	adrp	x8, 0x100038000 <benchmark::State::PauseTiming()+0x390>
100003ba4:     	str	xzr, [x8]
100003ba8:     	mov	x0, x19
100003bac:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
100003bb0:     	b	0x100003b60 <benchmark::State::PauseTiming()+0x27c>
100003bb4:     	ldr	x25, [sp, #8]
100003bb8:     	cbz	x25, 0x100003c00 <benchmark::State::PauseTiming()+0x31c>
100003bbc:     	ldr	x8, [sp, #16]
100003bc0:     	mov	x0, x25
100003bc4:     	cmp	x8, x25
100003bc8:     	b.ne	0x100003bdc <benchmark::State::PauseTiming()+0x2f8>
100003bcc:     	b	0x100003bf8 <benchmark::State::PauseTiming()+0x314>
100003bd0:     	mov	x8, x19
100003bd4:     	cmp	x19, x25
100003bd8:     	b.eq	0x100003bf4 <benchmark::State::PauseTiming()+0x310>
100003bdc:     	sub	x19, x8, #32
100003be0:     	ldursb	w9, [x8, #-9]
100003be4:     	tbz	w9, #31, 0x100003bd0 <benchmark::State::PauseTiming()+0x2ec>
100003be8:     	ldur	x0, [x8, #-32]
100003bec:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100003bf0:     	b	0x100003bd0 <benchmark::State::PauseTiming()+0x2ec>
100003bf4:     	ldr	x0, [sp, #8]
100003bf8:     	str	x25, [sp, #16]
100003bfc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100003c00:     	ldp	x29, x30, [sp, #176]
100003c04:     	ldp	x20, x19, [sp, #160]
100003c08:     	ldp	x22, x21, [sp, #144]
100003c0c:     	ldp	x24, x23, [sp, #128]
100003c10:     	ldp	x26, x25, [sp, #112]
100003c14:     	ldp	x28, x27, [sp, #96]
100003c18:     	ldp	d9, d8, [sp, #80]
100003c1c:     	add	sp, sp, #192
100003c20:     	ret
100003c24:     	add	x0, sp, #32
100003c28:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
100003c2c:     	b	0x100003c38 <benchmark::State::PauseTiming()+0x354>
100003c30:     	add	x0, sp, #32
100003c34:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
100003c38:     	brk	#0x1
100003c3c:     	adrp	x0, 0x100038000 <benchmark::internal::ThreadTimer::StopTimer()+0x40>
100003c40:     	add	x0, x0, #8
100003c44:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
100003c48:     	cbz	w0, 0x10000391c <benchmark::State::PauseTiming()+0x38>
100003c4c:     	adrp	x8, 0x100038000 <benchmark::internal::ThreadTimer::StopTimer()+0x50>
100003c50:     	str	xzr, [x8]
100003c54:     	adrp	x0, 0x100038000 <benchmark::internal::ThreadTimer::StopTimer()+0x58>
100003c58:     	add	x0, x0, #8
100003c5c:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
100003c60:     	b	0x10000391c <benchmark::State::PauseTiming()+0x38>
100003c64:     	adrp	x0, 0x100038000 <benchmark::internal::ThreadTimer::StopTimer()+0x68>
100003c68:     	add	x0, x0, #8
100003c6c:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
100003c70:     	cbz	w0, 0x100003a98 <benchmark::State::PauseTiming()+0x1b4>
100003c74:     	str	xzr, [x21]
100003c78:     	adrp	x0, 0x100038000 <benchmark::internal::ThreadTimer::StopTimer()+0x7c>
100003c7c:     	add	x0, x0, #8
100003c80:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
100003c84:     	b	0x100003a98 <benchmark::State::PauseTiming()+0x1b4>
100003c88:     	mov	x19, x0
100003c8c:     	b	0x100003cc0 <benchmark::State::PauseTiming()+0x3dc>
100003c90:     	mov	x19, x0
100003c94:     	b	0x100003cc0 <benchmark::State::PauseTiming()+0x3dc>
100003c98:     	mov	x19, x0
100003c9c:     	b	0x100003cc0 <benchmark::State::PauseTiming()+0x3dc>
100003ca0:     	mov	x19, x0
100003ca4:     	b	0x100003cc0 <benchmark::State::PauseTiming()+0x3dc>
100003ca8:     	b	0x100003cac <benchmark::State::PauseTiming()+0x3c8>
100003cac:     	mov	x19, x0
100003cb0:     	ldrsb	w8, [sp, #55]
100003cb4:     	tbz	w8, #31, 0x100003cc0 <benchmark::State::PauseTiming()+0x3dc>
100003cb8:     	ldr	x0, [sp, #32]
100003cbc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100003cc0:     	add	x0, sp, #8
100003cc4:     	bl	0x100003d84 <std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>>>::~vector[abi:ue170006]()>
100003cc8:     	mov	x0, x19
100003ccc:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100003cd0 <benchmark::internal::ThreadTimer::StopTimer()>:
100003cd0:     	stp	x20, x19, [sp, #-32]!
100003cd4:     	stp	x29, x30, [sp, #16]
100003cd8:     	add	x29, sp, #16
100003cdc:     	mov	x19, x0
100003ce0:     	adrp	x8, 0x100038000 <std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>>>::~vector[abi:ue170006]()+0x30>
100003ce4:     	add	x8, x8, #8
100003ce8:     	ldaprb	w8, [x8]
100003cec:     	tbz	w8, #0, 0x100003d5c <benchmark::internal::ThreadTimer::StopTimer()+0x8c>
100003cf0:     	strb	wzr, [x19, #1]
100003cf4:     	bl	0x10002ef48 <_vsnprintf+0x10002ef48>
100003cf8:     	scvtf	d0, x0
100003cfc:     	mov	x8, #225833675390976
100003d00:     	movk	x8, #16845, lsl #48
100003d04:     	fmov	d1, x8
100003d08:     	fdiv	d0, d0, d1
100003d0c:     	ldr	d1, [x19, #8]
100003d10:     	fsub	d0, d0, d1
100003d14:     	ldr	d1, [x19, #24]
100003d18:     	fadd	d0, d1, d0
100003d1c:     	str	d0, [x19, #24]
100003d20:     	ldrb	w8, [x19]
100003d24:     	cbz	w8, 0x100003d30 <benchmark::internal::ThreadTimer::StopTimer()+0x60>
100003d28:     	bl	0x10002e748 <benchmark::ProcessCPUUsage()>
100003d2c:     	b	0x100003d34 <benchmark::internal::ThreadTimer::StopTimer()+0x64>
100003d30:     	bl	0x10002e7fc <benchmark::ThreadCPUUsage()>
100003d34:     	ldr	d1, [x19, #16]
100003d38:     	fsub	d0, d0, d1
100003d3c:     	movi	d1, #0000000000000000
100003d40:     	fmax	d0, d0, d1
100003d44:     	ldr	d1, [x19, #32]
100003d48:     	fadd	d0, d1, d0
100003d4c:     	str	d0, [x19, #32]
100003d50:     	ldp	x29, x30, [sp, #16]
100003d54:     	ldp	x20, x19, [sp], #32
100003d58:     	ret
100003d5c:     	adrp	x0, 0x100038000 <benchmark::State::ResumeTiming()+0x38>
100003d60:     	add	x0, x0, #8
100003d64:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
100003d68:     	cbz	w0, 0x100003cf0 <benchmark::internal::ThreadTimer::StopTimer()+0x20>
100003d6c:     	adrp	x8, 0x100038000 <benchmark::State::ResumeTiming()+0x48>
100003d70:     	str	xzr, [x8]
100003d74:     	adrp	x0, 0x100038000 <benchmark::State::ResumeTiming()+0x50>
100003d78:     	add	x0, x0, #8
100003d7c:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
100003d80:     	b	0x100003cf0 <benchmark::internal::ThreadTimer::StopTimer()+0x20>

0000000100003d84 <std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>>>::~vector[abi:ue170006]()>:
100003d84:     	stp	x22, x21, [sp, #-48]!
100003d88:     	stp	x20, x19, [sp, #16]
100003d8c:     	stp	x29, x30, [sp, #32]
100003d90:     	add	x29, sp, #32
100003d94:     	mov	x19, x0
100003d98:     	ldr	x20, [x0]
100003d9c:     	cbz	x20, 0x100003de4 <std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>>>::~vector[abi:ue170006]()+0x60>
100003da0:     	ldr	x8, [x19, #8]
100003da4:     	mov	x0, x20
100003da8:     	cmp	x8, x20
100003dac:     	b.ne	0x100003dc0 <std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>>>::~vector[abi:ue170006]()+0x3c>
100003db0:     	b	0x100003ddc <std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>>>::~vector[abi:ue170006]()+0x58>
100003db4:     	mov	x8, x21
100003db8:     	cmp	x21, x20
100003dbc:     	b.eq	0x100003dd8 <std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>>>::~vector[abi:ue170006]()+0x54>
100003dc0:     	sub	x21, x8, #32
100003dc4:     	ldursb	w9, [x8, #-9]
100003dc8:     	tbz	w9, #31, 0x100003db4 <std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>>>::~vector[abi:ue170006]()+0x30>
100003dcc:     	ldur	x0, [x8, #-32]
100003dd0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100003dd4:     	b	0x100003db4 <std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>>>::~vector[abi:ue170006]()+0x30>
100003dd8:     	ldr	x0, [x19]
100003ddc:     	str	x20, [x19, #8]
100003de0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100003de4:     	mov	x0, x19
100003de8:     	ldp	x29, x30, [sp, #32]
100003dec:     	ldp	x20, x19, [sp, #16]
100003df0:     	ldp	x22, x21, [sp], #48
100003df4:     	ret

0000000100003df8 <benchmark::State::ResumeTiming()>:
100003df8:     	stp	x20, x19, [sp, #-32]!
100003dfc:     	stp	x29, x30, [sp, #16]
100003e00:     	add	x29, sp, #16
100003e04:     	mov	x19, x0
100003e08:     	adrp	x8, 0x100038000 <benchmark::State::ResumeTiming()+0xe4>
100003e0c:     	add	x8, x8, #8
100003e10:     	ldaprb	w8, [x8]
100003e14:     	tbz	w8, #0, 0x100003eb8 <benchmark::State::ResumeTiming()+0xc0>
100003e18:     	ldr	x20, [x19, #120]
100003e1c:     	mov	w8, #1
100003e20:     	strb	w8, [x20, #1]
100003e24:     	bl	0x10002ef48 <_vsnprintf+0x10002ef48>
100003e28:     	scvtf	d0, x0
100003e2c:     	mov	x8, #225833675390976
100003e30:     	movk	x8, #16845, lsl #48
100003e34:     	fmov	d1, x8
100003e38:     	fdiv	d0, d0, d1
100003e3c:     	str	d0, [x20, #8]
100003e40:     	ldrb	w8, [x20]
100003e44:     	cbz	w8, 0x100003e64 <benchmark::State::ResumeTiming()+0x6c>
100003e48:     	bl	0x10002e748 <benchmark::ProcessCPUUsage()>
100003e4c:     	str	d0, [x20, #16]
100003e50:     	ldr	x19, [x19, #136]
100003e54:     	cbnz	x19, 0x100003e74 <benchmark::State::ResumeTiming()+0x7c>
100003e58:     	ldp	x29, x30, [sp, #16]
100003e5c:     	ldp	x20, x19, [sp], #32
100003e60:     	ret
100003e64:     	bl	0x10002e7fc <benchmark::ThreadCPUUsage()>
100003e68:     	str	d0, [x20, #16]
100003e6c:     	ldr	x19, [x19, #136]
100003e70:     	cbz	x19, 0x100003e58 <benchmark::State::ResumeTiming()+0x60>
100003e74:     	ldp	x9, x8, [x19, #48]
100003e78:     	cmp	x8, x9
100003e7c:     	b.eq	0x100003e58 <benchmark::State::ResumeTiming()+0x60>
100003e80:     	add	x0, x19, #80
100003e84:     	add	x1, x19, #24
100003e88:     	bl	0x10002952c <benchmark::internal::PerfCounterValues::Read(std::__1::vector<int, std::__1::allocator<int>> const&)>
100003e8c:     	ldp	x9, x8, [x19]
100003e90:     	sub	x8, x8, x9
100003e94:     	asr	x8, x8, #2
100003e98:     	ldrb	w9, [x19, #72]
100003e9c:     	cmp	w9, #0
100003ea0:     	ccmp	x0, x8, #0, ne
100003ea4:     	cset	w8, eq
100003ea8:     	strb	w8, [x19, #72]
100003eac:     	ldp	x29, x30, [sp, #16]
100003eb0:     	ldp	x20, x19, [sp], #32
100003eb4:     	ret
100003eb8:     	adrp	x0, 0x100038000 <benchmark::State::SkipWithMessage(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xac>
100003ebc:     	add	x0, x0, #8
100003ec0:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
100003ec4:     	cbz	w0, 0x100003e18 <benchmark::State::ResumeTiming()+0x20>
100003ec8:     	adrp	x8, 0x100038000 <benchmark::State::SkipWithError(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x4>
100003ecc:     	str	xzr, [x8]
100003ed0:     	adrp	x0, 0x100038000 <benchmark::State::SkipWithError(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xc>
100003ed4:     	add	x0, x0, #8
100003ed8:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
100003edc:     	b	0x100003e18 <benchmark::State::ResumeTiming()+0x20>

0000000100003ee0 <benchmark::State::SkipWithMessage(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>:
100003ee0:     	stp	x22, x21, [sp, #-48]!
100003ee4:     	stp	x20, x19, [sp, #16]
100003ee8:     	stp	x29, x30, [sp, #32]
100003eec:     	add	x29, sp, #32
100003ef0:     	mov	x21, x1
100003ef4:     	mov	x19, x0
100003ef8:     	mov	w8, #1
100003efc:     	str	w8, [x0, #28]
100003f00:     	ldr	x8, [x0, #128]
100003f04:     	add	x20, x8, #120
100003f08:     	mov	x0, x20
100003f0c:     	bl	0x10002ef24 <_vsnprintf+0x10002ef24>
100003f10:     	ldr	x8, [x19, #128]
100003f14:     	ldr	w9, [x8, #88]
100003f18:     	cbz	w9, 0x100003f44 <benchmark::State::SkipWithMessage(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x64>
100003f1c:     	mov	x0, x20
100003f20:     	bl	0x10002ef30 <_vsnprintf+0x10002ef30>
100003f24:     	str	xzr, [x19]
100003f28:     	ldr	x0, [x19, #120]
100003f2c:     	ldrb	w8, [x0, #1]
100003f30:     	cbz	w8, 0x100003f74 <benchmark::State::SkipWithMessage(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x94>
100003f34:     	ldp	x29, x30, [sp, #32]
100003f38:     	ldp	x20, x19, [sp, #16]
100003f3c:     	ldp	x22, x21, [sp], #48
100003f40:     	b	0x100003cd0 <benchmark::internal::ThreadTimer::StopTimer()>
100003f44:     	add	x0, x8, #64
100003f48:     	mov	x1, x21
100003f4c:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
100003f50:     	ldr	w8, [x19, #28]
100003f54:     	ldr	x9, [x19, #128]
100003f58:     	str	w8, [x9, #88]
100003f5c:     	mov	x0, x20
100003f60:     	bl	0x10002ef30 <_vsnprintf+0x10002ef30>
100003f64:     	str	xzr, [x19]
100003f68:     	ldr	x0, [x19, #120]
100003f6c:     	ldrb	w8, [x0, #1]
100003f70:     	cbnz	w8, 0x100003f34 <benchmark::State::SkipWithMessage(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x54>
100003f74:     	ldp	x29, x30, [sp, #32]
100003f78:     	ldp	x20, x19, [sp, #16]
100003f7c:     	ldp	x22, x21, [sp], #48
100003f80:     	ret
100003f84:     	mov	x19, x0
100003f88:     	mov	x0, x20
100003f8c:     	bl	0x10002ef30 <_vsnprintf+0x10002ef30>
100003f90:     	mov	x0, x19
100003f94:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100003f98 <benchmark::State::SkipWithError(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>:
100003f98:     	stp	x22, x21, [sp, #-48]!
100003f9c:     	stp	x20, x19, [sp, #16]
100003fa0:     	stp	x29, x30, [sp, #32]
100003fa4:     	add	x29, sp, #32
100003fa8:     	mov	x21, x1
100003fac:     	mov	x19, x0
100003fb0:     	mov	w8, #2
100003fb4:     	str	w8, [x0, #28]
100003fb8:     	ldr	x8, [x0, #128]
100003fbc:     	add	x20, x8, #120
100003fc0:     	mov	x0, x20
100003fc4:     	bl	0x10002ef24 <_vsnprintf+0x10002ef24>
100003fc8:     	ldr	x8, [x19, #128]
100003fcc:     	ldr	w9, [x8, #88]
100003fd0:     	cbz	w9, 0x100003ffc <benchmark::State::SkipWithError(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x64>
100003fd4:     	mov	x0, x20
100003fd8:     	bl	0x10002ef30 <_vsnprintf+0x10002ef30>
100003fdc:     	str	xzr, [x19]
100003fe0:     	ldr	x0, [x19, #120]
100003fe4:     	ldrb	w8, [x0, #1]
100003fe8:     	cbz	w8, 0x10000402c <benchmark::State::SkipWithError(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x94>
100003fec:     	ldp	x29, x30, [sp, #32]
100003ff0:     	ldp	x20, x19, [sp, #16]
100003ff4:     	ldp	x22, x21, [sp], #48
100003ff8:     	b	0x100003cd0 <benchmark::internal::ThreadTimer::StopTimer()>
100003ffc:     	add	x0, x8, #64
100004000:     	mov	x1, x21
100004004:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
100004008:     	ldr	w8, [x19, #28]
10000400c:     	ldr	x9, [x19, #128]
100004010:     	str	w8, [x9, #88]
100004014:     	mov	x0, x20
100004018:     	bl	0x10002ef30 <_vsnprintf+0x10002ef30>
10000401c:     	str	xzr, [x19]
100004020:     	ldr	x0, [x19, #120]
100004024:     	ldrb	w8, [x0, #1]
100004028:     	cbnz	w8, 0x100003fec <benchmark::State::SkipWithError(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x54>
10000402c:     	ldp	x29, x30, [sp, #32]
100004030:     	ldp	x20, x19, [sp, #16]
100004034:     	ldp	x22, x21, [sp], #48
100004038:     	ret
10000403c:     	mov	x19, x0
100004040:     	mov	x0, x20
100004044:     	bl	0x10002ef30 <_vsnprintf+0x10002ef30>
100004048:     	mov	x0, x19
10000404c:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100004050 <benchmark::State::SetIterationTime(double)>:
100004050:     	ldr	x8, [x0, #120]
100004054:     	ldr	d1, [x8, #40]
100004058:     	fadd	d0, d1, d0
10000405c:     	str	d0, [x8, #40]
100004060:     	ret

0000000100004064 <benchmark::State::SetLabel(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>:
100004064:     	stp	x22, x21, [sp, #-48]!
100004068:     	stp	x20, x19, [sp, #16]
10000406c:     	stp	x29, x30, [sp, #32]
100004070:     	add	x29, sp, #32
100004074:     	mov	x20, x1
100004078:     	mov	x21, x0
10000407c:     	ldr	x8, [x0, #128]
100004080:     	add	x19, x8, #120
100004084:     	mov	x0, x19
100004088:     	bl	0x10002ef24 <_vsnprintf+0x10002ef24>
10000408c:     	ldr	x8, [x21, #128]
100004090:     	add	x0, x8, #40
100004094:     	mov	x1, x20
100004098:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
10000409c:     	mov	x0, x19
1000040a0:     	ldp	x29, x30, [sp, #32]
1000040a4:     	ldp	x20, x19, [sp, #16]
1000040a8:     	ldp	x22, x21, [sp], #48
1000040ac:     	b	0x10002ef30 <_vsnprintf+0x10002ef30>
1000040b0:     	mov	x20, x0
1000040b4:     	mov	x0, x19
1000040b8:     	bl	0x10002ef30 <_vsnprintf+0x10002ef30>
1000040bc:     	mov	x0, x20
1000040c0:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

00000001000040c4 <benchmark::State::StartKeepRunning()>:
1000040c4:     	stp	x20, x19, [sp, #-32]!
1000040c8:     	stp	x29, x30, [sp, #16]
1000040cc:     	add	x29, sp, #16
1000040d0:     	mov	x19, x0
1000040d4:     	adrp	x8, 0x100038000 <benchmark::State::FinishKeepRunning()+0x34>
1000040d8:     	add	x8, x8, #8
1000040dc:     	ldaprb	w8, [x8]
1000040e0:     	tbz	w8, #0, 0x100004148 <benchmark::State::StartKeepRunning()+0x84>
1000040e4:     	mov	w8, #1
1000040e8:     	strb	w8, [x19, #24]
1000040ec:     	ldr	w8, [x19, #28]
1000040f0:     	cbz	w8, 0x10000411c <benchmark::State::StartKeepRunning()+0x58>
1000040f4:     	mov	x8, #0
1000040f8:     	str	x8, [x19]
1000040fc:     	ldr	x8, [x19, #128]
100004100:     	add	x0, x8, #192
100004104:     	bl	0x100006ae4 <benchmark::Barrier::wait()>
100004108:     	ldr	w8, [x19, #28]
10000410c:     	cbz	w8, 0x100004138 <benchmark::State::StartKeepRunning()+0x74>
100004110:     	ldp	x29, x30, [sp, #16]
100004114:     	ldp	x20, x19, [sp], #32
100004118:     	ret
10000411c:     	ldr	x8, [x19, #16]
100004120:     	str	x8, [x19]
100004124:     	ldr	x8, [x19, #128]
100004128:     	add	x0, x8, #192
10000412c:     	bl	0x100006ae4 <benchmark::Barrier::wait()>
100004130:     	ldr	w8, [x19, #28]
100004134:     	cbnz	w8, 0x100004110 <benchmark::State::StartKeepRunning()+0x4c>
100004138:     	mov	x0, x19
10000413c:     	ldp	x29, x30, [sp, #16]
100004140:     	ldp	x20, x19, [sp], #32
100004144:     	b	0x100003df8 <benchmark::State::ResumeTiming()>
100004148:     	adrp	x0, 0x100038000 <benchmark::internal::GetOutputOptions(bool)+0x18>
10000414c:     	add	x0, x0, #8
100004150:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
100004154:     	cbz	w0, 0x1000040e4 <benchmark::State::StartKeepRunning()+0x20>
100004158:     	adrp	x8, 0x100038000 <benchmark::internal::GetOutputOptions(bool)+0x28>
10000415c:     	str	xzr, [x8]
100004160:     	adrp	x0, 0x100038000 <benchmark::internal::GetOutputOptions(bool)+0x30>
100004164:     	add	x0, x0, #8
100004168:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10000416c:     	b	0x1000040e4 <benchmark::State::StartKeepRunning()+0x20>

0000000100004170 <benchmark::State::FinishKeepRunning()>:
100004170:     	stp	x20, x19, [sp, #-32]!
100004174:     	stp	x29, x30, [sp, #16]
100004178:     	add	x29, sp, #16
10000417c:     	mov	x19, x0
100004180:     	adrp	x8, 0x100038000 <benchmark::internal::GetOutputOptions(bool)+0x50>
100004184:     	add	x8, x8, #8
100004188:     	ldaprb	w8, [x8]
10000418c:     	tbz	w8, #0, 0x1000041c0 <benchmark::State::FinishKeepRunning()+0x50>
100004190:     	ldr	w8, [x19, #28]
100004194:     	cbnz	w8, 0x1000041a0 <benchmark::State::FinishKeepRunning()+0x30>
100004198:     	mov	x0, x19
10000419c:     	bl	0x1000038e4 <benchmark::State::PauseTiming()>
1000041a0:     	str	xzr, [x19]
1000041a4:     	mov	w8, #1
1000041a8:     	strb	w8, [x19, #25]
1000041ac:     	ldr	x8, [x19, #128]
1000041b0:     	add	x0, x8, #192
1000041b4:     	ldp	x29, x30, [sp, #16]
1000041b8:     	ldp	x20, x19, [sp], #32
1000041bc:     	b	0x100006ae4 <benchmark::Barrier::wait()>
1000041c0:     	adrp	x0, 0x100038000 <benchmark::internal::GetOutputOptions(bool)+0x90>
1000041c4:     	add	x0, x0, #8
1000041c8:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
1000041cc:     	cbz	w0, 0x100004190 <benchmark::State::FinishKeepRunning()+0x20>
1000041d0:     	adrp	x8, 0x100038000 <benchmark::internal::GetOutputOptions(bool)+0xa0>
1000041d4:     	str	xzr, [x8]
1000041d8:     	adrp	x0, 0x100038000 <benchmark::internal::GetOutputOptions(bool)+0xa8>
1000041dc:     	add	x0, x0, #8
1000041e0:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
1000041e4:     	b	0x100004190 <benchmark::State::FinishKeepRunning()+0x20>

00000001000041e8 <benchmark::internal::IsZero(double)>:
1000041e8:     	fabs	d0, d0
1000041ec:     	mov	x8, #4372995238176751616
1000041f0:     	fmov	d1, x8
1000041f4:     	fcmp	d0, d1
1000041f8:     	cset	w0, mi
1000041fc:     	ret

0000000100004200 <benchmark::internal::GetOutputOptions(bool)>:
100004200:     	stp	x29, x30, [sp, #-16]!
100004204:     	mov	x29, sp
100004208:     	tbnz	w0, #0, 0x10000428c <benchmark::internal::GetOutputOptions(bool)+0x8c>
10000420c:     	adrp	x8, 0x100038000 <benchmark::CreateDefaultDisplayReporter()+0x30>
100004210:     	ldrsb	w8, [x8, #415]
100004214:     	tbnz	w8, #31, 0x100004240 <benchmark::internal::GetOutputOptions(bool)+0x40>
100004218:     	cmp	w8, #4
10000421c:     	b.ne	0x10000426c <benchmark::internal::GetOutputOptions(bool)+0x6c>
100004220:     	adrp	x8, 0x100038000 <benchmark::CreateDefaultDisplayReporter()+0x44>
100004224:     	add	x8, x8, #392
100004228:     	ldr	w8, [x8]
10000422c:     	mov	w9, #30049
100004230:     	movk	w9, #28532, lsl #16
100004234:     	cmp	w8, w9
100004238:     	b.ne	0x10000426c <benchmark::internal::GetOutputOptions(bool)+0x6c>
10000423c:     	b	0x100004284 <benchmark::internal::GetOutputOptions(bool)+0x84>
100004240:     	adrp	x8, 0x100038000 <benchmark::CreateDefaultDisplayReporter()+0x64>
100004244:     	ldr	x8, [x8, #400]
100004248:     	cmp	x8, #4
10000424c:     	b.ne	0x10000426c <benchmark::internal::GetOutputOptions(bool)+0x6c>
100004250:     	adrp	x8, 0x100038000 <benchmark::CreateDefaultDisplayReporter()+0x74>
100004254:     	ldr	x8, [x8, #392]
100004258:     	ldr	w8, [x8]
10000425c:     	mov	w9, #30049
100004260:     	movk	w9, #28532, lsl #16
100004264:     	cmp	w8, w9
100004268:     	b.eq	0x100004284 <benchmark::internal::GetOutputOptions(bool)+0x84>
10000426c:     	adrp	x0, 0x100038000 <benchmark::CreateDefaultDisplayReporter()+0x90>
100004270:     	add	x0, x0, #392
100004274:     	bl	0x100020998 <benchmark::IsTruthyFlagValue(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
100004278:     	cbz	w0, 0x10000428c <benchmark::internal::GetOutputOptions(bool)+0x8c>
10000427c:     	mov	w8, #3
100004280:     	b	0x100004290 <benchmark::internal::GetOutputOptions(bool)+0x90>
100004284:     	bl	0x1000205cc <benchmark::IsColorTerminal()>
100004288:     	tbnz	w0, #0, 0x10000427c <benchmark::internal::GetOutputOptions(bool)+0x7c>
10000428c:     	mov	w8, #2
100004290:     	adrp	x9, 0x100038000 <benchmark::internal::(anonymous namespace)::CreateReporter(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, benchmark::ConsoleReporter::OutputOptions)+0xc>
100004294:     	ldrb	w9, [x9, #416]
100004298:     	and	w10, w8, #0x1
10000429c:     	cmp	w9, #0
1000042a0:     	csel	w0, w10, w8, eq
1000042a4:     	ldp	x29, x30, [sp], #16
1000042a8:     	ret

00000001000042ac <benchmark::CreateDefaultDisplayReporter()>:
1000042ac:     	sub	sp, sp, #48
1000042b0:     	stp	x20, x19, [sp, #16]
1000042b4:     	stp	x29, x30, [sp, #32]
1000042b8:     	add	x29, sp, #32
1000042bc:     	adrp	x8, 0x100038000 <benchmark::internal::(anonymous namespace)::CreateReporter(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, benchmark::ConsoleReporter::OutputOptions)+0x38>
1000042c0:     	add	x8, x8, #72
1000042c4:     	ldaprb	w8, [x8]
1000042c8:     	tbz	w8, #0, 0x1000042e4 <benchmark::CreateDefaultDisplayReporter()+0x38>
1000042cc:     	adrp	x8, 0x100038000 <benchmark::internal::(anonymous namespace)::CreateReporter(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, benchmark::ConsoleReporter::OutputOptions)+0x48>
1000042d0:     	ldr	x0, [x8, #64]
1000042d4:     	ldp	x29, x30, [sp, #32]
1000042d8:     	ldp	x20, x19, [sp, #16]
1000042dc:     	add	sp, sp, #48
1000042e0:     	ret
1000042e4:     	adrp	x0, 0x100038000 <benchmark::internal::(anonymous namespace)::CreateReporter(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, benchmark::ConsoleReporter::OutputOptions)+0x60>
1000042e8:     	add	x0, x0, #72
1000042ec:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
1000042f0:     	cbz	w0, 0x1000042cc <benchmark::CreateDefaultDisplayReporter()+0x20>
1000042f4:     	mov	w0, #0
1000042f8:     	bl	0x100004200 <benchmark::internal::GetOutputOptions(bool)>
1000042fc:     	mov	x2, x0
100004300:     	adrp	x1, 0x100038000 <benchmark::internal::(anonymous namespace)::CreateReporter(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, benchmark::ConsoleReporter::OutputOptions)+0x7c>
100004304:     	add	x1, x1, #320
100004308:     	add	x0, sp, #8
10000430c:     	bl	0x100004354 <benchmark::internal::(anonymous namespace)::CreateReporter(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, benchmark::ConsoleReporter::OutputOptions)>
100004310:     	ldr	x8, [sp, #8]
100004314:     	adrp	x0, 0x100038000 <benchmark::internal::(anonymous namespace)::CreateReporter(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, benchmark::ConsoleReporter::OutputOptions)+0x90>
100004318:     	add	x0, x0, #64
10000431c:     	str	x8, [x0], #8
100004320:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
100004324:     	adrp	x8, 0x100038000 <benchmark::internal::(anonymous namespace)::CreateReporter(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, benchmark::ConsoleReporter::OutputOptions)+0xa0>
100004328:     	ldr	x0, [x8, #64]
10000432c:     	ldp	x29, x30, [sp, #32]
100004330:     	ldp	x20, x19, [sp, #16]
100004334:     	add	sp, sp, #48
100004338:     	ret
10000433c:     	mov	x19, x0
100004340:     	adrp	x0, 0x100038000 <benchmark::internal::(anonymous namespace)::CreateReporter(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, benchmark::ConsoleReporter::OutputOptions)+0xbc>
100004344:     	add	x0, x0, #72
100004348:     	bl	0x10002f074 <_vsnprintf+0x10002f074>
10000434c:     	mov	x0, x19
100004350:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100004354 <benchmark::internal::(anonymous namespace)::CreateReporter(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, benchmark::ConsoleReporter::OutputOptions)>:
100004354:     	stp	x22, x21, [sp, #-48]!
100004358:     	stp	x20, x19, [sp, #16]
10000435c:     	stp	x29, x30, [sp, #32]
100004360:     	add	x29, sp, #32
100004364:     	mov	x21, x2
100004368:     	mov	x19, x0
10000436c:     	ldrsb	w8, [x1, #23]
100004370:     	tbnz	w8, #31, 0x100004408 <benchmark::internal::(anonymous namespace)::CreateReporter(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, benchmark::ConsoleReporter::OutputOptions)+0xb4>
100004374:     	and	w8, w8, #0xff
100004378:     	mov	x9, x1
10000437c:     	cmp	w8, #3
100004380:     	b.eq	0x1000044d8 <benchmark::internal::(anonymous namespace)::CreateReporter(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, benchmark::ConsoleReporter::OutputOptions)+0x184>
100004384:     	cmp	w8, #4
100004388:     	b.eq	0x10000447c <benchmark::internal::(anonymous namespace)::CreateReporter(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, benchmark::ConsoleReporter::OutputOptions)+0x128>
10000438c:     	cmp	w8, #7
100004390:     	b.ne	0x100004540 <benchmark::internal::(anonymous namespace)::CreateReporter(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, benchmark::ConsoleReporter::OutputOptions)+0x1ec>
100004394:     	ldr	w8, [x1]
100004398:     	mov	w9, #28515
10000439c:     	movk	w9, #29550, lsl #16
1000043a0:     	eor	w8, w8, w9
1000043a4:     	ldur	w9, [x1, #3]
1000043a8:     	mov	w10, #28531
1000043ac:     	movk	w10, #25964, lsl #16
1000043b0:     	eor	w9, w9, w10
1000043b4:     	orr	w8, w8, w9
1000043b8:     	cbnz	w8, 0x100004540 <benchmark::internal::(anonymous namespace)::CreateReporter(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, benchmark::ConsoleReporter::OutputOptions)+0x1ec>
1000043bc:     	mov	w0, #72
1000043c0:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
1000043c4:     	mov	x20, x0
1000043c8:     	bl	0x100029994 <benchmark::BenchmarkReporter::BenchmarkReporter()>
1000043cc:     	adrp	x8, 0x100034000 <benchmark::internal::(anonymous namespace)::CreateReporter(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, benchmark::ConsoleReporter::OutputOptions)+0x138>
1000043d0:     	add	x8, x8, #3264
1000043d4:     	add	x8, x8, #16
1000043d8:     	str	x8, [x20]
1000043dc:     	str	w21, [x20, #24]
1000043e0:     	str	xzr, [x20, #56]
1000043e4:     	mov	x8, x20
1000043e8:     	str	xzr, [x8, #48]!
1000043ec:     	stp	xzr, x8, [x20, #32]
1000043f0:     	strb	wzr, [x20, #64]
1000043f4:     	str	x20, [x19]
1000043f8:     	ldp	x29, x30, [sp, #32]
1000043fc:     	ldp	x20, x19, [sp, #16]
100004400:     	ldp	x22, x21, [sp], #48
100004404:     	ret
100004408:     	ldr	x8, [x1, #8]
10000440c:     	cmp	x8, #4
100004410:     	b.eq	0x100004450 <benchmark::internal::(anonymous namespace)::CreateReporter(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, benchmark::ConsoleReporter::OutputOptions)+0xfc>
100004414:     	cmp	x8, #7
100004418:     	b.ne	0x10000446c <benchmark::internal::(anonymous namespace)::CreateReporter(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, benchmark::ConsoleReporter::OutputOptions)+0x118>
10000441c:     	ldr	x9, [x1]
100004420:     	ldr	w10, [x9]
100004424:     	mov	w11, #28515
100004428:     	movk	w11, #29550, lsl #16
10000442c:     	eor	w10, w10, w11
100004430:     	ldur	w9, [x9, #3]
100004434:     	mov	w11, #28531
100004438:     	movk	w11, #25964, lsl #16
10000443c:     	eor	w9, w9, w11
100004440:     	orr	w9, w10, w9
100004444:     	cbz	w9, 0x1000043bc <benchmark::internal::(anonymous namespace)::CreateReporter(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, benchmark::ConsoleReporter::OutputOptions)+0x68>
100004448:     	cmp	x8, #4
10000444c:     	b.ne	0x10000446c <benchmark::internal::(anonymous namespace)::CreateReporter(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, benchmark::ConsoleReporter::OutputOptions)+0x118>
100004450:     	ldr	x8, [x1]
100004454:     	ldr	w8, [x8]
100004458:     	mov	w9, #29546
10000445c:     	movk	w9, #28271, lsl #16
100004460:     	cmp	w8, w9
100004464:     	b.eq	0x100004490 <benchmark::internal::(anonymous namespace)::CreateReporter(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, benchmark::ConsoleReporter::OutputOptions)+0x13c>
100004468:     	ldr	x8, [x1, #8]
10000446c:     	cmp	x8, #3
100004470:     	b.ne	0x100004540 <benchmark::internal::(anonymous namespace)::CreateReporter(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, benchmark::ConsoleReporter::OutputOptions)+0x1ec>
100004474:     	ldr	x9, [x1]
100004478:     	b	0x1000044d8 <benchmark::internal::(anonymous namespace)::CreateReporter(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, benchmark::ConsoleReporter::OutputOptions)+0x184>
10000447c:     	ldr	w9, [x1]
100004480:     	mov	w10, #29546
100004484:     	movk	w10, #28271, lsl #16
100004488:     	cmp	w9, w10
10000448c:     	b.ne	0x1000044cc <benchmark::internal::(anonymous namespace)::CreateReporter(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, benchmark::ConsoleReporter::OutputOptions)+0x178>
100004490:     	mov	w0, #32
100004494:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100004498:     	mov	x20, x0
10000449c:     	bl	0x100029994 <benchmark::BenchmarkReporter::BenchmarkReporter()>
1000044a0:     	adrp	x8, 0x100034000 <benchmark::internal::(anonymous namespace)::CreateReporter(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, benchmark::ConsoleReporter::OutputOptions)+0x20c>
1000044a4:     	add	x8, x8, #3520
1000044a8:     	add	x8, x8, #16
1000044ac:     	str	x8, [x20]
1000044b0:     	mov	w8, #1
1000044b4:     	strb	w8, [x20, #24]
1000044b8:     	str	x20, [x19]
1000044bc:     	ldp	x29, x30, [sp, #32]
1000044c0:     	ldp	x20, x19, [sp, #16]
1000044c4:     	ldp	x22, x21, [sp], #48
1000044c8:     	ret
1000044cc:     	mov	x9, x1
1000044d0:     	cmp	w8, #3
1000044d4:     	b.ne	0x100004540 <benchmark::internal::(anonymous namespace)::CreateReporter(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, benchmark::ConsoleReporter::OutputOptions)+0x1ec>
1000044d8:     	ldrh	w8, [x9]
1000044dc:     	mov	w10, #29539
1000044e0:     	eor	w8, w8, w10
1000044e4:     	ldrb	w9, [x9, #2]
1000044e8:     	mov	w10, #118
1000044ec:     	eor	w9, w9, w10
1000044f0:     	orr	w8, w8, w9
1000044f4:     	cbnz	w8, 0x100004540 <benchmark::internal::(anonymous namespace)::CreateReporter(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, benchmark::ConsoleReporter::OutputOptions)+0x1ec>
1000044f8:     	mov	w0, #56
1000044fc:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100004500:     	mov	x20, x0
100004504:     	bl	0x100029994 <benchmark::BenchmarkReporter::BenchmarkReporter()>
100004508:     	adrp	x8, 0x100034000 <benchmark::RunSpecifiedBenchmarks()+0x34>
10000450c:     	add	x8, x8, #3400
100004510:     	add	x8, x8, #16
100004514:     	str	x8, [x20]
100004518:     	strb	wzr, [x20, #24]
10000451c:     	str	xzr, [x20, #48]
100004520:     	mov	x8, x20
100004524:     	str	xzr, [x8, #40]!
100004528:     	str	x8, [x20, #32]
10000452c:     	str	x20, [x19]
100004530:     	ldp	x29, x30, [sp, #32]
100004534:     	ldp	x20, x19, [sp, #16]
100004538:     	ldp	x22, x21, [sp], #48
10000453c:     	ret
100004540:     	adrp	x0, 0x100034000 <benchmark::RunSpecifiedBenchmarks()+0x6c>
100004544:     	ldr	x0, [x0, #456]
100004548:     	adrp	x8, 0x100031000 <benchmark::RunSpecifiedBenchmarks()+0x68>
10000454c:     	add	x8, x8, #3492
100004550:     	mov	x19, x1
100004554:     	mov	x1, x8
100004558:     	bl	0x100005c54 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::operator<<[abi:ue170006]<std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*)>
10000455c:     	mov	x1, x19
100004560:     	bl	0x100005d18 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::operator<<[abi:ue170006]<char, std::__1::char_traits<char>, std::__1::allocator<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
100004564:     	adrp	x1, 0x100031000 <benchmark::RunSpecifiedBenchmarks()+0x84>
100004568:     	add	x1, x1, #3513
10000456c:     	bl	0x100005c54 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::operator<<[abi:ue170006]<std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*)>
100004570:     	mov	w0, #1
100004574:     	bl	0x10002f104 <_vsnprintf+0x10002f104>
100004578:     	b	0x100004580 <benchmark::internal::(anonymous namespace)::CreateReporter(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, benchmark::ConsoleReporter::OutputOptions)+0x22c>
10000457c:     	b	0x100004580 <benchmark::internal::(anonymous namespace)::CreateReporter(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, benchmark::ConsoleReporter::OutputOptions)+0x22c>
100004580:     	mov	x19, x0
100004584:     	mov	x0, x20
100004588:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000458c:     	mov	x0, x19
100004590:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100004594 <benchmark::RunSpecifiedBenchmarks()>:
100004594:     	sub	sp, sp, #80
100004598:     	stp	x22, x21, [sp, #32]
10000459c:     	stp	x20, x19, [sp, #48]
1000045a0:     	stp	x29, x30, [sp, #64]
1000045a4:     	add	x29, sp, #64
1000045a8:     	adrp	x8, 0x100038000 <benchmark::RunSpecifiedBenchmarks()+0xe4>
1000045ac:     	ldrsb	w8, [x8, #279]
1000045b0:     	tbnz	w8, #31, 0x1000045d0 <benchmark::RunSpecifiedBenchmarks()+0x3c>
1000045b4:     	adrp	x8, 0x100038000 <benchmark::RunSpecifiedBenchmarks()+0xf0>
1000045b8:     	add	x8, x8, #256
1000045bc:     	ldr	q0, [x8]
1000045c0:     	str	q0, [sp]
1000045c4:     	ldr	x8, [x8, #16]
1000045c8:     	str	x8, [sp, #16]
1000045cc:     	b	0x100004624 <benchmark::RunSpecifiedBenchmarks()+0x90>
1000045d0:     	adrp	x8, 0x100038000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x4>
1000045d4:     	add	x8, x8, #256
1000045d8:     	ldp	x19, x21, [x8]
1000045dc:     	cmp	x21, #22
1000045e0:     	b.hi	0x1000045f0 <benchmark::RunSpecifiedBenchmarks()+0x5c>
1000045e4:     	strb	w21, [sp, #23]
1000045e8:     	mov	x0, sp
1000045ec:     	b	0x100004618 <benchmark::RunSpecifiedBenchmarks()+0x84>
1000045f0:     	mov	x8, #9223372036854775792
1000045f4:     	cmp	x21, x8
1000045f8:     	b.hs	0x100004678 <benchmark::RunSpecifiedBenchmarks()+0xe4>
1000045fc:     	orr	x8, x21, #0xf
100004600:     	add	x20, x8, #1
100004604:     	mov	x0, x20
100004608:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000460c:     	orr	x8, x20, #0x8000000000000000
100004610:     	stp	x21, x8, [sp, #8]
100004614:     	str	x0, [sp]
100004618:     	add	x2, x21, #1
10000461c:     	mov	x1, x19
100004620:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
100004624:     	mov	x2, sp
100004628:     	mov	x0, #0
10000462c:     	mov	x1, #0
100004630:     	bl	0x10000469c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)>
100004634:     	mov	x19, x0
100004638:     	ldrsb	w8, [sp, #23]
10000463c:     	tbnz	w8, #31, 0x100004658 <benchmark::RunSpecifiedBenchmarks()+0xc4>
100004640:     	mov	x0, x19
100004644:     	ldp	x29, x30, [sp, #64]
100004648:     	ldp	x20, x19, [sp, #48]
10000464c:     	ldp	x22, x21, [sp, #32]
100004650:     	add	sp, sp, #80
100004654:     	ret
100004658:     	ldr	x0, [sp]
10000465c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100004660:     	mov	x0, x19
100004664:     	ldp	x29, x30, [sp, #64]
100004668:     	ldp	x20, x19, [sp, #48]
10000466c:     	ldp	x22, x21, [sp, #32]
100004670:     	add	sp, sp, #80
100004674:     	ret
100004678:     	mov	x0, sp
10000467c:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
100004680:     	mov	x19, x0
100004684:     	ldrsb	w8, [sp, #23]
100004688:     	tbz	w8, #31, 0x100004694 <benchmark::RunSpecifiedBenchmarks()+0x100>
10000468c:     	ldr	x0, [sp]
100004690:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100004694:     	mov	x0, x19
100004698:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010000469c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)>:
10000469c:     	stp	x28, x27, [sp, #-96]!
1000046a0:     	stp	x26, x25, [sp, #16]
1000046a4:     	stp	x24, x23, [sp, #32]
1000046a8:     	stp	x22, x21, [sp, #48]
1000046ac:     	stp	x20, x19, [sp, #64]
1000046b0:     	stp	x29, x30, [sp, #80]
1000046b4:     	add	x29, sp, #80
1000046b8:     	sub	sp, sp, #3968
1000046bc:     	mov	x25, x2
1000046c0:     	mov	x23, x1
1000046c4:     	mov	x24, x0
1000046c8:     	adrp	x8, 0x100034000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xec>
1000046cc:     	ldr	x8, [x8, #928]
1000046d0:     	ldr	x8, [x8]
1000046d4:     	stur	x8, [x29, #-96]
1000046d8:     	ldrsb	w8, [x2, #23]
1000046dc:     	tbnz	w8, #31, 0x1000046f8 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x5c>
1000046e0:     	and	w9, w8, #0xff
1000046e4:     	cbz	w9, 0x10000472c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x90>
1000046e8:     	mov	x8, x25
1000046ec:     	cmp	w9, #3
1000046f0:     	b.eq	0x10000470c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x70>
1000046f4:     	b	0x10000473c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xa0>
1000046f8:     	ldr	x8, [x25, #8]
1000046fc:     	cbz	x8, 0x10000472c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x90>
100004700:     	cmp	x8, #3
100004704:     	b.ne	0x10000473c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xa0>
100004708:     	ldr	x8, [x25]
10000470c:     	ldrh	w9, [x8]
100004710:     	mov	w10, #27745
100004714:     	eor	w9, w9, w10
100004718:     	ldrb	w8, [x8, #2]
10000471c:     	mov	w10, #108
100004720:     	eor	w8, w8, w10
100004724:     	orr	w8, w9, w8
100004728:     	cbnz	w8, 0x10000473c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xa0>
10000472c:     	adrp	x1, 0x100031000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x144>
100004730:     	add	x1, x1, #2369
100004734:     	mov	x0, x25
100004738:     	bl	0x10002ed44 <_vsnprintf+0x10002ed44>
10000473c:     	add	x8, sp, #3384
100004740:     	add	x9, x8, #416
100004744:     	str	x9, [sp, #32]
100004748:     	adrp	x21, 0x100034000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x16c>
10000474c:     	ldr	x21, [x21, #728]
100004750:     	add	x20, x21, #64
100004754:     	add	x22, x8, #8
100004758:     	adrp	x10, 0x100034000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x17c>
10000475c:     	ldr	x10, [x10, #696]
100004760:     	ldp	x9, x10, [x10, #8]
100004764:     	str	x20, [sp, #3800]
100004768:     	str	x9, [sp, #3384]
10000476c:     	ldur	x9, [x9, #-24]
100004770:     	str	x10, [x8, x9]
100004774:     	ldr	x9, [sp, #3384]
100004778:     	ldur	x9, [x9, #-24]
10000477c:     	add	x19, x8, x9
100004780:     	mov	x0, x19
100004784:     	mov	x1, x22
100004788:     	bl	0x10002efcc <_vsnprintf+0x10002efcc>
10000478c:     	str	xzr, [x19, #136]
100004790:     	mov	w8, #-1
100004794:     	str	w8, [x19, #144]
100004798:     	add	x8, x21, #24
10000479c:     	str	x8, [sp, #3384]
1000047a0:     	str	x20, [sp, #3800]
1000047a4:     	mov	x0, x22
1000047a8:     	bl	0x10002eda4 <_vsnprintf+0x10002eda4>
1000047ac:     	cbz	x24, 0x1000047e4 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x148>
1000047b0:     	mov	x8, #0
1000047b4:     	str	x22, [sp, #24]
1000047b8:     	str	x8, [sp, #48]
1000047bc:     	ldp	x26, x27, [x24, #8]
1000047c0:     	adrp	x8, 0x100038000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x1f4>
1000047c4:     	ldrsb	w8, [x8, #391]
1000047c8:     	tbnz	w8, #31, 0x100004818 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x17c>
1000047cc:     	and	x8, x8, #0xff
1000047d0:     	cmp	x23, #0
1000047d4:     	cset	w19, ne
1000047d8:     	cbz	x23, 0x100004830 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x194>
1000047dc:     	cbnz	w8, 0x100004830 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x194>
1000047e0:     	b	0x100005608 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xf6c>
1000047e4:     	adrp	x8, 0x100038000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x218>
1000047e8:     	add	x8, x8, #72
1000047ec:     	ldaprb	w8, [x8]
1000047f0:     	tbz	w8, #0, 0x100005678 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xfdc>
1000047f4:     	adrp	x8, 0x100038000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x228>
1000047f8:     	ldr	x8, [x8, #64]
1000047fc:     	mov	x24, x8
100004800:     	str	x22, [sp, #24]
100004804:     	str	x8, [sp, #48]
100004808:     	ldp	x26, x27, [x8, #8]
10000480c:     	adrp	x8, 0x100038000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x240>
100004810:     	ldrsb	w8, [x8, #391]
100004814:     	tbz	w8, #31, 0x1000047cc <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x130>
100004818:     	adrp	x8, 0x100038000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x24c>
10000481c:     	ldr	x8, [x8, #376]
100004820:     	cmp	x23, #0
100004824:     	cset	w19, ne
100004828:     	cbz	x23, 0x100004830 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x194>
10000482c:     	cbz	x8, 0x100005608 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xf6c>
100004830:     	cbz	x8, 0x100004860 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x1c4>
100004834:     	adrp	x20, 0x100038000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x268>
100004838:     	add	x20, x20, #368
10000483c:     	add	x0, sp, #3384
100004840:     	mov	x1, x20
100004844:     	mov	w2, #16
100004848:     	bl	0x10002ee7c <_vsnprintf+0x10002ee7c>
10000484c:     	ldr	x8, [sp, #3512]
100004850:     	cbz	x8, 0x100005634 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xf98>
100004854:     	tbz	w19, #0, 0x100004868 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x1cc>
100004858:     	str	xzr, [sp, #40]
10000485c:     	b	0x100004884 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x1e8>
100004860:     	str	xzr, [sp, #40]
100004864:     	b	0x10000488c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x1f0>
100004868:     	adrp	x1, 0x100038000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x29c>
10000486c:     	add	x1, x1, #344
100004870:     	add	x0, sp, #120
100004874:     	mov	w2, #0
100004878:     	bl	0x100004354 <benchmark::internal::(anonymous namespace)::CreateReporter(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, benchmark::ConsoleReporter::OutputOptions)>
10000487c:     	ldr	x23, [sp, #120]
100004880:     	str	x23, [sp, #40]
100004884:     	add	x8, sp, #3384
100004888:     	stp	x8, x8, [x23, #8]
10000488c:     	stp	xzr, xzr, [sp, #72]
100004890:     	str	xzr, [sp, #88]
100004894:     	add	x1, sp, #72
100004898:     	mov	x0, x25
10000489c:     	mov	x2, x27
1000048a0:     	bl	0x10000d3b8 <benchmark::internal::FindBenchmarksInternal(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)>
1000048a4:     	tbz	w0, #0, 0x10000496c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x2d0>
1000048a8:     	stp	x23, x24, [sp, #56]
1000048ac:     	ldp	x28, x19, [sp, #72]
1000048b0:     	cmp	x28, x19
1000048b4:     	b.eq	0x10000492c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x290>
1000048b8:     	adrp	x8, 0x100038000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x2ec>
1000048bc:     	ldrb	w8, [x8, #248]
1000048c0:     	cbz	w8, 0x1000049c8 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x32c>
1000048c4:     	add	x20, sp, #120
1000048c8:     	adrp	x23, 0x100031000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x2e0>
1000048cc:     	add	x23, x23, #2523
1000048d0:     	b	0x1000048e0 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x244>
1000048d4:     	add	x28, x28, #336
1000048d8:     	cmp	x28, x19
1000048dc:     	b.eq	0x100005530 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xe94>
1000048e0:     	add	x8, sp, #120
1000048e4:     	mov	x0, x28
1000048e8:     	bl	0x10000ba9c <benchmark::BenchmarkName::str() const>
1000048ec:     	ldrb	w8, [sp, #143]
1000048f0:     	sxtb	w9, w8
1000048f4:     	ldp	x10, x11, [sp, #120]
1000048f8:     	cmp	w9, #0
1000048fc:     	csel	x1, x10, x20, lt
100004900:     	csel	x2, x11, x8, lt
100004904:     	mov	x0, x26
100004908:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10000490c:     	mov	x1, x23
100004910:     	mov	w2, #1
100004914:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100004918:     	ldrsb	w8, [sp, #143]
10000491c:     	tbz	w8, #31, 0x1000048d4 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x238>
100004920:     	ldr	x0, [sp, #120]
100004924:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100004928:     	b	0x1000048d4 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x238>
10000492c:     	adrp	x1, 0x100031000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x344>
100004930:     	add	x1, x1, #2476
100004934:     	mov	x0, x27
100004938:     	mov	w2, #46
10000493c:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100004940:     	ldrb	w8, [x25, #23]
100004944:     	sxtb	w9, w8
100004948:     	ldp	x10, x11, [x25]
10000494c:     	cmp	w9, #0
100004950:     	csel	x1, x10, x25, lt
100004954:     	csel	x2, x11, x8, lt
100004958:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10000495c:     	adrp	x1, 0x100031000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x374>
100004960:     	add	x1, x1, #2523
100004964:     	mov	w2, #1
100004968:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10000496c:     	mov	x23, #0
100004970:     	ldr	x19, [sp, #72]
100004974:     	cbz	x19, 0x100005554 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xeb8>
100004978:     	ldr	x8, [sp, #80]
10000497c:     	mov	x0, x19
100004980:     	cmp	x8, x19
100004984:     	b.eq	0x1000049b4 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x318>
100004988:     	sub	x24, x8, #88
10000498c:     	sub	x25, x24, #248
100004990:     	ldr	x1, [x24, #8]
100004994:     	mov	x0, x24
100004998:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
10000499c:     	mov	x0, x25
1000049a0:     	bl	0x1000090c8 <benchmark::BenchmarkName::~BenchmarkName()>
1000049a4:     	sub	x24, x24, #336
1000049a8:     	cmp	x25, x19
1000049ac:     	b.ne	0x10000498c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x2f0>
1000049b0:     	ldr	x0, [sp, #72]
1000049b4:     	str	x19, [sp, #80]
1000049b8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000049bc:     	ldr	x0, [sp, #40]
1000049c0:     	cbnz	x0, 0x10000555c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xec0>
1000049c4:     	b	0x100005568 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xecc>
1000049c8:     	adrp	x8, 0x100038000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x3fc>
1000049cc:     	add	x8, x8, #8
1000049d0:     	ldaprb	w8, [x8]
1000049d4:     	tbz	w8, #0, 0x1000056bc <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x1020>
1000049d8:     	adrp	x8, 0x100038000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x40c>
1000049dc:     	ldr	w8, [x8, #312]
1000049e0:     	cmp	w8, #1
1000049e4:     	cset	w19, gt
1000049e8:     	ldp	x25, x22, [sp, #72]
1000049ec:     	cmp	x25, x22
1000049f0:     	ldp	x23, x24, [sp, #56]
1000049f4:     	mov	x20, #0
1000049f8:     	mov	w21, #10
1000049fc:     	b.ne	0x100004ad0 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x434>
100004a00:     	add	x0, sp, #3344
100004a04:     	bl	0x100029ea4 <benchmark::BenchmarkReporter::Context::Context()>
100004a08:     	tst	w19, #0x1
100004a0c:     	csinc	x8, xzr, x20, eq
100004a10:     	add	x8, x8, x21
100004a14:     	str	x8, [sp, #3360]
100004a18:     	add	x8, sp, #3320
100004a1c:     	add	x28, x8, #8
100004a20:     	str	xzr, [sp, #3336]
100004a24:     	str	xzr, [sp, #3328]
100004a28:     	str	x28, [sp, #3320]
100004a2c:     	ldr	x8, [x24]
100004a30:     	ldr	x8, [x8]
100004a34:     	add	x1, sp, #3344
100004a38:     	mov	x0, x24
100004a3c:     	blr	x8
100004a40:     	cbz	w0, 0x1000054dc <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xe40>
100004a44:     	cbz	x23, 0x100004a60 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x3c4>
100004a48:     	ldr	x8, [x23]
100004a4c:     	ldr	x8, [x8]
100004a50:     	add	x1, sp, #3344
100004a54:     	mov	x0, x23
100004a58:     	blr	x8
100004a5c:     	cbz	w0, 0x1000054dc <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xe40>
100004a60:     	ldr	x0, [x24, #8]
100004a64:     	bl	0x10002ede0 <_vsnprintf+0x10002ede0>
100004a68:     	ldr	x0, [x24, #16]
100004a6c:     	bl	0x10002ede0 <_vsnprintf+0x10002ede0>
100004a70:     	cbz	x23, 0x100004a84 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x3e8>
100004a74:     	ldr	x0, [x23, #8]
100004a78:     	bl	0x10002ede0 <_vsnprintf+0x10002ede0>
100004a7c:     	ldr	x0, [x23, #16]
100004a80:     	bl	0x10002ede0 <_vsnprintf+0x10002ede0>
100004a84:     	adrp	x0, 0x100038000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x4b8>
100004a88:     	add	x0, x0, #424
100004a8c:     	add	x8, sp, #120
100004a90:     	mov	w1, #44
100004a94:     	bl	0x10002c6f8 <benchmark::StrSplit(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char)>
100004a98:     	add	x0, sp, #2680
100004a9c:     	add	x1, sp, #120
100004aa0:     	bl	0x10002998c <benchmark::internal::PerfCountersMeasurement::PerfCountersMeasurement(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)>
100004aa4:     	ldr	x19, [sp, #120]
100004aa8:     	cbz	x19, 0x100004b74 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x4d8>
100004aac:     	ldr	x8, [sp, #128]
100004ab0:     	mov	x0, x19
100004ab4:     	cmp	x8, x19
100004ab8:     	b.ne	0x100004b50 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x4b4>
100004abc:     	b	0x100004b6c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x4d0>
100004ac0:     	orr	w19, w19, w8
100004ac4:     	add	x25, x25, #336
100004ac8:     	cmp	x25, x22
100004acc:     	b.eq	0x100004a00 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x364>
100004ad0:     	add	x8, sp, #120
100004ad4:     	mov	x0, x25
100004ad8:     	bl	0x10000ba9c <benchmark::BenchmarkName::str() const>
100004adc:     	ldrsb	w8, [sp, #143]
100004ae0:     	tbnz	w8, #31, 0x100004af4 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x458>
100004ae4:     	and	x8, x8, #0xff
100004ae8:     	cmp	x21, x8
100004aec:     	csel	x21, x21, x8, hi
100004af0:     	b	0x100004b04 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x468>
100004af4:     	ldp	x0, x8, [sp, #120]
100004af8:     	cmp	x21, x8
100004afc:     	csel	x21, x21, x8, hi
100004b00:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100004b04:     	ldr	w8, [x25, #280]
100004b08:     	cmp	w8, #1
100004b0c:     	cset	w8, gt
100004b10:     	ldr	x10, [x25, #272]
100004b14:     	ldp	x9, x10, [x10]
100004b18:     	b	0x100004b2c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x490>
100004b1c:     	and	x11, x11, #0xff
100004b20:     	cmp	x20, x11
100004b24:     	csel	x20, x20, x11, hi
100004b28:     	add	x9, x9, #40
100004b2c:     	cmp	x9, x10
100004b30:     	b.eq	0x100004ac0 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x424>
100004b34:     	ldrsb	w11, [x9, #23]
100004b38:     	tbz	w11, #31, 0x100004b1c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x480>
100004b3c:     	ldr	x11, [x9, #8]
100004b40:     	b	0x100004b20 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x484>
100004b44:     	mov	x8, x20
100004b48:     	cmp	x20, x19
100004b4c:     	b.eq	0x100004b68 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x4cc>
100004b50:     	sub	x20, x8, #24
100004b54:     	ldursb	w9, [x8, #-1]
100004b58:     	tbz	w9, #31, 0x100004b44 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x4a8>
100004b5c:     	ldur	x0, [x8, #-24]
100004b60:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100004b64:     	b	0x100004b44 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x4a8>
100004b68:     	ldr	x0, [sp, #120]
100004b6c:     	str	x19, [sp, #128]
100004b70:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100004b74:     	str	xzr, [sp, #2664]
100004b78:     	str	xzr, [sp, #2656]
100004b7c:     	str	xzr, [sp, #2672]
100004b80:     	ldp	x9, x8, [sp, #72]
100004b84:     	sub	x8, x8, x9
100004b88:     	asr	x8, x8, #4
100004b8c:     	mov	x9, #53053
100004b90:     	movk	x9, #15603, lsl #16
100004b94:     	movk	x9, #62415, lsl #32
100004b98:     	movk	x9, #53052, lsl #48
100004b9c:     	mul	x1, x8, x9
100004ba0:     	add	x0, sp, #2656
100004ba4:     	bl	0x100006c50 <std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::reserve(unsigned long)>
100004ba8:     	ldp	x26, x20, [sp, #72]
100004bac:     	cmp	x26, x20
100004bb0:     	str	x28, [sp, #8]
100004bb4:     	b.eq	0x100004df4 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x758>
100004bb8:     	mov	x19, #0
100004bbc:     	mov	w25, #0
100004bc0:     	add	x21, sp, #2680
100004bc4:     	b	0x100004be4 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x548>
100004bc8:     	ldr	w10, [x9]
100004bcc:     	add	w10, w10, w8
100004bd0:     	str	w10, [x9]
100004bd4:     	add	x19, x19, x8
100004bd8:     	add	x26, x26, #336
100004bdc:     	cmp	x26, x20
100004be0:     	b.eq	0x100004d14 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x678>
100004be4:     	str	xzr, [sp, #120]
100004be8:     	ldr	w8, [x26, #232]
100004bec:     	cbz	w8, 0x100004c90 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x5f4>
100004bf0:     	ldr	w22, [x26, #200]
100004bf4:     	ldr	x8, [sp, #3328]
100004bf8:     	mov	x24, x28
100004bfc:     	mov	x23, x28
100004c00:     	cbnz	x8, 0x100004c14 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x578>
100004c04:     	b	0x100004c38 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x59c>
100004c08:     	ldr	x8, [x23]
100004c0c:     	mov	x24, x23
100004c10:     	cbz	x8, 0x100004c38 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x59c>
100004c14:     	mov	x23, x8
100004c18:     	ldr	w8, [x8, #32]
100004c1c:     	cmp	w22, w8
100004c20:     	b.lt	0x100004c08 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x56c>
100004c24:     	cmp	w8, w22
100004c28:     	b.ge	0x100004c98 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x5fc>
100004c2c:     	ldr	x8, [x23, #8]
100004c30:     	cbnz	x8, 0x100004c14 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x578>
100004c34:     	add	x24, x23, #8
100004c38:     	mov	w0, #72
100004c3c:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100004c40:     	mov	x27, x0
100004c44:     	str	w22, [x0, #32]
100004c48:     	movi.2d	v0, #0000000000000000
100004c4c:     	stur	q0, [x0, #40]
100004c50:     	stur	q0, [x0, #56]
100004c54:     	stp	xzr, xzr, [x0]
100004c58:     	str	x23, [x0, #16]
100004c5c:     	str	x0, [x24]
100004c60:     	ldr	x8, [sp, #3320]
100004c64:     	ldr	x8, [x8]
100004c68:     	mov	x1, x0
100004c6c:     	cbz	x8, 0x100004c78 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x5dc>
100004c70:     	str	x8, [sp, #3320]
100004c74:     	ldr	x1, [x24]
100004c78:     	ldr	x0, [sp, #3328]
100004c7c:     	bl	0x100006fe0 <void std::__1::__tree_balance_after_insert[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)>
100004c80:     	ldr	x8, [sp, #3336]
100004c84:     	add	x8, x8, #1
100004c88:     	str	x8, [sp, #3336]
100004c8c:     	b	0x100004c9c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x600>
100004c90:     	mov	x3, #0
100004c94:     	b	0x100004ca4 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x608>
100004c98:     	mov	x27, x23
100004c9c:     	add	x3, x27, #40
100004ca0:     	str	x3, [sp, #120]
100004ca4:     	ldr	w8, [x26, #312]
100004ca8:     	cmp	w8, #0
100004cac:     	cinc	w25, w25, gt
100004cb0:     	str	x21, [sp, #2632]
100004cb4:     	ldr	x27, [sp, #2664]
100004cb8:     	ldr	x8, [sp, #2672]
100004cbc:     	cmp	x27, x8
100004cc0:     	b.hs	0x100004cec <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x650>
100004cc4:     	add	x2, sp, #2680
100004cc8:     	mov	x0, x27
100004ccc:     	mov	x1, x26
100004cd0:     	bl	0x10001e23c <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)>
100004cd4:     	add	x8, x27, #184
100004cd8:     	str	x8, [sp, #2664]
100004cdc:     	ldursw	x8, [x8, #-76]
100004ce0:     	ldr	x9, [sp, #120]
100004ce4:     	cbnz	x9, 0x100004bc8 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x52c>
100004ce8:     	b	0x100004bd4 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x538>
100004cec:     	add	x0, sp, #2656
100004cf0:     	add	x2, sp, #2632
100004cf4:     	add	x3, sp, #120
100004cf8:     	mov	x1, x26
100004cfc:     	bl	0x100007194 <void std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::__emplace_back_slow_path<benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*&>(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*&&, benchmark::BenchmarkReporter::PerFamilyRunReports*&)>
100004d00:     	ldr	x8, [sp, #2664]
100004d04:     	ldursw	x8, [x8, #-76]
100004d08:     	ldr	x9, [sp, #120]
100004d0c:     	cbnz	x9, 0x100004bc8 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x52c>
100004d10:     	b	0x100004bd4 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x538>
100004d14:     	cbz	w25, 0x100004dbc <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x720>
100004d18:     	ldr	x8, [sp, #2736]
100004d1c:     	ldr	x9, [sp, #2728]
100004d20:     	cmp	x8, x9
100004d24:     	b.eq	0x100004dbc <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x720>
100004d28:     	adrp	x8, 0x100038000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x75c>
100004d2c:     	add	x8, x8, #24
100004d30:     	ldaprb	w8, [x8]
100004d34:     	adrp	x20, 0x100038000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x768>
100004d38:     	tbz	w8, #0, 0x1000056f0 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x1054>
100004d3c:     	ldr	x0, [x20, #16]
100004d40:     	cbz	x0, 0x100004dbc <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x720>
100004d44:     	adrp	x1, 0x100031000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x75c>
100004d48:     	add	x1, x1, #3516
100004d4c:     	mov	w2, #24
100004d50:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100004d54:     	ldr	x0, [x20, #16]
100004d58:     	cbz	x0, 0x100004dbc <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x720>
100004d5c:     	mov	x1, x25
100004d60:     	bl	0x10002ee28 <_vsnprintf+0x10002ee28>
100004d64:     	ldr	x0, [x20, #16]
100004d68:     	cbz	x0, 0x100004dbc <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x720>
100004d6c:     	adrp	x1, 0x100031000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x784>
100004d70:     	add	x1, x1, #3541
100004d74:     	mov	w2, #29
100004d78:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100004d7c:     	ldr	x0, [x20, #16]
100004d80:     	cbz	x0, 0x100004dbc <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x720>
100004d84:     	ldr	x8, [sp, #2736]
100004d88:     	ldr	x9, [sp, #2728]
100004d8c:     	sub	x8, x8, x9
100004d90:     	asr	x8, x8, #3
100004d94:     	mov	x9, #-6148914691236517206
100004d98:     	movk	x9, #43691
100004d9c:     	mul	x1, x8, x9
100004da0:     	bl	0x10002ee34 <_vsnprintf+0x10002ee34>
100004da4:     	ldr	x0, [x20, #16]
100004da8:     	cbz	x0, 0x100004dbc <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x720>
100004dac:     	adrp	x1, 0x100031000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x7c4>
100004db0:     	add	x1, x1, #3571
100004db4:     	mov	w2, #106
100004db8:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100004dbc:     	str	xzr, [sp, #2640]
100004dc0:     	str	xzr, [sp, #2632]
100004dc4:     	str	xzr, [sp, #2648]
100004dc8:     	cbz	x19, 0x100004e0c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x770>
100004dcc:     	lsr	x8, x19, #61
100004dd0:     	cbnz	x8, 0x1000056e4 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x1048>
100004dd4:     	lsl	x0, x19, #3
100004dd8:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100004ddc:     	mov	x28, x0
100004de0:     	add	x22, x0, x19, lsl #3
100004de4:     	str	x0, [sp, #2632]
100004de8:     	str	x0, [sp, #2640]
100004dec:     	str	x22, [sp, #2648]
100004df0:     	b	0x100004e14 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x778>
100004df4:     	mov	x22, #0
100004df8:     	mov	x28, #0
100004dfc:     	str	xzr, [sp, #2640]
100004e00:     	str	xzr, [sp, #2632]
100004e04:     	str	xzr, [sp, #2648]
100004e08:     	b	0x100004e14 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x778>
100004e0c:     	mov	x22, #0
100004e10:     	mov	x28, #0
100004e14:     	ldr	x8, [sp, #2664]
100004e18:     	ldr	x9, [sp, #2656]
100004e1c:     	subs	x8, x8, x9
100004e20:     	b.eq	0x100004ff4 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x958>
100004e24:     	mov	x19, #0
100004e28:     	asr	x8, x8, #3
100004e2c:     	mov	x9, #14247
100004e30:     	movk	x9, #59837, lsl #16
100004e34:     	movk	x9, #28493, lsl #32
100004e38:     	movk	x9, #54138, lsl #48
100004e3c:     	mul	x8, x8, x9
100004e40:     	str	x8, [sp, #16]
100004e44:     	mov	x27, #9223372036854775800
100004e48:     	mov	x26, #2305843009213693951
100004e4c:     	mov	x23, x28
100004e50:     	b	0x100004e64 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x7c8>
100004e54:     	add	x19, x19, #1
100004e58:     	ldr	x8, [sp, #16]
100004e5c:     	cmp	x19, x8
100004e60:     	b.eq	0x100004ff8 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x95c>
100004e64:     	ldr	x8, [sp, #2656]
100004e68:     	mov	w9, #184
100004e6c:     	madd	x8, x19, x9, x8
100004e70:     	ldr	w20, [x8, #108]
100004e74:     	cmp	w20, #1
100004e78:     	b.ge	0x100004e90 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x7f4>
100004e7c:     	b	0x100004e54 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x7b8>
100004e80:     	str	x19, [x23], #8
100004e84:     	str	x23, [sp, #2640]
100004e88:     	subs	w20, w20, #1
100004e8c:     	b.ls	0x100004e54 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x7b8>
100004e90:     	cmp	x23, x22
100004e94:     	b.ne	0x100004e80 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x7e4>
100004e98:     	sub	x24, x22, x28
100004e9c:     	asr	x23, x24, #3
100004ea0:     	add	x8, x23, #1
100004ea4:     	lsr	x9, x8, #61
100004ea8:     	cbnz	x9, 0x1000055f4 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xf58>
100004eac:     	asr	x9, x24, #2
100004eb0:     	cmp	x9, x8
100004eb4:     	csel	x8, x9, x8, hi
100004eb8:     	cmp	x24, x27
100004ebc:     	csel	x21, x8, x26, lo
100004ec0:     	cbz	x21, 0x100004eec <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x850>
100004ec4:     	lsr	x8, x21, #61
100004ec8:     	cbnz	x8, 0x100005600 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xf64>
100004ecc:     	lsl	x0, x21, #3
100004ed0:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100004ed4:     	add	x25, x0, x23, lsl #3
100004ed8:     	mov	x23, x25
100004edc:     	str	x19, [x23], #8
100004ee0:     	cmp	x22, x28
100004ee4:     	b.ne	0x100004f04 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x868>
100004ee8:     	b	0x100004f28 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x88c>
100004eec:     	mov	x0, #0
100004ef0:     	add	x25, x0, x23, lsl #3
100004ef4:     	mov	x23, x25
100004ef8:     	str	x19, [x23], #8
100004efc:     	cmp	x22, x28
100004f00:     	b.eq	0x100004f28 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x88c>
100004f04:     	sub	x9, x22, #8
100004f08:     	sub	x8, x9, x28
100004f0c:     	cmp	x8, #360
100004f10:     	b.hs	0x100004f54 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x8b8>
100004f14:     	mov	x8, x22
100004f18:     	ldr	x9, [x8, #-8]!
100004f1c:     	str	x9, [x25, #-8]!
100004f20:     	cmp	x8, x28
100004f24:     	b.ne	0x100004f18 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x87c>
100004f28:     	add	x22, x0, x21, lsl #3
100004f2c:     	str	x25, [sp, #2632]
100004f30:     	str	x23, [sp, #2640]
100004f34:     	str	x22, [sp, #2648]
100004f38:     	cbz	x28, 0x100004f44 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x8a8>
100004f3c:     	mov	x0, x28
100004f40:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100004f44:     	mov	x28, x25
100004f48:     	subs	w20, w20, #1
100004f4c:     	b.hi	0x100004e90 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x7f4>
100004f50:     	b	0x100004e54 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x7b8>
100004f54:     	and	x10, x8, #0xfffffffffffffff8
100004f58:     	add	x11, x0, x24
100004f5c:     	sub	x11, x11, #8
100004f60:     	sub	x12, x11, x10
100004f64:     	cmp	x12, x11
100004f68:     	b.hi	0x100004f9c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x900>
100004f6c:     	sub	x10, x9, x10
100004f70:     	cmp	x10, x9
100004f74:     	b.hi	0x100004f94 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x8f8>
100004f78:     	add	x12, x0, x24
100004f7c:     	sub	x9, x9, x12
100004f80:     	add	x9, x9, #8
100004f84:     	cmp	x9, #64
100004f88:     	b.hs	0x100004fa4 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x908>
100004f8c:     	mov	x8, x22
100004f90:     	b	0x100004f18 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x87c>
100004f94:     	mov	x8, x22
100004f98:     	b	0x100004f18 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x87c>
100004f9c:     	mov	x8, x22
100004fa0:     	b	0x100004f18 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x87c>
100004fa4:     	lsr	x8, x8, #3
100004fa8:     	add	x9, x8, #1
100004fac:     	and	x10, x9, #0x3ffffffffffffff8
100004fb0:     	lsl	x11, x10, #3
100004fb4:     	sub	x8, x22, x11
100004fb8:     	sub	x25, x25, x11
100004fbc:     	sub	x11, x22, #32
100004fc0:     	sub	x12, x12, #32
100004fc4:     	mov	x13, x10
100004fc8:     	ldp	q1, q0, [x11]
100004fcc:     	ldp	q3, q2, [x11, #-32]
100004fd0:     	stp	q1, q0, [x12]
100004fd4:     	stp	q3, q2, [x12, #-32]
100004fd8:     	sub	x11, x11, #64
100004fdc:     	sub	x12, x12, #64
100004fe0:     	sub	x13, x13, #8
100004fe4:     	cbnz	x13, 0x100004fc8 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x92c>
100004fe8:     	cmp	x9, x10
100004fec:     	b.ne	0x100004f18 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x87c>
100004ff0:     	b	0x100004f28 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x88c>
100004ff4:     	mov	x23, x28
100004ff8:     	adrp	x8, 0x100038000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xa2c>
100004ffc:     	ldrb	w8, [x8, #316]
100005000:     	cbz	w8, 0x100005100 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xa64>
100005004:     	mov	w8, #12
100005008:     	strb	w8, [sp, #143]
10000500c:     	mov	w8, #25710
100005010:     	movk	w8, #28015, lsl #16
100005014:     	str	w8, [sp, #128]
100005018:     	adrp	x8, 0x100031000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xa2c>
10000501c:     	add	x8, x8, #3678
100005020:     	ldr	x8, [x8]
100005024:     	str	x8, [sp, #120]
100005028:     	strb	wzr, [sp, #132]
10000502c:     	add	x0, sp, #2624
100005030:     	add	x1, sp, #120
100005034:     	bl	0x10002ee4c <_vsnprintf+0x10002ee4c>
100005038:     	ldrsb	w8, [sp, #143]
10000503c:     	tbz	w8, #31, 0x100005048 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x9ac>
100005040:     	ldr	x0, [sp, #120]
100005044:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100005048:     	add	x0, sp, #2624
10000504c:     	bl	0x10002ee64 <_vsnprintf+0x10002ee64>
100005050:     	str	w0, [sp, #120]
100005054:     	mov	w8, #1
100005058:     	mov	w9, #35173
10000505c:     	movk	w9, #27655, lsl #16
100005060:     	add	x10, sp, #120
100005064:     	eor	w11, w0, w0, lsr #30
100005068:     	madd	w0, w11, w9, w8
10000506c:     	str	w0, [x10, x8, lsl #2]
100005070:     	add	x8, x8, #1
100005074:     	cmp	x8, #624
100005078:     	b.ne	0x100005064 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x9c8>
10000507c:     	str	xzr, [sp, #2616]
100005080:     	sub	x8, x23, x28
100005084:     	cmp	x8, #9
100005088:     	b.lt	0x1000050f8 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xa5c>
10000508c:     	adrp	x9, 0x100032000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xaa4>
100005090:     	ldr	q0, [x9, #2800]
100005094:     	str	q0, [sp, #96]
100005098:     	sub	x19, x23, #8
10000509c:     	cmp	x19, x28
1000050a0:     	b.ls	0x1000050f8 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xa5c>
1000050a4:     	lsr	x8, x8, #3
1000050a8:     	sub	x20, x8, #1
1000050ac:     	mov	x21, x28
1000050b0:     	b	0x1000050c4 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xa28>
1000050b4:     	add	x21, x21, #8
1000050b8:     	sub	x20, x20, #1
1000050bc:     	cmp	x21, x19
1000050c0:     	b.hs	0x1000050f8 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xa5c>
1000050c4:     	str	xzr, [sp, #3368]
1000050c8:     	str	x20, [sp, #3376]
1000050cc:     	add	x0, sp, #96
1000050d0:     	add	x1, sp, #120
1000050d4:     	add	x2, sp, #3368
1000050d8:     	bl	0x100007470 <long std::__1::uniform_int_distribution<long>::operator()<std::__1::mersenne_twister_engine<unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u>>(std::__1::mersenne_twister_engine<unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u>&, std::__1::uniform_int_distribution<long>::param_type const&)>
1000050dc:     	cbz	x0, 0x1000050b4 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xa18>
1000050e0:     	lsl	x8, x0, #3
1000050e4:     	ldr	x9, [x21]
1000050e8:     	ldr	x10, [x21, x8]
1000050ec:     	str	x10, [x21]
1000050f0:     	str	x9, [x21, x8]
1000050f4:     	b	0x1000050b4 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xa18>
1000050f8:     	add	x0, sp, #2624
1000050fc:     	bl	0x10002ee58 <_vsnprintf+0x10002ee58>
100005100:     	cmp	x28, x23
100005104:     	b.eq	0x100005420 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xd84>
100005108:     	add	x24, sp, #120
10000510c:     	add	x26, x24, #24
100005110:     	mov	w22, #184
100005114:     	mov	x19, x28
100005118:     	b	0x100005128 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xa8c>
10000511c:     	add	x19, x19, #8
100005120:     	cmp	x19, x23
100005124:     	b.eq	0x100005420 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xd84>
100005128:     	ldr	x20, [x19]
10000512c:     	ldr	x21, [sp, #2656]
100005130:     	madd	x27, x20, x22, x21
100005134:     	mov	x0, x27
100005138:     	bl	0x10001f0d8 <benchmark::internal::BenchmarkRunner::DoOneRepetition()>
10000513c:     	madd	x20, x20, x22, x21
100005140:     	ldr	w8, [x20, #108]
100005144:     	ldr	w9, [x20, #116]
100005148:     	cmp	w8, w9
10000514c:     	b.ne	0x10000511c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xa80>
100005150:     	ldr	d0, [x20, #88]
100005154:     	ldrb	w1, [x20, #112]
100005158:     	ldr	x2, [x20, #168]
10000515c:     	ldr	x0, [sp, #64]
100005160:     	ldr	x8, [x0]
100005164:     	ldr	x8, [x8, #8]
100005168:     	blr	x8
10000516c:     	ldr	x8, [sp, #56]
100005170:     	cbz	x8, 0x100005190 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xaf4>
100005174:     	ldr	d0, [x20, #88]
100005178:     	ldrb	w1, [x20, #112]
10000517c:     	ldr	x2, [x20, #168]
100005180:     	ldr	x0, [sp, #56]
100005184:     	ldr	x8, [x0]
100005188:     	ldr	x8, [x8, #8]
10000518c:     	blr	x8
100005190:     	mov	x0, x27
100005194:     	bl	0x10001f938 <benchmark::internal::BenchmarkRunner::GetResults()>
100005198:     	stp	xzr, xzr, [sp, #128]
10000519c:     	str	xzr, [sp, #120]
1000051a0:     	ldp	x8, x9, [x0]
1000051a4:     	stp	x8, x9, [sp, #120]
1000051a8:     	ldr	x8, [x0, #16]
1000051ac:     	str	x8, [sp, #136]
1000051b0:     	stp	xzr, xzr, [x0]
1000051b4:     	str	xzr, [x0, #16]
1000051b8:     	stp	xzr, xzr, [x26]
1000051bc:     	str	xzr, [x26, #16]
1000051c0:     	ldp	x8, x9, [x0, #24]
1000051c4:     	stp	x8, x9, [sp, #144]
1000051c8:     	ldr	x8, [x0, #40]
1000051cc:     	str	x8, [sp, #160]
1000051d0:     	stp	xzr, xzr, [x0, #24]
1000051d4:     	str	xzr, [x0, #40]
1000051d8:     	ldrh	w8, [x0, #48]
1000051dc:     	strh	w8, [sp, #168]
1000051e0:     	and	w8, w8, #0xff
1000051e4:     	ldr	x9, [x20, #64]
1000051e8:     	cbz	x9, 0x10000532c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xc90>
1000051ec:     	ldp	w11, w10, [x9]
1000051f0:     	cmp	w10, w11
1000051f4:     	b.ne	0x10000532c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xc90>
1000051f8:     	add	x27, x9, #8
1000051fc:     	add	x8, sp, #96
100005200:     	mov	x0, x27
100005204:     	bl	0x100022eb4 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)>
100005208:     	ldr	x1, [sp, #152]
10000520c:     	ldp	x2, x3, [sp, #96]
100005210:     	sub	x8, x3, x2
100005214:     	asr	x8, x8, #6
100005218:     	mov	x9, #28087
10000521c:     	movk	x9, #46811, lsl #16
100005220:     	movk	x9, #56173, lsl #32
100005224:     	movk	x9, #28086, lsl #48
100005228:     	mul	x4, x8, x9
10000522c:     	mov	x0, x26
100005230:     	bl	0x1000077e0 <std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*> std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__insert_with_size[abi:ue170006]<std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>>(std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run const*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, long)>
100005234:     	ldr	x0, [sp, #3328]
100005238:     	cbz	x0, 0x100005314 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xc78>
10000523c:     	ldr	x8, [x27]
100005240:     	ldr	w20, [x8, #192]
100005244:     	ldr	x21, [sp, #8]
100005248:     	mov	x9, x0
10000524c:     	mov	x22, x9
100005250:     	mov	x27, x21
100005254:     	ldr	w25, [x9, #32]
100005258:     	add	x8, x9, #8
10000525c:     	cmp	w25, w20
100005260:     	csel	x9, x8, x9, lt
100005264:     	csel	x21, x21, x22, lt
100005268:     	ldr	x9, [x9]
10000526c:     	cbnz	x9, 0x10000524c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xbb0>
100005270:     	ldr	x9, [sp, #8]
100005274:     	cmp	x21, x9
100005278:     	b.eq	0x100005314 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xc78>
10000527c:     	cmp	w25, w20
100005280:     	csel	x9, x27, x22, lt
100005284:     	ldr	w9, [x9, #32]
100005288:     	cmp	w9, w20
10000528c:     	b.gt	0x100005314 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xc78>
100005290:     	add	x9, x27, #8
100005294:     	cmp	w25, w20
100005298:     	csel	x8, x9, x8, lt
10000529c:     	ldr	x9, [x8]
1000052a0:     	mov	x10, x21
1000052a4:     	cbz	x9, 0x1000052b8 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xc1c>
1000052a8:     	mov	x8, x9
1000052ac:     	ldr	x9, [x9]
1000052b0:     	cbnz	x9, 0x1000052a8 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xc0c>
1000052b4:     	b	0x1000052cc <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xc30>
1000052b8:     	ldr	x8, [x10, #16]
1000052bc:     	ldr	x9, [x8]
1000052c0:     	cmp	x9, x10
1000052c4:     	mov	x10, x8
1000052c8:     	b.ne	0x1000052b8 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xc1c>
1000052cc:     	ldr	x9, [sp, #3320]
1000052d0:     	cmp	x9, x21
1000052d4:     	b.ne	0x1000052dc <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xc40>
1000052d8:     	str	x8, [sp, #3320]
1000052dc:     	ldr	x8, [sp, #3336]
1000052e0:     	sub	x8, x8, #1
1000052e4:     	str	x8, [sp, #3336]
1000052e8:     	mov	x1, x21
1000052ec:     	bl	0x100009be8 <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)>
1000052f0:     	add	x8, x27, #48
1000052f4:     	add	x9, x22, #48
1000052f8:     	cmp	w25, w20
1000052fc:     	csel	x8, x8, x9, lt
100005300:     	str	x8, [sp, #3368]
100005304:     	add	x0, sp, #3368
100005308:     	bl	0x100009fac <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__destroy_vector::operator()[abi:ue170006]()>
10000530c:     	mov	x0, x21
100005310:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100005314:     	add	x8, sp, #96
100005318:     	str	x8, [sp, #3368]
10000531c:     	add	x0, sp, #3368
100005320:     	bl	0x100009fac <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__destroy_vector::operator()[abi:ue170006]()>
100005324:     	ldrb	w8, [sp, #168]
100005328:     	mov	w22, #184
10000532c:     	cbz	w8, 0x100005348 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xcac>
100005330:     	ldp	x8, x9, [sp, #144]
100005334:     	cmp	x8, x9
100005338:     	b.eq	0x100005348 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xcac>
10000533c:     	cmp	x8, x9
100005340:     	b.ne	0x100005368 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xccc>
100005344:     	b	0x10000537c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xce0>
100005348:     	ldr	x0, [sp, #64]
10000534c:     	ldr	x8, [x0]
100005350:     	ldr	x8, [x8, #16]
100005354:     	add	x1, sp, #120
100005358:     	blr	x8
10000535c:     	ldp	x8, x9, [sp, #144]
100005360:     	cmp	x8, x9
100005364:     	b.eq	0x10000537c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xce0>
100005368:     	ldr	x0, [sp, #64]
10000536c:     	ldr	x8, [x0]
100005370:     	ldr	x8, [x8, #16]
100005374:     	mov	x1, x26
100005378:     	blr	x8
10000537c:     	ldp	x8, x20, [sp, #56]
100005380:     	cbz	x8, 0x1000053f4 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xd58>
100005384:     	ldrb	w8, [sp, #169]
100005388:     	cbz	w8, 0x1000053a4 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xd08>
10000538c:     	ldp	x8, x9, [sp, #144]
100005390:     	cmp	x8, x9
100005394:     	b.eq	0x1000053a4 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xd08>
100005398:     	cmp	x8, x9
10000539c:     	b.ne	0x1000053c4 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xd28>
1000053a0:     	b	0x1000053d8 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xd3c>
1000053a4:     	ldr	x0, [sp, #56]
1000053a8:     	ldr	x8, [x0]
1000053ac:     	ldr	x8, [x8, #16]
1000053b0:     	add	x1, sp, #120
1000053b4:     	blr	x8
1000053b8:     	ldp	x8, x9, [sp, #144]
1000053bc:     	cmp	x8, x9
1000053c0:     	b.eq	0x1000053d8 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xd3c>
1000053c4:     	ldr	x0, [sp, #56]
1000053c8:     	ldr	x8, [x0]
1000053cc:     	ldr	x8, [x8, #16]
1000053d0:     	mov	x1, x26
1000053d4:     	blr	x8
1000053d8:     	ldr	x8, [sp, #64]
1000053dc:     	ldr	x0, [x8, #8]
1000053e0:     	bl	0x10002ede0 <_vsnprintf+0x10002ede0>
1000053e4:     	ldr	x8, [sp, #64]
1000053e8:     	ldr	x0, [x8, #16]
1000053ec:     	bl	0x10002ede0 <_vsnprintf+0x10002ede0>
1000053f0:     	ldr	x20, [sp, #56]
1000053f4:     	ldr	x0, [x20, #8]
1000053f8:     	bl	0x10002ede0 <_vsnprintf+0x10002ede0>
1000053fc:     	ldr	x0, [x20, #16]
100005400:     	bl	0x10002ede0 <_vsnprintf+0x10002ede0>
100005404:     	str	x26, [sp, #96]
100005408:     	add	x0, sp, #96
10000540c:     	bl	0x100009fac <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__destroy_vector::operator()[abi:ue170006]()>
100005410:     	str	x24, [sp, #96]
100005414:     	add	x0, sp, #96
100005418:     	bl	0x100009fac <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__destroy_vector::operator()[abi:ue170006]()>
10000541c:     	b	0x10000511c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xa80>
100005420:     	cbz	x28, 0x100005430 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xd94>
100005424:     	str	x28, [sp, #2640]
100005428:     	mov	x0, x28
10000542c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100005430:     	ldr	x19, [sp, #2656]
100005434:     	ldp	x23, x24, [sp, #56]
100005438:     	cbz	x19, 0x1000054d4 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xe38>
10000543c:     	ldr	x20, [sp, #2664]
100005440:     	mov	x0, x19
100005444:     	cmp	x20, x19
100005448:     	b.ne	0x100005484 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xde8>
10000544c:     	b	0x1000054cc <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xe30>
100005450:     	stur	x22, [x20, #-56]
100005454:     	mov	x0, x8
100005458:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000545c:     	sub	x8, x20, #160
100005460:     	str	x8, [sp, #120]
100005464:     	add	x0, sp, #120
100005468:     	bl	0x100009fac <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__destroy_vector::operator()[abi:ue170006]()>
10000546c:     	str	x21, [sp, #120]
100005470:     	add	x0, sp, #120
100005474:     	bl	0x100009fac <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__destroy_vector::operator()[abi:ue170006]()>
100005478:     	mov	x20, x21
10000547c:     	cmp	x21, x19
100005480:     	b.eq	0x1000054c8 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xe2c>
100005484:     	ldur	x0, [x20, #-40]
100005488:     	cbz	x0, 0x100005494 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xdf8>
10000548c:     	stur	x0, [x20, #-32]
100005490:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100005494:     	sub	x21, x20, #184
100005498:     	ldur	x22, [x20, #-64]
10000549c:     	cbz	x22, 0x10000545c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xdc0>
1000054a0:     	ldur	x0, [x20, #-56]
1000054a4:     	mov	x8, x22
1000054a8:     	cmp	x0, x22
1000054ac:     	b.eq	0x100005450 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xdb4>
1000054b0:     	sub	x0, x0, #8
1000054b4:     	bl	0x10002efa8 <_vsnprintf+0x10002efa8>
1000054b8:     	cmp	x0, x22
1000054bc:     	b.ne	0x1000054b0 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xe14>
1000054c0:     	ldur	x8, [x20, #-64]
1000054c4:     	b	0x100005450 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xdb4>
1000054c8:     	ldr	x0, [sp, #2656]
1000054cc:     	str	x19, [sp, #2664]
1000054d0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000054d4:     	add	x0, sp, #2680
1000054d8:     	bl	0x10000a14c <benchmark::internal::PerfCounters::~PerfCounters()>
1000054dc:     	ldr	x8, [x24]
1000054e0:     	ldr	x8, [x8, #24]
1000054e4:     	mov	x0, x24
1000054e8:     	blr	x8
1000054ec:     	cbz	x23, 0x100005500 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xe64>
1000054f0:     	ldr	x8, [x23]
1000054f4:     	ldr	x8, [x8, #24]
1000054f8:     	mov	x0, x23
1000054fc:     	blr	x8
100005500:     	ldr	x0, [x24, #8]
100005504:     	bl	0x10002ede0 <_vsnprintf+0x10002ede0>
100005508:     	ldr	x0, [x24, #16]
10000550c:     	bl	0x10002ede0 <_vsnprintf+0x10002ede0>
100005510:     	cbz	x23, 0x100005524 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xe88>
100005514:     	ldr	x0, [x23, #8]
100005518:     	bl	0x10002ede0 <_vsnprintf+0x10002ede0>
10000551c:     	ldr	x0, [x23, #16]
100005520:     	bl	0x10002ede0 <_vsnprintf+0x10002ede0>
100005524:     	ldr	x1, [sp, #3328]
100005528:     	add	x0, sp, #3320
10000552c:     	bl	0x10000a1e8 <std::__1::__tree<std::__1::__value_type<int, benchmark::BenchmarkReporter::PerFamilyRunReports>, std::__1::__map_value_compare<int, std::__1::__value_type<int, benchmark::BenchmarkReporter::PerFamilyRunReports>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, benchmark::BenchmarkReporter::PerFamilyRunReports>>>::destroy(std::__1::__tree_node<std::__1::__value_type<int, benchmark::BenchmarkReporter::PerFamilyRunReports>, void*>*)>
100005530:     	ldp	x19, x8, [sp, #72]
100005534:     	sub	x8, x8, x19
100005538:     	asr	x8, x8, #4
10000553c:     	mov	x9, #53053
100005540:     	movk	x9, #15603, lsl #16
100005544:     	movk	x9, #62415, lsl #32
100005548:     	movk	x9, #53052, lsl #48
10000554c:     	mul	x23, x8, x9
100005550:     	cbnz	x19, 0x100004978 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x2dc>
100005554:     	ldr	x0, [sp, #40]
100005558:     	cbz	x0, 0x100005568 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xecc>
10000555c:     	ldr	x8, [x0]
100005560:     	ldr	x8, [x8, #40]
100005564:     	blr	x8
100005568:     	ldr	x0, [sp, #48]
10000556c:     	cbz	x0, 0x10000557c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xee0>
100005570:     	ldr	x8, [x0]
100005574:     	ldr	x8, [x8, #40]
100005578:     	blr	x8
10000557c:     	adrp	x19, 0x100034000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xf9c>
100005580:     	ldr	x19, [x19, #696]
100005584:     	ldr	x8, [x19]
100005588:     	str	x8, [sp, #3384]
10000558c:     	ldr	x9, [x19, #24]
100005590:     	ldur	x8, [x8, #-24]
100005594:     	add	x10, sp, #3384
100005598:     	str	x9, [x10, x8]
10000559c:     	ldr	x0, [sp, #24]
1000055a0:     	bl	0x10002edb0 <_vsnprintf+0x10002edb0>
1000055a4:     	add	x1, x19, #8
1000055a8:     	add	x0, sp, #3384
1000055ac:     	bl	0x10002ee04 <_vsnprintf+0x10002ee04>
1000055b0:     	ldr	x0, [sp, #32]
1000055b4:     	bl	0x10002efe4 <_vsnprintf+0x10002efe4>
1000055b8:     	ldur	x8, [x29, #-96]
1000055bc:     	adrp	x9, 0x100034000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xfdc>
1000055c0:     	ldr	x9, [x9, #928]
1000055c4:     	ldr	x9, [x9]
1000055c8:     	cmp	x9, x8
1000055cc:     	b.ne	0x100005630 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xf94>
1000055d0:     	mov	x0, x23
1000055d4:     	add	sp, sp, #3968
1000055d8:     	ldp	x29, x30, [sp, #80]
1000055dc:     	ldp	x20, x19, [sp, #64]
1000055e0:     	ldp	x22, x21, [sp, #48]
1000055e4:     	ldp	x24, x23, [sp, #32]
1000055e8:     	ldp	x26, x25, [sp, #16]
1000055ec:     	ldp	x28, x27, [sp], #96
1000055f0:     	ret
1000055f4:     	add	x0, sp, #2632
1000055f8:     	bl	0x10000745c <std::__1::vector<unsigned long, std::__1::allocator<unsigned long>>::__throw_length_error[abi:ue170006]() const>
1000055fc:     	b	0x1000056ec <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x1050>
100005600:     	bl	0x100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>
100005604:     	b	0x1000056ec <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x1050>
100005608:     	adrp	x8, 0x100031000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x101c>
10000560c:     	add	x8, x8, #2371
100005610:     	mov	w2, #81
100005614:     	mov	x0, x27
100005618:     	mov	x1, x8
10000561c:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100005620:     	bl	0x100005c88 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::endl[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&)>
100005624:     	mov	w0, #1
100005628:     	bl	0x10002f104 <_vsnprintf+0x10002f104>
10000562c:     	b	0x1000056ec <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x1050>
100005630:     	bl	0x10002f0d4 <_vsnprintf+0x10002f0d4>
100005634:     	adrp	x1, 0x100031000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x1048>
100005638:     	add	x1, x1, #2453
10000563c:     	mov	x0, x27
100005640:     	mov	w2, #20
100005644:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100005648:     	ldrb	w8, [x20, #23]
10000564c:     	sxtb	w9, w8
100005650:     	ldp	x10, x11, [x20]
100005654:     	cmp	w9, #0
100005658:     	csel	x1, x10, x20, lt
10000565c:     	csel	x2, x11, x8, lt
100005660:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100005664:     	mov	x27, x0
100005668:     	adrp	x8, 0x100031000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x107c>
10000566c:     	add	x8, x8, #2474
100005670:     	mov	w2, #1
100005674:     	b	0x100005614 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xf78>
100005678:     	adrp	x0, 0x100038000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x10a8>
10000567c:     	add	x0, x0, #72
100005680:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
100005684:     	cbz	w0, 0x1000047f4 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x158>
100005688:     	mov	w0, #0
10000568c:     	bl	0x100004200 <benchmark::internal::GetOutputOptions(bool)>
100005690:     	mov	x2, x0
100005694:     	adrp	x1, 0x100038000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x10c4>
100005698:     	add	x1, x1, #320
10000569c:     	add	x0, sp, #120
1000056a0:     	bl	0x100004354 <benchmark::internal::(anonymous namespace)::CreateReporter(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, benchmark::ConsoleReporter::OutputOptions)>
1000056a4:     	ldr	x8, [sp, #120]
1000056a8:     	adrp	x0, 0x100038000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x10d8>
1000056ac:     	add	x0, x0, #64
1000056b0:     	str	x8, [x0], #8
1000056b4:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
1000056b8:     	b	0x1000047f4 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x158>
1000056bc:     	adrp	x0, 0x100038000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x10ec>
1000056c0:     	add	x0, x0, #8
1000056c4:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
1000056c8:     	cbz	w0, 0x1000049d8 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x33c>
1000056cc:     	adrp	x8, 0x100038000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x10fc>
1000056d0:     	str	xzr, [x8]
1000056d4:     	adrp	x0, 0x100038000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x1104>
1000056d8:     	add	x0, x0, #8
1000056dc:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
1000056e0:     	b	0x1000049d8 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x33c>
1000056e4:     	add	x0, sp, #2632
1000056e8:     	bl	0x10000745c <std::__1::vector<unsigned long, std::__1::allocator<unsigned long>>::__throw_length_error[abi:ue170006]() const>
1000056ec:     	brk	#0x1
1000056f0:     	adrp	x0, 0x100038000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x1120>
1000056f4:     	add	x0, x0, #24
1000056f8:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
1000056fc:     	cbz	w0, 0x100004d3c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x6a0>
100005700:     	adrp	x8, 0x100034000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x1120>
100005704:     	ldr	x8, [x8, #464]
100005708:     	str	x8, [x20, #16]
10000570c:     	adrp	x0, 0x100038000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x113c>
100005710:     	add	x0, x0, #24
100005714:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
100005718:     	b	0x100004d3c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x6a0>
10000571c:     	mov	x22, x0
100005720:     	adrp	x0, 0x100038000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x1150>
100005724:     	add	x0, x0, #72
100005728:     	bl	0x10002f074 <_vsnprintf+0x10002f074>
10000572c:     	add	x0, sp, #3384
100005730:     	bl	0x100005da8 <std::__1::basic_ofstream<char, std::__1::char_traits<char>>::~basic_ofstream()>
100005734:     	mov	x0, x22
100005738:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
10000573c:     	mov	x22, x0
100005740:     	b	0x100005878 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x11dc>
100005744:     	mov	x22, x0
100005748:     	b	0x100005878 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x11dc>
10000574c:     	b	0x1000057a4 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x1108>
100005750:     	mov	x22, x0
100005754:     	ldrsb	w8, [sp, #143]
100005758:     	tbz	w8, #31, 0x100005868 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x11cc>
10000575c:     	ldr	x0, [sp, #120]
100005760:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100005764:     	b	0x100005868 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x11cc>
100005768:     	b	0x100005864 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x11c8>
10000576c:     	mov	x22, x0
100005770:     	b	0x100005878 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x11dc>
100005774:     	mov	x22, x0
100005778:     	add	x0, sp, #120
10000577c:     	bl	0x100006bdc <std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::~vector[abi:ue170006]()>
100005780:     	b	0x100005888 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x11ec>
100005784:     	b	0x1000057e4 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x1148>
100005788:     	mov	x22, x0
10000578c:     	add	x8, sp, #96
100005790:     	str	x8, [sp, #3368]
100005794:     	add	x0, sp, #3368
100005798:     	bl	0x100009fac <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__destroy_vector::operator()[abi:ue170006]()>
10000579c:     	b	0x100005828 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x118c>
1000057a0:     	b	0x100005824 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x1188>
1000057a4:     	mov	x22, x0
1000057a8:     	add	x0, sp, #2624
1000057ac:     	bl	0x10002ee58 <_vsnprintf+0x10002ee58>
1000057b0:     	b	0x100005868 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x11cc>
1000057b4:     	mov	x22, x0
1000057b8:     	ldr	x8, [sp, #48]
1000057bc:     	cbz	x8, 0x10000591c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x1280>
1000057c0:     	b	0x1000058bc <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x1220>
1000057c4:     	mov	x22, x0
1000057c8:     	b	0x100005878 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x11dc>
1000057cc:     	b	0x100005864 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x11c8>
1000057d0:     	mov	x22, x0
1000057d4:     	b	0x100005878 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x11dc>
1000057d8:     	mov	x22, x0
1000057dc:     	str	x27, [sp, #2664]
1000057e0:     	b	0x100005878 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x11dc>
1000057e4:     	mov	x22, x0
1000057e8:     	b	0x100005888 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x11ec>
1000057ec:     	mov	x22, x0
1000057f0:     	adrp	x8, 0x100034000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x1210>
1000057f4:     	ldr	x8, [x8, #696]
1000057f8:     	add	x1, x8, #8
1000057fc:     	add	x0, sp, #3384
100005800:     	bl	0x10002ee04 <_vsnprintf+0x10002ee04>
100005804:     	b	0x10000580c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x1170>
100005808:     	mov	x22, x0
10000580c:     	ldr	x0, [sp, #32]
100005810:     	bl	0x10002efe4 <_vsnprintf+0x10002efe4>
100005814:     	mov	x0, x22
100005818:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
10000581c:     	b	0x100005864 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x11c8>
100005820:     	b	0x10000584c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x11b0>
100005824:     	mov	x22, x0
100005828:     	add	x0, sp, #120
10000582c:     	bl	0x100006e58 <benchmark::internal::RunResults::~RunResults()>
100005830:     	b	0x100005868 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x11cc>
100005834:     	mov	x22, x0
100005838:     	ldr	x8, [sp, #48]
10000583c:     	cbz	x8, 0x10000591c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x1280>
100005840:     	b	0x1000058bc <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x1220>
100005844:     	b	0x10000584c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x11b0>
100005848:     	b	0x100005864 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x11c8>
10000584c:     	mov	x22, x0
100005850:     	add	x0, sp, #72
100005854:     	bl	0x100005d34 <std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::~vector[abi:ue170006]()>
100005858:     	ldr	x8, [sp, #40]
10000585c:     	cbz	x8, 0x100005914 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x1278>
100005860:     	b	0x1000058a4 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x1208>
100005864:     	mov	x22, x0
100005868:     	ldr	x0, [sp, #2632]
10000586c:     	cbz	x0, 0x100005878 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x11dc>
100005870:     	str	x0, [sp, #2640]
100005874:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100005878:     	add	x0, sp, #2656
10000587c:     	bl	0x100006e9c <std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::~vector[abi:ue170006]()>
100005880:     	add	x0, sp, #2680
100005884:     	bl	0x10000a14c <benchmark::internal::PerfCounters::~PerfCounters()>
100005888:     	ldr	x1, [sp, #3328]
10000588c:     	add	x0, sp, #3320
100005890:     	bl	0x10000a1e8 <std::__1::__tree<std::__1::__value_type<int, benchmark::BenchmarkReporter::PerFamilyRunReports>, std::__1::__map_value_compare<int, std::__1::__value_type<int, benchmark::BenchmarkReporter::PerFamilyRunReports>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, benchmark::BenchmarkReporter::PerFamilyRunReports>>>::destroy(std::__1::__tree_node<std::__1::__value_type<int, benchmark::BenchmarkReporter::PerFamilyRunReports>, void*>*)>
100005894:     	add	x0, sp, #72
100005898:     	bl	0x100005d34 <std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::~vector[abi:ue170006]()>
10000589c:     	ldr	x8, [sp, #40]
1000058a0:     	cbz	x8, 0x100005914 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x1278>
1000058a4:     	ldr	x0, [sp, #40]
1000058a8:     	ldr	x8, [x0]
1000058ac:     	ldr	x8, [x8, #40]
1000058b0:     	blr	x8
1000058b4:     	ldr	x8, [sp, #48]
1000058b8:     	cbz	x8, 0x10000591c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x1280>
1000058bc:     	ldr	x0, [sp, #48]
1000058c0:     	ldr	x8, [x0]
1000058c4:     	ldr	x8, [x8, #40]
1000058c8:     	blr	x8
1000058cc:     	add	x0, sp, #3384
1000058d0:     	bl	0x100005da8 <std::__1::basic_ofstream<char, std::__1::char_traits<char>>::~basic_ofstream()>
1000058d4:     	mov	x0, x22
1000058d8:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
1000058dc:     	mov	x22, x0
1000058e0:     	ldrsb	w8, [sp, #143]
1000058e4:     	tbz	w8, #31, 0x100005904 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x1268>
1000058e8:     	ldr	x0, [sp, #120]
1000058ec:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000058f0:     	add	x0, sp, #72
1000058f4:     	bl	0x100005d34 <std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::~vector[abi:ue170006]()>
1000058f8:     	ldr	x8, [sp, #40]
1000058fc:     	cbz	x8, 0x100005914 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x1278>
100005900:     	b	0x1000058a4 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x1208>
100005904:     	add	x0, sp, #72
100005908:     	bl	0x100005d34 <std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::~vector[abi:ue170006]()>
10000590c:     	ldr	x8, [sp, #40]
100005910:     	cbnz	x8, 0x1000058a4 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x1208>
100005914:     	ldr	x8, [sp, #48]
100005918:     	cbnz	x8, 0x1000058bc <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x1220>
10000591c:     	add	x0, sp, #3384
100005920:     	bl	0x100005da8 <std::__1::basic_ofstream<char, std::__1::char_traits<char>>::~basic_ofstream()>
100005924:     	mov	x0, x22
100005928:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010000592c <benchmark::RunSpecifiedBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)>:
10000592c:     	sub	sp, sp, #64
100005930:     	stp	x20, x19, [sp, #32]
100005934:     	stp	x29, x30, [sp, #48]
100005938:     	add	x29, sp, #48
10000593c:     	ldr	q0, [x0]
100005940:     	str	q0, [sp]
100005944:     	ldr	x8, [x0, #16]
100005948:     	str	x8, [sp, #16]
10000594c:     	stp	xzr, xzr, [x0, #8]
100005950:     	str	xzr, [x0]
100005954:     	mov	x2, sp
100005958:     	mov	x0, #0
10000595c:     	mov	x1, #0
100005960:     	bl	0x10000469c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)>
100005964:     	mov	x19, x0
100005968:     	ldrsb	w8, [sp, #23]
10000596c:     	tbnz	w8, #31, 0x100005984 <benchmark::RunSpecifiedBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x58>
100005970:     	mov	x0, x19
100005974:     	ldp	x29, x30, [sp, #48]
100005978:     	ldp	x20, x19, [sp, #32]
10000597c:     	add	sp, sp, #64
100005980:     	ret
100005984:     	ldr	x0, [sp]
100005988:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000598c:     	mov	x0, x19
100005990:     	ldp	x29, x30, [sp, #48]
100005994:     	ldp	x20, x19, [sp, #32]
100005998:     	add	sp, sp, #64
10000599c:     	ret
1000059a0:     	mov	x19, x0
1000059a4:     	ldrsb	w8, [sp, #23]
1000059a8:     	tbz	w8, #31, 0x1000059b4 <benchmark::RunSpecifiedBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x88>
1000059ac:     	ldr	x0, [sp]
1000059b0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000059b4:     	mov	x0, x19
1000059b8:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

00000001000059bc <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*)>:
1000059bc:     	sub	sp, sp, #80
1000059c0:     	stp	x22, x21, [sp, #32]
1000059c4:     	stp	x20, x19, [sp, #48]
1000059c8:     	stp	x29, x30, [sp, #64]
1000059cc:     	add	x29, sp, #64
1000059d0:     	mov	x19, x0
1000059d4:     	adrp	x8, 0x100038000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*)+0xe4>
1000059d8:     	ldrsb	w8, [x8, #279]
1000059dc:     	tbnz	w8, #31, 0x1000059fc <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*)+0x40>
1000059e0:     	adrp	x8, 0x100038000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*)+0xf0>
1000059e4:     	add	x8, x8, #256
1000059e8:     	ldr	q0, [x8]
1000059ec:     	str	q0, [sp]
1000059f0:     	ldr	x8, [x8, #16]
1000059f4:     	str	x8, [sp, #16]
1000059f8:     	b	0x100005a50 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*)+0x94>
1000059fc:     	adrp	x8, 0x100038000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)>
100005a00:     	add	x8, x8, #256
100005a04:     	ldp	x20, x22, [x8]
100005a08:     	cmp	x22, #22
100005a0c:     	b.hi	0x100005a1c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*)+0x60>
100005a10:     	strb	w22, [sp, #23]
100005a14:     	mov	x0, sp
100005a18:     	b	0x100005a44 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*)+0x88>
100005a1c:     	mov	x8, #9223372036854775792
100005a20:     	cmp	x22, x8
100005a24:     	b.hs	0x100005aa4 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*)+0xe8>
100005a28:     	orr	x8, x22, #0xf
100005a2c:     	add	x21, x8, #1
100005a30:     	mov	x0, x21
100005a34:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100005a38:     	orr	x8, x21, #0x8000000000000000
100005a3c:     	stp	x22, x8, [sp, #8]
100005a40:     	str	x0, [sp]
100005a44:     	add	x2, x22, #1
100005a48:     	mov	x1, x20
100005a4c:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
100005a50:     	mov	x2, sp
100005a54:     	mov	x0, x19
100005a58:     	mov	x1, #0
100005a5c:     	bl	0x10000469c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)>
100005a60:     	mov	x19, x0
100005a64:     	ldrsb	w8, [sp, #23]
100005a68:     	tbnz	w8, #31, 0x100005a84 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*)+0xc8>
100005a6c:     	mov	x0, x19
100005a70:     	ldp	x29, x30, [sp, #64]
100005a74:     	ldp	x20, x19, [sp, #48]
100005a78:     	ldp	x22, x21, [sp, #32]
100005a7c:     	add	sp, sp, #80
100005a80:     	ret
100005a84:     	ldr	x0, [sp]
100005a88:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100005a8c:     	mov	x0, x19
100005a90:     	ldp	x29, x30, [sp, #64]
100005a94:     	ldp	x20, x19, [sp, #48]
100005a98:     	ldp	x22, x21, [sp, #32]
100005a9c:     	add	sp, sp, #80
100005aa0:     	ret
100005aa4:     	mov	x0, sp
100005aa8:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
100005aac:     	mov	x19, x0
100005ab0:     	ldrsb	w8, [sp, #23]
100005ab4:     	tbz	w8, #31, 0x100005ac0 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*)+0x104>
100005ab8:     	ldr	x0, [sp]
100005abc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100005ac0:     	mov	x0, x19
100005ac4:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100005ac8 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)>:
100005ac8:     	sub	sp, sp, #64
100005acc:     	stp	x20, x19, [sp, #32]
100005ad0:     	stp	x29, x30, [sp, #48]
100005ad4:     	add	x29, sp, #48
100005ad8:     	ldr	q0, [x1]
100005adc:     	str	q0, [sp]
100005ae0:     	ldr	x8, [x1, #16]
100005ae4:     	str	x8, [sp, #16]
100005ae8:     	stp	xzr, xzr, [x1, #8]
100005aec:     	str	xzr, [x1]
100005af0:     	mov	x2, sp
100005af4:     	mov	x1, #0
100005af8:     	bl	0x10000469c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)>
100005afc:     	mov	x19, x0
100005b00:     	ldrsb	w8, [sp, #23]
100005b04:     	tbnz	w8, #31, 0x100005b1c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x54>
100005b08:     	mov	x0, x19
100005b0c:     	ldp	x29, x30, [sp, #48]
100005b10:     	ldp	x20, x19, [sp, #32]
100005b14:     	add	sp, sp, #64
100005b18:     	ret
100005b1c:     	ldr	x0, [sp]
100005b20:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100005b24:     	mov	x0, x19
100005b28:     	ldp	x29, x30, [sp, #48]
100005b2c:     	ldp	x20, x19, [sp, #32]
100005b30:     	add	sp, sp, #64
100005b34:     	ret
100005b38:     	mov	x19, x0
100005b3c:     	ldrsb	w8, [sp, #23]
100005b40:     	tbz	w8, #31, 0x100005b4c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x84>
100005b44:     	ldr	x0, [sp]
100005b48:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100005b4c:     	mov	x0, x19
100005b50:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100005b54 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*)>:
100005b54:     	sub	sp, sp, #96
100005b58:     	stp	x24, x23, [sp, #32]
100005b5c:     	stp	x22, x21, [sp, #48]
100005b60:     	stp	x20, x19, [sp, #64]
100005b64:     	stp	x29, x30, [sp, #80]
100005b68:     	add	x29, sp, #80
100005b6c:     	mov	x19, x1
100005b70:     	mov	x20, x0
100005b74:     	adrp	x8, 0x100038000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*)+0xec>
100005b78:     	ldrsb	w8, [x8, #279]
100005b7c:     	tbnz	w8, #31, 0x100005b9c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*)+0x48>
100005b80:     	adrp	x8, 0x100038000 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*)+0xf8>
100005b84:     	add	x8, x8, #256
100005b88:     	ldr	q0, [x8]
100005b8c:     	str	q0, [sp]
100005b90:     	ldr	x8, [x8, #16]
100005b94:     	str	x8, [sp, #16]
100005b98:     	b	0x100005bf0 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*)+0x9c>
100005b9c:     	adrp	x8, 0x100038000 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::operator<<[abi:ue170006]<std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*)+0x14>
100005ba0:     	add	x8, x8, #256
100005ba4:     	ldp	x21, x23, [x8]
100005ba8:     	cmp	x23, #22
100005bac:     	b.hi	0x100005bbc <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*)+0x68>
100005bb0:     	strb	w23, [sp, #23]
100005bb4:     	mov	x0, sp
100005bb8:     	b	0x100005be4 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*)+0x90>
100005bbc:     	mov	x8, #9223372036854775792
100005bc0:     	cmp	x23, x8
100005bc4:     	b.hs	0x100005c30 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*)+0xdc>
100005bc8:     	orr	x8, x23, #0xf
100005bcc:     	add	x22, x8, #1
100005bd0:     	mov	x0, x22
100005bd4:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100005bd8:     	orr	x8, x22, #0x8000000000000000
100005bdc:     	stp	x23, x8, [sp, #8]
100005be0:     	str	x0, [sp]
100005be4:     	add	x2, x23, #1
100005be8:     	mov	x1, x21
100005bec:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
100005bf0:     	mov	x2, sp
100005bf4:     	mov	x0, x20
100005bf8:     	mov	x1, x19
100005bfc:     	bl	0x10000469c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)>
100005c00:     	mov	x19, x0
100005c04:     	ldrsb	w8, [sp, #23]
100005c08:     	tbz	w8, #31, 0x100005c14 <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*)+0xc0>
100005c0c:     	ldr	x0, [sp]
100005c10:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100005c14:     	mov	x0, x19
100005c18:     	ldp	x29, x30, [sp, #80]
100005c1c:     	ldp	x20, x19, [sp, #64]
100005c20:     	ldp	x22, x21, [sp, #48]
100005c24:     	ldp	x24, x23, [sp, #32]
100005c28:     	add	sp, sp, #96
100005c2c:     	ret
100005c30:     	mov	x0, sp
100005c34:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
100005c38:     	mov	x19, x0
100005c3c:     	ldrsb	w8, [sp, #23]
100005c40:     	tbz	w8, #31, 0x100005c4c <benchmark::RunSpecifiedBenchmarks(benchmark::BenchmarkReporter*, benchmark::BenchmarkReporter*)+0xf8>
100005c44:     	ldr	x0, [sp]
100005c48:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100005c4c:     	mov	x0, x19
100005c50:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100005c54 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::operator<<[abi:ue170006]<std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*)>:
100005c54:     	stp	x20, x19, [sp, #-32]!
100005c58:     	stp	x29, x30, [sp, #16]
100005c5c:     	add	x29, sp, #16
100005c60:     	mov	x19, x1
100005c64:     	mov	x20, x0
100005c68:     	mov	x0, x1
100005c6c:     	bl	0x10002f254 <_vsnprintf+0x10002f254>
100005c70:     	mov	x2, x0
100005c74:     	mov	x0, x20
100005c78:     	mov	x1, x19
100005c7c:     	ldp	x29, x30, [sp, #16]
100005c80:     	ldp	x20, x19, [sp], #32
100005c84:     	b	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>

0000000100005c88 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::endl[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&)>:
100005c88:     	sub	sp, sp, #48
100005c8c:     	stp	x20, x19, [sp, #16]
100005c90:     	stp	x29, x30, [sp, #32]
100005c94:     	add	x29, sp, #32
100005c98:     	mov	x19, x0
100005c9c:     	ldr	x8, [x0]
100005ca0:     	ldur	x8, [x8, #-24]
100005ca4:     	add	x0, x0, x8
100005ca8:     	add	x8, sp, #8
100005cac:     	bl	0x10002ecfc <_vsnprintf+0x10002ecfc>
100005cb0:     	adrp	x1, 0x100034000 <std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::~vector[abi:ue170006]()+0x38>
100005cb4:     	ldr	x1, [x1, #480]
100005cb8:     	add	x0, sp, #8
100005cbc:     	bl	0x10002ecf0 <_vsnprintf+0x10002ecf0>
100005cc0:     	ldr	x8, [x0]
100005cc4:     	ldr	x8, [x8, #56]
100005cc8:     	mov	w1, #10
100005ccc:     	blr	x8
100005cd0:     	mov	x20, x0
100005cd4:     	add	x0, sp, #8
100005cd8:     	bl	0x10002ef84 <_vsnprintf+0x10002ef84>
100005cdc:     	mov	x0, x19
100005ce0:     	mov	x1, x20
100005ce4:     	bl	0x10002edd4 <_vsnprintf+0x10002edd4>
100005ce8:     	mov	x0, x19
100005cec:     	bl	0x10002ede0 <_vsnprintf+0x10002ede0>
100005cf0:     	mov	x0, x19
100005cf4:     	ldp	x29, x30, [sp, #32]
100005cf8:     	ldp	x20, x19, [sp, #16]
100005cfc:     	add	sp, sp, #48
100005d00:     	ret
100005d04:     	mov	x19, x0
100005d08:     	add	x0, sp, #8
100005d0c:     	bl	0x10002ef84 <_vsnprintf+0x10002ef84>
100005d10:     	mov	x0, x19
100005d14:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100005d18 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::operator<<[abi:ue170006]<char, std::__1::char_traits<char>, std::__1::allocator<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>:
100005d18:     	ldrb	w8, [x1, #23]
100005d1c:     	sxtb	w9, w8
100005d20:     	ldp	x10, x11, [x1]
100005d24:     	cmp	w9, #0
100005d28:     	csel	x1, x10, x1, lt
100005d2c:     	csel	x2, x11, x8, lt
100005d30:     	b	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>

0000000100005d34 <std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::~vector[abi:ue170006]()>:
100005d34:     	stp	x22, x21, [sp, #-48]!
100005d38:     	stp	x20, x19, [sp, #16]
100005d3c:     	stp	x29, x30, [sp, #32]
100005d40:     	add	x29, sp, #32
100005d44:     	mov	x19, x0
100005d48:     	ldr	x22, [x0]
100005d4c:     	cbz	x22, 0x100005d94 <std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::~vector[abi:ue170006]()+0x60>
100005d50:     	ldr	x8, [x19, #8]
100005d54:     	mov	x0, x22
100005d58:     	cmp	x8, x22
100005d5c:     	b.eq	0x100005d8c <std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::~vector[abi:ue170006]()+0x58>
100005d60:     	sub	x20, x8, #88
100005d64:     	sub	x21, x20, #248
100005d68:     	ldr	x1, [x20, #8]
100005d6c:     	mov	x0, x20
100005d70:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
100005d74:     	mov	x0, x21
100005d78:     	bl	0x1000090c8 <benchmark::BenchmarkName::~BenchmarkName()>
100005d7c:     	sub	x20, x20, #336
100005d80:     	cmp	x21, x22
100005d84:     	b.ne	0x100005d64 <std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::~vector[abi:ue170006]()+0x30>
100005d88:     	ldr	x0, [x19]
100005d8c:     	str	x22, [x19, #8]
100005d90:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100005d94:     	mov	x0, x19
100005d98:     	ldp	x29, x30, [sp, #32]
100005d9c:     	ldp	x20, x19, [sp, #16]
100005da0:     	ldp	x22, x21, [sp], #48
100005da4:     	ret

0000000100005da8 <std::__1::basic_ofstream<char, std::__1::char_traits<char>>::~basic_ofstream()>:
100005da8:     	stp	x20, x19, [sp, #-32]!
100005dac:     	stp	x29, x30, [sp, #16]
100005db0:     	add	x29, sp, #16
100005db4:     	mov	x19, x0
100005db8:     	adrp	x20, 0x100034000 <benchmark::GetBenchmarkFilter()+0x5c>
100005dbc:     	ldr	x20, [x20, #696]
100005dc0:     	ldr	x8, [x20]
100005dc4:     	str	x8, [x0]
100005dc8:     	ldr	x9, [x20, #24]
100005dcc:     	ldur	x8, [x8, #-24]
100005dd0:     	str	x9, [x0, x8]
100005dd4:     	add	x0, x0, #8
100005dd8:     	bl	0x10002edb0 <_vsnprintf+0x10002edb0>
100005ddc:     	add	x1, x20, #8
100005de0:     	mov	x0, x19
100005de4:     	bl	0x10002ee04 <_vsnprintf+0x10002ee04>
100005de8:     	add	x0, x19, #416
100005dec:     	bl	0x10002efe4 <_vsnprintf+0x10002efe4>
100005df0:     	mov	x0, x19
100005df4:     	ldp	x29, x30, [sp, #16]
100005df8:     	ldp	x20, x19, [sp], #32
100005dfc:     	ret

0000000100005e00 <benchmark::GetDefaultTimeUnit()>:
100005e00:     	adrp	x8, 0x100038000 <benchmark::SetBenchmarkFilter(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)>
100005e04:     	ldr	w0, [x8, #48]
100005e08:     	ret

0000000100005e0c <benchmark::SetDefaultTimeUnit(benchmark::TimeUnit)>:
100005e0c:     	adrp	x8, 0x100038000 <benchmark::SetBenchmarkFilter(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xc>
100005e10:     	str	w0, [x8, #48]
100005e14:     	ret

0000000100005e18 <benchmark::GetBenchmarkFilter()>:
100005e18:     	stp	x22, x21, [sp, #-48]!
100005e1c:     	stp	x20, x19, [sp, #16]
100005e20:     	stp	x29, x30, [sp, #32]
100005e24:     	add	x29, sp, #32
100005e28:     	mov	x19, x8
100005e2c:     	adrp	x8, 0x100038000 <benchmark::SetBenchmarkFilter(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x2c>
100005e30:     	ldrsb	w8, [x8, #279]
100005e34:     	tbnz	w8, #31, 0x100005e60 <benchmark::GetBenchmarkFilter()+0x48>
100005e38:     	adrp	x8, 0x100038000 <benchmark::SetBenchmarkFilter(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x38>
100005e3c:     	add	x8, x8, #256
100005e40:     	ldr	q0, [x8]
100005e44:     	str	q0, [x19]
100005e48:     	ldr	x8, [x8, #16]
100005e4c:     	str	x8, [x19, #16]
100005e50:     	ldp	x29, x30, [sp, #32]
100005e54:     	ldp	x20, x19, [sp, #16]
100005e58:     	ldp	x22, x21, [sp], #48
100005e5c:     	ret
100005e60:     	adrp	x8, 0x100038000 <benchmark::RegisterMemoryManager(benchmark::MemoryManager*)>
100005e64:     	add	x8, x8, #256
100005e68:     	ldp	x20, x22, [x8]
100005e6c:     	cmp	x22, #22
100005e70:     	b.hi	0x100005e7c <benchmark::GetBenchmarkFilter()+0x64>
100005e74:     	strb	w22, [x19, #23]
100005e78:     	b	0x100005ea8 <benchmark::GetBenchmarkFilter()+0x90>
100005e7c:     	mov	x8, #9223372036854775792
100005e80:     	cmp	x22, x8
100005e84:     	b.hs	0x100005ec4 <benchmark::GetBenchmarkFilter()+0xac>
100005e88:     	orr	x8, x22, #0xf
100005e8c:     	add	x21, x8, #1
100005e90:     	mov	x0, x21
100005e94:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100005e98:     	orr	x8, x21, #0x8000000000000000
100005e9c:     	stp	x22, x8, [x19, #8]
100005ea0:     	str	x0, [x19]
100005ea4:     	mov	x19, x0
100005ea8:     	add	x2, x22, #1
100005eac:     	mov	x0, x19
100005eb0:     	mov	x1, x20
100005eb4:     	ldp	x29, x30, [sp, #32]
100005eb8:     	ldp	x20, x19, [sp, #16]
100005ebc:     	ldp	x22, x21, [sp], #48
100005ec0:     	b	0x10002f1d0 <_vsnprintf+0x10002f1d0>
100005ec4:     	mov	x0, x19
100005ec8:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>

0000000100005ecc <benchmark::SetBenchmarkFilter(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)>:
100005ecc:     	stp	x20, x19, [sp, #-32]!
100005ed0:     	stp	x29, x30, [sp, #16]
100005ed4:     	add	x29, sp, #16
100005ed8:     	mov	x19, x0
100005edc:     	adrp	x8, 0x100038000 <benchmark::AddCustomContext(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x6c>
100005ee0:     	ldrsb	w8, [x8, #279]
100005ee4:     	tbz	w8, #31, 0x100005ef4 <benchmark::SetBenchmarkFilter(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x28>
100005ee8:     	adrp	x8, 0x100038000 <benchmark::AddCustomContext(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x78>
100005eec:     	ldr	x0, [x8, #256]
100005ef0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100005ef4:     	ldr	q0, [x19]
100005ef8:     	ldr	x8, [x19, #16]
100005efc:     	adrp	x9, 0x100038000 <benchmark::AddCustomContext(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x8c>
100005f00:     	add	x9, x9, #256
100005f04:     	str	x8, [x9, #16]
100005f08:     	str	q0, [x9]
100005f0c:     	strb	wzr, [x19, #23]
100005f10:     	strb	wzr, [x19]
100005f14:     	ldp	x29, x30, [sp, #16]
100005f18:     	ldp	x20, x19, [sp], #32
100005f1c:     	ret

0000000100005f20 <benchmark::GetBenchmarkVerbosity()>:
100005f20:     	adrp	x8, 0x100038000 <benchmark::AddCustomContext(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xb0>
100005f24:     	ldr	w0, [x8, #496]
100005f28:     	ret

0000000100005f2c <benchmark::RegisterMemoryManager(benchmark::MemoryManager*)>:
100005f2c:     	adrp	x8, 0x100038000 <benchmark::AddCustomContext(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xbc>
100005f30:     	add	x8, x8, #520
100005f34:     	str	x0, [x8]
100005f38:     	ret

0000000100005f3c <benchmark::AddCustomContext(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>:
100005f3c:     	stp	x22, x21, [sp, #-48]!
100005f40:     	stp	x20, x19, [sp, #16]
100005f44:     	stp	x29, x30, [sp, #32]
100005f48:     	add	x29, sp, #32
100005f4c:     	mov	x19, x1
100005f50:     	mov	x20, x0
100005f54:     	adrp	x21, 0x100038000 <benchmark::AddCustomContext(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xe4>
100005f58:     	ldr	x0, [x21, #504]
100005f5c:     	cbz	x0, 0x100006000 <benchmark::AddCustomContext(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xc4>
100005f60:     	mov	x1, x20
100005f64:     	mov	x2, x20
100005f68:     	mov	x3, x19
100005f6c:     	bl	0x10000a7c8 <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
100005f70:     	tbnz	w1, #0, 0x100006030 <benchmark::AddCustomContext(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xf4>
100005f74:     	adrp	x0, 0x100034000 <benchmark::AddCustomContext(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xf4>
100005f78:     	ldr	x0, [x0, #456]
100005f7c:     	adrp	x1, 0x100031000 <benchmark::AddCustomContext(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xf0>
100005f80:     	add	x1, x1, #2525
100005f84:     	mov	w2, #30
100005f88:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100005f8c:     	ldrb	w8, [x20, #23]
100005f90:     	sxtb	w9, w8
100005f94:     	ldp	x10, x11, [x20]
100005f98:     	cmp	w9, #0
100005f9c:     	csel	x1, x10, x20, lt
100005fa0:     	csel	x2, x11, x8, lt
100005fa4:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100005fa8:     	adrp	x1, 0x100031000 <benchmark::internal::PrintUsageAndExit()+0x18>
100005fac:     	add	x1, x1, #2556
100005fb0:     	mov	w2, #16
100005fb4:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100005fb8:     	adrp	x1, 0x100031000 <benchmark::internal::SetDefaultTimeUnitFromFlag(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xc>
100005fbc:     	add	x1, x1, #2573
100005fc0:     	mov	w2, #19
100005fc4:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100005fc8:     	ldrb	w8, [x19, #23]
100005fcc:     	sxtb	w9, w8
100005fd0:     	ldp	x10, x11, [x19]
100005fd4:     	cmp	w9, #0
100005fd8:     	csel	x1, x10, x19, lt
100005fdc:     	csel	x2, x11, x8, lt
100005fe0:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100005fe4:     	adrp	x1, 0x100031000 <benchmark::internal::SetDefaultTimeUnitFromFlag(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x38>
100005fe8:     	add	x1, x1, #2593
100005fec:     	mov	w2, #2
100005ff0:     	ldp	x29, x30, [sp, #32]
100005ff4:     	ldp	x20, x19, [sp, #16]
100005ff8:     	ldp	x22, x21, [sp], #48
100005ffc:     	b	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100006000:     	mov	w0, #24
100006004:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100006008:     	str	xzr, [x0, #16]
10000600c:     	mov	x8, x0
100006010:     	str	xzr, [x8, #8]!
100006014:     	str	x8, [x0]
100006018:     	str	x0, [x21, #504]
10000601c:     	mov	x1, x20
100006020:     	mov	x2, x20
100006024:     	mov	x3, x19
100006028:     	bl	0x10000a7c8 <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
10000602c:     	tbz	w1, #0, 0x100005f74 <benchmark::AddCustomContext(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x38>
100006030:     	ldp	x29, x30, [sp, #32]
100006034:     	ldp	x20, x19, [sp, #16]
100006038:     	ldp	x22, x21, [sp], #48
10000603c:     	ret

0000000100006040 <benchmark::internal::PrintUsageAndExit()>:
100006040:     	stp	x29, x30, [sp, #-16]!
100006044:     	mov	x29, sp
100006048:     	adrp	x8, 0x100038000 <benchmark::internal::SetDefaultTimeUnitFromFlag(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xb4>
10000604c:     	ldr	x8, [x8, #512]
100006050:     	blr	x8
100006054:     	mov	w0, #0
100006058:     	bl	0x10002f104 <_vsnprintf+0x10002f104>

000000010000605c <benchmark::internal::SetDefaultTimeUnitFromFlag(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>:
10000605c:     	stp	x29, x30, [sp, #-16]!
100006060:     	mov	x29, sp
100006064:     	ldrsb	w8, [x0, #23]
100006068:     	tbnz	w8, #31, 0x1000060cc <benchmark::internal::SetDefaultTimeUnitFromFlag(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x70>
10000606c:     	and	w9, w8, #0xff
100006070:     	cmp	w9, #1
100006074:     	b.eq	0x100006144 <benchmark::internal::SetDefaultTimeUnitFromFlag(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xe8>
100006078:     	cmp	w9, #2
10000607c:     	b.ne	0x100006164 <benchmark::internal::SetDefaultTimeUnitFromFlag(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x108>
100006080:     	ldrh	w10, [x0]
100006084:     	mov	w11, #29549
100006088:     	cmp	w10, w11
10000608c:     	b.eq	0x100006174 <benchmark::internal::SetDefaultTimeUnitFromFlag(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x118>
100006090:     	ldrh	w10, [x0]
100006094:     	mov	w11, #29557
100006098:     	cmp	w10, w11
10000609c:     	b.eq	0x100006188 <benchmark::internal::SetDefaultTimeUnitFromFlag(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x12c>
1000060a0:     	cmp	w9, #2
1000060a4:     	b.ne	0x100006164 <benchmark::internal::SetDefaultTimeUnitFromFlag(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x108>
1000060a8:     	ldrh	w9, [x0]
1000060ac:     	mov	w10, #29550
1000060b0:     	cmp	w9, w10
1000060b4:     	b.ne	0x100006164 <benchmark::internal::SetDefaultTimeUnitFromFlag(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x108>
1000060b8:     	mov	w8, #0
1000060bc:     	adrp	x9, 0x100038000 <benchmark::internal::SetDefaultTimeUnitFromFlag(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x128>
1000060c0:     	str	w8, [x9, #48]
1000060c4:     	ldp	x29, x30, [sp], #16
1000060c8:     	ret
1000060cc:     	ldr	x8, [x0, #8]
1000060d0:     	cmp	x8, #1
1000060d4:     	b.ne	0x1000060e8 <benchmark::internal::SetDefaultTimeUnitFromFlag(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x8c>
1000060d8:     	ldr	x9, [x0]
1000060dc:     	ldrb	w9, [x9]
1000060e0:     	cmp	w9, #115
1000060e4:     	b.eq	0x100006150 <benchmark::internal::SetDefaultTimeUnitFromFlag(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xf4>
1000060e8:     	cmp	x8, #2
1000060ec:     	b.ne	0x100006168 <benchmark::internal::SetDefaultTimeUnitFromFlag(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x10c>
1000060f0:     	ldr	x9, [x0]
1000060f4:     	ldrh	w8, [x9]
1000060f8:     	mov	w10, #29549
1000060fc:     	cmp	w8, w10
100006100:     	b.eq	0x100006174 <benchmark::internal::SetDefaultTimeUnitFromFlag(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x118>
100006104:     	ldr	x8, [x0, #8]
100006108:     	cmp	x8, #2
10000610c:     	b.ne	0x100006168 <benchmark::internal::SetDefaultTimeUnitFromFlag(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x10c>
100006110:     	ldrh	w8, [x9]
100006114:     	mov	w10, #29557
100006118:     	cmp	w8, w10
10000611c:     	b.eq	0x100006188 <benchmark::internal::SetDefaultTimeUnitFromFlag(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x12c>
100006120:     	ldrh	w8, [x9]
100006124:     	mov	w9, #29550
100006128:     	cmp	w8, w9
10000612c:     	b.ne	0x10000619c <benchmark::internal::SetDefaultTimeUnitFromFlag(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x140>
100006130:     	mov	w8, #0
100006134:     	adrp	x9, 0x100038000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x4c>
100006138:     	str	w8, [x9, #48]
10000613c:     	ldp	x29, x30, [sp], #16
100006140:     	ret
100006144:     	ldrb	w9, [x0]
100006148:     	cmp	w9, #115
10000614c:     	b.ne	0x100006164 <benchmark::internal::SetDefaultTimeUnitFromFlag(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x108>
100006150:     	mov	w8, #3
100006154:     	adrp	x9, 0x100038000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x6c>
100006158:     	str	w8, [x9, #48]
10000615c:     	ldp	x29, x30, [sp], #16
100006160:     	ret
100006164:     	and	x8, x8, #0xff
100006168:     	cbnz	x8, 0x10000619c <benchmark::internal::SetDefaultTimeUnitFromFlag(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x140>
10000616c:     	ldp	x29, x30, [sp], #16
100006170:     	ret
100006174:     	mov	w8, #2
100006178:     	adrp	x9, 0x100038000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x90>
10000617c:     	str	w8, [x9, #48]
100006180:     	ldp	x29, x30, [sp], #16
100006184:     	ret
100006188:     	mov	w8, #1
10000618c:     	adrp	x9, 0x100038000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0xa4>
100006190:     	str	w8, [x9, #48]
100006194:     	ldp	x29, x30, [sp], #16
100006198:     	ret
10000619c:     	adrp	x8, 0x100038000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0xb4>
1000061a0:     	ldr	x8, [x8, #512]
1000061a4:     	blr	x8
1000061a8:     	mov	w0, #0
1000061ac:     	bl	0x10002f104 <_vsnprintf+0x10002f104>

00000001000061b0 <benchmark::internal::ParseCommandLineFlags(int*, char**)>:
1000061b0:     	stp	x28, x27, [sp, #-96]!
1000061b4:     	stp	x26, x25, [sp, #16]
1000061b8:     	stp	x24, x23, [sp, #32]
1000061bc:     	stp	x22, x21, [sp, #48]
1000061c0:     	stp	x20, x19, [sp, #64]
1000061c4:     	stp	x29, x30, [sp, #80]
1000061c8:     	add	x29, sp, #80
1000061cc:     	adrp	x8, 0x100038000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0xe4>
1000061d0:     	add	x8, x8, #528
1000061d4:     	cbz	x0, 0x100006204 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x54>
1000061d8:     	mov	x19, x1
1000061dc:     	mov	x20, x0
1000061e0:     	ldr	w9, [x0]
1000061e4:     	cmp	w9, #1
1000061e8:     	b.lt	0x100006214 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x64>
1000061ec:     	ldr	x9, [x19]
1000061f0:     	str	x9, [x8]
1000061f4:     	ldr	w8, [x20]
1000061f8:     	cmp	w8, #1
1000061fc:     	b.gt	0x10000622c <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x7c>
100006200:     	b	0x1000064dc <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x32c>
100006204:     	adrp	x9, 0x100031000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x100>
100006208:     	add	x9, x9, #2605
10000620c:     	str	x9, [x8]
100006210:     	b	0x1000064dc <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x32c>
100006214:     	adrp	x9, 0x100031000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x110>
100006218:     	add	x9, x9, #2605
10000621c:     	str	x9, [x8]
100006220:     	ldr	w8, [x20]
100006224:     	cmp	w8, #1
100006228:     	b.le	0x1000064dc <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x32c>
10000622c:     	add	x27, x19, #32
100006230:     	add	x28, x19, #8
100006234:     	mov	w25, #1
100006238:     	adrp	x21, 0x100031000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x134>
10000623c:     	add	x21, x21, #1867
100006240:     	adrp	x22, 0x100038000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x158>
100006244:     	add	x22, x22, #248
100006248:     	adrp	x23, 0x100031000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x144>
10000624c:     	add	x23, x23, #1888
100006250:     	adrp	x24, 0x100038000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x168>
100006254:     	add	x24, x24, #256
100006258:     	sxtw	x26, w25
10000625c:     	ldr	x0, [x19, w25, sxtw #3]
100006260:     	mov	x1, x21
100006264:     	mov	x2, x22
100006268:     	bl	0x1000219e4 <benchmark::ParseBoolFlag(char const*, char const*, bool*)>
10000626c:     	tbnz	w0, #0, 0x100006428 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x278>
100006270:     	ldr	x0, [x19, x26, lsl #3]
100006274:     	mov	x1, x23
100006278:     	mov	x2, x24
10000627c:     	bl	0x100021d6c <benchmark::ParseStringFlag(char const*, char const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)>
100006280:     	tbnz	w0, #0, 0x100006428 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x278>
100006284:     	ldr	x0, [x19, x26, lsl #3]
100006288:     	adrp	x1, 0x100031000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x184>
10000628c:     	add	x1, x1, #1906
100006290:     	adrp	x2, 0x100038000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x1a8>
100006294:     	add	x2, x2, #280
100006298:     	bl	0x100021d6c <benchmark::ParseStringFlag(char const*, char const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)>
10000629c:     	tbnz	w0, #0, 0x100006428 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x278>
1000062a0:     	ldr	x0, [x19, x26, lsl #3]
1000062a4:     	adrp	x1, 0x100031000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x1a0>
1000062a8:     	add	x1, x1, #1925
1000062ac:     	adrp	x2, 0x100038000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x1c4>
1000062b0:     	add	x2, x2, #304
1000062b4:     	bl	0x100021c20 <benchmark::ParseDoubleFlag(char const*, char const*, double*)>
1000062b8:     	tbnz	w0, #0, 0x100006428 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x278>
1000062bc:     	ldr	x0, [x19, x26, lsl #3]
1000062c0:     	adrp	x1, 0x100031000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x1bc>
1000062c4:     	add	x1, x1, #1951
1000062c8:     	adrp	x2, 0x100038000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x1e0>
1000062cc:     	add	x2, x2, #312
1000062d0:     	bl	0x100021ad4 <benchmark::ParseInt32Flag(char const*, char const*, int*)>
1000062d4:     	tbnz	w0, #0, 0x100006428 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x278>
1000062d8:     	ldr	x0, [x19, x26, lsl #3]
1000062dc:     	adrp	x1, 0x100031000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x1d8>
1000062e0:     	add	x1, x1, #1973
1000062e4:     	adrp	x2, 0x100038000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x1fc>
1000062e8:     	add	x2, x2, #316
1000062ec:     	bl	0x1000219e4 <benchmark::ParseBoolFlag(char const*, char const*, bool*)>
1000062f0:     	tbnz	w0, #0, 0x100006428 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x278>
1000062f4:     	ldr	x0, [x19, x26, lsl #3]
1000062f8:     	adrp	x1, 0x100031000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x1f4>
1000062fc:     	add	x1, x1, #2010
100006300:     	adrp	x2, 0x100038000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x218>
100006304:     	add	x2, x2, #317
100006308:     	bl	0x1000219e4 <benchmark::ParseBoolFlag(char const*, char const*, bool*)>
10000630c:     	tbnz	w0, #0, 0x100006428 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x278>
100006310:     	ldr	x0, [x19, x26, lsl #3]
100006314:     	adrp	x1, 0x100031000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x210>
100006318:     	add	x1, x1, #2043
10000631c:     	adrp	x2, 0x100038000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x234>
100006320:     	add	x2, x2, #318
100006324:     	bl	0x1000219e4 <benchmark::ParseBoolFlag(char const*, char const*, bool*)>
100006328:     	tbnz	w0, #0, 0x100006428 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x278>
10000632c:     	ldr	x0, [x19, x26, lsl #3]
100006330:     	adrp	x1, 0x100031000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x22c>
100006334:     	add	x1, x1, #2077
100006338:     	adrp	x2, 0x100038000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x250>
10000633c:     	add	x2, x2, #320
100006340:     	bl	0x100021d6c <benchmark::ParseStringFlag(char const*, char const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)>
100006344:     	tbnz	w0, #0, 0x100006428 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x278>
100006348:     	ldr	x0, [x19, x26, lsl #3]
10000634c:     	adrp	x1, 0x100031000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x248>
100006350:     	add	x1, x1, #2128
100006354:     	adrp	x2, 0x100038000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x26c>
100006358:     	add	x2, x2, #368
10000635c:     	bl	0x100021d6c <benchmark::ParseStringFlag(char const*, char const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)>
100006360:     	tbnz	w0, #0, 0x100006428 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x278>
100006364:     	ldr	x0, [x19, x26, lsl #3]
100006368:     	adrp	x1, 0x100031000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x264>
10000636c:     	add	x1, x1, #2102
100006370:     	adrp	x2, 0x100038000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x288>
100006374:     	add	x2, x2, #344
100006378:     	bl	0x100021d6c <benchmark::ParseStringFlag(char const*, char const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)>
10000637c:     	tbnz	w0, #0, 0x100006428 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x278>
100006380:     	ldr	x0, [x19, x26, lsl #3]
100006384:     	adrp	x1, 0x100031000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x280>
100006388:     	add	x1, x1, #2142
10000638c:     	adrp	x2, 0x100038000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x2a4>
100006390:     	add	x2, x2, #392
100006394:     	bl	0x100021d6c <benchmark::ParseStringFlag(char const*, char const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)>
100006398:     	tbnz	w0, #0, 0x100006428 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x278>
10000639c:     	ldr	x0, [x19, x26, lsl #3]
1000063a0:     	adrp	x1, 0x100031000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x29c>
1000063a4:     	add	x1, x1, #2163
1000063a8:     	adrp	x2, 0x100038000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x2c0>
1000063ac:     	add	x2, x2, #416
1000063b0:     	bl	0x1000219e4 <benchmark::ParseBoolFlag(char const*, char const*, bool*)>
1000063b4:     	tbnz	w0, #0, 0x100006428 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x278>
1000063b8:     	ldr	x0, [x19, x26, lsl #3]
1000063bc:     	adrp	x1, 0x100031000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x2b8>
1000063c0:     	add	x1, x1, #2190
1000063c4:     	adrp	x2, 0x100038000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x2dc>
1000063c8:     	add	x2, x2, #424
1000063cc:     	bl	0x100021d6c <benchmark::ParseStringFlag(char const*, char const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)>
1000063d0:     	tbnz	w0, #0, 0x100006428 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x278>
1000063d4:     	ldr	x0, [x19, x26, lsl #3]
1000063d8:     	adrp	x1, 0x100031000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x2d4>
1000063dc:     	add	x1, x1, #2214
1000063e0:     	adrp	x2, 0x100038000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x2f8>
1000063e4:     	add	x2, x2, #448
1000063e8:     	bl	0x100021dac <benchmark::ParseKeyValueFlag(char const*, char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>*)>
1000063ec:     	tbnz	w0, #0, 0x100006428 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x278>
1000063f0:     	ldr	x0, [x19, x26, lsl #3]
1000063f4:     	adrp	x1, 0x100031000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x2f0>
1000063f8:     	add	x1, x1, #2232
1000063fc:     	adrp	x2, 0x100038000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x314>
100006400:     	add	x2, x2, #472
100006404:     	bl	0x100021d6c <benchmark::ParseStringFlag(char const*, char const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)>
100006408:     	tbnz	w0, #0, 0x100006428 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x278>
10000640c:     	ldr	x0, [x19, x26, lsl #3]
100006410:     	adrp	x1, 0x100031000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x30c>
100006414:     	add	x1, x1, #2252
100006418:     	adrp	x2, 0x100038000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x330>
10000641c:     	add	x2, x2, #496
100006420:     	bl	0x100021ad4 <benchmark::ParseInt32Flag(char const*, char const*, int*)>
100006424:     	cbz	w0, 0x1000064c4 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x314>
100006428:     	ldr	w9, [x20]
10000642c:     	sub	w8, w9, #1
100006430:     	cmp	w25, w8
100006434:     	b.eq	0x1000064a8 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x2f8>
100006438:     	sub	w10, w9, w25
10000643c:     	sub	w10, w10, #2
100006440:     	cmp	w10, #7
100006444:     	b.lo	0x100006488 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x2d8>
100006448:     	add	x10, x10, #1
10000644c:     	and	x11, x10, #0x1fffffff8
100006450:     	add	x12, x11, x26
100006454:     	add	x13, x27, x26, lsl #3
100006458:     	mov	x14, x11
10000645c:     	ldur	q0, [x13, #-24]
100006460:     	ldur	q1, [x13, #-8]
100006464:     	ldur	q2, [x13, #8]
100006468:     	ldur	q3, [x13, #24]
10000646c:     	stp	q0, q1, [x13, #-32]
100006470:     	stp	q2, q3, [x13], #64
100006474:     	subs	x14, x14, #8
100006478:     	b.ne	0x10000645c <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x2ac>
10000647c:     	mov	x26, x12
100006480:     	cmp	x10, x11
100006484:     	b.eq	0x1000064a8 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x2f8>
100006488:     	add	x10, x28, x26, lsl #3
10000648c:     	mvn	w11, w26
100006490:     	add	w9, w11, w9
100006494:     	ldr	x11, [x10]
100006498:     	stur	x11, [x10, #-8]
10000649c:     	add	x10, x10, #8
1000064a0:     	subs	w9, w9, #1
1000064a4:     	b.ne	0x100006494 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x2e4>
1000064a8:     	str	w8, [x20]
1000064ac:     	sub	w25, w25, #1
1000064b0:     	add	w25, w25, #1
1000064b4:     	ldr	w8, [x20]
1000064b8:     	cmp	w25, w8
1000064bc:     	b.lt	0x100006258 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0xa8>
1000064c0:     	b	0x1000064dc <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x32c>
1000064c4:     	ldr	x0, [x19, x26, lsl #3]
1000064c8:     	adrp	x1, 0x100031000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x3c4>
1000064cc:     	add	x1, x1, #2613
1000064d0:     	bl	0x100022008 <benchmark::IsFlag(char const*, char const*)>
1000064d4:     	cbz	w0, 0x1000064b0 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x300>
1000064d8:     	b	0x1000067a4 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x5f4>
1000064dc:     	adrp	x8, 0x100038000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x3f4>
1000064e0:     	ldrsb	w8, [x8, #343]
1000064e4:     	tbnz	w8, #31, 0x10000652c <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x37c>
1000064e8:     	and	w9, w8, #0xff
1000064ec:     	adrp	x8, 0x100038000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x404>
1000064f0:     	add	x8, x8, #320
1000064f4:     	cmp	w9, #3
1000064f8:     	b.eq	0x1000065ac <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x3fc>
1000064fc:     	cmp	w9, #4
100006500:     	b.eq	0x1000065d0 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x420>
100006504:     	cmp	w9, #7
100006508:     	b.ne	0x1000067a4 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x5f4>
10000650c:     	ldr	w9, [x8]
100006510:     	mov	w10, #28515
100006514:     	movk	w10, #29550, lsl #16
100006518:     	eor	w9, w9, w10
10000651c:     	ldur	w8, [x8, #3]
100006520:     	mov	w10, #28531
100006524:     	movk	w10, #25964, lsl #16
100006528:     	b	0x1000065c0 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x410>
10000652c:     	adrp	x8, 0x100038000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x444>
100006530:     	ldr	x9, [x8, #328]
100006534:     	cmp	x9, #4
100006538:     	b.eq	0x10000657c <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x3cc>
10000653c:     	cmp	x9, #7
100006540:     	b.ne	0x10000659c <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x3ec>
100006544:     	adrp	x10, 0x100038000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x45c>
100006548:     	ldr	x10, [x10, #320]
10000654c:     	ldr	w11, [x10]
100006550:     	mov	w12, #28515
100006554:     	movk	w12, #29550, lsl #16
100006558:     	eor	w11, w11, w12
10000655c:     	ldur	w10, [x10, #3]
100006560:     	mov	w12, #28531
100006564:     	movk	w12, #25964, lsl #16
100006568:     	eor	w10, w10, w12
10000656c:     	orr	w10, w11, w10
100006570:     	cbz	w10, 0x1000065e8 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x438>
100006574:     	cmp	x9, #4
100006578:     	b.ne	0x10000659c <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x3ec>
10000657c:     	adrp	x9, 0x100038000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x494>
100006580:     	ldr	x9, [x9, #320]
100006584:     	ldr	w9, [x9]
100006588:     	mov	w10, #29546
10000658c:     	movk	w10, #28271, lsl #16
100006590:     	cmp	w9, w10
100006594:     	b.eq	0x1000065e8 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x438>
100006598:     	ldr	x9, [x8, #328]
10000659c:     	cmp	x9, #3
1000065a0:     	b.ne	0x1000067a4 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x5f4>
1000065a4:     	adrp	x8, 0x100038000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x4bc>
1000065a8:     	ldr	x8, [x8, #320]
1000065ac:     	ldrh	w9, [x8]
1000065b0:     	mov	w10, #29539
1000065b4:     	eor	w9, w9, w10
1000065b8:     	ldrb	w8, [x8, #2]
1000065bc:     	mov	w10, #118
1000065c0:     	eor	w8, w8, w10
1000065c4:     	orr	w8, w9, w8
1000065c8:     	cbz	w8, 0x1000065e8 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x438>
1000065cc:     	b	0x1000067a4 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x5f4>
1000065d0:     	adrp	x8, 0x100038000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x4e8>
1000065d4:     	ldr	w8, [x8, #320]
1000065d8:     	mov	w9, #29546
1000065dc:     	movk	w9, #28271, lsl #16
1000065e0:     	cmp	w8, w9
1000065e4:     	b.ne	0x1000067a4 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x5f4>
1000065e8:     	adrp	x8, 0x100038000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x500>
1000065ec:     	ldrsb	w8, [x8, #367]
1000065f0:     	tbnz	w8, #31, 0x100006638 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x488>
1000065f4:     	and	w9, w8, #0xff
1000065f8:     	adrp	x8, 0x100038000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x510>
1000065fc:     	add	x8, x8, #344
100006600:     	cmp	w9, #3
100006604:     	b.eq	0x1000066b8 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x508>
100006608:     	cmp	w9, #4
10000660c:     	b.eq	0x1000066dc <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x52c>
100006610:     	cmp	w9, #7
100006614:     	b.ne	0x1000067a4 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x5f4>
100006618:     	ldr	w9, [x8]
10000661c:     	mov	w10, #28515
100006620:     	movk	w10, #29550, lsl #16
100006624:     	eor	w9, w9, w10
100006628:     	ldur	w8, [x8, #3]
10000662c:     	mov	w10, #28531
100006630:     	movk	w10, #25964, lsl #16
100006634:     	b	0x1000066cc <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x51c>
100006638:     	adrp	x8, 0x100038000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x550>
10000663c:     	ldr	x9, [x8, #352]
100006640:     	cmp	x9, #4
100006644:     	b.eq	0x100006688 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x4d8>
100006648:     	cmp	x9, #7
10000664c:     	b.ne	0x1000066a8 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x4f8>
100006650:     	adrp	x10, 0x100038000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x568>
100006654:     	ldr	x10, [x10, #344]
100006658:     	ldr	w11, [x10]
10000665c:     	mov	w12, #28515
100006660:     	movk	w12, #29550, lsl #16
100006664:     	eor	w11, w11, w12
100006668:     	ldur	w10, [x10, #3]
10000666c:     	mov	w12, #28531
100006670:     	movk	w12, #25964, lsl #16
100006674:     	eor	w10, w10, w12
100006678:     	orr	w10, w11, w10
10000667c:     	cbz	w10, 0x1000066f4 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x544>
100006680:     	cmp	x9, #4
100006684:     	b.ne	0x1000066a8 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x4f8>
100006688:     	adrp	x9, 0x100038000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x5a0>
10000668c:     	ldr	x9, [x9, #344]
100006690:     	ldr	w9, [x9]
100006694:     	mov	w10, #29546
100006698:     	movk	w10, #28271, lsl #16
10000669c:     	cmp	w9, w10
1000066a0:     	b.eq	0x1000066f4 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x544>
1000066a4:     	ldr	x9, [x8, #352]
1000066a8:     	cmp	x9, #3
1000066ac:     	b.ne	0x1000067a4 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x5f4>
1000066b0:     	adrp	x8, 0x100038000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x5c8>
1000066b4:     	ldr	x8, [x8, #344]
1000066b8:     	ldrh	w9, [x8]
1000066bc:     	mov	w10, #29539
1000066c0:     	eor	w9, w9, w10
1000066c4:     	ldrb	w8, [x8, #2]
1000066c8:     	mov	w10, #118
1000066cc:     	eor	w8, w8, w10
1000066d0:     	orr	w8, w9, w8
1000066d4:     	cbz	w8, 0x1000066f4 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x544>
1000066d8:     	b	0x1000067a4 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x5f4>
1000066dc:     	adrp	x8, 0x100038000 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x5f4>
1000066e0:     	ldr	w8, [x8, #344]
1000066e4:     	mov	w9, #29546
1000066e8:     	movk	w9, #28271, lsl #16
1000066ec:     	cmp	w8, w9
1000066f0:     	b.ne	0x1000067a4 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x5f4>
1000066f4:     	adrp	x0, 0x100038000 <benchmark::PrintDefaultHelp()+0x4>
1000066f8:     	add	x0, x0, #472
1000066fc:     	bl	0x10000605c <benchmark::internal::SetDefaultTimeUnitFromFlag(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
100006700:     	adrp	x8, 0x100038000 <benchmark::PrintDefaultHelp()+0x10>
100006704:     	add	x8, x8, #400
100006708:     	ldrb	w9, [x8, #15]
10000670c:     	sxtb	w10, w9
100006710:     	ldr	x8, [x8]
100006714:     	cmp	w10, #0
100006718:     	csel	x8, x8, x9, lt
10000671c:     	cbz	x8, 0x1000067a4 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x5f4>
100006720:     	adrp	x8, 0x100038000 <benchmark::Initialize(int*, char**, void (*)())+0x10>
100006724:     	add	x8, x8, #448
100006728:     	ldr	x20, [x8], #8
10000672c:     	cmp	x20, x8
100006730:     	b.eq	0x100006788 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x5d8>
100006734:     	adrp	x19, 0x100038000 <benchmark::Initialize(int*, char**, void (*)())+0x24>
100006738:     	add	x19, x19, #456
10000673c:     	b	0x10000674c <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x59c>
100006740:     	mov	x20, x8
100006744:     	cmp	x8, x19
100006748:     	b.eq	0x100006788 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x5d8>
10000674c:     	add	x0, x20, #32
100006750:     	add	x1, x20, #56
100006754:     	bl	0x100005f3c <benchmark::AddCustomContext(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
100006758:     	ldr	x9, [x20, #8]
10000675c:     	cbz	x9, 0x100006770 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x5c0>
100006760:     	mov	x8, x9
100006764:     	ldr	x9, [x9]
100006768:     	cbnz	x9, 0x100006760 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x5b0>
10000676c:     	b	0x100006740 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x590>
100006770:     	ldr	x8, [x20, #16]
100006774:     	ldr	x9, [x8]
100006778:     	cmp	x9, x20
10000677c:     	mov	x20, x8
100006780:     	b.ne	0x100006770 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x5c0>
100006784:     	b	0x100006740 <benchmark::internal::ParseCommandLineFlags(int*, char**)+0x590>
100006788:     	ldp	x29, x30, [sp, #80]
10000678c:     	ldp	x20, x19, [sp, #64]
100006790:     	ldp	x22, x21, [sp, #48]
100006794:     	ldp	x24, x23, [sp, #32]
100006798:     	ldp	x26, x25, [sp, #16]
10000679c:     	ldp	x28, x27, [sp], #96
1000067a0:     	ret
1000067a4:     	adrp	x8, 0x100038000 <benchmark::ReportUnrecognizedArguments(int, char**)+0x28>
1000067a8:     	ldr	x8, [x8, #512]
1000067ac:     	blr	x8
1000067b0:     	mov	w0, #0
1000067b4:     	bl	0x10002f104 <_vsnprintf+0x10002f104>

00000001000067b8 <benchmark::PrintDefaultHelp()>:
1000067b8:     	adrp	x8, 0x100034000 <benchmark::ReportUnrecognizedArguments(int, char**)+0x2c>
1000067bc:     	ldr	x8, [x8, #944]
1000067c0:     	ldr	x3, [x8]
1000067c4:     	adrp	x0, 0x100031000 <benchmark::ReportUnrecognizedArguments(int, char**)+0x2c>
1000067c8:     	add	x0, x0, #2622
1000067cc:     	mov	w1, #815
1000067d0:     	mov	w2, #1
1000067d4:     	b	0x10002f128 <_vsnprintf+0x10002f128>

00000001000067d8 <benchmark::Initialize(int*, char**, void (*)())>:
1000067d8:     	stp	x29, x30, [sp, #-16]!
1000067dc:     	mov	x29, sp
1000067e0:     	adrp	x8, 0x100038000 <benchmark::ReportUnrecognizedArguments(int, char**)+0x64>
1000067e4:     	str	x2, [x8, #512]
1000067e8:     	bl	0x1000061b0 <benchmark::internal::ParseCommandLineFlags(int*, char**)>
1000067ec:     	adrp	x8, 0x100038000 <benchmark::ReportUnrecognizedArguments(int, char**)+0x70>
1000067f0:     	ldr	w8, [x8, #496]
1000067f4:     	adrp	x9, 0x100038000 <benchmark::ReportUnrecognizedArguments(int, char**)+0x78>
1000067f8:     	str	w8, [x9, #32]
1000067fc:     	ldp	x29, x30, [sp], #16
100006800:     	ret

0000000100006804 <benchmark::Shutdown()>:
100006804:     	stp	x20, x19, [sp, #-32]!
100006808:     	stp	x29, x30, [sp, #16]
10000680c:     	add	x29, sp, #16
100006810:     	adrp	x8, 0x100038000 <void std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>>>::__push_back_slow_path<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>&&)+0x10>
100006814:     	ldr	x19, [x8, #504]
100006818:     	cbz	x19, 0x100006838 <benchmark::Shutdown()+0x34>
10000681c:     	ldr	x1, [x19, #8]
100006820:     	mov	x0, x19
100006824:     	bl	0x10000a254 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*)>
100006828:     	mov	x0, x19
10000682c:     	ldp	x29, x30, [sp, #16]
100006830:     	ldp	x20, x19, [sp], #32
100006834:     	b	0x10002f014 <_vsnprintf+0x10002f014>
100006838:     	ldp	x29, x30, [sp, #16]
10000683c:     	ldp	x20, x19, [sp], #32
100006840:     	ret

0000000100006844 <benchmark::ReportUnrecognizedArguments(int, char**)>:
100006844:     	sub	sp, sp, #80
100006848:     	stp	x24, x23, [sp, #16]
10000684c:     	stp	x22, x21, [sp, #32]
100006850:     	stp	x20, x19, [sp, #48]
100006854:     	stp	x29, x30, [sp, #64]
100006858:     	add	x29, sp, #64
10000685c:     	mov	x19, x0
100006860:     	cmp	w0, #2
100006864:     	b.lt	0x1000068a8 <benchmark::ReportUnrecognizedArguments(int, char**)+0x64>
100006868:     	mov	x20, x1
10000686c:     	ubfiz	x22, x19, #3, #32
100006870:     	mov	w23, #8
100006874:     	adrp	x24, 0x100034000 <void std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>>>::__push_back_slow_path<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>&&)+0x64>
100006878:     	ldr	x24, [x24, #936]
10000687c:     	adrp	x21, 0x100031000 <void std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>>>::__push_back_slow_path<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>&&)+0x60>
100006880:     	add	x21, x21, #3438
100006884:     	ldr	x0, [x24]
100006888:     	ldr	x8, [x20]
10000688c:     	ldr	x9, [x20, x23]
100006890:     	stp	x8, x9, [sp]
100006894:     	mov	x1, x21
100006898:     	bl	0x10002f11c <_vsnprintf+0x10002f11c>
10000689c:     	add	x23, x23, #8
1000068a0:     	cmp	x22, x23
1000068a4:     	b.ne	0x100006884 <benchmark::ReportUnrecognizedArguments(int, char**)+0x40>
1000068a8:     	cmp	w19, #1
1000068ac:     	cset	w0, gt
1000068b0:     	ldp	x29, x30, [sp, #64]
1000068b4:     	ldp	x20, x19, [sp, #48]
1000068b8:     	ldp	x22, x21, [sp, #32]
1000068bc:     	ldp	x24, x23, [sp, #16]
1000068c0:     	add	sp, sp, #80
1000068c4:     	ret

00000001000068c8 <void std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>>>::__push_back_slow_path<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>&&)>:
1000068c8:     	stp	x24, x23, [sp, #-64]!
1000068cc:     	stp	x22, x21, [sp, #16]
1000068d0:     	stp	x20, x19, [sp, #32]
1000068d4:     	stp	x29, x30, [sp, #48]
1000068d8:     	add	x29, sp, #48
1000068dc:     	mov	x19, x0
1000068e0:     	ldp	x8, x9, [x0]
1000068e4:     	sub	x22, x9, x8
1000068e8:     	asr	x23, x22, #5
1000068ec:     	add	x9, x23, #1
1000068f0:     	lsr	x10, x9, #59
1000068f4:     	cbnz	x10, 0x100006a1c <void std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>>>::__push_back_slow_path<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>&&)+0x154>
1000068f8:     	ldr	x10, [x19, #16]
1000068fc:     	mov	x11, #9223372036854775776
100006900:     	sub	x8, x10, x8
100006904:     	asr	x10, x8, #4
100006908:     	cmp	x10, x9
10000690c:     	csel	x9, x10, x9, hi
100006910:     	cmp	x8, x11
100006914:     	mov	x8, #576460752303423487
100006918:     	csel	x8, x9, x8, lo
10000691c:     	lsr	x9, x8, #59
100006920:     	cbnz	x9, 0x100006a24 <void std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>>>::__push_back_slow_path<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>&&)+0x15c>
100006924:     	mov	x20, x1
100006928:     	lsl	x21, x8, #5
10000692c:     	mov	x0, x21
100006930:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100006934:     	add	x10, x0, x23, lsl #5
100006938:     	add	x8, x0, x21
10000693c:     	ldr	q0, [x20]
100006940:     	str	q0, [x10]
100006944:     	ldr	x9, [x20, #16]
100006948:     	str	x9, [x10, #16]
10000694c:     	stp	xzr, xzr, [x20]
100006950:     	str	xzr, [x20, #16]
100006954:     	add	x9, x0, x22
100006958:     	ldr	d0, [x20, #24]
10000695c:     	str	d0, [x9, #24]
100006960:     	add	x9, x10, #32
100006964:     	ldp	x11, x0, [x19]
100006968:     	cmp	x0, x11
10000696c:     	b.eq	0x1000069fc <void std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>>>::__push_back_slow_path<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>&&)+0x134>
100006970:     	ldur	q0, [x0, #-32]
100006974:     	ldur	x12, [x0, #-16]
100006978:     	stur	x12, [x10, #-16]
10000697c:     	stur	q0, [x10, #-32]
100006980:     	stp	xzr, xzr, [x0, #-24]
100006984:     	stur	xzr, [x0, #-32]
100006988:     	ldur	d0, [x0, #-8]
10000698c:     	stur	d0, [x10, #-8]
100006990:     	sub	x10, x10, #32
100006994:     	sub	x12, x0, #32
100006998:     	mov	x0, x12
10000699c:     	cmp	x12, x11
1000069a0:     	b.ne	0x100006970 <void std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>>>::__push_back_slow_path<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>&&)+0xa8>
1000069a4:     	ldp	x20, x0, [x19]
1000069a8:     	stp	x10, x9, [x19]
1000069ac:     	str	x8, [x19, #16]
1000069b0:     	cmp	x0, x20
1000069b4:     	b.ne	0x1000069c8 <void std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>>>::__push_back_slow_path<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>&&)+0x100>
1000069b8:     	b	0x1000069e4 <void std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>>>::__push_back_slow_path<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>&&)+0x11c>
1000069bc:     	mov	x0, x19
1000069c0:     	cmp	x19, x20
1000069c4:     	b.eq	0x1000069e0 <void std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>>>::__push_back_slow_path<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>&&)+0x118>
1000069c8:     	sub	x19, x0, #32
1000069cc:     	ldursb	w8, [x0, #-9]
1000069d0:     	tbz	w8, #31, 0x1000069bc <void std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>>>::__push_back_slow_path<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>&&)+0xf4>
1000069d4:     	ldur	x0, [x0, #-32]
1000069d8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000069dc:     	b	0x1000069bc <void std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>>>::__push_back_slow_path<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>&&)+0xf4>
1000069e0:     	mov	x0, x20
1000069e4:     	cbz	x0, 0x100006a08 <void std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>>>::__push_back_slow_path<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>&&)+0x140>
1000069e8:     	ldp	x29, x30, [sp, #48]
1000069ec:     	ldp	x20, x19, [sp, #32]
1000069f0:     	ldp	x22, x21, [sp, #16]
1000069f4:     	ldp	x24, x23, [sp], #64
1000069f8:     	b	0x10002f014 <_vsnprintf+0x10002f014>
1000069fc:     	stp	x10, x9, [x19]
100006a00:     	str	x8, [x19, #16]
100006a04:     	cbnz	x0, 0x1000069e8 <void std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>>>::__push_back_slow_path<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>&&)+0x120>
100006a08:     	ldp	x29, x30, [sp, #48]
100006a0c:     	ldp	x20, x19, [sp, #32]
100006a10:     	ldp	x22, x21, [sp, #16]
100006a14:     	ldp	x24, x23, [sp], #64
100006a18:     	ret
100006a1c:     	mov	x0, x19
100006a20:     	bl	0x100006a28 <std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>>>::__throw_length_error[abi:ue170006]() const>
100006a24:     	bl	0x100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>

0000000100006a28 <std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double>>>::__throw_length_error[abi:ue170006]() const>:
100006a28:     	stp	x29, x30, [sp, #-16]!
100006a2c:     	mov	x29, sp
100006a30:     	adrp	x0, 0x100031000 <std::__throw_bad_array_new_length[abi:ue170006]()+0x20>
100006a34:     	add	x0, x0, #3485
100006a38:     	bl	0x100006a48 <std::__1::__throw_length_error[abi:ue170006](char const*)>

0000000100006a3c <___clang_call_terminate>:
100006a3c:     	stp	x29, x30, [sp, #-16]!
100006a40:     	bl	0x10002f050 <_vsnprintf+0x10002f050>
100006a44:     	bl	0x10002effc <_vsnprintf+0x10002effc>

0000000100006a48 <std::__1::__throw_length_error[abi:ue170006](char const*)>:
100006a48:     	stp	x20, x19, [sp, #-32]!
100006a4c:     	stp	x29, x30, [sp, #16]
100006a50:     	add	x29, sp, #16
100006a54:     	mov	x20, x0
100006a58:     	mov	w0, #16
100006a5c:     	bl	0x10002f038 <_vsnprintf+0x10002f038>
100006a60:     	mov	x19, x0
100006a64:     	mov	x1, x20
100006a68:     	bl	0x100006a98 <std::length_error::length_error[abi:ue170006](char const*)>
100006a6c:     	adrp	x1, 0x100034000 <benchmark::Barrier::wait()+0x40>
100006a70:     	ldr	x1, [x1, #664]
100006a74:     	adrp	x2, 0x100034000 <benchmark::Barrier::wait()+0x48>
100006a78:     	ldr	x2, [x2, #64]
100006a7c:     	mov	x0, x19
100006a80:     	bl	0x10002f0a4 <_vsnprintf+0x10002f0a4>
100006a84:     	mov	x20, x0
100006a88:     	mov	x0, x19
100006a8c:     	bl	0x10002f068 <_vsnprintf+0x10002f068>
100006a90:     	mov	x0, x20
100006a94:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100006a98 <std::length_error::length_error[abi:ue170006](char const*)>:
100006a98:     	stp	x29, x30, [sp, #-16]!
100006a9c:     	mov	x29, sp
100006aa0:     	bl	0x10002ed08 <_vsnprintf+0x10002ed08>
100006aa4:     	adrp	x8, 0x100034000 <benchmark::Barrier::wait()+0x78>
100006aa8:     	ldr	x8, [x8, #760]
100006aac:     	add	x8, x8, #16
100006ab0:     	str	x8, [x0]
100006ab4:     	ldp	x29, x30, [sp], #16
100006ab8:     	ret

0000000100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>:
100006abc:     	stp	x29, x30, [sp, #-16]!
100006ac0:     	mov	x29, sp
100006ac4:     	mov	w0, #8
100006ac8:     	bl	0x10002f038 <_vsnprintf+0x10002f038>
100006acc:     	bl	0x10002ed14 <_vsnprintf+0x10002ed14>
100006ad0:     	adrp	x1, 0x100034000 <benchmark::Barrier::wait()+0xa4>
100006ad4:     	ldr	x1, [x1, #680]
100006ad8:     	adrp	x2, 0x100034000 <benchmark::Barrier::wait()+0xac>
100006adc:     	ldr	x2, [x2, #88]
100006ae0:     	bl	0x10002f0a4 <_vsnprintf+0x10002f0a4>

0000000100006ae4 <benchmark::Barrier::wait()>:
100006ae4:     	sub	sp, sp, #64
100006ae8:     	stp	x22, x21, [sp, #16]
100006aec:     	stp	x20, x19, [sp, #32]
100006af0:     	stp	x29, x30, [sp, #48]
100006af4:     	add	x29, sp, #48
100006af8:     	mov	x19, x0
100006afc:     	str	x0, [sp]
100006b00:     	mov	w8, #1
100006b04:     	strb	w8, [sp, #8]
100006b08:     	bl	0x10002ef24 <_vsnprintf+0x10002ef24>
100006b0c:     	adrp	x8, 0x100038000 <benchmark::Barrier::wait()+0xf0>
100006b10:     	add	x8, x8, #8
100006b14:     	ldaprb	w8, [x8]
100006b18:     	tbz	w8, #0, 0x100006bb4 <benchmark::Barrier::wait()+0xd0>
100006b1c:     	ldp	w21, w8, [x19, #116]
100006b20:     	add	w8, w8, #1
100006b24:     	str	w8, [x19, #120]
100006b28:     	ldr	w9, [x19, #112]
100006b2c:     	cmp	w8, w9
100006b30:     	b.ge	0x100006b64 <benchmark::Barrier::wait()+0x80>
100006b34:     	add	x20, x19, #64
100006b38:     	mov	x1, sp
100006b3c:     	mov	x0, x20
100006b40:     	bl	0x10002eed0 <_vsnprintf+0x10002eed0>
100006b44:     	ldr	w8, [x19, #116]
100006b48:     	cmp	w8, w21
100006b4c:     	b.gt	0x100006ba4 <benchmark::Barrier::wait()+0xc0>
100006b50:     	ldr	w9, [x19, #120]
100006b54:     	ldr	w10, [x19, #112]
100006b58:     	cmp	w9, w10
100006b5c:     	b.ne	0x100006b38 <benchmark::Barrier::wait()+0x54>
100006b60:     	mov	x21, x8
100006b64:     	add	w8, w21, #1
100006b68:     	stp	w8, wzr, [x19, #116]
100006b6c:     	mov	w20, #1
100006b70:     	ldrb	w8, [sp, #8]
100006b74:     	cbz	w8, 0x100006b80 <benchmark::Barrier::wait()+0x9c>
100006b78:     	ldr	x0, [sp]
100006b7c:     	bl	0x10002ef30 <_vsnprintf+0x10002ef30>
100006b80:     	cbz	w20, 0x100006b8c <benchmark::Barrier::wait()+0xa8>
100006b84:     	add	x0, x19, #64
100006b88:     	bl	0x10002eec4 <_vsnprintf+0x10002eec4>
100006b8c:     	mov	x0, x20
100006b90:     	ldp	x29, x30, [sp, #48]
100006b94:     	ldp	x20, x19, [sp, #32]
100006b98:     	ldp	x22, x21, [sp, #16]
100006b9c:     	add	sp, sp, #64
100006ba0:     	ret
100006ba4:     	mov	w20, #0
100006ba8:     	ldrb	w8, [sp, #8]
100006bac:     	cbnz	w8, 0x100006b78 <benchmark::Barrier::wait()+0x94>
100006bb0:     	b	0x100006b80 <benchmark::Barrier::wait()+0x9c>
100006bb4:     	adrp	x0, 0x100038000 <std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::reserve(unsigned long)+0x2c>
100006bb8:     	add	x0, x0, #8
100006bbc:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
100006bc0:     	cbz	w0, 0x100006b1c <benchmark::Barrier::wait()+0x38>
100006bc4:     	adrp	x8, 0x100038000 <std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::reserve(unsigned long)+0x3c>
100006bc8:     	str	xzr, [x8]
100006bcc:     	adrp	x0, 0x100038000 <std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::reserve(unsigned long)+0x44>
100006bd0:     	add	x0, x0, #8
100006bd4:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
100006bd8:     	b	0x100006b1c <benchmark::Barrier::wait()+0x38>

0000000100006bdc <std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::~vector[abi:ue170006]()>:
100006bdc:     	stp	x22, x21, [sp, #-48]!
100006be0:     	stp	x20, x19, [sp, #16]
100006be4:     	stp	x29, x30, [sp, #32]
100006be8:     	add	x29, sp, #32
100006bec:     	mov	x19, x0
100006bf0:     	ldr	x20, [x0]
100006bf4:     	cbz	x20, 0x100006c3c <std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::~vector[abi:ue170006]()+0x60>
100006bf8:     	ldr	x8, [x19, #8]
100006bfc:     	mov	x0, x20
100006c00:     	cmp	x8, x20
100006c04:     	b.ne	0x100006c18 <std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::~vector[abi:ue170006]()+0x3c>
100006c08:     	b	0x100006c34 <std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::~vector[abi:ue170006]()+0x58>
100006c0c:     	mov	x8, x21
100006c10:     	cmp	x21, x20
100006c14:     	b.eq	0x100006c30 <std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::~vector[abi:ue170006]()+0x54>
100006c18:     	sub	x21, x8, #24
100006c1c:     	ldursb	w9, [x8, #-1]
100006c20:     	tbz	w9, #31, 0x100006c0c <std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::~vector[abi:ue170006]()+0x30>
100006c24:     	ldur	x0, [x8, #-24]
100006c28:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100006c2c:     	b	0x100006c0c <std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::~vector[abi:ue170006]()+0x30>
100006c30:     	ldr	x0, [x19]
100006c34:     	str	x20, [x19, #8]
100006c38:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100006c3c:     	mov	x0, x19
100006c40:     	ldp	x29, x30, [sp, #32]
100006c44:     	ldp	x20, x19, [sp, #16]
100006c48:     	ldp	x22, x21, [sp], #48
100006c4c:     	ret

0000000100006c50 <std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::reserve(unsigned long)>:
100006c50:     	sub	sp, sp, #64
100006c54:     	stp	x22, x21, [sp, #16]
100006c58:     	stp	x20, x19, [sp, #32]
100006c5c:     	stp	x29, x30, [sp, #48]
100006c60:     	add	x29, sp, #48
100006c64:     	ldr	x8, [x0, #16]
100006c68:     	ldr	x19, [x0]
100006c6c:     	sub	x8, x8, x19
100006c70:     	asr	x8, x8, #3
100006c74:     	mov	x9, #14247
100006c78:     	movk	x9, #59837, lsl #16
100006c7c:     	movk	x9, #28493, lsl #32
100006c80:     	movk	x9, #54138, lsl #48
100006c84:     	mul	x8, x8, x9
100006c88:     	cmp	x8, x1
100006c8c:     	b.hs	0x100006e2c <std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::reserve(unsigned long)+0x1dc>
100006c90:     	mov	x20, x0
100006c94:     	mov	x8, #5699
100006c98:     	movk	x8, #37042, lsl #16
100006c9c:     	movk	x8, #11397, lsl #32
100006ca0:     	movk	x8, #356, lsl #48
100006ca4:     	cmp	x1, x8
100006ca8:     	b.hs	0x100006e50 <std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::reserve(unsigned long)+0x200>
100006cac:     	ldr	x22, [x20, #8]
100006cb0:     	mov	w8, #184
100006cb4:     	mul	x21, x1, x8
100006cb8:     	mov	x0, x21
100006cbc:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100006cc0:     	subs	x8, x22, x19
100006cc4:     	add	x9, x0, x8
100006cc8:     	add	x8, x0, x21
100006ccc:     	b.eq	0x100006e40 <std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::reserve(unsigned long)+0x1f0>
100006cd0:     	mov	x10, x9
100006cd4:     	ldr	x11, [x22, #-184]!
100006cd8:     	str	x11, [x10, #-184]!
100006cdc:     	ldr	x11, [x22, #8]
100006ce0:     	str	x11, [x10, #8]
100006ce4:     	ldr	x11, [x22, #16]
100006ce8:     	str	x11, [x10, #16]
100006cec:     	stp	xzr, xzr, [x22, #8]
100006cf0:     	str	xzr, [x22]
100006cf4:     	ldr	x11, [x22, #24]
100006cf8:     	str	x11, [x10, #24]
100006cfc:     	ldr	x11, [x22, #32]
100006d00:     	str	x11, [x10, #32]
100006d04:     	ldr	x11, [x22, #40]
100006d08:     	str	x11, [x10, #40]
100006d0c:     	stp	xzr, xzr, [x22, #32]
100006d10:     	ldrh	w11, [x22, #48]
100006d14:     	str	xzr, [x22, #24]
100006d18:     	strh	w11, [x10, #48]
100006d1c:     	ldur	q0, [x22, #56]
100006d20:     	ldur	q1, [x22, #72]
100006d24:     	ldur	q2, [x22, #88]
100006d28:     	ldur	q3, [x22, #104]
100006d2c:     	stur	q3, [x10, #104]
100006d30:     	stur	q2, [x10, #88]
100006d34:     	stur	q1, [x10, #72]
100006d38:     	stur	q0, [x10, #56]
100006d3c:     	ldr	x11, [x22, #120]
100006d40:     	str	x11, [x10, #120]
100006d44:     	ldr	x11, [x22, #128]
100006d48:     	str	x11, [x10, #128]
100006d4c:     	ldr	x11, [x22, #136]
100006d50:     	str	x11, [x10, #136]
100006d54:     	stp	xzr, xzr, [x22, #128]
100006d58:     	str	xzr, [x22, #120]
100006d5c:     	ldr	x11, [x22, #144]
100006d60:     	str	x11, [x10, #144]
100006d64:     	ldr	x11, [x22, #152]
100006d68:     	str	x11, [x10, #152]
100006d6c:     	ldr	x11, [x22, #160]
100006d70:     	str	x11, [x10, #160]
100006d74:     	stp	xzr, xzr, [x22, #152]
100006d78:     	str	xzr, [x22, #144]
100006d7c:     	ldur	q0, [x22, #168]
100006d80:     	stur	q0, [x10, #168]
100006d84:     	cmp	x22, x19
100006d88:     	b.ne	0x100006cd4 <std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::reserve(unsigned long)+0x84>
100006d8c:     	ldp	x21, x19, [x20]
100006d90:     	stp	x10, x9, [x20]
100006d94:     	str	x8, [x20, #16]
100006d98:     	cmp	x19, x21
100006d9c:     	b.ne	0x100006dd8 <std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::reserve(unsigned long)+0x188>
100006da0:     	b	0x100006e20 <std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::reserve(unsigned long)+0x1d0>
100006da4:     	stur	x22, [x19, #-56]
100006da8:     	mov	x0, x8
100006dac:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100006db0:     	sub	x8, x19, #160
100006db4:     	str	x8, [sp, #8]
100006db8:     	add	x0, sp, #8
100006dbc:     	bl	0x100009fac <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__destroy_vector::operator()[abi:ue170006]()>
100006dc0:     	str	x20, [sp, #8]
100006dc4:     	add	x0, sp, #8
100006dc8:     	bl	0x100009fac <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__destroy_vector::operator()[abi:ue170006]()>
100006dcc:     	mov	x19, x20
100006dd0:     	cmp	x20, x21
100006dd4:     	b.eq	0x100006e1c <std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::reserve(unsigned long)+0x1cc>
100006dd8:     	ldur	x0, [x19, #-40]
100006ddc:     	cbz	x0, 0x100006de8 <std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::reserve(unsigned long)+0x198>
100006de0:     	stur	x0, [x19, #-32]
100006de4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100006de8:     	sub	x20, x19, #184
100006dec:     	ldur	x22, [x19, #-64]
100006df0:     	cbz	x22, 0x100006db0 <std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::reserve(unsigned long)+0x160>
100006df4:     	ldur	x0, [x19, #-56]
100006df8:     	mov	x8, x22
100006dfc:     	cmp	x0, x22
100006e00:     	b.eq	0x100006da4 <std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::reserve(unsigned long)+0x154>
100006e04:     	sub	x0, x0, #8
100006e08:     	bl	0x10002efa8 <_vsnprintf+0x10002efa8>
100006e0c:     	cmp	x0, x22
100006e10:     	b.ne	0x100006e04 <std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::reserve(unsigned long)+0x1b4>
100006e14:     	ldur	x8, [x19, #-64]
100006e18:     	b	0x100006da4 <std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::reserve(unsigned long)+0x154>
100006e1c:     	mov	x19, x21
100006e20:     	cbz	x19, 0x100006e2c <std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::reserve(unsigned long)+0x1dc>
100006e24:     	mov	x0, x19
100006e28:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100006e2c:     	ldp	x29, x30, [sp, #48]
100006e30:     	ldp	x20, x19, [sp, #32]
100006e34:     	ldp	x22, x21, [sp, #16]
100006e38:     	add	sp, sp, #64
100006e3c:     	ret
100006e40:     	stp	x9, x9, [x20]
100006e44:     	str	x8, [x20, #16]
100006e48:     	cbnz	x19, 0x100006e24 <std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::reserve(unsigned long)+0x1d4>
100006e4c:     	b	0x100006e2c <std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::reserve(unsigned long)+0x1dc>
100006e50:     	mov	x0, x20
100006e54:     	bl	0x100006ed4 <std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::__throw_length_error[abi:ue170006]() const>

0000000100006e58 <benchmark::internal::RunResults::~RunResults()>:
100006e58:     	sub	sp, sp, #48
100006e5c:     	stp	x20, x19, [sp, #16]
100006e60:     	stp	x29, x30, [sp, #32]
100006e64:     	add	x29, sp, #32
100006e68:     	mov	x19, x0
100006e6c:     	add	x8, x0, #24
100006e70:     	str	x8, [sp, #8]
100006e74:     	add	x0, sp, #8
100006e78:     	bl	0x100009fac <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__destroy_vector::operator()[abi:ue170006]()>
100006e7c:     	str	x19, [sp, #8]
100006e80:     	add	x0, sp, #8
100006e84:     	bl	0x100009fac <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__destroy_vector::operator()[abi:ue170006]()>
100006e88:     	mov	x0, x19
100006e8c:     	ldp	x29, x30, [sp, #32]
100006e90:     	ldp	x20, x19, [sp, #16]
100006e94:     	add	sp, sp, #48
100006e98:     	ret

0000000100006e9c <std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::~vector[abi:ue170006]()>:
100006e9c:     	stp	x20, x19, [sp, #-32]!
100006ea0:     	stp	x29, x30, [sp, #16]
100006ea4:     	add	x29, sp, #16
100006ea8:     	mov	x19, x0
100006eac:     	ldr	x1, [x0]
100006eb0:     	cbz	x1, 0x100006ec4 <std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::~vector[abi:ue170006]()+0x28>
100006eb4:     	mov	x0, x19
100006eb8:     	bl	0x10000a08c <std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::__base_destruct_at_end[abi:ue170006](benchmark::internal::BenchmarkRunner*)>
100006ebc:     	ldr	x0, [x19]
100006ec0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100006ec4:     	mov	x0, x19
100006ec8:     	ldp	x29, x30, [sp, #16]
100006ecc:     	ldp	x20, x19, [sp], #32
100006ed0:     	ret

0000000100006ed4 <std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::__throw_length_error[abi:ue170006]() const>:
100006ed4:     	stp	x29, x30, [sp, #-16]!
100006ed8:     	mov	x29, sp
100006edc:     	adrp	x0, 0x100031000 <std::__1::__split_buffer<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>&>::__destruct_at_end[abi:ue170006](benchmark::internal::BenchmarkRunner*)+0x6c>
100006ee0:     	add	x0, x0, #3485
100006ee4:     	bl	0x100006a48 <std::__1::__throw_length_error[abi:ue170006](char const*)>

0000000100006ee8 <std::__1::__split_buffer<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>&>::~__split_buffer()>:
100006ee8:     	stp	x20, x19, [sp, #-32]!
100006eec:     	stp	x29, x30, [sp, #16]
100006ef0:     	add	x29, sp, #16
100006ef4:     	mov	x19, x0
100006ef8:     	ldr	x1, [x0, #8]
100006efc:     	bl	0x100006f1c <std::__1::__split_buffer<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>&>::__destruct_at_end[abi:ue170006](benchmark::internal::BenchmarkRunner*)>
100006f00:     	ldr	x0, [x19]
100006f04:     	cbz	x0, 0x100006f0c <std::__1::__split_buffer<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>&>::~__split_buffer()+0x24>
100006f08:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100006f0c:     	mov	x0, x19
100006f10:     	ldp	x29, x30, [sp, #16]
100006f14:     	ldp	x20, x19, [sp], #32
100006f18:     	ret

0000000100006f1c <std::__1::__split_buffer<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>&>::__destruct_at_end[abi:ue170006](benchmark::internal::BenchmarkRunner*)>:
100006f1c:     	sub	sp, sp, #80
100006f20:     	stp	x24, x23, [sp, #16]
100006f24:     	stp	x22, x21, [sp, #32]
100006f28:     	stp	x20, x19, [sp, #48]
100006f2c:     	stp	x29, x30, [sp, #64]
100006f30:     	add	x29, sp, #64
100006f34:     	ldr	x21, [x0, #16]
100006f38:     	cmp	x21, x1
100006f3c:     	b.eq	0x100006fc8 <std::__1::__split_buffer<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>&>::__destruct_at_end[abi:ue170006](benchmark::internal::BenchmarkRunner*)+0xac>
100006f40:     	mov	x19, x1
100006f44:     	mov	x20, x0
100006f48:     	b	0x100006f80 <std::__1::__split_buffer<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>&>::__destruct_at_end[abi:ue170006](benchmark::internal::BenchmarkRunner*)+0x64>
100006f4c:     	stur	x23, [x21, #-56]
100006f50:     	mov	x0, x8
100006f54:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100006f58:     	sub	x8, x21, #160
100006f5c:     	str	x8, [sp, #8]
100006f60:     	add	x0, sp, #8
100006f64:     	bl	0x100009fac <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__destroy_vector::operator()[abi:ue170006]()>
100006f68:     	str	x22, [sp, #8]
100006f6c:     	add	x0, sp, #8
100006f70:     	bl	0x100009fac <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__destroy_vector::operator()[abi:ue170006]()>
100006f74:     	ldr	x21, [x20, #16]
100006f78:     	cmp	x21, x19
100006f7c:     	b.eq	0x100006fc8 <std::__1::__split_buffer<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>&>::__destruct_at_end[abi:ue170006](benchmark::internal::BenchmarkRunner*)+0xac>
100006f80:     	sub	x22, x21, #184
100006f84:     	str	x22, [x20, #16]
100006f88:     	ldur	x0, [x21, #-40]
100006f8c:     	cbz	x0, 0x100006f98 <std::__1::__split_buffer<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>&>::__destruct_at_end[abi:ue170006](benchmark::internal::BenchmarkRunner*)+0x7c>
100006f90:     	stur	x0, [x21, #-32]
100006f94:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100006f98:     	ldur	x23, [x21, #-64]
100006f9c:     	cbz	x23, 0x100006f58 <std::__1::__split_buffer<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>&>::__destruct_at_end[abi:ue170006](benchmark::internal::BenchmarkRunner*)+0x3c>
100006fa0:     	ldur	x0, [x21, #-56]
100006fa4:     	mov	x8, x23
100006fa8:     	cmp	x0, x23
100006fac:     	b.eq	0x100006f4c <std::__1::__split_buffer<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>&>::__destruct_at_end[abi:ue170006](benchmark::internal::BenchmarkRunner*)+0x30>
100006fb0:     	sub	x0, x0, #8
100006fb4:     	bl	0x10002efa8 <_vsnprintf+0x10002efa8>
100006fb8:     	cmp	x0, x23
100006fbc:     	b.ne	0x100006fb0 <std::__1::__split_buffer<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>&>::__destruct_at_end[abi:ue170006](benchmark::internal::BenchmarkRunner*)+0x94>
100006fc0:     	ldur	x8, [x21, #-64]
100006fc4:     	b	0x100006f4c <std::__1::__split_buffer<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>&>::__destruct_at_end[abi:ue170006](benchmark::internal::BenchmarkRunner*)+0x30>
100006fc8:     	ldp	x29, x30, [sp, #64]
100006fcc:     	ldp	x20, x19, [sp, #48]
100006fd0:     	ldp	x22, x21, [sp, #32]
100006fd4:     	ldp	x24, x23, [sp, #16]
100006fd8:     	add	sp, sp, #80
100006fdc:     	ret

0000000100006fe0 <void std::__1::__tree_balance_after_insert[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)>:
100006fe0:     	cmp	x1, x0
100006fe4:     	cset	w8, eq
100006fe8:     	strb	w8, [x1, #24]
100006fec:     	b.eq	0x1000070dc <void std::__1::__tree_balance_after_insert[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0xfc>
100006ff0:     	mov	w10, #1
100006ff4:     	b	0x100007014 <void std::__1::__tree_balance_after_insert[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x34>
100006ff8:     	strb	w10, [x9, #24]
100006ffc:     	mov	x1, x8
100007000:     	cmp	x8, x0
100007004:     	cset	w9, eq
100007008:     	strb	w9, [x8, #24]
10000700c:     	strb	w10, [x11]
100007010:     	b.eq	0x1000070dc <void std::__1::__tree_balance_after_insert[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0xfc>
100007014:     	ldr	x9, [x1, #16]
100007018:     	ldrb	w8, [x9, #24]
10000701c:     	cbnz	w8, 0x1000070dc <void std::__1::__tree_balance_after_insert[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0xfc>
100007020:     	ldr	x8, [x9, #16]
100007024:     	ldr	x11, [x8]
100007028:     	cmp	x11, x9
10000702c:     	b.eq	0x100007040 <void std::__1::__tree_balance_after_insert[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x60>
100007030:     	cbz	x11, 0x1000070e0 <void std::__1::__tree_balance_after_insert[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x100>
100007034:     	ldrb	w12, [x11, #24]!
100007038:     	cbz	w12, 0x100006ff8 <void std::__1::__tree_balance_after_insert[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x18>
10000703c:     	b	0x1000070e0 <void std::__1::__tree_balance_after_insert[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x100>
100007040:     	ldr	x11, [x8, #8]
100007044:     	cbz	x11, 0x100007050 <void std::__1::__tree_balance_after_insert[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x70>
100007048:     	ldrb	w12, [x11, #24]!
10000704c:     	cbz	w12, 0x100006ff8 <void std::__1::__tree_balance_after_insert[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x18>
100007050:     	ldr	x10, [x9]
100007054:     	cmp	x10, x1
100007058:     	b.eq	0x100007174 <void std::__1::__tree_balance_after_insert[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x194>
10000705c:     	ldr	x10, [x9, #8]
100007060:     	ldr	x11, [x10]
100007064:     	str	x11, [x9, #8]
100007068:     	cbz	x11, 0x100007074 <void std::__1::__tree_balance_after_insert[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x94>
10000706c:     	str	x9, [x11, #16]
100007070:     	ldr	x8, [x9, #16]
100007074:     	str	x8, [x10, #16]
100007078:     	ldr	x8, [x9, #16]
10000707c:     	ldr	x11, [x8]
100007080:     	cmp	x11, x9
100007084:     	cset	w11, ne
100007088:     	str	x10, [x8, w11, uxtw #3]
10000708c:     	str	x9, [x10]
100007090:     	str	x10, [x9, #16]
100007094:     	ldr	x8, [x10, #16]
100007098:     	ldr	x9, [x8]
10000709c:     	mov	w11, #1
1000070a0:     	strb	w11, [x10, #24]
1000070a4:     	strb	wzr, [x8, #24]
1000070a8:     	ldr	x10, [x9, #8]
1000070ac:     	str	x10, [x8]
1000070b0:     	cbz	x10, 0x1000070b8 <void std::__1::__tree_balance_after_insert[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0xd8>
1000070b4:     	str	x8, [x10, #16]
1000070b8:     	ldr	x10, [x8, #16]
1000070bc:     	str	x10, [x9, #16]
1000070c0:     	ldr	x10, [x8, #16]
1000070c4:     	ldr	x11, [x10]
1000070c8:     	cmp	x11, x8
1000070cc:     	cset	w11, ne
1000070d0:     	str	x9, [x10, w11, uxtw #3]
1000070d4:     	str	x8, [x9, #8]
1000070d8:     	str	x9, [x8, #16]
1000070dc:     	ret
1000070e0:     	ldr	x10, [x9]
1000070e4:     	cmp	x10, x1
1000070e8:     	b.eq	0x1000070f4 <void std::__1::__tree_balance_after_insert[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x114>
1000070ec:     	mov	x1, x9
1000070f0:     	b	0x10000712c <void std::__1::__tree_balance_after_insert[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x14c>
1000070f4:     	ldr	x10, [x1, #8]
1000070f8:     	str	x10, [x9]
1000070fc:     	cbz	x10, 0x100007108 <void std::__1::__tree_balance_after_insert[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x128>
100007100:     	str	x9, [x10, #16]
100007104:     	ldr	x8, [x9, #16]
100007108:     	str	x8, [x1, #16]
10000710c:     	ldr	x8, [x9, #16]
100007110:     	ldr	x10, [x8]
100007114:     	cmp	x10, x9
100007118:     	cset	w10, ne
10000711c:     	str	x1, [x8, w10, uxtw #3]
100007120:     	str	x9, [x1, #8]
100007124:     	str	x1, [x9, #16]
100007128:     	ldr	x8, [x1, #16]
10000712c:     	mov	w9, #1
100007130:     	strb	w9, [x1, #24]
100007134:     	strb	wzr, [x8, #24]
100007138:     	ldr	x9, [x8, #8]
10000713c:     	ldr	x10, [x9]
100007140:     	str	x10, [x8, #8]
100007144:     	cbz	x10, 0x10000714c <void std::__1::__tree_balance_after_insert[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x16c>
100007148:     	str	x8, [x10, #16]
10000714c:     	ldr	x10, [x8, #16]
100007150:     	str	x10, [x9, #16]
100007154:     	ldr	x10, [x8, #16]
100007158:     	ldr	x11, [x10]
10000715c:     	cmp	x11, x8
100007160:     	cset	w11, ne
100007164:     	str	x9, [x10, w11, uxtw #3]
100007168:     	str	x8, [x9]
10000716c:     	str	x9, [x8, #16]
100007170:     	ret
100007174:     	mov	x10, x9
100007178:     	mov	w11, #1
10000717c:     	strb	w11, [x9, #24]
100007180:     	strb	wzr, [x8, #24]
100007184:     	ldr	x10, [x9, #8]
100007188:     	str	x10, [x8]
10000718c:     	cbnz	x10, 0x1000070b4 <void std::__1::__tree_balance_after_insert[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0xd4>
100007190:     	b	0x1000070b8 <void std::__1::__tree_balance_after_insert[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0xd8>

0000000100007194 <void std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::__emplace_back_slow_path<benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*&>(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*&&, benchmark::BenchmarkReporter::PerFamilyRunReports*&)>:
100007194:     	sub	sp, sp, #112
100007198:     	stp	x24, x23, [sp, #48]
10000719c:     	stp	x22, x21, [sp, #64]
1000071a0:     	stp	x20, x19, [sp, #80]
1000071a4:     	stp	x29, x30, [sp, #96]
1000071a8:     	add	x29, sp, #96
1000071ac:     	mov	x19, x0
1000071b0:     	mov	x8, #5698
1000071b4:     	movk	x8, #37042, lsl #16
1000071b8:     	movk	x8, #11397, lsl #32
1000071bc:     	movk	x8, #356, lsl #48
1000071c0:     	ldp	x9, x10, [x0]
1000071c4:     	sub	x10, x10, x9
1000071c8:     	asr	x10, x10, #3
1000071cc:     	mov	x11, #14247
1000071d0:     	movk	x11, #59837, lsl #16
1000071d4:     	movk	x11, #28493, lsl #32
1000071d8:     	movk	x11, #54138, lsl #48
1000071dc:     	mul	x23, x10, x11
1000071e0:     	add	x10, x23, #1
1000071e4:     	cmp	x10, x8
1000071e8:     	b.hi	0x10000743c <void std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::__emplace_back_slow_path<benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*&>(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*&&, benchmark::BenchmarkReporter::PerFamilyRunReports*&)+0x2a8>
1000071ec:     	mov	x21, x3
1000071f0:     	mov	x22, x2
1000071f4:     	mov	x20, x1
1000071f8:     	add	x12, x19, #16
1000071fc:     	ldr	x13, [x12]
100007200:     	sub	x9, x13, x9
100007204:     	asr	x9, x9, #3
100007208:     	mul	x9, x9, x11
10000720c:     	lsl	x11, x9, #1
100007210:     	cmp	x11, x10
100007214:     	csel	x10, x11, x10, hi
100007218:     	mov	x11, #2849
10000721c:     	movk	x11, #51289, lsl #16
100007220:     	movk	x11, #5698, lsl #32
100007224:     	movk	x11, #178, lsl #48
100007228:     	cmp	x9, x11
10000722c:     	csel	x24, x10, x8, lo
100007230:     	str	x12, [sp, #32]
100007234:     	cbz	x24, 0x100007254 <void std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::__emplace_back_slow_path<benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*&>(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*&&, benchmark::BenchmarkReporter::PerFamilyRunReports*&)+0xc0>
100007238:     	cmp	x24, x8
10000723c:     	b.hi	0x100007444 <void std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::__emplace_back_slow_path<benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*&>(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*&&, benchmark::BenchmarkReporter::PerFamilyRunReports*&)+0x2b0>
100007240:     	mov	w8, #184
100007244:     	mul	x0, x24, x8
100007248:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000724c:     	mov	x8, x0
100007250:     	b	0x100007258 <void std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::__emplace_back_slow_path<benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*&>(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*&&, benchmark::BenchmarkReporter::PerFamilyRunReports*&)+0xc4>
100007254:     	mov	x8, #0
100007258:     	mov	w9, #184
10000725c:     	madd	x0, x23, x9, x8
100007260:     	stp	x8, x0, [sp]
100007264:     	madd	x23, x24, x9, x8
100007268:     	stp	x0, x23, [sp, #16]
10000726c:     	ldr	x2, [x22]
100007270:     	ldr	x3, [x21]
100007274:     	mov	x1, x20
100007278:     	bl	0x10001e23c <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)>
10000727c:     	add	x9, x0, #184
100007280:     	str	x9, [sp, #16]
100007284:     	ldp	x8, x20, [x19]
100007288:     	cmp	x20, x8
10000728c:     	b.eq	0x100007384 <void std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::__emplace_back_slow_path<benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*&>(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*&&, benchmark::BenchmarkReporter::PerFamilyRunReports*&)+0x1f0>
100007290:     	str	xzr, [x0, #-184]!
100007294:     	stp	xzr, xzr, [x0, #8]
100007298:     	ldr	x9, [x20, #-184]!
10000729c:     	str	x9, [x0]
1000072a0:     	ldr	x9, [x20, #8]
1000072a4:     	str	x9, [x0, #8]
1000072a8:     	ldr	x9, [x20, #16]
1000072ac:     	str	x9, [x0, #16]
1000072b0:     	stp	xzr, xzr, [x20, #8]
1000072b4:     	str	xzr, [x20]
1000072b8:     	stp	xzr, xzr, [x0, #24]
1000072bc:     	str	xzr, [x0, #40]
1000072c0:     	ldr	x9, [x20, #24]
1000072c4:     	str	x9, [x0, #24]
1000072c8:     	ldr	x9, [x20, #32]
1000072cc:     	str	x9, [x0, #32]
1000072d0:     	ldr	x9, [x20, #40]
1000072d4:     	str	x9, [x0, #40]
1000072d8:     	stp	xzr, xzr, [x20, #32]
1000072dc:     	ldrh	w9, [x20, #48]
1000072e0:     	str	xzr, [x20, #24]
1000072e4:     	strh	w9, [x0, #48]
1000072e8:     	ldur	q0, [x20, #56]
1000072ec:     	ldur	q1, [x20, #72]
1000072f0:     	ldur	q2, [x20, #88]
1000072f4:     	ldur	q3, [x20, #104]
1000072f8:     	stur	q3, [x0, #104]
1000072fc:     	stur	q2, [x0, #88]
100007300:     	stur	q1, [x0, #72]
100007304:     	stp	xzr, xzr, [x0, #128]
100007308:     	str	xzr, [x0, #120]
10000730c:     	stur	q0, [x0, #56]
100007310:     	ldr	x9, [x20, #120]
100007314:     	str	x9, [x0, #120]
100007318:     	ldr	x9, [x20, #128]
10000731c:     	str	x9, [x0, #128]
100007320:     	ldr	x9, [x20, #136]
100007324:     	str	x9, [x0, #136]
100007328:     	stp	xzr, xzr, [x20, #128]
10000732c:     	str	xzr, [x20, #120]
100007330:     	stp	xzr, xzr, [x0, #144]
100007334:     	str	xzr, [x0, #160]
100007338:     	ldr	x9, [x20, #144]
10000733c:     	str	x9, [x0, #144]
100007340:     	ldr	x9, [x20, #152]
100007344:     	str	x9, [x0, #152]
100007348:     	ldr	x9, [x20, #160]
10000734c:     	str	x9, [x0, #160]
100007350:     	stp	xzr, xzr, [x20, #152]
100007354:     	str	xzr, [x20, #144]
100007358:     	ldur	q0, [x20, #168]
10000735c:     	stur	q0, [x0, #168]
100007360:     	cmp	x20, x8
100007364:     	b.ne	0x100007290 <void std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::__emplace_back_slow_path<benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*&>(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*&&, benchmark::BenchmarkReporter::PerFamilyRunReports*&)+0xfc>
100007368:     	ldp	x21, x20, [x19]
10000736c:     	ldp	x9, x23, [sp, #16]
100007370:     	stp	x0, x9, [x19]
100007374:     	str	x23, [x19, #16]
100007378:     	cmp	x20, x21
10000737c:     	b.ne	0x1000073d0 <void std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::__emplace_back_slow_path<benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*&>(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*&&, benchmark::BenchmarkReporter::PerFamilyRunReports*&)+0x23c>
100007380:     	b	0x100007418 <void std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::__emplace_back_slow_path<benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*&>(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*&&, benchmark::BenchmarkReporter::PerFamilyRunReports*&)+0x284>
100007384:     	mov	x21, x20
100007388:     	stp	x0, x9, [x19]
10000738c:     	str	x23, [x19, #16]
100007390:     	cmp	x20, x20
100007394:     	b.ne	0x1000073d0 <void std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::__emplace_back_slow_path<benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*&>(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*&&, benchmark::BenchmarkReporter::PerFamilyRunReports*&)+0x23c>
100007398:     	b	0x100007418 <void std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::__emplace_back_slow_path<benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*&>(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*&&, benchmark::BenchmarkReporter::PerFamilyRunReports*&)+0x284>
10000739c:     	stur	x22, [x20, #-56]
1000073a0:     	mov	x0, x8
1000073a4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000073a8:     	sub	x8, x20, #160
1000073ac:     	str	x8, [sp, #40]
1000073b0:     	add	x0, sp, #40
1000073b4:     	bl	0x100009fac <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__destroy_vector::operator()[abi:ue170006]()>
1000073b8:     	str	x19, [sp, #40]
1000073bc:     	add	x0, sp, #40
1000073c0:     	bl	0x100009fac <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__destroy_vector::operator()[abi:ue170006]()>
1000073c4:     	mov	x20, x19
1000073c8:     	cmp	x19, x21
1000073cc:     	b.eq	0x100007414 <void std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::__emplace_back_slow_path<benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*&>(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*&&, benchmark::BenchmarkReporter::PerFamilyRunReports*&)+0x280>
1000073d0:     	ldur	x0, [x20, #-40]
1000073d4:     	cbz	x0, 0x1000073e0 <void std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::__emplace_back_slow_path<benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*&>(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*&&, benchmark::BenchmarkReporter::PerFamilyRunReports*&)+0x24c>
1000073d8:     	stur	x0, [x20, #-32]
1000073dc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000073e0:     	sub	x19, x20, #184
1000073e4:     	ldur	x22, [x20, #-64]
1000073e8:     	cbz	x22, 0x1000073a8 <void std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::__emplace_back_slow_path<benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*&>(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*&&, benchmark::BenchmarkReporter::PerFamilyRunReports*&)+0x214>
1000073ec:     	ldur	x0, [x20, #-56]
1000073f0:     	mov	x8, x22
1000073f4:     	cmp	x0, x22
1000073f8:     	b.eq	0x10000739c <void std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::__emplace_back_slow_path<benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*&>(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*&&, benchmark::BenchmarkReporter::PerFamilyRunReports*&)+0x208>
1000073fc:     	sub	x0, x0, #8
100007400:     	bl	0x10002efa8 <_vsnprintf+0x10002efa8>
100007404:     	cmp	x0, x22
100007408:     	b.ne	0x1000073fc <void std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::__emplace_back_slow_path<benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*&>(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*&&, benchmark::BenchmarkReporter::PerFamilyRunReports*&)+0x268>
10000740c:     	ldur	x8, [x20, #-64]
100007410:     	b	0x10000739c <void std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::__emplace_back_slow_path<benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*&>(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*&&, benchmark::BenchmarkReporter::PerFamilyRunReports*&)+0x208>
100007414:     	mov	x20, x21
100007418:     	cbz	x20, 0x100007424 <void std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::__emplace_back_slow_path<benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*&>(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*&&, benchmark::BenchmarkReporter::PerFamilyRunReports*&)+0x290>
10000741c:     	mov	x0, x20
100007420:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100007424:     	ldp	x29, x30, [sp, #96]
100007428:     	ldp	x20, x19, [sp, #80]
10000742c:     	ldp	x22, x21, [sp, #64]
100007430:     	ldp	x24, x23, [sp, #48]
100007434:     	add	sp, sp, #112
100007438:     	ret
10000743c:     	mov	x0, x19
100007440:     	bl	0x100006ed4 <std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::__throw_length_error[abi:ue170006]() const>
100007444:     	bl	0x100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>
100007448:     	mov	x19, x0
10000744c:     	mov	x0, sp
100007450:     	bl	0x100006ee8 <std::__1::__split_buffer<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>&>::~__split_buffer()>
100007454:     	mov	x0, x19
100007458:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010000745c <std::__1::vector<unsigned long, std::__1::allocator<unsigned long>>::__throw_length_error[abi:ue170006]() const>:
10000745c:     	stp	x29, x30, [sp, #-16]!
100007460:     	mov	x29, sp
100007464:     	adrp	x0, 0x100031000 <long std::__1::uniform_int_distribution<long>::operator()<std::__1::mersenne_twister_engine<unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u>>(std::__1::mersenne_twister_engine<unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u>&, std::__1::uniform_int_distribution<long>::param_type const&)+0x9c>
100007468:     	add	x0, x0, #3485
10000746c:     	bl	0x100006a48 <std::__1::__throw_length_error[abi:ue170006](char const*)>

0000000100007470 <long std::__1::uniform_int_distribution<long>::operator()<std::__1::mersenne_twister_engine<unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u>>(std::__1::mersenne_twister_engine<unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u>&, std::__1::uniform_int_distribution<long>::param_type const&)>:
100007470:     	sub	sp, sp, #96
100007474:     	stp	x20, x19, [sp, #64]
100007478:     	stp	x29, x30, [sp, #80]
10000747c:     	add	x29, sp, #80
100007480:     	ldp	x8, x0, [x2]
100007484:     	subs	x8, x0, x8
100007488:     	b.eq	0x100007578 <long std::__1::uniform_int_distribution<long>::operator()<std::__1::mersenne_twister_engine<unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u>>(std::__1::mersenne_twister_engine<unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u>&, std::__1::uniform_int_distribution<long>::param_type const&)+0x108>
10000748c:     	add	x20, x8, #1
100007490:     	cbz	x20, 0x100007540 <long std::__1::uniform_int_distribution<long>::operator()<std::__1::mersenne_twister_engine<unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u>>(std::__1::mersenne_twister_engine<unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u>&, std::__1::uniform_int_distribution<long>::param_type const&)+0xd0>
100007494:     	mov	x19, x2
100007498:     	clz	x8, x20
10000749c:     	lsl	x9, x20, x8
1000074a0:     	tst	x9, #0x7fffffffffffffff
1000074a4:     	mov	w9, #63
1000074a8:     	cinc	x9, x9, ne
1000074ac:     	sub	x9, x9, x8
1000074b0:     	stp	x1, x9, [sp]
1000074b4:     	lsr	x8, x9, #5
1000074b8:     	tst	x9, #0x1f
1000074bc:     	cinc	x10, x8, ne
1000074c0:     	udiv	x8, x9, x10
1000074c4:     	stp	x8, x10, [sp, #16]
1000074c8:     	mov	x11, #-1
1000074cc:     	lsl	x11, x11, x8
1000074d0:     	and	x11, x11, #0x100000000
1000074d4:     	cmp	x8, #64
1000074d8:     	csel	x11, x11, xzr, lo
1000074dc:     	str	x11, [sp, #40]
1000074e0:     	eor	x12, x11, #0x100000000
1000074e4:     	udiv	x11, x11, x10
1000074e8:     	cmp	x12, x11
1000074ec:     	b.ls	0x100007514 <long std::__1::uniform_int_distribution<long>::operator()<std::__1::mersenne_twister_engine<unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u>>(std::__1::mersenne_twister_engine<unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u>&, std::__1::uniform_int_distribution<long>::param_type const&)+0xa4>
1000074f0:     	add	x10, x10, #1
1000074f4:     	udiv	x8, x9, x10
1000074f8:     	stp	x8, x10, [sp, #16]
1000074fc:     	cmp	x8, #63
100007500:     	b.hi	0x100007590 <long std::__1::uniform_int_distribution<long>::operator()<std::__1::mersenne_twister_engine<unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u>>(std::__1::mersenne_twister_engine<unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u>&, std::__1::uniform_int_distribution<long>::param_type const&)+0x120>
100007504:     	mov	x11, #-1
100007508:     	lsl	x11, x11, x8
10000750c:     	and	x11, x11, #0x100000000
100007510:     	str	x11, [sp, #40]
100007514:     	udiv	x11, x9, x10
100007518:     	neg	x9, x9
10000751c:     	madd	x9, x11, x10, x9
100007520:     	add	x9, x10, x9
100007524:     	str	x9, [sp, #32]
100007528:     	cmp	x8, #62
10000752c:     	b.hi	0x100007588 <long std::__1::uniform_int_distribution<long>::operator()<std::__1::mersenne_twister_engine<unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u>>(std::__1::mersenne_twister_engine<unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u>&, std::__1::uniform_int_distribution<long>::param_type const&)+0x118>
100007530:     	mov	x9, #-2
100007534:     	lsl	x9, x9, x8
100007538:     	and	x11, x9, #0x100000000
10000753c:     	b	0x1000075a4 <long std::__1::uniform_int_distribution<long>::operator()<std::__1::mersenne_twister_engine<unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u>>(std::__1::mersenne_twister_engine<unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u>&, std::__1::uniform_int_distribution<long>::param_type const&)+0x134>
100007540:     	str	x1, [sp]
100007544:     	adrp	x8, 0x100032000 <long std::__1::uniform_int_distribution<long>::operator()<std::__1::mersenne_twister_engine<unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u>>(std::__1::mersenne_twister_engine<unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u>&, std::__1::uniform_int_distribution<long>::param_type const&)+0x180>
100007548:     	ldr	q0, [x8, #2816]
10000754c:     	stur	q0, [sp, #8]
100007550:     	mov	w8, #2
100007554:     	dup.2d	v0, x8
100007558:     	stur	q0, [sp, #24]
10000755c:     	adrp	x8, 0x100032000 <std::__1::__independent_bits_engine<std::__1::mersenne_twister_engine<unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u>, unsigned long>::__eval(std::__1::integral_constant<bool, true>)+0x10>
100007560:     	ldr	q0, [x8, #2832]
100007564:     	stur	q0, [sp, #40]
100007568:     	movi.2d	v0, #0xffffffffffffffff
10000756c:     	str	d0, [sp, #56]
100007570:     	mov	x0, sp
100007574:     	bl	0x1000075f8 <std::__1::__independent_bits_engine<std::__1::mersenne_twister_engine<unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u>, unsigned long>::__eval(std::__1::integral_constant<bool, true>)>
100007578:     	ldp	x29, x30, [sp, #80]
10000757c:     	ldp	x20, x19, [sp, #64]
100007580:     	add	sp, sp, #96
100007584:     	ret
100007588:     	mov	x11, #0
10000758c:     	b	0x1000075a4 <long std::__1::uniform_int_distribution<long>::operator()<std::__1::mersenne_twister_engine<unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u>>(std::__1::mersenne_twister_engine<unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u>&, std::__1::uniform_int_distribution<long>::param_type const&)+0x134>
100007590:     	mov	x11, #0
100007594:     	neg	x9, x9
100007598:     	madd	x9, x8, x10, x9
10000759c:     	add	x9, x10, x9
1000075a0:     	stp	x9, xzr, [sp, #32]
1000075a4:     	str	x11, [sp, #48]
1000075a8:     	neg	w9, w8
1000075ac:     	mov	w10, #-1
1000075b0:     	lsr	w9, w10, w9
1000075b4:     	cmp	x8, #0
1000075b8:     	csel	w9, wzr, w9, eq
1000075bc:     	mvn	w11, w8
1000075c0:     	lsr	w10, w10, w11
1000075c4:     	cmp	x8, #31
1000075c8:     	csinv	w8, w10, wzr, lo
1000075cc:     	stp	w9, w8, [sp, #56]
1000075d0:     	mov	x0, sp
1000075d4:     	bl	0x1000075f8 <std::__1::__independent_bits_engine<std::__1::mersenne_twister_engine<unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u>, unsigned long>::__eval(std::__1::integral_constant<bool, true>)>
1000075d8:     	cmp	x0, x20
1000075dc:     	b.hs	0x1000075d0 <long std::__1::uniform_int_distribution<long>::operator()<std::__1::mersenne_twister_engine<unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u>>(std::__1::mersenne_twister_engine<unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u>&, std::__1::uniform_int_distribution<long>::param_type const&)+0x160>
1000075e0:     	ldr	x8, [x19]
1000075e4:     	add	x0, x8, x0
1000075e8:     	ldp	x29, x30, [sp, #80]
1000075ec:     	ldp	x20, x19, [sp, #64]
1000075f0:     	add	sp, sp, #96
1000075f4:     	ret

00000001000075f8 <std::__1::__independent_bits_engine<std::__1::mersenne_twister_engine<unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u>, unsigned long>::__eval(std::__1::integral_constant<bool, true>)>:
1000075f8:     	stp	x20, x19, [sp, #-16]!
1000075fc:     	mov	w9, #-272236544
100007600:     	mov	w10, #22144
100007604:     	movk	w10, #40236, lsl #16
100007608:     	mov	w11, #45279
10000760c:     	movk	w11, #39176, lsl #16
100007610:     	ldr	x12, [x0, #32]
100007614:     	cbz	x12, 0x1000076fc <std::__1::__independent_bits_engine<std::__1::mersenne_twister_engine<unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u>, unsigned long>::__eval(std::__1::integral_constant<bool, true>)+0x104>
100007618:     	mov	x8, #0
10000761c:     	mov	x14, #0
100007620:     	ldr	x13, [x0]
100007624:     	ldr	x15, [x0, #40]
100007628:     	ldr	x16, [x0, #16]
10000762c:     	ldr	x2, [x13, #2496]
100007630:     	mov	x17, #3361
100007634:     	movk	x17, #8402, lsl #16
100007638:     	movk	x17, #53773, lsl #32
10000763c:     	movk	x17, #3360, lsl #48
100007640:     	mov	w1, #624
100007644:     	add	x3, x2, #1
100007648:     	lsr	x4, x3, #4
10000764c:     	umulh	x4, x4, x17
100007650:     	lsr	x4, x4, #1
100007654:     	lsl	x5, x2, #2
100007658:     	add	x6, x2, #397
10000765c:     	msub	x2, x4, x1, x3
100007660:     	ldr	w3, [x13, x5]
100007664:     	and	w3, w3, #0x80000000
100007668:     	ldr	w4, [x13, x2, lsl #2]
10000766c:     	and	w7, w4, #0x7ffffffe
100007670:     	orr	w3, w7, w3
100007674:     	lsr	x7, x6, #4
100007678:     	umulh	x7, x7, x17
10000767c:     	lsr	x7, x7, #1
100007680:     	msub	x6, x7, x1, x6
100007684:     	ldr	w6, [x13, x6, lsl #2]
100007688:     	eor	w3, w6, w3, lsr #1
10000768c:     	sbfx	w4, w4, #0, #1
100007690:     	and	w4, w4, w11
100007694:     	eor	w3, w3, w4
100007698:     	str	w3, [x13, x5]
10000769c:     	eor	w3, w3, w3, lsr #11
1000076a0:     	and	w4, w10, w3, lsl #7
1000076a4:     	eor	w3, w4, w3
1000076a8:     	and	w4, w9, w3, lsl #15
1000076ac:     	eor	w3, w4, w3
1000076b0:     	eor	w3, w3, w3, lsr #18
1000076b4:     	cmp	x15, x3
1000076b8:     	b.ls	0x100007644 <std::__1::__independent_bits_engine<std::__1::mersenne_twister_engine<unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u>, unsigned long>::__eval(std::__1::integral_constant<bool, true>)+0x4c>
1000076bc:     	lsl	x8, x8, x16
1000076c0:     	cmp	x16, #64
1000076c4:     	csel	x8, x8, xzr, lo
1000076c8:     	ldr	w4, [x0, #56]
1000076cc:     	and	x3, x4, x3
1000076d0:     	add	x8, x8, x3
1000076d4:     	add	x14, x14, #1
1000076d8:     	cmp	x14, x12
1000076dc:     	b.ne	0x100007644 <std::__1::__independent_bits_engine<std::__1::mersenne_twister_engine<unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u>, unsigned long>::__eval(std::__1::integral_constant<bool, true>)+0x4c>
1000076e0:     	str	x2, [x13, #2496]
1000076e4:     	ldr	x13, [x0, #24]
1000076e8:     	cmp	x12, x13
1000076ec:     	b.lo	0x10000770c <std::__1::__independent_bits_engine<std::__1::mersenne_twister_engine<unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u>, unsigned long>::__eval(std::__1::integral_constant<bool, true>)+0x114>
1000076f0:     	mov	x0, x8
1000076f4:     	ldp	x20, x19, [sp], #16
1000076f8:     	ret
1000076fc:     	mov	x8, #0
100007700:     	ldr	x13, [x0, #24]
100007704:     	cmp	x12, x13
100007708:     	b.hs	0x1000076f0 <std::__1::__independent_bits_engine<std::__1::mersenne_twister_engine<unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u>, unsigned long>::__eval(std::__1::integral_constant<bool, true>)+0xf8>
10000770c:     	ldr	x14, [x0]
100007710:     	ldr	x15, [x0, #48]
100007714:     	ldr	x16, [x0, #16]
100007718:     	add	x17, x16, #1
10000771c:     	ldr	x3, [x14, #2496]
100007720:     	mov	x1, #3361
100007724:     	movk	x1, #8402, lsl #16
100007728:     	movk	x1, #53773, lsl #32
10000772c:     	movk	x1, #3360, lsl #48
100007730:     	mov	w2, #624
100007734:     	add	x4, x3, #1
100007738:     	lsr	x5, x4, #4
10000773c:     	umulh	x5, x5, x1
100007740:     	lsr	x5, x5, #1
100007744:     	lsl	x6, x3, #2
100007748:     	add	x7, x3, #397
10000774c:     	msub	x3, x5, x2, x4
100007750:     	ldr	w4, [x14, x6]
100007754:     	and	w4, w4, #0x80000000
100007758:     	ldr	w5, [x14, x3, lsl #2]
10000775c:     	and	w19, w5, #0x7ffffffe
100007760:     	orr	w4, w19, w4
100007764:     	lsr	x19, x7, #4
100007768:     	umulh	x19, x19, x1
10000776c:     	lsr	x19, x19, #1
100007770:     	msub	x7, x19, x2, x7
100007774:     	ldr	w7, [x14, x7, lsl #2]
100007778:     	eor	w4, w7, w4, lsr #1
10000777c:     	sbfx	w5, w5, #0, #1
100007780:     	and	w5, w5, w11
100007784:     	eor	w4, w4, w5
100007788:     	str	w4, [x14, x6]
10000778c:     	eor	w4, w4, w4, lsr #11
100007790:     	and	w5, w10, w4, lsl #7
100007794:     	eor	w4, w5, w4
100007798:     	and	w5, w9, w4, lsl #15
10000779c:     	eor	w4, w5, w4
1000077a0:     	eor	w4, w4, w4, lsr #18
1000077a4:     	cmp	x15, x4
1000077a8:     	b.ls	0x100007734 <std::__1::__independent_bits_engine<std::__1::mersenne_twister_engine<unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u>, unsigned long>::__eval(std::__1::integral_constant<bool, true>)+0x13c>
1000077ac:     	lsl	x8, x8, x17
1000077b0:     	cmp	x16, #63
1000077b4:     	csel	x8, x8, xzr, lo
1000077b8:     	ldr	w5, [x0, #60]
1000077bc:     	and	x4, x5, x4
1000077c0:     	add	x8, x8, x4
1000077c4:     	add	x12, x12, #1
1000077c8:     	cmp	x12, x13
1000077cc:     	b.ne	0x100007734 <std::__1::__independent_bits_engine<std::__1::mersenne_twister_engine<unsigned int, 32ul, 624ul, 397ul, 31ul, 2567483615u, 11ul, 4294967295u, 7ul, 2636928640u, 15ul, 4022730752u, 18ul, 1812433253u>, unsigned long>::__eval(std::__1::integral_constant<bool, true>)+0x13c>
1000077d0:     	str	x3, [x14, #2496]
1000077d4:     	mov	x0, x8
1000077d8:     	ldp	x20, x19, [sp], #16
1000077dc:     	ret

00000001000077e0 <std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*> std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__insert_with_size[abi:ue170006]<std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>>(std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run const*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, long)>:
1000077e0:     	sub	sp, sp, #128
1000077e4:     	stp	x26, x25, [sp, #48]
1000077e8:     	stp	x24, x23, [sp, #64]
1000077ec:     	stp	x22, x21, [sp, #80]
1000077f0:     	stp	x20, x19, [sp, #96]
1000077f4:     	stp	x29, x30, [sp, #112]
1000077f8:     	add	x29, sp, #112
1000077fc:     	mov	x19, x1
100007800:     	cmp	x4, #1
100007804:     	b.lt	0x100007a48 <std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*> std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__insert_with_size[abi:ue170006]<std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>>(std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run const*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, long)+0x268>
100007808:     	mov	x22, x4
10000780c:     	mov	x20, x2
100007810:     	mov	x21, x0
100007814:     	ldr	x9, [x0, #16]!
100007818:     	mov	x24, #28087
10000781c:     	movk	x24, #46811, lsl #16
100007820:     	movk	x24, #56173, lsl #32
100007824:     	movk	x24, #28086, lsl #48
100007828:     	ldur	x23, [x0, #-8]
10000782c:     	sub	x8, x9, x23
100007830:     	asr	x8, x8, #6
100007834:     	mul	x8, x8, x24
100007838:     	cmp	x8, x4
10000783c:     	b.ge	0x1000078c8 <std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*> std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__insert_with_size[abi:ue170006]<std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>>(std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run const*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, long)+0xe8>
100007840:     	ldr	x25, [x21]
100007844:     	mov	x8, #9362
100007848:     	movk	x8, #37449, lsl #16
10000784c:     	movk	x8, #18724, lsl #32
100007850:     	movk	x8, #146, lsl #48
100007854:     	sub	x10, x23, x25
100007858:     	asr	x10, x10, #6
10000785c:     	mov	x11, #28087
100007860:     	movk	x11, #46811, lsl #16
100007864:     	movk	x11, #56173, lsl #32
100007868:     	movk	x11, #28086, lsl #48
10000786c:     	madd	x10, x10, x11, x22
100007870:     	cmp	x10, x8
100007874:     	b.hi	0x100007a68 <std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*> std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__insert_with_size[abi:ue170006]<std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>>(std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run const*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, long)+0x288>
100007878:     	sub	x9, x9, x25
10000787c:     	asr	x9, x9, #6
100007880:     	mul	x9, x9, x11
100007884:     	lsl	x11, x9, #1
100007888:     	cmp	x11, x10
10000788c:     	csel	x10, x11, x10, hi
100007890:     	mov	x11, #37449
100007894:     	movk	x11, #18724, lsl #16
100007898:     	movk	x11, #9362, lsl #32
10000789c:     	movk	x11, #73, lsl #48
1000078a0:     	cmp	x9, x11
1000078a4:     	csel	x26, x10, x8, lo
1000078a8:     	str	x0, [sp, #40]
1000078ac:     	cbz	x26, 0x100007960 <std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*> std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__insert_with_size[abi:ue170006]<std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>>(std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run const*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, long)+0x180>
1000078b0:     	cmp	x26, x8
1000078b4:     	b.hi	0x100007a70 <std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*> std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__insert_with_size[abi:ue170006]<std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>>(std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run const*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, long)+0x290>
1000078b8:     	lsl	x8, x26, #9
1000078bc:     	sub	x0, x8, x26, lsl #6
1000078c0:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
1000078c4:     	b	0x100007964 <std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*> std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__insert_with_size[abi:ue170006]<std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>>(std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run const*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, long)+0x184>
1000078c8:     	sub	x25, x23, x19
1000078cc:     	asr	x8, x25, #6
1000078d0:     	mov	x9, #28087
1000078d4:     	movk	x9, #46811, lsl #16
1000078d8:     	movk	x9, #56173, lsl #32
1000078dc:     	movk	x9, #28086, lsl #48
1000078e0:     	mul	x8, x8, x9
1000078e4:     	cmp	x8, x22
1000078e8:     	b.ge	0x100007914 <std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*> std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__insert_with_size[abi:ue170006]<std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>>(std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run const*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, long)+0x134>
1000078ec:     	mov	w9, #448
1000078f0:     	madd	x24, x8, x9, x20
1000078f4:     	mov	x1, x24
1000078f8:     	mov	x2, x3
1000078fc:     	mov	x3, x23
100007900:     	bl	0x100008168 <benchmark::BenchmarkReporter::Run* std::__1::__uninitialized_allocator_copy[abi:ue170006]<std::__1::allocator<benchmark::BenchmarkReporter::Run>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, benchmark::BenchmarkReporter::Run*>(std::__1::allocator<benchmark::BenchmarkReporter::Run>&, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, benchmark::BenchmarkReporter::Run*)>
100007904:     	str	x0, [x21, #8]
100007908:     	cmp	x25, #1
10000790c:     	b.ge	0x10000791c <std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*> std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__insert_with_size[abi:ue170006]<std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>>(std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run const*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, long)+0x13c>
100007910:     	b	0x100007a48 <std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*> std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__insert_with_size[abi:ue170006]<std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>>(std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run const*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, long)+0x268>
100007914:     	mov	w8, #448
100007918:     	madd	x24, x22, x8, x20
10000791c:     	mov	w8, #448
100007920:     	madd	x3, x22, x8, x19
100007924:     	mov	x0, x21
100007928:     	mov	x1, x19
10000792c:     	mov	x2, x23
100007930:     	bl	0x100007a9c <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__move_range(benchmark::BenchmarkReporter::Run*, benchmark::BenchmarkReporter::Run*, benchmark::BenchmarkReporter::Run*)>
100007934:     	cmp	x24, x20
100007938:     	b.eq	0x100007a48 <std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*> std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__insert_with_size[abi:ue170006]<std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>>(std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run const*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, long)+0x268>
10000793c:     	mov	x21, x19
100007940:     	mov	x0, x21
100007944:     	mov	x1, x20
100007948:     	bl	0x1000094a8 <benchmark::BenchmarkReporter::Run::operator=(benchmark::BenchmarkReporter::Run const&)>
10000794c:     	add	x20, x20, #448
100007950:     	add	x21, x21, #448
100007954:     	cmp	x20, x24
100007958:     	b.ne	0x100007940 <std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*> std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__insert_with_size[abi:ue170006]<std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>>(std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run const*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, long)+0x160>
10000795c:     	b	0x100007a48 <std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*> std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__insert_with_size[abi:ue170006]<std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>>(std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run const*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, long)+0x268>
100007960:     	mov	x0, #0
100007964:     	sub	x8, x19, x25
100007968:     	asr	x8, x8, #6
10000796c:     	mul	x8, x8, x24
100007970:     	mov	w9, #448
100007974:     	madd	x23, x8, x9, x0
100007978:     	stp	x0, x23, [sp, #8]
10000797c:     	madd	x8, x26, x9, x0
100007980:     	stp	x23, x8, [sp, #24]
100007984:     	lsl	x8, x22, #9
100007988:     	sub	x24, x8, x22, lsl #6
10000798c:     	add	x22, x23, x24
100007990:     	mov	x0, x23
100007994:     	mov	x1, x20
100007998:     	bl	0x1000081f0 <benchmark::BenchmarkReporter::Run::Run(benchmark::BenchmarkReporter::Run const&)>
10000799c:     	add	x23, x23, #448
1000079a0:     	add	x20, x20, #448
1000079a4:     	subs	x24, x24, #448
1000079a8:     	b.ne	0x100007990 <std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*> std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__insert_with_size[abi:ue170006]<std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>>(std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run const*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, long)+0x1b0>
1000079ac:     	str	x22, [sp, #24]
1000079b0:     	add	x1, sp, #8
1000079b4:     	mov	x0, x21
1000079b8:     	mov	x2, x19
1000079bc:     	bl	0x100007ce4 <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__swap_out_circular_buffer(std::__1::__split_buffer<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>&>&, benchmark::BenchmarkReporter::Run*)>
1000079c0:     	mov	x19, x0
1000079c4:     	ldr	x21, [sp, #16]
1000079c8:     	b	0x1000079d4 <std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*> std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__insert_with_size[abi:ue170006]<std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>>(std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run const*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, long)+0x1f4>
1000079cc:     	mov	x0, x20
1000079d0:     	bl	0x1000090c8 <benchmark::BenchmarkName::~BenchmarkName()>
1000079d4:     	ldr	x22, [sp, #24]
1000079d8:     	cmp	x22, x21
1000079dc:     	b.eq	0x100007a3c <std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*> std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__insert_with_size[abi:ue170006]<std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>>(std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run const*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, long)+0x25c>
1000079e0:     	sub	x20, x22, #448
1000079e4:     	str	x20, [sp, #24]
1000079e8:     	sub	x0, x22, #40
1000079ec:     	ldur	x1, [x22, #-32]
1000079f0:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
1000079f4:     	ldursb	w8, [x22, #-145]
1000079f8:     	tbnz	w8, #31, 0x100007a10 <std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*> std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__insert_with_size[abi:ue170006]<std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>>(std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run const*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, long)+0x230>
1000079fc:     	ldursb	w8, [x22, #-177]
100007a00:     	tbnz	w8, #31, 0x100007a20 <std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*> std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__insert_with_size[abi:ue170006]<std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>>(std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run const*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, long)+0x240>
100007a04:     	ldursb	w8, [x22, #-209]
100007a08:     	tbz	w8, #31, 0x1000079cc <std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*> std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__insert_with_size[abi:ue170006]<std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>>(std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run const*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, long)+0x1ec>
100007a0c:     	b	0x100007a30 <std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*> std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__insert_with_size[abi:ue170006]<std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>>(std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run const*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, long)+0x250>
100007a10:     	ldur	x0, [x22, #-168]
100007a14:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100007a18:     	ldursb	w8, [x22, #-177]
100007a1c:     	tbz	w8, #31, 0x100007a04 <std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*> std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__insert_with_size[abi:ue170006]<std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>>(std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run const*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, long)+0x224>
100007a20:     	ldur	x0, [x22, #-200]
100007a24:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100007a28:     	ldursb	w8, [x22, #-209]
100007a2c:     	tbz	w8, #31, 0x1000079cc <std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*> std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__insert_with_size[abi:ue170006]<std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>>(std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run const*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, long)+0x1ec>
100007a30:     	ldur	x0, [x22, #-232]
100007a34:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100007a38:     	b	0x1000079cc <std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*> std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__insert_with_size[abi:ue170006]<std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>>(std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run const*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, long)+0x1ec>
100007a3c:     	ldr	x0, [sp, #8]
100007a40:     	cbz	x0, 0x100007a48 <std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*> std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__insert_with_size[abi:ue170006]<std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>>(std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run const*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, long)+0x268>
100007a44:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100007a48:     	mov	x0, x19
100007a4c:     	ldp	x29, x30, [sp, #112]
100007a50:     	ldp	x20, x19, [sp, #96]
100007a54:     	ldp	x22, x21, [sp, #80]
100007a58:     	ldp	x24, x23, [sp, #64]
100007a5c:     	ldp	x26, x25, [sp, #48]
100007a60:     	add	sp, sp, #128
100007a64:     	ret
100007a68:     	mov	x0, x21
100007a6c:     	bl	0x100009b30 <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__throw_length_error[abi:ue170006]() const>
100007a70:     	bl	0x100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>
100007a74:     	str	x23, [x21, #8]
100007a78:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
100007a7c:     	mov	x19, x0
100007a80:     	b	0x100007a8c <std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*> std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__insert_with_size[abi:ue170006]<std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>>(std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run const*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, long)+0x2ac>
100007a84:     	mov	x19, x0
100007a88:     	str	x23, [sp, #24]
100007a8c:     	add	x0, sp, #8
100007a90:     	bl	0x100008138 <std::__1::__split_buffer<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>&>::~__split_buffer()>
100007a94:     	mov	x0, x19
100007a98:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100007a9c <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__move_range(benchmark::BenchmarkReporter::Run*, benchmark::BenchmarkReporter::Run*, benchmark::BenchmarkReporter::Run*)>:
100007a9c:     	stp	x22, x21, [sp, #-48]!
100007aa0:     	stp	x20, x19, [sp, #16]
100007aa4:     	stp	x29, x30, [sp, #32]
100007aa8:     	add	x29, sp, #32
100007aac:     	ldr	x8, [x0, #8]
100007ab0:     	sub	x9, x8, x3
100007ab4:     	add	x10, x1, x9
100007ab8:     	mov	x11, x8
100007abc:     	cmp	x10, x2
100007ac0:     	b.hs	0x100007c88 <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__move_range(benchmark::BenchmarkReporter::Run*, benchmark::BenchmarkReporter::Run*, benchmark::BenchmarkReporter::Run*)+0x1ec>
100007ac4:     	mov	x11, #0
100007ac8:     	b	0x100007afc <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__move_range(benchmark::BenchmarkReporter::Run*, benchmark::BenchmarkReporter::Run*, benchmark::BenchmarkReporter::Run*)+0x60>
100007acc:     	add	x13, x12, #416
100007ad0:     	str	x14, [x15, #16]
100007ad4:     	str	x13, [x12, #408]
100007ad8:     	stp	xzr, xzr, [x13]
100007adc:     	add	x12, x8, x11
100007ae0:     	add	x13, x10, x11
100007ae4:     	ldr	q0, [x13, #432]
100007ae8:     	str	q0, [x12, #432]
100007aec:     	add	x11, x11, #448
100007af0:     	add	x12, x10, x11
100007af4:     	cmp	x12, x2
100007af8:     	b.hs	0x100007c84 <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__move_range(benchmark::BenchmarkReporter::Run*, benchmark::BenchmarkReporter::Run*, benchmark::BenchmarkReporter::Run*)+0x1e8>
100007afc:     	add	x13, x8, x11
100007b00:     	add	x12, x10, x11
100007b04:     	ldr	q0, [x12]
100007b08:     	ldr	x14, [x12, #16]
100007b0c:     	str	x14, [x13, #16]
100007b10:     	str	q0, [x13]
100007b14:     	stp	xzr, xzr, [x12, #8]
100007b18:     	str	xzr, [x12]
100007b1c:     	ldur	q0, [x12, #24]
100007b20:     	ldr	x14, [x12, #40]
100007b24:     	str	x14, [x13, #40]
100007b28:     	stur	q0, [x13, #24]
100007b2c:     	stp	xzr, xzr, [x12, #32]
100007b30:     	str	xzr, [x12, #24]
100007b34:     	ldr	q0, [x12, #48]
100007b38:     	ldr	x14, [x12, #64]
100007b3c:     	str	x14, [x13, #64]
100007b40:     	str	q0, [x13, #48]
100007b44:     	stp	xzr, xzr, [x12, #56]
100007b48:     	str	xzr, [x12, #48]
100007b4c:     	ldur	q0, [x12, #72]
100007b50:     	ldr	x14, [x12, #88]
100007b54:     	str	x14, [x13, #88]
100007b58:     	stur	q0, [x13, #72]
100007b5c:     	stp	xzr, xzr, [x12, #72]
100007b60:     	str	xzr, [x12, #88]
100007b64:     	ldr	q0, [x12, #96]
100007b68:     	ldr	x14, [x12, #112]
100007b6c:     	str	x14, [x13, #112]
100007b70:     	str	q0, [x13, #96]
100007b74:     	stp	xzr, xzr, [x12, #96]
100007b78:     	str	xzr, [x12, #112]
100007b7c:     	ldur	q0, [x12, #120]
100007b80:     	ldr	x14, [x12, #136]
100007b84:     	str	x14, [x13, #136]
100007b88:     	stur	q0, [x13, #120]
100007b8c:     	stp	xzr, xzr, [x12, #120]
100007b90:     	str	xzr, [x12, #136]
100007b94:     	ldr	q0, [x12, #144]
100007b98:     	ldr	x14, [x12, #160]
100007b9c:     	str	x14, [x13, #160]
100007ba0:     	str	q0, [x13, #144]
100007ba4:     	stp	xzr, xzr, [x12, #144]
100007ba8:     	str	xzr, [x12, #160]
100007bac:     	ldur	q0, [x12, #168]
100007bb0:     	ldr	x14, [x12, #184]
100007bb4:     	str	x14, [x13, #184]
100007bb8:     	stur	q0, [x13, #168]
100007bbc:     	stp	xzr, xzr, [x12, #168]
100007bc0:     	str	xzr, [x12, #184]
100007bc4:     	ldr	q0, [x12, #192]
100007bc8:     	ldr	w14, [x12, #208]
100007bcc:     	str	w14, [x13, #208]
100007bd0:     	str	q0, [x13, #192]
100007bd4:     	ldur	q0, [x12, #216]
100007bd8:     	ldr	x14, [x12, #232]
100007bdc:     	str	x14, [x13, #232]
100007be0:     	stur	q0, [x13, #216]
100007be4:     	stp	xzr, xzr, [x12, #216]
100007be8:     	str	xzr, [x12, #232]
100007bec:     	ldr	w14, [x12, #240]
100007bf0:     	str	w14, [x13, #240]
100007bf4:     	ldur	q0, [x12, #248]
100007bf8:     	ldr	x14, [x12, #264]
100007bfc:     	str	x14, [x13, #264]
100007c00:     	stur	q0, [x13, #248]
100007c04:     	stp	xzr, xzr, [x12, #256]
100007c08:     	str	xzr, [x12, #248]
100007c0c:     	ldr	w14, [x12, #272]
100007c10:     	str	w14, [x13, #272]
100007c14:     	add	x14, x13, #280
100007c18:     	add	x15, x12, #280
100007c1c:     	ldr	q0, [x15]
100007c20:     	ldr	x15, [x12, #296]
100007c24:     	str	x15, [x13, #296]
100007c28:     	str	q0, [x14]
100007c2c:     	stp	xzr, xzr, [x12, #288]
100007c30:     	str	xzr, [x12, #280]
100007c34:     	ldp	q1, q0, [x12, #352]
100007c38:     	ldrh	w14, [x12, #400]
100007c3c:     	ldr	q2, [x12, #384]
100007c40:     	str	q2, [x13, #384]
100007c44:     	strh	w14, [x13, #400]
100007c48:     	ldp	q2, q3, [x12, #304]
100007c4c:     	ldr	q4, [x12, #336]
100007c50:     	stp	q2, q3, [x13, #304]
100007c54:     	stp	q4, q1, [x13, #336]
100007c58:     	str	q0, [x13, #368]
100007c5c:     	ldr	x14, [x12, #408]
100007c60:     	str	x14, [x13, #408]
100007c64:     	add	x14, x13, #416
100007c68:     	ldr	x15, [x12, #416]
100007c6c:     	str	x15, [x13, #416]
100007c70:     	ldr	x16, [x12, #424]
100007c74:     	str	x16, [x13, #424]
100007c78:     	cbnz	x16, 0x100007acc <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__move_range(benchmark::BenchmarkReporter::Run*, benchmark::BenchmarkReporter::Run*, benchmark::BenchmarkReporter::Run*)+0x30>
100007c7c:     	str	x14, [x13, #408]
100007c80:     	b	0x100007adc <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__move_range(benchmark::BenchmarkReporter::Run*, benchmark::BenchmarkReporter::Run*, benchmark::BenchmarkReporter::Run*)+0x40>
100007c84:     	add	x11, x8, x11
100007c88:     	str	x11, [x0, #8]
100007c8c:     	cmp	x8, x3
100007c90:     	b.eq	0x100007cd4 <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__move_range(benchmark::BenchmarkReporter::Run*, benchmark::BenchmarkReporter::Run*, benchmark::BenchmarkReporter::Run*)+0x238>
100007c94:     	asr	x9, x9, #6
100007c98:     	mov	x10, #28087
100007c9c:     	movk	x10, #46811, lsl #16
100007ca0:     	movk	x10, #56173, lsl #32
100007ca4:     	movk	x10, #28086, lsl #48
100007ca8:     	mul	x9, x9, x10
100007cac:     	sub	x19, x8, #448
100007cb0:     	lsl	x8, x9, #9
100007cb4:     	sub	x20, x8, x9, lsl #6
100007cb8:     	sub	x21, x1, #448
100007cbc:     	add	x1, x21, x20
100007cc0:     	mov	x0, x19
100007cc4:     	bl	0x1000091b0 <benchmark::BenchmarkReporter::Run::operator=(benchmark::BenchmarkReporter::Run&&)>
100007cc8:     	sub	x19, x19, #448
100007ccc:     	subs	x20, x20, #448
100007cd0:     	b.ne	0x100007cbc <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__move_range(benchmark::BenchmarkReporter::Run*, benchmark::BenchmarkReporter::Run*, benchmark::BenchmarkReporter::Run*)+0x220>
100007cd4:     	ldp	x29, x30, [sp, #32]
100007cd8:     	ldp	x20, x19, [sp, #16]
100007cdc:     	ldp	x22, x21, [sp], #48
100007ce0:     	ret

0000000100007ce4 <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__swap_out_circular_buffer(std::__1::__split_buffer<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>&>&, benchmark::BenchmarkReporter::Run*)>:
100007ce4:     	mov	x8, x0
100007ce8:     	ldr	x0, [x1, #8]
100007cec:     	ldr	x9, [x8]
100007cf0:     	mov	x11, x0
100007cf4:     	cmp	x9, x2
100007cf8:     	b.eq	0x100007f20 <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__swap_out_circular_buffer(std::__1::__split_buffer<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>&>&, benchmark::BenchmarkReporter::Run*)+0x23c>
100007cfc:     	mov	x10, #0
100007d00:     	b	0x100007d30 <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__swap_out_circular_buffer(std::__1::__split_buffer<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>&>&, benchmark::BenchmarkReporter::Run*)+0x4c>
100007d04:     	str	x14, [x15, #16]
100007d08:     	stur	x13, [x11, #-40]
100007d0c:     	stp	xzr, xzr, [x13]
100007d10:     	add	x11, x0, x10
100007d14:     	add	x12, x2, x10
100007d18:     	ldur	q0, [x12, #-16]
100007d1c:     	stur	q0, [x11, #-16]
100007d20:     	sub	x10, x10, #448
100007d24:     	add	x11, x2, x10
100007d28:     	cmp	x11, x9
100007d2c:     	b.eq	0x100007f1c <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__swap_out_circular_buffer(std::__1::__split_buffer<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>&>&, benchmark::BenchmarkReporter::Run*)+0x238>
100007d30:     	add	x12, x0, x10
100007d34:     	sub	x13, x12, #448
100007d38:     	add	x11, x2, x10
100007d3c:     	sub	x14, x11, #448
100007d40:     	ldr	q0, [x14]
100007d44:     	ldr	x15, [x14, #16]
100007d48:     	str	x15, [x13, #16]
100007d4c:     	str	q0, [x13]
100007d50:     	stp	xzr, xzr, [x14, #8]
100007d54:     	str	xzr, [x14]
100007d58:     	sub	x13, x12, #424
100007d5c:     	sub	x14, x11, #424
100007d60:     	ldr	q0, [x14]
100007d64:     	ldr	x15, [x14, #16]
100007d68:     	str	x15, [x13, #16]
100007d6c:     	str	q0, [x13]
100007d70:     	stp	xzr, xzr, [x14, #8]
100007d74:     	str	xzr, [x14]
100007d78:     	sub	x13, x12, #400
100007d7c:     	sub	x14, x11, #400
100007d80:     	ldr	q0, [x14]
100007d84:     	ldr	x15, [x14, #16]
100007d88:     	str	x15, [x13, #16]
100007d8c:     	str	q0, [x13]
100007d90:     	stp	xzr, xzr, [x14, #8]
100007d94:     	str	xzr, [x14]
100007d98:     	sub	x13, x12, #376
100007d9c:     	sub	x14, x11, #376
100007da0:     	ldr	q0, [x14]
100007da4:     	ldr	x15, [x14, #16]
100007da8:     	str	x15, [x13, #16]
100007dac:     	str	q0, [x13]
100007db0:     	sub	x13, x11, #368
100007db4:     	str	xzr, [x13]
100007db8:     	str	xzr, [x14]
100007dbc:     	str	xzr, [x14, #16]
100007dc0:     	sub	x13, x12, #352
100007dc4:     	sub	x14, x11, #352
100007dc8:     	ldr	q0, [x14]
100007dcc:     	ldr	x15, [x14, #16]
100007dd0:     	str	x15, [x13, #16]
100007dd4:     	str	q0, [x13]
100007dd8:     	sub	x13, x11, #344
100007ddc:     	str	xzr, [x13]
100007de0:     	str	xzr, [x14]
100007de4:     	str	xzr, [x14, #16]
100007de8:     	sub	x13, x12, #328
100007dec:     	sub	x14, x11, #328
100007df0:     	ldr	q0, [x14]
100007df4:     	ldr	x15, [x14, #16]
100007df8:     	str	x15, [x13, #16]
100007dfc:     	str	q0, [x13]
100007e00:     	sub	x13, x11, #320
100007e04:     	str	xzr, [x13]
100007e08:     	str	xzr, [x14]
100007e0c:     	str	xzr, [x14, #16]
100007e10:     	sub	x13, x12, #304
100007e14:     	sub	x14, x11, #304
100007e18:     	ldr	q0, [x14]
100007e1c:     	ldr	x15, [x14, #16]
100007e20:     	str	x15, [x13, #16]
100007e24:     	str	q0, [x13]
100007e28:     	sub	x13, x11, #296
100007e2c:     	str	xzr, [x13]
100007e30:     	str	xzr, [x14]
100007e34:     	str	xzr, [x14, #16]
100007e38:     	sub	x13, x12, #280
100007e3c:     	sub	x14, x11, #280
100007e40:     	ldr	q0, [x14]
100007e44:     	ldr	x15, [x14, #16]
100007e48:     	str	x15, [x13, #16]
100007e4c:     	str	q0, [x13]
100007e50:     	sub	x13, x11, #272
100007e54:     	str	xzr, [x13]
100007e58:     	str	xzr, [x14]
100007e5c:     	str	xzr, [x14, #16]
100007e60:     	ldur	q0, [x11, #-256]
100007e64:     	ldur	w13, [x11, #-240]
100007e68:     	stur	w13, [x12, #-240]
100007e6c:     	stur	q0, [x12, #-256]
100007e70:     	ldur	q0, [x11, #-232]
100007e74:     	ldur	x13, [x11, #-216]
100007e78:     	stur	x13, [x12, #-216]
100007e7c:     	stur	q0, [x12, #-232]
100007e80:     	stp	xzr, xzr, [x11, #-232]
100007e84:     	stur	xzr, [x11, #-216]
100007e88:     	ldur	w13, [x11, #-208]
100007e8c:     	stur	w13, [x12, #-208]
100007e90:     	ldur	q0, [x11, #-200]
100007e94:     	ldur	x13, [x11, #-184]
100007e98:     	stur	x13, [x12, #-184]
100007e9c:     	stur	q0, [x12, #-200]
100007ea0:     	stp	xzr, xzr, [x11, #-192]
100007ea4:     	stur	xzr, [x11, #-200]
100007ea8:     	ldur	w13, [x11, #-176]
100007eac:     	stur	w13, [x12, #-176]
100007eb0:     	ldur	q0, [x11, #-168]
100007eb4:     	ldur	x13, [x11, #-152]
100007eb8:     	stur	x13, [x12, #-152]
100007ebc:     	stur	q0, [x12, #-168]
100007ec0:     	stp	xzr, xzr, [x11, #-160]
100007ec4:     	stur	xzr, [x11, #-168]
100007ec8:     	ldp	q1, q0, [x11, #-96]
100007ecc:     	ldurh	w13, [x11, #-48]
100007ed0:     	ldur	q2, [x11, #-64]
100007ed4:     	stur	q2, [x12, #-64]
100007ed8:     	sturh	w13, [x12, #-48]
100007edc:     	ldp	q2, q3, [x11, #-144]
100007ee0:     	ldur	q4, [x11, #-112]
100007ee4:     	stp	q2, q3, [x12, #-144]
100007ee8:     	stp	q4, q1, [x12, #-112]
100007eec:     	stur	q0, [x12, #-80]
100007ef0:     	ldur	x13, [x11, #-40]
100007ef4:     	stur	x13, [x12, #-40]
100007ef8:     	mov	x13, x11
100007efc:     	ldr	x15, [x13, #-32]!
100007f00:     	mov	x14, x12
100007f04:     	str	x15, [x14, #-32]!
100007f08:     	ldur	x16, [x11, #-24]
100007f0c:     	stur	x16, [x12, #-24]
100007f10:     	cbnz	x16, 0x100007d04 <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__swap_out_circular_buffer(std::__1::__split_buffer<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>&>&, benchmark::BenchmarkReporter::Run*)+0x20>
100007f14:     	stur	x14, [x12, #-40]
100007f18:     	b	0x100007d10 <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__swap_out_circular_buffer(std::__1::__split_buffer<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>&>&, benchmark::BenchmarkReporter::Run*)+0x2c>
100007f1c:     	add	x11, x0, x10
100007f20:     	str	x11, [x1, #8]
100007f24:     	ldr	x10, [x8, #8]
100007f28:     	ldr	x9, [x1, #16]
100007f2c:     	cmp	x10, x2
100007f30:     	b.eq	0x1000080fc <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__swap_out_circular_buffer(std::__1::__split_buffer<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>&>&, benchmark::BenchmarkReporter::Run*)+0x418>
100007f34:     	mov	x11, #0
100007f38:     	b	0x100007f6c <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__swap_out_circular_buffer(std::__1::__split_buffer<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>&>&, benchmark::BenchmarkReporter::Run*)+0x288>
100007f3c:     	add	x13, x12, #416
100007f40:     	str	x14, [x15, #16]
100007f44:     	str	x13, [x12, #408]
100007f48:     	stp	xzr, xzr, [x13]
100007f4c:     	add	x12, x9, x11
100007f50:     	add	x13, x2, x11
100007f54:     	ldr	q0, [x13, #432]
100007f58:     	str	q0, [x12, #432]
100007f5c:     	add	x11, x11, #448
100007f60:     	add	x12, x2, x11
100007f64:     	cmp	x12, x10
100007f68:     	b.eq	0x1000080f4 <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__swap_out_circular_buffer(std::__1::__split_buffer<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>&>&, benchmark::BenchmarkReporter::Run*)+0x410>
100007f6c:     	add	x13, x9, x11
100007f70:     	add	x12, x2, x11
100007f74:     	ldr	q0, [x12]
100007f78:     	ldr	x14, [x12, #16]
100007f7c:     	str	x14, [x13, #16]
100007f80:     	str	q0, [x13]
100007f84:     	stp	xzr, xzr, [x12, #8]
100007f88:     	str	xzr, [x12]
100007f8c:     	ldur	q0, [x12, #24]
100007f90:     	ldr	x14, [x12, #40]
100007f94:     	str	x14, [x13, #40]
100007f98:     	stur	q0, [x13, #24]
100007f9c:     	stp	xzr, xzr, [x12, #32]
100007fa0:     	str	xzr, [x12, #24]
100007fa4:     	ldr	q0, [x12, #48]
100007fa8:     	ldr	x14, [x12, #64]
100007fac:     	str	x14, [x13, #64]
100007fb0:     	str	q0, [x13, #48]
100007fb4:     	stp	xzr, xzr, [x12, #56]
100007fb8:     	str	xzr, [x12, #48]
100007fbc:     	ldur	q0, [x12, #72]
100007fc0:     	ldr	x14, [x12, #88]
100007fc4:     	str	x14, [x13, #88]
100007fc8:     	stur	q0, [x13, #72]
100007fcc:     	stp	xzr, xzr, [x12, #72]
100007fd0:     	str	xzr, [x12, #88]
100007fd4:     	ldr	q0, [x12, #96]
100007fd8:     	ldr	x14, [x12, #112]
100007fdc:     	str	x14, [x13, #112]
100007fe0:     	str	q0, [x13, #96]
100007fe4:     	stp	xzr, xzr, [x12, #96]
100007fe8:     	str	xzr, [x12, #112]
100007fec:     	ldur	q0, [x12, #120]
100007ff0:     	ldr	x14, [x12, #136]
100007ff4:     	str	x14, [x13, #136]
100007ff8:     	stur	q0, [x13, #120]
100007ffc:     	stp	xzr, xzr, [x12, #120]
100008000:     	str	xzr, [x12, #136]
100008004:     	ldr	q0, [x12, #144]
100008008:     	ldr	x14, [x12, #160]
10000800c:     	str	x14, [x13, #160]
100008010:     	str	q0, [x13, #144]
100008014:     	stp	xzr, xzr, [x12, #144]
100008018:     	str	xzr, [x12, #160]
10000801c:     	ldur	q0, [x12, #168]
100008020:     	ldr	x14, [x12, #184]
100008024:     	str	x14, [x13, #184]
100008028:     	stur	q0, [x13, #168]
10000802c:     	stp	xzr, xzr, [x12, #168]
100008030:     	str	xzr, [x12, #184]
100008034:     	ldr	q0, [x12, #192]
100008038:     	ldr	w14, [x12, #208]
10000803c:     	str	w14, [x13, #208]
100008040:     	str	q0, [x13, #192]
100008044:     	ldur	q0, [x12, #216]
100008048:     	ldr	x14, [x12, #232]
10000804c:     	str	x14, [x13, #232]
100008050:     	stur	q0, [x13, #216]
100008054:     	stp	xzr, xzr, [x12, #216]
100008058:     	str	xzr, [x12, #232]
10000805c:     	ldr	w14, [x12, #240]
100008060:     	str	w14, [x13, #240]
100008064:     	ldur	q0, [x12, #248]
100008068:     	ldr	x14, [x12, #264]
10000806c:     	str	x14, [x13, #264]
100008070:     	stur	q0, [x13, #248]
100008074:     	stp	xzr, xzr, [x12, #256]
100008078:     	str	xzr, [x12, #248]
10000807c:     	ldr	w14, [x12, #272]
100008080:     	str	w14, [x13, #272]
100008084:     	add	x14, x13, #280
100008088:     	add	x15, x12, #280
10000808c:     	ldr	q0, [x15]
100008090:     	ldr	x15, [x12, #296]
100008094:     	str	x15, [x13, #296]
100008098:     	str	q0, [x14]
10000809c:     	stp	xzr, xzr, [x12, #288]
1000080a0:     	str	xzr, [x12, #280]
1000080a4:     	ldp	q1, q0, [x12, #352]
1000080a8:     	ldrh	w14, [x12, #400]
1000080ac:     	ldr	q2, [x12, #384]
1000080b0:     	str	q2, [x13, #384]
1000080b4:     	strh	w14, [x13, #400]
1000080b8:     	ldp	q2, q3, [x12, #304]
1000080bc:     	ldr	q4, [x12, #336]
1000080c0:     	stp	q2, q3, [x13, #304]
1000080c4:     	stp	q4, q1, [x13, #336]
1000080c8:     	str	q0, [x13, #368]
1000080cc:     	ldr	x14, [x12, #408]
1000080d0:     	str	x14, [x13, #408]
1000080d4:     	add	x14, x13, #416
1000080d8:     	ldr	x15, [x12, #416]
1000080dc:     	str	x15, [x13, #416]
1000080e0:     	ldr	x16, [x12, #424]
1000080e4:     	str	x16, [x13, #424]
1000080e8:     	cbnz	x16, 0x100007f3c <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__swap_out_circular_buffer(std::__1::__split_buffer<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>&>&, benchmark::BenchmarkReporter::Run*)+0x258>
1000080ec:     	str	x14, [x13, #408]
1000080f0:     	b	0x100007f4c <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__swap_out_circular_buffer(std::__1::__split_buffer<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>&>&, benchmark::BenchmarkReporter::Run*)+0x268>
1000080f4:     	add	x9, x9, x11
1000080f8:     	ldr	x11, [x1, #8]
1000080fc:     	str	x9, [x1, #16]
100008100:     	ldr	x9, [x8]
100008104:     	str	x11, [x8]
100008108:     	str	x9, [x1, #8]
10000810c:     	ldr	x9, [x8, #8]
100008110:     	ldr	x10, [x1, #16]
100008114:     	str	x10, [x8, #8]
100008118:     	str	x9, [x1, #16]
10000811c:     	ldr	x9, [x8, #16]
100008120:     	ldr	x10, [x1, #24]
100008124:     	str	x10, [x8, #16]
100008128:     	str	x9, [x1, #24]
10000812c:     	ldr	x8, [x1, #8]
100008130:     	str	x8, [x1]
100008134:     	ret

0000000100008138 <std::__1::__split_buffer<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>&>::~__split_buffer()>:
100008138:     	stp	x20, x19, [sp, #-32]!
10000813c:     	stp	x29, x30, [sp, #16]
100008140:     	add	x29, sp, #16
100008144:     	mov	x19, x0
100008148:     	bl	0x100009b44 <std::__1::__split_buffer<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>&>::clear[abi:ue170006]()>
10000814c:     	ldr	x0, [x19]
100008150:     	cbz	x0, 0x100008158 <std::__1::__split_buffer<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>&>::~__split_buffer()+0x20>
100008154:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100008158:     	mov	x0, x19
10000815c:     	ldp	x29, x30, [sp, #16]
100008160:     	ldp	x20, x19, [sp], #32
100008164:     	ret

0000000100008168 <benchmark::BenchmarkReporter::Run* std::__1::__uninitialized_allocator_copy[abi:ue170006]<std::__1::allocator<benchmark::BenchmarkReporter::Run>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, benchmark::BenchmarkReporter::Run*>(std::__1::allocator<benchmark::BenchmarkReporter::Run>&, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, benchmark::BenchmarkReporter::Run*)>:
100008168:     	stp	x24, x23, [sp, #-64]!
10000816c:     	stp	x22, x21, [sp, #16]
100008170:     	stp	x20, x19, [sp, #32]
100008174:     	stp	x29, x30, [sp, #48]
100008178:     	add	x29, sp, #48
10000817c:     	mov	x19, x3
100008180:     	cmp	x1, x2
100008184:     	b.eq	0x1000081b8 <benchmark::BenchmarkReporter::Run* std::__1::__uninitialized_allocator_copy[abi:ue170006]<std::__1::allocator<benchmark::BenchmarkReporter::Run>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, benchmark::BenchmarkReporter::Run*>(std::__1::allocator<benchmark::BenchmarkReporter::Run>&, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, benchmark::BenchmarkReporter::Run*)+0x50>
100008188:     	mov	x20, x2
10000818c:     	mov	x21, x1
100008190:     	mov	x23, #0
100008194:     	add	x22, x19, x23
100008198:     	add	x1, x21, x23
10000819c:     	mov	x0, x22
1000081a0:     	bl	0x1000081f0 <benchmark::BenchmarkReporter::Run::Run(benchmark::BenchmarkReporter::Run const&)>
1000081a4:     	add	x23, x23, #448
1000081a8:     	add	x8, x21, x23
1000081ac:     	cmp	x8, x20
1000081b0:     	b.ne	0x100008194 <benchmark::BenchmarkReporter::Run* std::__1::__uninitialized_allocator_copy[abi:ue170006]<std::__1::allocator<benchmark::BenchmarkReporter::Run>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, benchmark::BenchmarkReporter::Run*>(std::__1::allocator<benchmark::BenchmarkReporter::Run>&, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, benchmark::BenchmarkReporter::Run*)+0x2c>
1000081b4:     	add	x19, x19, x23
1000081b8:     	mov	x0, x19
1000081bc:     	ldp	x29, x30, [sp, #48]
1000081c0:     	ldp	x20, x19, [sp, #32]
1000081c4:     	ldp	x22, x21, [sp, #16]
1000081c8:     	ldp	x24, x23, [sp], #64
1000081cc:     	ret
1000081d0:     	mov	x20, x0
1000081d4:     	cmp	x22, x19
1000081d8:     	b.eq	0x1000081e8 <benchmark::BenchmarkReporter::Run* std::__1::__uninitialized_allocator_copy[abi:ue170006]<std::__1::allocator<benchmark::BenchmarkReporter::Run>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, benchmark::BenchmarkReporter::Run*>(std::__1::allocator<benchmark::BenchmarkReporter::Run>&, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, benchmark::BenchmarkReporter::Run*)+0x80>
1000081dc:     	mov	x0, x22
1000081e0:     	mov	x1, x19
1000081e4:     	bl	0x10002eab0 <benchmark::BenchmarkReporter::Run* std::__1::__uninitialized_allocator_copy[abi:ue170006]<std::__1::allocator<benchmark::BenchmarkReporter::Run>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, benchmark::BenchmarkReporter::Run*>(std::__1::allocator<benchmark::BenchmarkReporter::Run>&, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, benchmark::BenchmarkReporter::Run*) (.cold.1)>
1000081e8:     	mov	x0, x20
1000081ec:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

00000001000081f0 <benchmark::BenchmarkReporter::Run::Run(benchmark::BenchmarkReporter::Run const&)>:
1000081f0:     	stp	x28, x27, [sp, #-96]!
1000081f4:     	stp	x26, x25, [sp, #16]
1000081f8:     	stp	x24, x23, [sp, #32]
1000081fc:     	stp	x22, x21, [sp, #48]
100008200:     	stp	x20, x19, [sp, #64]
100008204:     	stp	x29, x30, [sp, #80]
100008208:     	add	x29, sp, #80
10000820c:     	mov	x21, x1
100008210:     	mov	x19, x0
100008214:     	bl	0x100008540 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)>
100008218:     	ldr	q0, [x21, #192]
10000821c:     	ldr	w8, [x21, #208]
100008220:     	str	w8, [x0, #208]
100008224:     	str	q0, [x0, #192]
100008228:     	add	x20, x0, #216
10000822c:     	ldrsb	w8, [x21, #239]
100008230:     	tbnz	w8, #31, 0x10000829c <benchmark::BenchmarkReporter::Run::Run(benchmark::BenchmarkReporter::Run const&)+0xac>
100008234:     	add	x8, x21, #216
100008238:     	ldr	q0, [x8]
10000823c:     	ldr	x8, [x8, #16]
100008240:     	str	x8, [x20, #16]
100008244:     	str	q0, [x20]
100008248:     	ldr	w8, [x21, #240]
10000824c:     	str	w8, [x19, #240]
100008250:     	add	x22, x19, #248
100008254:     	ldrsb	w8, [x21, #271]
100008258:     	tbnz	w8, #31, 0x100008300 <benchmark::BenchmarkReporter::Run::Run(benchmark::BenchmarkReporter::Run const&)+0x110>
10000825c:     	add	x8, x21, #248
100008260:     	ldr	q0, [x8]
100008264:     	ldr	x8, [x8, #16]
100008268:     	str	x8, [x22, #16]
10000826c:     	str	q0, [x22]
100008270:     	ldr	w8, [x21, #272]
100008274:     	str	w8, [x19, #272]
100008278:     	add	x23, x19, #280
10000827c:     	ldrsb	w8, [x21, #303]
100008280:     	tbnz	w8, #31, 0x100008364 <benchmark::BenchmarkReporter::Run::Run(benchmark::BenchmarkReporter::Run const&)+0x174>
100008284:     	add	x8, x21, #280
100008288:     	ldr	q0, [x8]
10000828c:     	ldr	x8, [x8, #16]
100008290:     	str	x8, [x23, #16]
100008294:     	str	q0, [x23]
100008298:     	b	0x1000083b4 <benchmark::BenchmarkReporter::Run::Run(benchmark::BenchmarkReporter::Run const&)+0x1c4>
10000829c:     	ldp	x22, x24, [x21, #216]
1000082a0:     	cmp	x24, #22
1000082a4:     	b.hi	0x1000082b4 <benchmark::BenchmarkReporter::Run::Run(benchmark::BenchmarkReporter::Run const&)+0xc4>
1000082a8:     	strb	w24, [x19, #239]
1000082ac:     	mov	x0, x20
1000082b0:     	b	0x1000082e0 <benchmark::BenchmarkReporter::Run::Run(benchmark::BenchmarkReporter::Run const&)+0xf0>
1000082b4:     	mov	x8, #-17
1000082b8:     	movk	x8, #32767, lsl #48
1000082bc:     	cmp	x24, x8
1000082c0:     	b.hi	0x100008478 <benchmark::BenchmarkReporter::Run::Run(benchmark::BenchmarkReporter::Run const&)+0x288>
1000082c4:     	orr	x8, x24, #0xf
1000082c8:     	add	x23, x8, #1
1000082cc:     	mov	x0, x23
1000082d0:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
1000082d4:     	orr	x8, x23, #0x8000000000000000
1000082d8:     	stp	x24, x8, [x19, #224]
1000082dc:     	str	x0, [x19, #216]
1000082e0:     	add	x2, x24, #1
1000082e4:     	mov	x1, x22
1000082e8:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
1000082ec:     	ldr	w8, [x21, #240]
1000082f0:     	str	w8, [x19, #240]
1000082f4:     	add	x22, x19, #248
1000082f8:     	ldrsb	w8, [x21, #271]
1000082fc:     	tbz	w8, #31, 0x10000825c <benchmark::BenchmarkReporter::Run::Run(benchmark::BenchmarkReporter::Run const&)+0x6c>
100008300:     	ldp	x23, x25, [x21, #248]
100008304:     	cmp	x25, #22
100008308:     	b.hi	0x100008318 <benchmark::BenchmarkReporter::Run::Run(benchmark::BenchmarkReporter::Run const&)+0x128>
10000830c:     	strb	w25, [x19, #271]
100008310:     	mov	x0, x22
100008314:     	b	0x100008344 <benchmark::BenchmarkReporter::Run::Run(benchmark::BenchmarkReporter::Run const&)+0x154>
100008318:     	mov	x8, #-17
10000831c:     	movk	x8, #32767, lsl #48
100008320:     	cmp	x25, x8
100008324:     	b.hi	0x100008484 <benchmark::BenchmarkReporter::Run::Run(benchmark::BenchmarkReporter::Run const&)+0x294>
100008328:     	orr	x8, x25, #0xf
10000832c:     	add	x24, x8, #1
100008330:     	mov	x0, x24
100008334:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100008338:     	orr	x8, x24, #0x8000000000000000
10000833c:     	stp	x25, x8, [x19, #256]
100008340:     	str	x0, [x19, #248]
100008344:     	add	x2, x25, #1
100008348:     	mov	x1, x23
10000834c:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
100008350:     	ldr	w8, [x21, #272]
100008354:     	str	w8, [x19, #272]
100008358:     	add	x23, x19, #280
10000835c:     	ldrsb	w8, [x21, #303]
100008360:     	tbz	w8, #31, 0x100008284 <benchmark::BenchmarkReporter::Run::Run(benchmark::BenchmarkReporter::Run const&)+0x94>
100008364:     	ldp	x24, x26, [x21, #280]
100008368:     	cmp	x26, #22
10000836c:     	b.hi	0x10000837c <benchmark::BenchmarkReporter::Run::Run(benchmark::BenchmarkReporter::Run const&)+0x18c>
100008370:     	strb	w26, [x19, #303]
100008374:     	mov	x0, x23
100008378:     	b	0x1000083a8 <benchmark::BenchmarkReporter::Run::Run(benchmark::BenchmarkReporter::Run const&)+0x1b8>
10000837c:     	mov	x8, #-17
100008380:     	movk	x8, #32767, lsl #48
100008384:     	cmp	x26, x8
100008388:     	b.hi	0x100008490 <benchmark::BenchmarkReporter::Run::Run(benchmark::BenchmarkReporter::Run const&)+0x2a0>
10000838c:     	orr	x8, x26, #0xf
100008390:     	add	x25, x8, #1
100008394:     	mov	x0, x25
100008398:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000839c:     	orr	x8, x25, #0x8000000000000000
1000083a0:     	stp	x26, x8, [x19, #288]
1000083a4:     	str	x0, [x19, #280]
1000083a8:     	add	x2, x26, #1
1000083ac:     	mov	x1, x24
1000083b0:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
1000083b4:     	ldp	q0, q1, [x21, #304]
1000083b8:     	ldr	q2, [x21, #336]
1000083bc:     	stp	q1, q2, [x19, #320]
1000083c0:     	str	q0, [x19, #304]
1000083c4:     	ldp	q0, q1, [x21, #352]
1000083c8:     	ldr	q2, [x21, #384]
1000083cc:     	ldrh	w8, [x21, #400]
1000083d0:     	strh	w8, [x19, #400]
1000083d4:     	stp	q1, q2, [x19, #368]
1000083d8:     	str	q0, [x19, #352]
1000083dc:     	add	x24, x19, #416
1000083e0:     	stp	xzr, xzr, [x19, #416]
1000083e4:     	str	x24, [x19, #408]
1000083e8:     	ldr	x27, [x21, #408]
1000083ec:     	add	x26, x21, #416
1000083f0:     	cmp	x27, x26
1000083f4:     	b.eq	0x100008450 <benchmark::BenchmarkReporter::Run::Run(benchmark::BenchmarkReporter::Run const&)+0x260>
1000083f8:     	add	x25, x19, #408
1000083fc:     	b	0x10000840c <benchmark::BenchmarkReporter::Run::Run(benchmark::BenchmarkReporter::Run const&)+0x21c>
100008400:     	mov	x27, x8
100008404:     	cmp	x8, x26
100008408:     	b.eq	0x100008450 <benchmark::BenchmarkReporter::Run::Run(benchmark::BenchmarkReporter::Run const&)+0x260>
10000840c:     	add	x2, x27, #32
100008410:     	mov	x0, x25
100008414:     	mov	x1, x24
100008418:     	mov	x3, x2
10000841c:     	bl	0x100008ae4 <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_hint_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&)>
100008420:     	ldr	x9, [x27, #8]
100008424:     	cbz	x9, 0x100008438 <benchmark::BenchmarkReporter::Run::Run(benchmark::BenchmarkReporter::Run const&)+0x248>
100008428:     	mov	x8, x9
10000842c:     	ldr	x9, [x9]
100008430:     	cbnz	x9, 0x100008428 <benchmark::BenchmarkReporter::Run::Run(benchmark::BenchmarkReporter::Run const&)+0x238>
100008434:     	b	0x100008400 <benchmark::BenchmarkReporter::Run::Run(benchmark::BenchmarkReporter::Run const&)+0x210>
100008438:     	ldr	x8, [x27, #16]
10000843c:     	ldr	x9, [x8]
100008440:     	cmp	x9, x27
100008444:     	mov	x27, x8
100008448:     	b.ne	0x100008438 <benchmark::BenchmarkReporter::Run::Run(benchmark::BenchmarkReporter::Run const&)+0x248>
10000844c:     	b	0x100008400 <benchmark::BenchmarkReporter::Run::Run(benchmark::BenchmarkReporter::Run const&)+0x210>
100008450:     	ldr	q0, [x21, #432]
100008454:     	str	q0, [x19, #432]
100008458:     	mov	x0, x19
10000845c:     	ldp	x29, x30, [sp, #80]
100008460:     	ldp	x20, x19, [sp, #64]
100008464:     	ldp	x22, x21, [sp, #48]
100008468:     	ldp	x24, x23, [sp, #32]
10000846c:     	ldp	x26, x25, [sp, #16]
100008470:     	ldp	x28, x27, [sp], #96
100008474:     	ret
100008478:     	mov	x0, x20
10000847c:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
100008480:     	b	0x100008498 <benchmark::BenchmarkReporter::Run::Run(benchmark::BenchmarkReporter::Run const&)+0x2a8>
100008484:     	mov	x0, x22
100008488:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
10000848c:     	b	0x100008498 <benchmark::BenchmarkReporter::Run::Run(benchmark::BenchmarkReporter::Run const&)+0x2a8>
100008490:     	mov	x0, x23
100008494:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
100008498:     	brk	#0x1
10000849c:     	mov	x21, x0
1000084a0:     	ldrsb	w8, [x19, #271]
1000084a4:     	tbz	w8, #31, 0x1000084f0 <benchmark::BenchmarkReporter::Run::Run(benchmark::BenchmarkReporter::Run const&)+0x300>
1000084a8:     	b	0x100008518 <benchmark::BenchmarkReporter::Run::Run(benchmark::BenchmarkReporter::Run const&)+0x328>
1000084ac:     	mov	x21, x0
1000084b0:     	ldrsb	w8, [x19, #239]
1000084b4:     	tbz	w8, #31, 0x1000084f8 <benchmark::BenchmarkReporter::Run::Run(benchmark::BenchmarkReporter::Run const&)+0x308>
1000084b8:     	b	0x100008528 <benchmark::BenchmarkReporter::Run::Run(benchmark::BenchmarkReporter::Run const&)+0x338>
1000084bc:     	mov	x21, x0
1000084c0:     	mov	x0, x19
1000084c4:     	bl	0x1000090c8 <benchmark::BenchmarkName::~BenchmarkName()>
1000084c8:     	mov	x0, x21
1000084cc:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
1000084d0:     	mov	x21, x0
1000084d4:     	ldr	x1, [x19, #416]
1000084d8:     	mov	x0, x25
1000084dc:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
1000084e0:     	ldrsb	w8, [x19, #303]
1000084e4:     	tbnz	w8, #31, 0x100008508 <benchmark::BenchmarkReporter::Run::Run(benchmark::BenchmarkReporter::Run const&)+0x318>
1000084e8:     	ldrsb	w8, [x19, #271]
1000084ec:     	tbnz	w8, #31, 0x100008518 <benchmark::BenchmarkReporter::Run::Run(benchmark::BenchmarkReporter::Run const&)+0x328>
1000084f0:     	ldrsb	w8, [x19, #239]
1000084f4:     	tbnz	w8, #31, 0x100008528 <benchmark::BenchmarkReporter::Run::Run(benchmark::BenchmarkReporter::Run const&)+0x338>
1000084f8:     	mov	x0, x19
1000084fc:     	bl	0x1000090c8 <benchmark::BenchmarkName::~BenchmarkName()>
100008500:     	mov	x0, x21
100008504:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
100008508:     	ldr	x0, [x23]
10000850c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100008510:     	ldrsb	w8, [x19, #271]
100008514:     	tbz	w8, #31, 0x1000084f0 <benchmark::BenchmarkReporter::Run::Run(benchmark::BenchmarkReporter::Run const&)+0x300>
100008518:     	ldr	x0, [x22]
10000851c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100008520:     	ldrsb	w8, [x19, #239]
100008524:     	tbz	w8, #31, 0x1000084f8 <benchmark::BenchmarkReporter::Run::Run(benchmark::BenchmarkReporter::Run const&)+0x308>
100008528:     	ldr	x0, [x20]
10000852c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100008530:     	mov	x0, x19
100008534:     	bl	0x1000090c8 <benchmark::BenchmarkName::~BenchmarkName()>
100008538:     	mov	x0, x21
10000853c:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100008540 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)>:
100008540:     	sub	sp, sp, #112
100008544:     	stp	x28, x27, [sp, #16]
100008548:     	stp	x26, x25, [sp, #32]
10000854c:     	stp	x24, x23, [sp, #48]
100008550:     	stp	x22, x21, [sp, #64]
100008554:     	stp	x20, x19, [sp, #80]
100008558:     	stp	x29, x30, [sp, #96]
10000855c:     	add	x29, sp, #96
100008560:     	mov	x22, x1
100008564:     	mov	x19, x0
100008568:     	ldrsb	w8, [x1, #23]
10000856c:     	tbnz	w8, #31, 0x100008664 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x124>
100008570:     	ldr	q0, [x22]
100008574:     	ldr	x8, [x22, #16]
100008578:     	str	x8, [x19, #16]
10000857c:     	str	q0, [x19]
100008580:     	add	x20, x19, #24
100008584:     	ldrsb	w8, [x22, #47]
100008588:     	tbnz	w8, #31, 0x1000086c0 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x180>
10000858c:     	add	x8, x22, #24
100008590:     	ldr	q0, [x8]
100008594:     	ldr	x8, [x8, #16]
100008598:     	str	x8, [x20, #16]
10000859c:     	str	q0, [x20]
1000085a0:     	add	x21, x19, #48
1000085a4:     	ldrsb	w8, [x22, #71]
1000085a8:     	tbnz	w8, #31, 0x10000871c <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x1dc>
1000085ac:     	add	x8, x22, #48
1000085b0:     	ldr	q0, [x8]
1000085b4:     	ldr	x8, [x8, #16]
1000085b8:     	str	x8, [x21, #16]
1000085bc:     	str	q0, [x21]
1000085c0:     	add	x23, x19, #72
1000085c4:     	ldrsb	w8, [x22, #95]
1000085c8:     	tbnz	w8, #31, 0x100008778 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x238>
1000085cc:     	add	x8, x22, #72
1000085d0:     	ldr	q0, [x8]
1000085d4:     	ldr	x8, [x8, #16]
1000085d8:     	str	x8, [x23, #16]
1000085dc:     	str	q0, [x23]
1000085e0:     	add	x24, x19, #96
1000085e4:     	ldrsb	w8, [x22, #119]
1000085e8:     	tbnz	w8, #31, 0x1000087d4 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x294>
1000085ec:     	add	x8, x22, #96
1000085f0:     	ldr	q0, [x8]
1000085f4:     	ldr	x8, [x8, #16]
1000085f8:     	str	x8, [x24, #16]
1000085fc:     	str	q0, [x24]
100008600:     	add	x25, x19, #120
100008604:     	ldrsb	w8, [x22, #143]
100008608:     	tbnz	w8, #31, 0x100008830 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x2f0>
10000860c:     	add	x8, x22, #120
100008610:     	ldr	q0, [x8]
100008614:     	ldr	x8, [x8, #16]
100008618:     	str	x8, [x25, #16]
10000861c:     	str	q0, [x25]
100008620:     	add	x26, x19, #144
100008624:     	ldrsb	w8, [x22, #167]
100008628:     	tbnz	w8, #31, 0x10000888c <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x34c>
10000862c:     	add	x8, x22, #144
100008630:     	ldr	q0, [x8]
100008634:     	ldr	x8, [x8, #16]
100008638:     	str	x8, [x26, #16]
10000863c:     	str	q0, [x26]
100008640:     	add	x0, x19, #168
100008644:     	ldrsb	w8, [x22, #191]
100008648:     	tbnz	w8, #31, 0x1000088f0 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x3b0>
10000864c:     	add	x8, x22, #168
100008650:     	ldr	q0, [x8]
100008654:     	ldr	x8, [x8, #16]
100008658:     	str	x8, [x0, #16]
10000865c:     	str	q0, [x0]
100008660:     	b	0x100008940 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x400>
100008664:     	ldp	x20, x23, [x22]
100008668:     	cmp	x23, #22
10000866c:     	b.hi	0x10000867c <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x13c>
100008670:     	strb	w23, [x19, #23]
100008674:     	mov	x0, x19
100008678:     	b	0x1000086a8 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x168>
10000867c:     	mov	x8, #-17
100008680:     	movk	x8, #32767, lsl #48
100008684:     	cmp	x23, x8
100008688:     	b.hi	0x100008964 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x424>
10000868c:     	orr	x8, x23, #0xf
100008690:     	add	x21, x8, #1
100008694:     	mov	x0, x21
100008698:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000869c:     	orr	x8, x21, #0x8000000000000000
1000086a0:     	stp	x23, x8, [x19, #8]
1000086a4:     	str	x0, [x19]
1000086a8:     	add	x2, x23, #1
1000086ac:     	mov	x1, x20
1000086b0:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
1000086b4:     	add	x20, x19, #24
1000086b8:     	ldrsb	w8, [x22, #47]
1000086bc:     	tbz	w8, #31, 0x10000858c <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x4c>
1000086c0:     	ldp	x21, x24, [x22, #24]
1000086c4:     	cmp	x24, #22
1000086c8:     	b.hi	0x1000086d8 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x198>
1000086cc:     	strb	w24, [x19, #47]
1000086d0:     	mov	x0, x20
1000086d4:     	b	0x100008704 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x1c4>
1000086d8:     	mov	x8, #-17
1000086dc:     	movk	x8, #32767, lsl #48
1000086e0:     	cmp	x24, x8
1000086e4:     	b.hi	0x10000896c <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x42c>
1000086e8:     	orr	x8, x24, #0xf
1000086ec:     	add	x23, x8, #1
1000086f0:     	mov	x0, x23
1000086f4:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
1000086f8:     	orr	x8, x23, #0x8000000000000000
1000086fc:     	stp	x24, x8, [x19, #32]
100008700:     	str	x0, [x19, #24]
100008704:     	add	x2, x24, #1
100008708:     	mov	x1, x21
10000870c:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
100008710:     	add	x21, x19, #48
100008714:     	ldrsb	w8, [x22, #71]
100008718:     	tbz	w8, #31, 0x1000085ac <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x6c>
10000871c:     	ldp	x23, x25, [x22, #48]
100008720:     	cmp	x25, #22
100008724:     	b.hi	0x100008734 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x1f4>
100008728:     	strb	w25, [x19, #71]
10000872c:     	mov	x0, x21
100008730:     	b	0x100008760 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x220>
100008734:     	mov	x8, #-17
100008738:     	movk	x8, #32767, lsl #48
10000873c:     	cmp	x25, x8
100008740:     	b.hi	0x100008978 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x438>
100008744:     	orr	x8, x25, #0xf
100008748:     	add	x24, x8, #1
10000874c:     	mov	x0, x24
100008750:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100008754:     	orr	x8, x24, #0x8000000000000000
100008758:     	stp	x25, x8, [x19, #56]
10000875c:     	str	x0, [x19, #48]
100008760:     	add	x2, x25, #1
100008764:     	mov	x1, x23
100008768:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
10000876c:     	add	x23, x19, #72
100008770:     	ldrsb	w8, [x22, #95]
100008774:     	tbz	w8, #31, 0x1000085cc <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x8c>
100008778:     	ldp	x24, x26, [x22, #72]
10000877c:     	cmp	x26, #22
100008780:     	b.hi	0x100008790 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x250>
100008784:     	strb	w26, [x19, #95]
100008788:     	mov	x0, x23
10000878c:     	b	0x1000087bc <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x27c>
100008790:     	mov	x8, #-17
100008794:     	movk	x8, #32767, lsl #48
100008798:     	cmp	x26, x8
10000879c:     	b.hi	0x100008984 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x444>
1000087a0:     	orr	x8, x26, #0xf
1000087a4:     	add	x25, x8, #1
1000087a8:     	mov	x0, x25
1000087ac:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
1000087b0:     	orr	x8, x25, #0x8000000000000000
1000087b4:     	stp	x26, x8, [x19, #80]
1000087b8:     	str	x0, [x19, #72]
1000087bc:     	add	x2, x26, #1
1000087c0:     	mov	x1, x24
1000087c4:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
1000087c8:     	add	x24, x19, #96
1000087cc:     	ldrsb	w8, [x22, #119]
1000087d0:     	tbz	w8, #31, 0x1000085ec <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0xac>
1000087d4:     	ldp	x25, x27, [x22, #96]
1000087d8:     	cmp	x27, #22
1000087dc:     	b.hi	0x1000087ec <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x2ac>
1000087e0:     	strb	w27, [x19, #119]
1000087e4:     	mov	x0, x24
1000087e8:     	b	0x100008818 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x2d8>
1000087ec:     	mov	x8, #-17
1000087f0:     	movk	x8, #32767, lsl #48
1000087f4:     	cmp	x27, x8
1000087f8:     	b.hi	0x100008990 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x450>
1000087fc:     	orr	x8, x27, #0xf
100008800:     	add	x26, x8, #1
100008804:     	mov	x0, x26
100008808:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000880c:     	orr	x8, x26, #0x8000000000000000
100008810:     	stp	x27, x8, [x19, #104]
100008814:     	str	x0, [x19, #96]
100008818:     	add	x2, x27, #1
10000881c:     	mov	x1, x25
100008820:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
100008824:     	add	x25, x19, #120
100008828:     	ldrsb	w8, [x22, #143]
10000882c:     	tbz	w8, #31, 0x10000860c <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0xcc>
100008830:     	ldp	x26, x28, [x22, #120]
100008834:     	cmp	x28, #22
100008838:     	b.hi	0x100008848 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x308>
10000883c:     	strb	w28, [x19, #143]
100008840:     	mov	x0, x25
100008844:     	b	0x100008874 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x334>
100008848:     	mov	x8, #-17
10000884c:     	movk	x8, #32767, lsl #48
100008850:     	cmp	x28, x8
100008854:     	b.hi	0x10000899c <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x45c>
100008858:     	orr	x8, x28, #0xf
10000885c:     	add	x27, x8, #1
100008860:     	mov	x0, x27
100008864:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100008868:     	orr	x8, x27, #0x8000000000000000
10000886c:     	stp	x28, x8, [x19, #128]
100008870:     	str	x0, [x19, #120]
100008874:     	add	x2, x28, #1
100008878:     	mov	x1, x26
10000887c:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
100008880:     	add	x26, x19, #144
100008884:     	ldrsb	w8, [x22, #167]
100008888:     	tbz	w8, #31, 0x10000862c <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0xec>
10000888c:     	str	x20, [sp, #8]
100008890:     	ldp	x27, x20, [x22, #144]
100008894:     	cmp	x20, #22
100008898:     	b.hi	0x1000088a8 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x368>
10000889c:     	strb	w20, [x19, #167]
1000088a0:     	mov	x0, x26
1000088a4:     	b	0x1000088d4 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x394>
1000088a8:     	mov	x8, #-17
1000088ac:     	movk	x8, #32767, lsl #48
1000088b0:     	cmp	x20, x8
1000088b4:     	b.hi	0x1000089a8 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x468>
1000088b8:     	orr	x8, x20, #0xf
1000088bc:     	add	x28, x8, #1
1000088c0:     	mov	x0, x28
1000088c4:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
1000088c8:     	orr	x8, x28, #0x8000000000000000
1000088cc:     	stp	x20, x8, [x19, #152]
1000088d0:     	str	x0, [x19, #144]
1000088d4:     	add	x2, x20, #1
1000088d8:     	mov	x1, x27
1000088dc:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
1000088e0:     	ldr	x20, [sp, #8]
1000088e4:     	add	x0, x19, #168
1000088e8:     	ldrsb	w8, [x22, #191]
1000088ec:     	tbz	w8, #31, 0x10000864c <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x10c>
1000088f0:     	str	x20, [sp, #8]
1000088f4:     	ldp	x27, x20, [x22, #168]
1000088f8:     	cmp	x20, #22
1000088fc:     	b.hi	0x100008908 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x3c8>
100008900:     	strb	w20, [x19, #191]
100008904:     	b	0x100008934 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x3f4>
100008908:     	mov	x8, #-17
10000890c:     	movk	x8, #32767, lsl #48
100008910:     	cmp	x20, x8
100008914:     	b.hi	0x1000089b4 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x474>
100008918:     	orr	x8, x20, #0xf
10000891c:     	add	x22, x8, #1
100008920:     	mov	x0, x22
100008924:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100008928:     	orr	x8, x22, #0x8000000000000000
10000892c:     	stp	x20, x8, [x19, #176]
100008930:     	str	x0, [x19, #168]
100008934:     	add	x2, x20, #1
100008938:     	mov	x1, x27
10000893c:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
100008940:     	mov	x0, x19
100008944:     	ldp	x29, x30, [sp, #96]
100008948:     	ldp	x20, x19, [sp, #80]
10000894c:     	ldp	x22, x21, [sp, #64]
100008950:     	ldp	x24, x23, [sp, #48]
100008954:     	ldp	x26, x25, [sp, #32]
100008958:     	ldp	x28, x27, [sp, #16]
10000895c:     	add	sp, sp, #112
100008960:     	ret
100008964:     	mov	x0, x19
100008968:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
10000896c:     	mov	x0, x20
100008970:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
100008974:     	b	0x1000089b8 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x478>
100008978:     	mov	x0, x21
10000897c:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
100008980:     	b	0x1000089b8 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x478>
100008984:     	mov	x0, x23
100008988:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
10000898c:     	b	0x1000089b8 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x478>
100008990:     	mov	x0, x24
100008994:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
100008998:     	b	0x1000089b8 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x478>
10000899c:     	mov	x0, x25
1000089a0:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
1000089a4:     	b	0x1000089b8 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x478>
1000089a8:     	mov	x0, x26
1000089ac:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
1000089b0:     	b	0x1000089b8 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x478>
1000089b4:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
1000089b8:     	brk	#0x1
1000089bc:     	mov	x22, x0
1000089c0:     	ldrsb	w8, [x19, #167]
1000089c4:     	tbnz	w8, #31, 0x100008a00 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x4c0>
1000089c8:     	ldrsb	w8, [x19, #143]
1000089cc:     	tbnz	w8, #31, 0x100008a20 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x4e0>
1000089d0:     	ldrsb	w8, [x19, #119]
1000089d4:     	tbnz	w8, #31, 0x100008a44 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x504>
1000089d8:     	ldrsb	w8, [x19, #95]
1000089dc:     	tbnz	w8, #31, 0x100008a68 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x528>
1000089e0:     	ldrsb	w8, [x19, #71]
1000089e4:     	tbnz	w8, #31, 0x100008a8c <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x54c>
1000089e8:     	ldrsb	w8, [x19, #47]
1000089ec:     	tbnz	w8, #31, 0x100008ab0 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x570>
1000089f0:     	ldrsb	w8, [x19, #23]
1000089f4:     	tbnz	w8, #31, 0x100008ad4 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x594>
1000089f8:     	mov	x0, x22
1000089fc:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
100008a00:     	ldr	x0, [x26]
100008a04:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100008a08:     	ldrsb	w8, [x19, #143]
100008a0c:     	tbz	w8, #31, 0x1000089d0 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x490>
100008a10:     	b	0x100008a20 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x4e0>
100008a14:     	mov	x22, x0
100008a18:     	ldrsb	w8, [x19, #143]
100008a1c:     	tbz	w8, #31, 0x1000089d0 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x490>
100008a20:     	ldr	x0, [x25]
100008a24:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100008a28:     	ldrsb	w8, [x19, #119]
100008a2c:     	tbz	w8, #31, 0x1000089d8 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x498>
100008a30:     	b	0x100008a44 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x504>
100008a34:     	str	x20, [sp, #8]
100008a38:     	mov	x22, x0
100008a3c:     	ldrsb	w8, [x19, #119]
100008a40:     	tbz	w8, #31, 0x1000089d8 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x498>
100008a44:     	ldr	x0, [x24]
100008a48:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100008a4c:     	ldrsb	w8, [x19, #95]
100008a50:     	tbz	w8, #31, 0x1000089e0 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x4a0>
100008a54:     	b	0x100008a68 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x528>
100008a58:     	str	x20, [sp, #8]
100008a5c:     	mov	x22, x0
100008a60:     	ldrsb	w8, [x19, #95]
100008a64:     	tbz	w8, #31, 0x1000089e0 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x4a0>
100008a68:     	ldr	x0, [x23]
100008a6c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100008a70:     	ldrsb	w8, [x19, #71]
100008a74:     	tbz	w8, #31, 0x1000089e8 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x4a8>
100008a78:     	b	0x100008a8c <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x54c>
100008a7c:     	str	x20, [sp, #8]
100008a80:     	mov	x22, x0
100008a84:     	ldrsb	w8, [x19, #71]
100008a88:     	tbz	w8, #31, 0x1000089e8 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x4a8>
100008a8c:     	ldr	x0, [x21]
100008a90:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100008a94:     	ldrsb	w8, [x19, #47]
100008a98:     	tbz	w8, #31, 0x1000089f0 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x4b0>
100008a9c:     	b	0x100008ab0 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x570>
100008aa0:     	str	x20, [sp, #8]
100008aa4:     	mov	x22, x0
100008aa8:     	ldrsb	w8, [x19, #47]
100008aac:     	tbz	w8, #31, 0x1000089f0 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x4b0>
100008ab0:     	ldr	x8, [sp, #8]
100008ab4:     	ldr	x0, [x8]
100008ab8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100008abc:     	ldrsb	w8, [x19, #23]
100008ac0:     	tbz	w8, #31, 0x1000089f8 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x4b8>
100008ac4:     	b	0x100008ad4 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x594>
100008ac8:     	mov	x22, x0
100008acc:     	ldrsb	w8, [x19, #23]
100008ad0:     	tbz	w8, #31, 0x1000089f8 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)+0x4b8>
100008ad4:     	ldr	x0, [x19]
100008ad8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100008adc:     	mov	x0, x22
100008ae0:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100008ae4 <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_hint_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&)>:
100008ae4:     	sub	sp, sp, #96
100008ae8:     	stp	x26, x25, [sp, #16]
100008aec:     	stp	x24, x23, [sp, #32]
100008af0:     	stp	x22, x21, [sp, #48]
100008af4:     	stp	x20, x19, [sp, #64]
100008af8:     	stp	x29, x30, [sp, #80]
100008afc:     	add	x29, sp, #80
100008b00:     	mov	x22, x3
100008b04:     	mov	x4, x2
100008b08:     	mov	x20, x0
100008b0c:     	add	x2, sp, #8
100008b10:     	mov	x3, sp
100008b14:     	bl	0x100008c24 <std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
100008b18:     	ldr	x19, [x0]
100008b1c:     	cbz	x19, 0x100008b28 <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_hint_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&)+0x44>
100008b20:     	mov	x1, #0
100008b24:     	b	0x100008be8 <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_hint_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&)+0x104>
100008b28:     	mov	x21, x0
100008b2c:     	mov	w0, #72
100008b30:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100008b34:     	mov	x19, x0
100008b38:     	add	x0, x0, #32
100008b3c:     	ldrsb	w8, [x22, #23]
100008b40:     	tbnz	w8, #31, 0x100008b58 <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_hint_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&)+0x74>
100008b44:     	ldr	q0, [x22]
100008b48:     	str	q0, [x0]
100008b4c:     	ldr	x8, [x22, #16]
100008b50:     	str	x8, [x0, #16]
100008b54:     	b	0x100008ba0 <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_hint_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&)+0xbc>
100008b58:     	ldp	x23, x25, [x22]
100008b5c:     	cmp	x25, #22
100008b60:     	b.hi	0x100008b6c <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_hint_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&)+0x88>
100008b64:     	strb	w25, [x19, #55]
100008b68:     	b	0x100008b94 <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_hint_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&)+0xb0>
100008b6c:     	mov	x8, #9223372036854775792
100008b70:     	cmp	x25, x8
100008b74:     	b.hs	0x100008c08 <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_hint_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&)+0x124>
100008b78:     	orr	x8, x25, #0xf
100008b7c:     	add	x24, x8, #1
100008b80:     	mov	x0, x24
100008b84:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100008b88:     	orr	x8, x24, #0x8000000000000000
100008b8c:     	stp	x25, x8, [x19, #40]
100008b90:     	str	x0, [x19, #32]
100008b94:     	add	x2, x25, #1
100008b98:     	mov	x1, x23
100008b9c:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
100008ba0:     	ldur	q0, [x22, #24]
100008ba4:     	stur	q0, [x19, #56]
100008ba8:     	ldr	x8, [sp, #8]
100008bac:     	stp	xzr, xzr, [x19]
100008bb0:     	str	x8, [x19, #16]
100008bb4:     	str	x19, [x21]
100008bb8:     	ldr	x8, [x20]
100008bbc:     	ldr	x8, [x8]
100008bc0:     	mov	x1, x19
100008bc4:     	cbz	x8, 0x100008bd0 <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_hint_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&)+0xec>
100008bc8:     	str	x8, [x20]
100008bcc:     	ldr	x1, [x21]
100008bd0:     	ldr	x0, [x20, #8]
100008bd4:     	bl	0x100006fe0 <void std::__1::__tree_balance_after_insert[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)>
100008bd8:     	ldr	x8, [x20, #16]
100008bdc:     	add	x8, x8, #1
100008be0:     	str	x8, [x20, #16]
100008be4:     	mov	w1, #1
100008be8:     	mov	x0, x19
100008bec:     	ldp	x29, x30, [sp, #80]
100008bf0:     	ldp	x20, x19, [sp, #64]
100008bf4:     	ldp	x22, x21, [sp, #48]
100008bf8:     	ldp	x24, x23, [sp, #32]
100008bfc:     	ldp	x26, x25, [sp, #16]
100008c00:     	add	sp, sp, #96
100008c04:     	ret
100008c08:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
100008c0c:     	brk	#0x1
100008c10:     	mov	x20, x0
100008c14:     	mov	x0, x19
100008c18:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100008c1c:     	mov	x0, x20
100008c20:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100008c24 <std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>:
100008c24:     	sub	sp, sp, #112
100008c28:     	stp	x28, x27, [sp, #16]
100008c2c:     	stp	x26, x25, [sp, #32]
100008c30:     	stp	x24, x23, [sp, #48]
100008c34:     	stp	x22, x21, [sp, #64]
100008c38:     	stp	x20, x19, [sp, #80]
100008c3c:     	stp	x29, x30, [sp, #96]
100008c40:     	add	x29, sp, #96
100008c44:     	mov	x23, x4
100008c48:     	str	x2, [sp, #8]
100008c4c:     	mov	x20, x1
100008c50:     	mov	x24, x0
100008c54:     	add	x27, x0, #8
100008c58:     	cmp	x27, x1
100008c5c:     	b.eq	0x100008cd0 <std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xac>
100008c60:     	mov	x22, x3
100008c64:     	mov	x8, x20
100008c68:     	ldr	x9, [x8, #32]!
100008c6c:     	ldrb	w10, [x8, #23]
100008c70:     	sxtb	w11, w10
100008c74:     	ldr	x12, [x8, #8]
100008c78:     	ldrb	w13, [x23, #23]
100008c7c:     	sxtb	w14, w13
100008c80:     	ldp	x16, x15, [x23]
100008c84:     	cmp	w14, #0
100008c88:     	csel	x28, x15, x13, lt
100008c8c:     	csel	x21, x16, x23, lt
100008c90:     	cmp	w11, #0
100008c94:     	csel	x19, x12, x10, lt
100008c98:     	csel	x25, x9, x8, lt
100008c9c:     	cmp	x19, x28
100008ca0:     	csel	x26, x19, x28, lo
100008ca4:     	mov	x0, x21
100008ca8:     	mov	x1, x25
100008cac:     	mov	x2, x26
100008cb0:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
100008cb4:     	cmp	x28, x19
100008cb8:     	cset	w8, lo
100008cbc:     	cmp	w0, #0
100008cc0:     	cset	w9, lt
100008cc4:     	csel	w8, w8, w9, eq
100008cc8:     	cmp	w8, #1
100008ccc:     	b.ne	0x100008cf8 <std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xd4>
100008cd0:     	ldr	x8, [x24]
100008cd4:     	ldr	x22, [x20]
100008cd8:     	cmp	x8, x20
100008cdc:     	b.eq	0x100008d44 <std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x120>
100008ce0:     	cbz	x22, 0x100008d4c <std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x128>
100008ce4:     	mov	x8, x22
100008ce8:     	mov	x25, x8
100008cec:     	ldr	x8, [x8, #8]
100008cf0:     	cbnz	x8, 0x100008ce8 <std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xc4>
100008cf4:     	b	0x100008d64 <std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x140>
100008cf8:     	mov	x0, x25
100008cfc:     	mov	x1, x21
100008d00:     	mov	x2, x26
100008d04:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
100008d08:     	cmp	x19, x28
100008d0c:     	cset	w8, lo
100008d10:     	cmp	w0, #0
100008d14:     	cset	w9, lt
100008d18:     	csel	w8, w8, w9, eq
100008d1c:     	cmp	w8, #1
100008d20:     	b.ne	0x100008ea4 <std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x280>
100008d24:     	mov	x23, x20
100008d28:     	ldr	x24, [x23, #8]!
100008d2c:     	cbz	x24, 0x100008eb4 <std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x290>
100008d30:     	mov	x8, x24
100008d34:     	mov	x22, x8
100008d38:     	ldr	x8, [x8]
100008d3c:     	cbnz	x8, 0x100008d34 <std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x110>
100008d40:     	b	0x100008ecc <std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x2a8>
100008d44:     	mov	x25, x20
100008d48:     	b	0x100008dc8 <std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x1a4>
100008d4c:     	mov	x8, x20
100008d50:     	ldr	x25, [x8, #16]
100008d54:     	ldr	x9, [x25]
100008d58:     	cmp	x9, x8
100008d5c:     	mov	x8, x25
100008d60:     	b.eq	0x100008d50 <std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x12c>
100008d64:     	ldrb	w8, [x23, #23]
100008d68:     	sxtb	w9, w8
100008d6c:     	mov	x10, x25
100008d70:     	ldr	x11, [x10, #32]!
100008d74:     	ldp	x12, x13, [x23]
100008d78:     	ldrb	w14, [x10, #23]
100008d7c:     	sxtb	w15, w14
100008d80:     	ldr	x16, [x10, #8]
100008d84:     	cmp	w15, #0
100008d88:     	csel	x19, x16, x14, lt
100008d8c:     	csel	x0, x11, x10, lt
100008d90:     	cmp	w9, #0
100008d94:     	csel	x24, x13, x8, lt
100008d98:     	csel	x21, x12, x23, lt
100008d9c:     	cmp	x24, x19
100008da0:     	csel	x2, x24, x19, lo
100008da4:     	mov	x1, x21
100008da8:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
100008dac:     	cmp	x19, x24
100008db0:     	cset	w8, lo
100008db4:     	cmp	w0, #0
100008db8:     	cset	w9, lt
100008dbc:     	csel	w8, w8, w9, eq
100008dc0:     	cmp	w8, #1
100008dc4:     	b.ne	0x100008ddc <std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x1b8>
100008dc8:     	cbz	x22, 0x100008e94 <std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x270>
100008dcc:     	ldr	x8, [sp, #8]
100008dd0:     	str	x25, [x8]
100008dd4:     	add	x22, x25, #8
100008dd8:     	b	0x100008fe8 <std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x3c4>
100008ddc:     	ldr	x8, [x27]
100008de0:     	cbnz	x8, 0x100008df8 <std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x1d4>
100008de4:     	mov	x23, x27
100008de8:     	b	0x100008e84 <std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x260>
100008dec:     	ldr	x8, [x23]
100008df0:     	mov	x27, x23
100008df4:     	cbz	x8, 0x100008e84 <std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x260>
100008df8:     	mov	x23, x8
100008dfc:     	ldr	x9, [x8, #32]!
100008e00:     	ldrb	w10, [x8, #23]
100008e04:     	sxtb	w11, w10
100008e08:     	ldr	x12, [x8, #8]
100008e0c:     	cmp	w11, #0
100008e10:     	csel	x19, x12, x10, lt
100008e14:     	csel	x20, x9, x8, lt
100008e18:     	cmp	x19, x24
100008e1c:     	csel	x22, x19, x24, lo
100008e20:     	mov	x0, x21
100008e24:     	mov	x1, x20
100008e28:     	mov	x2, x22
100008e2c:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
100008e30:     	cmp	x24, x19
100008e34:     	cset	w8, lo
100008e38:     	cmp	w0, #0
100008e3c:     	cset	w9, lt
100008e40:     	csel	w8, w8, w9, eq
100008e44:     	cmp	w8, #1
100008e48:     	b.eq	0x100008dec <std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x1c8>
100008e4c:     	mov	x0, x20
100008e50:     	mov	x1, x21
100008e54:     	mov	x2, x22
100008e58:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
100008e5c:     	cmp	x19, x24
100008e60:     	cset	w8, lo
100008e64:     	cmp	w0, #0
100008e68:     	cset	w9, lt
100008e6c:     	csel	w8, w8, w9, eq
100008e70:     	cmp	w8, #1
100008e74:     	b.ne	0x100008e84 <std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x260>
100008e78:     	mov	x27, x23
100008e7c:     	ldr	x8, [x27, #8]!
100008e80:     	cbnz	x8, 0x100008df8 <std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x1d4>
100008e84:     	ldr	x8, [sp, #8]
100008e88:     	str	x23, [x8]
100008e8c:     	mov	x22, x27
100008e90:     	b	0x100008fe8 <std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x3c4>
100008e94:     	ldr	x8, [sp, #8]
100008e98:     	str	x20, [x8]
100008e9c:     	mov	x22, x20
100008ea0:     	b	0x100008fe8 <std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x3c4>
100008ea4:     	ldr	x8, [sp, #8]
100008ea8:     	str	x20, [x8]
100008eac:     	str	x20, [x22]
100008eb0:     	b	0x100008fe8 <std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x3c4>
100008eb4:     	mov	x8, x20
100008eb8:     	ldr	x22, [x8, #16]
100008ebc:     	ldr	x9, [x22]
100008ec0:     	cmp	x9, x8
100008ec4:     	mov	x8, x22
100008ec8:     	b.ne	0x100008eb8 <std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x294>
100008ecc:     	cmp	x22, x27
100008ed0:     	b.eq	0x100008f20 <std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x2fc>
100008ed4:     	mov	x8, x22
100008ed8:     	ldr	x9, [x8, #32]!
100008edc:     	ldrb	w10, [x8, #23]
100008ee0:     	sxtb	w11, w10
100008ee4:     	ldr	x12, [x8, #8]
100008ee8:     	cmp	w11, #0
100008eec:     	csel	x19, x12, x10, lt
100008ef0:     	csel	x1, x9, x8, lt
100008ef4:     	cmp	x19, x28
100008ef8:     	csel	x2, x19, x28, lo
100008efc:     	mov	x0, x21
100008f00:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
100008f04:     	cmp	x28, x19
100008f08:     	cset	w8, lo
100008f0c:     	cmp	w0, #0
100008f10:     	cset	w9, lt
100008f14:     	csel	w8, w8, w9, eq
100008f18:     	cmp	w8, #1
100008f1c:     	b.ne	0x100008f30 <std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x30c>
100008f20:     	cbz	x24, 0x100008fdc <std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x3b8>
100008f24:     	ldr	x8, [sp, #8]
100008f28:     	str	x22, [x8]
100008f2c:     	b	0x100008fe8 <std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x3c4>
100008f30:     	ldr	x8, [x27]
100008f34:     	cbz	x8, 0x10000900c <std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x3e8>
100008f38:     	ldr	x24, [sp, #8]
100008f3c:     	b	0x100008f4c <std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x328>
100008f40:     	ldr	x8, [x23]
100008f44:     	mov	x27, x23
100008f48:     	cbz	x8, 0x100009014 <std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x3f0>
100008f4c:     	mov	x23, x8
100008f50:     	ldr	x9, [x8, #32]!
100008f54:     	ldrb	w10, [x8, #23]
100008f58:     	sxtb	w11, w10
100008f5c:     	ldr	x12, [x8, #8]
100008f60:     	cmp	w11, #0
100008f64:     	csel	x19, x12, x10, lt
100008f68:     	csel	x20, x9, x8, lt
100008f6c:     	cmp	x19, x28
100008f70:     	csel	x22, x19, x28, lo
100008f74:     	mov	x0, x21
100008f78:     	mov	x1, x20
100008f7c:     	mov	x2, x22
100008f80:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
100008f84:     	cmp	x28, x19
100008f88:     	cset	w8, lo
100008f8c:     	cmp	w0, #0
100008f90:     	cset	w9, lt
100008f94:     	csel	w8, w8, w9, eq
100008f98:     	cmp	w8, #1
100008f9c:     	b.eq	0x100008f40 <std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x31c>
100008fa0:     	mov	x0, x20
100008fa4:     	mov	x1, x21
100008fa8:     	mov	x2, x22
100008fac:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
100008fb0:     	cmp	x19, x28
100008fb4:     	cset	w8, lo
100008fb8:     	cmp	w0, #0
100008fbc:     	cset	w9, lt
100008fc0:     	csel	w8, w8, w9, eq
100008fc4:     	cmp	w8, #1
100008fc8:     	b.ne	0x100009014 <std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x3f0>
100008fcc:     	mov	x27, x23
100008fd0:     	ldr	x8, [x27, #8]!
100008fd4:     	cbnz	x8, 0x100008f4c <std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x328>
100008fd8:     	b	0x100009014 <std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x3f0>
100008fdc:     	ldr	x8, [sp, #8]
100008fe0:     	str	x20, [x8]
100008fe4:     	mov	x22, x23
100008fe8:     	mov	x0, x22
100008fec:     	ldp	x29, x30, [sp, #96]
100008ff0:     	ldp	x20, x19, [sp, #80]
100008ff4:     	ldp	x22, x21, [sp, #64]
100008ff8:     	ldp	x24, x23, [sp, #48]
100008ffc:     	ldp	x26, x25, [sp, #32]
100009000:     	ldp	x28, x27, [sp, #16]
100009004:     	add	sp, sp, #112
100009008:     	ret
10000900c:     	mov	x23, x27
100009010:     	ldr	x24, [sp, #8]
100009014:     	str	x23, [x24]
100009018:     	b	0x100008e8c <std::__1::__tree_node_base<void*>*& std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__find_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_end_node<std::__1::__tree_node_base<void*>*>*&, std::__1::__tree_node_base<void*>*&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x268>

000000010000901c <std::__1::unique_ptr<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>, std::__1::__tree_node_destructor<std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>>>>::~unique_ptr[abi:ue170006]()>:
10000901c:     	stp	x20, x19, [sp, #-32]!
100009020:     	stp	x29, x30, [sp, #16]
100009024:     	add	x29, sp, #16
100009028:     	mov	x19, x0
10000902c:     	ldr	x20, [x0]
100009030:     	str	xzr, [x0]
100009034:     	cbz	x20, 0x100009058 <std::__1::unique_ptr<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>, std::__1::__tree_node_destructor<std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>>>>::~unique_ptr[abi:ue170006]()+0x3c>
100009038:     	ldrb	w8, [x19, #16]
10000903c:     	cbz	w8, 0x100009050 <std::__1::unique_ptr<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>, std::__1::__tree_node_destructor<std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>>>>::~unique_ptr[abi:ue170006]()+0x34>
100009040:     	ldrsb	w8, [x20, #55]
100009044:     	tbz	w8, #31, 0x100009050 <std::__1::unique_ptr<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>, std::__1::__tree_node_destructor<std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>>>>::~unique_ptr[abi:ue170006]()+0x34>
100009048:     	ldr	x0, [x20, #32]
10000904c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100009050:     	mov	x0, x20
100009054:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100009058:     	mov	x0, x19
10000905c:     	ldp	x29, x30, [sp, #16]
100009060:     	ldp	x20, x19, [sp], #32
100009064:     	ret

0000000100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>:
100009068:     	cbz	x1, 0x1000090ac <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)+0x44>
10000906c:     	stp	x20, x19, [sp, #-32]!
100009070:     	stp	x29, x30, [sp, #16]
100009074:     	add	x29, sp, #16
100009078:     	mov	x19, x1
10000907c:     	mov	x20, x0
100009080:     	ldr	x1, [x1]
100009084:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
100009088:     	ldr	x1, [x19, #8]
10000908c:     	mov	x0, x20
100009090:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
100009094:     	ldrsb	w8, [x19, #55]
100009098:     	tbnz	w8, #31, 0x1000090b0 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)+0x48>
10000909c:     	mov	x0, x19
1000090a0:     	ldp	x29, x30, [sp, #16]
1000090a4:     	ldp	x20, x19, [sp], #32
1000090a8:     	b	0x10002f014 <_vsnprintf+0x10002f014>
1000090ac:     	ret
1000090b0:     	ldr	x0, [x19, #32]
1000090b4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000090b8:     	mov	x0, x19
1000090bc:     	ldp	x29, x30, [sp, #16]
1000090c0:     	ldp	x20, x19, [sp], #32
1000090c4:     	b	0x10002f014 <_vsnprintf+0x10002f014>

00000001000090c8 <benchmark::BenchmarkName::~BenchmarkName()>:
1000090c8:     	stp	x20, x19, [sp, #-32]!
1000090cc:     	stp	x29, x30, [sp, #16]
1000090d0:     	add	x29, sp, #16
1000090d4:     	mov	x19, x0
1000090d8:     	ldrsb	w8, [x0, #191]
1000090dc:     	tbnz	w8, #31, 0x100009128 <benchmark::BenchmarkName::~BenchmarkName()+0x60>
1000090e0:     	ldrsb	w8, [x19, #167]
1000090e4:     	tbnz	w8, #31, 0x100009138 <benchmark::BenchmarkName::~BenchmarkName()+0x70>
1000090e8:     	ldrsb	w8, [x19, #143]
1000090ec:     	tbnz	w8, #31, 0x100009148 <benchmark::BenchmarkName::~BenchmarkName()+0x80>
1000090f0:     	ldrsb	w8, [x19, #119]
1000090f4:     	tbnz	w8, #31, 0x100009158 <benchmark::BenchmarkName::~BenchmarkName()+0x90>
1000090f8:     	ldrsb	w8, [x19, #95]
1000090fc:     	tbnz	w8, #31, 0x100009168 <benchmark::BenchmarkName::~BenchmarkName()+0xa0>
100009100:     	ldrsb	w8, [x19, #71]
100009104:     	tbnz	w8, #31, 0x100009178 <benchmark::BenchmarkName::~BenchmarkName()+0xb0>
100009108:     	ldrsb	w8, [x19, #47]
10000910c:     	tbnz	w8, #31, 0x100009188 <benchmark::BenchmarkName::~BenchmarkName()+0xc0>
100009110:     	ldrsb	w8, [x19, #23]
100009114:     	tbnz	w8, #31, 0x100009198 <benchmark::BenchmarkName::~BenchmarkName()+0xd0>
100009118:     	mov	x0, x19
10000911c:     	ldp	x29, x30, [sp, #16]
100009120:     	ldp	x20, x19, [sp], #32
100009124:     	ret
100009128:     	ldr	x0, [x19, #168]
10000912c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100009130:     	ldrsb	w8, [x19, #167]
100009134:     	tbz	w8, #31, 0x1000090e8 <benchmark::BenchmarkName::~BenchmarkName()+0x20>
100009138:     	ldr	x0, [x19, #144]
10000913c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100009140:     	ldrsb	w8, [x19, #143]
100009144:     	tbz	w8, #31, 0x1000090f0 <benchmark::BenchmarkName::~BenchmarkName()+0x28>
100009148:     	ldr	x0, [x19, #120]
10000914c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100009150:     	ldrsb	w8, [x19, #119]
100009154:     	tbz	w8, #31, 0x1000090f8 <benchmark::BenchmarkName::~BenchmarkName()+0x30>
100009158:     	ldr	x0, [x19, #96]
10000915c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100009160:     	ldrsb	w8, [x19, #95]
100009164:     	tbz	w8, #31, 0x100009100 <benchmark::BenchmarkName::~BenchmarkName()+0x38>
100009168:     	ldr	x0, [x19, #72]
10000916c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100009170:     	ldrsb	w8, [x19, #71]
100009174:     	tbz	w8, #31, 0x100009108 <benchmark::BenchmarkName::~BenchmarkName()+0x40>
100009178:     	ldr	x0, [x19, #48]
10000917c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100009180:     	ldrsb	w8, [x19, #47]
100009184:     	tbz	w8, #31, 0x100009110 <benchmark::BenchmarkName::~BenchmarkName()+0x48>
100009188:     	ldr	x0, [x19, #24]
10000918c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100009190:     	ldrsb	w8, [x19, #23]
100009194:     	tbz	w8, #31, 0x100009118 <benchmark::BenchmarkName::~BenchmarkName()+0x50>
100009198:     	ldr	x0, [x19]
10000919c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000091a0:     	mov	x0, x19
1000091a4:     	ldp	x29, x30, [sp, #16]
1000091a8:     	ldp	x20, x19, [sp], #32
1000091ac:     	ret

00000001000091b0 <benchmark::BenchmarkReporter::Run::operator=(benchmark::BenchmarkReporter::Run&&)>:
1000091b0:     	stp	x22, x21, [sp, #-48]!
1000091b4:     	stp	x20, x19, [sp, #16]
1000091b8:     	stp	x29, x30, [sp, #32]
1000091bc:     	add	x29, sp, #32
1000091c0:     	mov	x20, x1
1000091c4:     	mov	x19, x0
1000091c8:     	bl	0x100009308 <benchmark::BenchmarkName::operator=(benchmark::BenchmarkName&&)>
1000091cc:     	ldr	w8, [x20, #208]
1000091d0:     	ldr	q0, [x20, #192]
1000091d4:     	str	q0, [x19, #192]
1000091d8:     	str	w8, [x19, #208]
1000091dc:     	add	x21, x19, #216
1000091e0:     	add	x22, x20, #216
1000091e4:     	ldrsb	w8, [x19, #239]
1000091e8:     	tbz	w8, #31, 0x1000091f4 <benchmark::BenchmarkReporter::Run::operator=(benchmark::BenchmarkReporter::Run&&)+0x44>
1000091ec:     	ldr	x0, [x21]
1000091f0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000091f4:     	ldr	q0, [x22]
1000091f8:     	ldr	x8, [x22, #16]
1000091fc:     	str	x8, [x21, #16]
100009200:     	str	q0, [x21]
100009204:     	strb	wzr, [x20, #239]
100009208:     	strb	wzr, [x20, #216]
10000920c:     	ldr	w8, [x20, #240]
100009210:     	str	w8, [x19, #240]
100009214:     	add	x21, x19, #248
100009218:     	add	x22, x20, #248
10000921c:     	ldrsb	w8, [x19, #271]
100009220:     	tbz	w8, #31, 0x10000922c <benchmark::BenchmarkReporter::Run::operator=(benchmark::BenchmarkReporter::Run&&)+0x7c>
100009224:     	ldr	x0, [x21]
100009228:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000922c:     	ldr	q0, [x22]
100009230:     	ldr	x8, [x22, #16]
100009234:     	str	x8, [x21, #16]
100009238:     	str	q0, [x21]
10000923c:     	strb	wzr, [x20, #271]
100009240:     	strb	wzr, [x20, #248]
100009244:     	ldr	w8, [x20, #272]
100009248:     	str	w8, [x19, #272]
10000924c:     	add	x21, x19, #280
100009250:     	add	x22, x20, #280
100009254:     	ldrsb	w8, [x19, #303]
100009258:     	tbz	w8, #31, 0x100009264 <benchmark::BenchmarkReporter::Run::operator=(benchmark::BenchmarkReporter::Run&&)+0xb4>
10000925c:     	ldr	x0, [x21]
100009260:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100009264:     	ldr	q0, [x22]
100009268:     	ldr	x8, [x22, #16]
10000926c:     	str	x8, [x21, #16]
100009270:     	str	q0, [x21]
100009274:     	strb	wzr, [x20, #303]
100009278:     	strb	wzr, [x20, #280]
10000927c:     	ldrh	w8, [x20, #400]
100009280:     	ldp	q1, q0, [x20, #368]
100009284:     	ldr	q2, [x20, #352]
100009288:     	stp	q2, q1, [x19, #352]
10000928c:     	str	q0, [x19, #384]
100009290:     	strh	w8, [x19, #400]
100009294:     	ldp	q1, q0, [x20, #320]
100009298:     	ldr	q2, [x20, #304]
10000929c:     	stp	q2, q1, [x19, #304]
1000092a0:     	str	q0, [x19, #336]
1000092a4:     	add	x21, x19, #408
1000092a8:     	add	x22, x19, #416
1000092ac:     	ldr	x1, [x19, #416]
1000092b0:     	mov	x0, x21
1000092b4:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
1000092b8:     	ldr	x8, [x20, #408]
1000092bc:     	str	x8, [x19, #408]
1000092c0:     	ldr	x8, [x20, #416]
1000092c4:     	str	x8, [x19, #416]
1000092c8:     	ldr	x9, [x20, #424]
1000092cc:     	str	x9, [x19, #424]
1000092d0:     	cbz	x9, 0x1000092e8 <benchmark::BenchmarkReporter::Run::operator=(benchmark::BenchmarkReporter::Run&&)+0x138>
1000092d4:     	add	x9, x20, #416
1000092d8:     	str	x22, [x8, #16]
1000092dc:     	str	x9, [x20, #408]
1000092e0:     	stp	xzr, xzr, [x9]
1000092e4:     	b	0x1000092ec <benchmark::BenchmarkReporter::Run::operator=(benchmark::BenchmarkReporter::Run&&)+0x13c>
1000092e8:     	str	x22, [x21]
1000092ec:     	ldr	q0, [x20, #432]
1000092f0:     	str	q0, [x19, #432]
1000092f4:     	mov	x0, x19
1000092f8:     	ldp	x29, x30, [sp, #32]
1000092fc:     	ldp	x20, x19, [sp, #16]
100009300:     	ldp	x22, x21, [sp], #48
100009304:     	ret

0000000100009308 <benchmark::BenchmarkName::operator=(benchmark::BenchmarkName&&)>:
100009308:     	stp	x22, x21, [sp, #-48]!
10000930c:     	stp	x20, x19, [sp, #16]
100009310:     	stp	x29, x30, [sp, #32]
100009314:     	add	x29, sp, #32
100009318:     	mov	x20, x1
10000931c:     	mov	x19, x0
100009320:     	ldrsb	w8, [x0, #23]
100009324:     	tbz	w8, #31, 0x100009330 <benchmark::BenchmarkName::operator=(benchmark::BenchmarkName&&)+0x28>
100009328:     	ldr	x0, [x19]
10000932c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100009330:     	ldr	q0, [x20]
100009334:     	ldr	x8, [x20, #16]
100009338:     	str	x8, [x19, #16]
10000933c:     	str	q0, [x19]
100009340:     	strb	wzr, [x20, #23]
100009344:     	strb	wzr, [x20]
100009348:     	add	x21, x19, #24
10000934c:     	add	x22, x20, #24
100009350:     	ldrsb	w8, [x19, #47]
100009354:     	tbz	w8, #31, 0x100009360 <benchmark::BenchmarkName::operator=(benchmark::BenchmarkName&&)+0x58>
100009358:     	ldr	x0, [x21]
10000935c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100009360:     	ldr	q0, [x22]
100009364:     	ldr	x8, [x22, #16]
100009368:     	str	x8, [x21, #16]
10000936c:     	str	q0, [x21]
100009370:     	strb	wzr, [x20, #47]
100009374:     	strb	wzr, [x20, #24]
100009378:     	add	x21, x19, #48
10000937c:     	add	x22, x20, #48
100009380:     	ldrsb	w8, [x19, #71]
100009384:     	tbz	w8, #31, 0x100009390 <benchmark::BenchmarkName::operator=(benchmark::BenchmarkName&&)+0x88>
100009388:     	ldr	x0, [x21]
10000938c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100009390:     	ldr	q0, [x22]
100009394:     	ldr	x8, [x22, #16]
100009398:     	str	x8, [x21, #16]
10000939c:     	str	q0, [x21]
1000093a0:     	strb	wzr, [x20, #71]
1000093a4:     	strb	wzr, [x20, #48]
1000093a8:     	add	x21, x19, #72
1000093ac:     	add	x22, x20, #72
1000093b0:     	ldrsb	w8, [x19, #95]
1000093b4:     	tbz	w8, #31, 0x1000093c0 <benchmark::BenchmarkName::operator=(benchmark::BenchmarkName&&)+0xb8>
1000093b8:     	ldr	x0, [x21]
1000093bc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000093c0:     	ldr	q0, [x22]
1000093c4:     	ldr	x8, [x22, #16]
1000093c8:     	str	x8, [x21, #16]
1000093cc:     	str	q0, [x21]
1000093d0:     	strb	wzr, [x20, #95]
1000093d4:     	strb	wzr, [x20, #72]
1000093d8:     	add	x21, x19, #96
1000093dc:     	add	x22, x20, #96
1000093e0:     	ldrsb	w8, [x19, #119]
1000093e4:     	tbz	w8, #31, 0x1000093f0 <benchmark::BenchmarkName::operator=(benchmark::BenchmarkName&&)+0xe8>
1000093e8:     	ldr	x0, [x21]
1000093ec:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000093f0:     	ldr	q0, [x22]
1000093f4:     	ldr	x8, [x22, #16]
1000093f8:     	str	x8, [x21, #16]
1000093fc:     	str	q0, [x21]
100009400:     	strb	wzr, [x20, #119]
100009404:     	strb	wzr, [x20, #96]
100009408:     	add	x21, x19, #120
10000940c:     	add	x22, x20, #120
100009410:     	ldrsb	w8, [x19, #143]
100009414:     	tbz	w8, #31, 0x100009420 <benchmark::BenchmarkName::operator=(benchmark::BenchmarkName&&)+0x118>
100009418:     	ldr	x0, [x21]
10000941c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100009420:     	ldr	q0, [x22]
100009424:     	ldr	x8, [x22, #16]
100009428:     	str	x8, [x21, #16]
10000942c:     	str	q0, [x21]
100009430:     	strb	wzr, [x20, #143]
100009434:     	strb	wzr, [x20, #120]
100009438:     	add	x21, x19, #144
10000943c:     	add	x22, x20, #144
100009440:     	ldrsb	w8, [x19, #167]
100009444:     	tbz	w8, #31, 0x100009450 <benchmark::BenchmarkName::operator=(benchmark::BenchmarkName&&)+0x148>
100009448:     	ldr	x0, [x21]
10000944c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100009450:     	ldr	q0, [x22]
100009454:     	ldr	x8, [x22, #16]
100009458:     	str	x8, [x21, #16]
10000945c:     	str	q0, [x21]
100009460:     	strb	wzr, [x20, #167]
100009464:     	strb	wzr, [x20, #144]
100009468:     	add	x21, x19, #168
10000946c:     	ldrsb	w8, [x19, #191]
100009470:     	tbz	w8, #31, 0x10000947c <benchmark::BenchmarkName::operator=(benchmark::BenchmarkName&&)+0x174>
100009474:     	ldr	x0, [x21]
100009478:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000947c:     	ldur	q0, [x20, #168]
100009480:     	ldr	x8, [x20, #184]
100009484:     	str	x8, [x21, #16]
100009488:     	str	q0, [x21]
10000948c:     	strb	wzr, [x20, #191]
100009490:     	strb	wzr, [x20, #168]
100009494:     	mov	x0, x19
100009498:     	ldp	x29, x30, [sp, #32]
10000949c:     	ldp	x20, x19, [sp, #16]
1000094a0:     	ldp	x22, x21, [sp], #48
1000094a4:     	ret

00000001000094a8 <benchmark::BenchmarkReporter::Run::operator=(benchmark::BenchmarkReporter::Run const&)>:
1000094a8:     	stp	x20, x19, [sp, #-32]!
1000094ac:     	stp	x29, x30, [sp, #16]
1000094b0:     	add	x29, sp, #16
1000094b4:     	mov	x20, x1
1000094b8:     	mov	x19, x0
1000094bc:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
1000094c0:     	add	x0, x19, #24
1000094c4:     	add	x1, x20, #24
1000094c8:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
1000094cc:     	add	x0, x19, #48
1000094d0:     	add	x1, x20, #48
1000094d4:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
1000094d8:     	add	x0, x19, #72
1000094dc:     	add	x1, x20, #72
1000094e0:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
1000094e4:     	add	x0, x19, #96
1000094e8:     	add	x1, x20, #96
1000094ec:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
1000094f0:     	add	x0, x19, #120
1000094f4:     	add	x1, x20, #120
1000094f8:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
1000094fc:     	add	x0, x19, #144
100009500:     	add	x1, x20, #144
100009504:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
100009508:     	add	x0, x19, #168
10000950c:     	add	x1, x20, #168
100009510:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
100009514:     	ldr	w8, [x20, #208]
100009518:     	ldr	q0, [x20, #192]
10000951c:     	str	q0, [x19, #192]
100009520:     	str	w8, [x19, #208]
100009524:     	add	x0, x19, #216
100009528:     	add	x1, x20, #216
10000952c:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
100009530:     	ldr	w8, [x20, #240]
100009534:     	str	w8, [x19, #240]
100009538:     	add	x0, x19, #248
10000953c:     	add	x1, x20, #248
100009540:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
100009544:     	ldr	w8, [x20, #272]
100009548:     	str	w8, [x19, #272]
10000954c:     	add	x0, x19, #280
100009550:     	add	x1, x20, #280
100009554:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
100009558:     	ldp	q1, q0, [x20, #320]
10000955c:     	ldr	q2, [x20, #304]
100009560:     	stp	q2, q1, [x19, #304]
100009564:     	str	q0, [x19, #336]
100009568:     	ldp	q1, q0, [x20, #368]
10000956c:     	ldrh	w8, [x20, #400]
100009570:     	ldr	q2, [x20, #352]
100009574:     	strh	w8, [x19, #400]
100009578:     	stp	q1, q0, [x19, #368]
10000957c:     	str	q2, [x19, #352]
100009580:     	cmp	x19, x20
100009584:     	b.eq	0x100009598 <benchmark::BenchmarkReporter::Run::operator=(benchmark::BenchmarkReporter::Run const&)+0xf0>
100009588:     	add	x0, x19, #408
10000958c:     	ldr	x1, [x20, #408]
100009590:     	add	x2, x20, #416
100009594:     	bl	0x1000095b0 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)>
100009598:     	ldr	q0, [x20, #432]
10000959c:     	str	q0, [x19, #432]
1000095a0:     	mov	x0, x19
1000095a4:     	ldp	x29, x30, [sp, #16]
1000095a8:     	ldp	x20, x19, [sp], #32
1000095ac:     	ret

00000001000095b0 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)>:
1000095b0:     	sub	sp, sp, #128
1000095b4:     	stp	x28, x27, [sp, #32]
1000095b8:     	stp	x26, x25, [sp, #48]
1000095bc:     	stp	x24, x23, [sp, #64]
1000095c0:     	stp	x22, x21, [sp, #80]
1000095c4:     	stp	x20, x19, [sp, #96]
1000095c8:     	stp	x29, x30, [sp, #112]
1000095cc:     	add	x29, sp, #112
1000095d0:     	mov	x19, x2
1000095d4:     	mov	x22, x1
1000095d8:     	mov	x20, x0
1000095dc:     	ldr	x8, [x0, #16]
1000095e0:     	cbz	x8, 0x100009858 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x2a8>
1000095e4:     	ldr	x8, [x20]
1000095e8:     	mov	x24, x20
1000095ec:     	ldr	x9, [x24, #8]!
1000095f0:     	str	x24, [x20]
1000095f4:     	str	xzr, [x9, #16]
1000095f8:     	str	xzr, [x20, #16]
1000095fc:     	str	xzr, [x24]
100009600:     	ldr	x9, [x8, #8]
100009604:     	cmp	x9, #0
100009608:     	csel	x21, x8, x9, eq
10000960c:     	str	x20, [sp, #8]
100009610:     	str	x21, [sp, #24]
100009614:     	cbz	x21, 0x100009818 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x268>
100009618:     	ldr	x23, [x21, #16]
10000961c:     	cbz	x23, 0x100009648 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x98>
100009620:     	ldr	x8, [x23]
100009624:     	cmp	x8, x21
100009628:     	b.eq	0x1000098c8 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x318>
10000962c:     	str	xzr, [x23, #8]
100009630:     	cbz	x8, 0x100009648 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x98>
100009634:     	mov	x23, x8
100009638:     	ldr	x8, [x8]
10000963c:     	cbnz	x8, 0x100009634 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x84>
100009640:     	ldr	x8, [x23, #8]
100009644:     	cbnz	x8, 0x100009634 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x84>
100009648:     	str	x23, [sp, #16]
10000964c:     	cmp	x22, x19
100009650:     	b.eq	0x100009824 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x274>
100009654:     	mov	x25, x22
100009658:     	add	x1, x25, #32
10000965c:     	add	x22, x21, #32
100009660:     	mov	x0, x22
100009664:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
100009668:     	ldur	q0, [x25, #56]
10000966c:     	stur	q0, [x21, #56]
100009670:     	ldr	x8, [x24]
100009674:     	mov	x23, x24
100009678:     	mov	x9, x24
10000967c:     	cbz	x8, 0x1000096fc <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x14c>
100009680:     	ldrb	w9, [x21, #55]
100009684:     	sxtb	w10, w9
100009688:     	ldp	x12, x11, [x21, #32]
10000968c:     	cmp	w10, #0
100009690:     	csel	x26, x11, x9, lt
100009694:     	csel	x22, x12, x22, lt
100009698:     	b	0x1000096a4 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0xf4>
10000969c:     	ldr	x8, [x23, #8]
1000096a0:     	cbz	x8, 0x1000097c4 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x214>
1000096a4:     	mov	x23, x8
1000096a8:     	ldr	x9, [x8, #32]!
1000096ac:     	ldrb	w10, [x8, #23]
1000096b0:     	sxtb	w11, w10
1000096b4:     	ldr	x12, [x8, #8]
1000096b8:     	cmp	w11, #0
1000096bc:     	csel	x27, x12, x10, lt
1000096c0:     	csel	x1, x9, x8, lt
1000096c4:     	cmp	x27, x26
1000096c8:     	csel	x2, x27, x26, lo
1000096cc:     	mov	x0, x22
1000096d0:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
1000096d4:     	cmp	x26, x27
1000096d8:     	cset	w8, lo
1000096dc:     	cmp	w0, #0
1000096e0:     	cset	w9, lt
1000096e4:     	csel	w8, w8, w9, eq
1000096e8:     	cmp	w8, #1
1000096ec:     	b.ne	0x10000969c <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0xec>
1000096f0:     	ldr	x8, [x23]
1000096f4:     	mov	x9, x23
1000096f8:     	cbnz	x8, 0x1000096a4 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0xf4>
1000096fc:     	stp	xzr, xzr, [x21]
100009700:     	str	x23, [x21, #16]
100009704:     	str	x21, [x9]
100009708:     	ldr	x8, [x20]
10000970c:     	ldr	x8, [x8]
100009710:     	cbz	x8, 0x10000971c <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x16c>
100009714:     	str	x8, [x20]
100009718:     	ldr	x21, [x9]
10000971c:     	ldr	x0, [x20, #8]
100009720:     	mov	x1, x21
100009724:     	bl	0x100006fe0 <void std::__1::__tree_balance_after_insert[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)>
100009728:     	ldr	x8, [x20, #16]
10000972c:     	add	x8, x8, #1
100009730:     	str	x8, [x20, #16]
100009734:     	ldr	x21, [sp, #16]
100009738:     	str	x21, [sp, #24]
10000973c:     	cbz	x21, 0x100009780 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x1d0>
100009740:     	ldr	x23, [x21, #16]
100009744:     	cbz	x23, 0x100009770 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x1c0>
100009748:     	ldr	x8, [x23]
10000974c:     	cmp	x8, x21
100009750:     	b.eq	0x1000097e4 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x234>
100009754:     	str	xzr, [x23, #8]
100009758:     	cbz	x8, 0x100009770 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x1c0>
10000975c:     	mov	x23, x8
100009760:     	ldr	x8, [x8]
100009764:     	cbnz	x8, 0x10000975c <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x1ac>
100009768:     	ldr	x8, [x23, #8]
10000976c:     	cbnz	x8, 0x10000975c <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x1ac>
100009770:     	str	x23, [sp, #16]
100009774:     	ldr	x8, [x25, #8]
100009778:     	cbnz	x8, 0x10000978c <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x1dc>
10000977c:     	b	0x10000979c <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x1ec>
100009780:     	mov	x23, #0
100009784:     	ldr	x8, [x25, #8]
100009788:     	cbz	x8, 0x10000979c <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x1ec>
10000978c:     	mov	x22, x8
100009790:     	ldr	x8, [x8]
100009794:     	cbnz	x8, 0x10000978c <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x1dc>
100009798:     	b	0x1000097b0 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x200>
10000979c:     	ldr	x22, [x25, #16]
1000097a0:     	ldr	x8, [x22]
1000097a4:     	cmp	x8, x25
1000097a8:     	mov	x25, x22
1000097ac:     	b.ne	0x10000979c <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x1ec>
1000097b0:     	cbz	x21, 0x100009800 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x250>
1000097b4:     	mov	x25, x22
1000097b8:     	cmp	x22, x19
1000097bc:     	b.ne	0x100009658 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0xa8>
1000097c0:     	b	0x100009800 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x250>
1000097c4:     	add	x9, x23, #8
1000097c8:     	stp	xzr, xzr, [x21]
1000097cc:     	str	x23, [x21, #16]
1000097d0:     	str	x21, [x9]
1000097d4:     	ldr	x8, [x20]
1000097d8:     	ldr	x8, [x8]
1000097dc:     	cbnz	x8, 0x100009714 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x164>
1000097e0:     	b	0x10000971c <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x16c>
1000097e4:     	str	xzr, [x23]
1000097e8:     	ldr	x8, [x23, #8]
1000097ec:     	cbz	x8, 0x100009770 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x1c0>
1000097f0:     	mov	x23, x8
1000097f4:     	ldr	x8, [x8]
1000097f8:     	cbnz	x8, 0x1000097f0 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x240>
1000097fc:     	b	0x1000097e8 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x238>
100009800:     	ldr	x24, [sp, #8]
100009804:     	mov	x0, x24
100009808:     	mov	x1, x21
10000980c:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
100009810:     	cbnz	x23, 0x100009838 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x288>
100009814:     	b	0x100009858 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x2a8>
100009818:     	mov	x0, x20
10000981c:     	mov	x1, x21
100009820:     	b	0x100009854 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x2a4>
100009824:     	mov	x24, x20
100009828:     	mov	x0, x24
10000982c:     	mov	x1, x21
100009830:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
100009834:     	cbz	x23, 0x100009858 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x2a8>
100009838:     	ldr	x8, [x23, #16]
10000983c:     	cbz	x8, 0x10000984c <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x29c>
100009840:     	mov	x23, x8
100009844:     	ldr	x8, [x8, #16]
100009848:     	cbnz	x8, 0x100009840 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x290>
10000984c:     	mov	x0, x24
100009850:     	mov	x1, x23
100009854:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
100009858:     	cmp	x22, x19
10000985c:     	b.ne	0x10000988c <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x2dc>
100009860:     	ldp	x29, x30, [sp, #112]
100009864:     	ldp	x20, x19, [sp, #96]
100009868:     	ldp	x22, x21, [sp, #80]
10000986c:     	ldp	x24, x23, [sp, #64]
100009870:     	ldp	x26, x25, [sp, #48]
100009874:     	ldp	x28, x27, [sp, #32]
100009878:     	add	sp, sp, #128
10000987c:     	ret
100009880:     	mov	x22, x8
100009884:     	cmp	x8, x19
100009888:     	b.eq	0x100009860 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x2b0>
10000988c:     	add	x1, x22, #32
100009890:     	mov	x0, x20
100009894:     	bl	0x10000994c <std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_multi<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&)>
100009898:     	ldr	x9, [x22, #8]
10000989c:     	cbz	x9, 0x1000098b0 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x300>
1000098a0:     	mov	x8, x9
1000098a4:     	ldr	x9, [x9]
1000098a8:     	cbnz	x9, 0x1000098a0 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x2f0>
1000098ac:     	b	0x100009880 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x2d0>
1000098b0:     	ldr	x8, [x22, #16]
1000098b4:     	ldr	x9, [x8]
1000098b8:     	cmp	x9, x22
1000098bc:     	mov	x22, x8
1000098c0:     	b.ne	0x1000098b0 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x300>
1000098c4:     	b	0x100009880 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x2d0>
1000098c8:     	str	xzr, [x23]
1000098cc:     	ldr	x8, [x23, #8]
1000098d0:     	cbz	x8, 0x100009648 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x98>
1000098d4:     	mov	x23, x8
1000098d8:     	ldr	x8, [x8]
1000098dc:     	cbnz	x8, 0x1000098d4 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x324>
1000098e0:     	b	0x1000098cc <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)+0x31c>
1000098e4:     	mov	x19, x0
1000098e8:     	add	x0, sp, #8
1000098ec:     	bl	0x1000098f8 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ue170006]()>
1000098f0:     	mov	x0, x19
1000098f4:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

00000001000098f8 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ue170006]()>:
1000098f8:     	stp	x20, x19, [sp, #-32]!
1000098fc:     	stp	x29, x30, [sp, #16]
100009900:     	add	x29, sp, #16
100009904:     	mov	x19, x0
100009908:     	ldr	x0, [x0]
10000990c:     	ldr	x1, [x19, #16]
100009910:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
100009914:     	ldr	x1, [x19, #8]
100009918:     	cbz	x1, 0x10000993c <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ue170006]()+0x44>
10000991c:     	ldr	x8, [x1, #16]
100009920:     	cbz	x8, 0x100009934 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ue170006]()+0x3c>
100009924:     	mov	x1, x8
100009928:     	ldr	x8, [x8, #16]
10000992c:     	cbnz	x8, 0x100009924 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ue170006]()+0x2c>
100009930:     	str	x1, [x19, #8]
100009934:     	ldr	x0, [x19]
100009938:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
10000993c:     	mov	x0, x19
100009940:     	ldp	x29, x30, [sp, #16]
100009944:     	ldp	x20, x19, [sp], #32
100009948:     	ret

000000010000994c <std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_multi<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&)>:
10000994c:     	sub	sp, sp, #112
100009950:     	stp	x26, x25, [sp, #32]
100009954:     	stp	x24, x23, [sp, #48]
100009958:     	stp	x22, x21, [sp, #64]
10000995c:     	stp	x20, x19, [sp, #80]
100009960:     	stp	x29, x30, [sp, #96]
100009964:     	add	x29, sp, #96
100009968:     	mov	x22, x1
10000996c:     	mov	x19, x0
100009970:     	add	x25, x0, #8
100009974:     	mov	w0, #72
100009978:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000997c:     	mov	x20, x0
100009980:     	stp	x0, x25, [sp, #8]
100009984:     	strb	wzr, [sp, #24]
100009988:     	add	x21, x0, #32
10000998c:     	ldrsb	w8, [x22, #23]
100009990:     	tbnz	w8, #31, 0x1000099bc <std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_multi<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&)+0x70>
100009994:     	ldr	q0, [x22]
100009998:     	str	q0, [x21]
10000999c:     	ldr	x8, [x22, #16]
1000099a0:     	str	x8, [x21, #16]
1000099a4:     	ldur	q0, [x22, #24]
1000099a8:     	stur	q0, [x20, #56]
1000099ac:     	ldr	x8, [x25]
1000099b0:     	mov	x9, x25
1000099b4:     	cbnz	x8, 0x100009a1c <std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_multi<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&)+0xd0>
1000099b8:     	b	0x100009a98 <std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_multi<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&)+0x14c>
1000099bc:     	ldp	x23, x26, [x22]
1000099c0:     	cmp	x26, #22
1000099c4:     	b.hi	0x1000099d4 <std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_multi<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&)+0x88>
1000099c8:     	strb	w26, [x20, #55]
1000099cc:     	mov	x0, x21
1000099d0:     	b	0x1000099fc <std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_multi<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&)+0xb0>
1000099d4:     	mov	x8, #9223372036854775792
1000099d8:     	cmp	x26, x8
1000099dc:     	b.hs	0x100009b10 <std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_multi<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&)+0x1c4>
1000099e0:     	orr	x8, x26, #0xf
1000099e4:     	add	x24, x8, #1
1000099e8:     	mov	x0, x24
1000099ec:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
1000099f0:     	orr	x8, x24, #0x8000000000000000
1000099f4:     	stp	x26, x8, [x20, #40]
1000099f8:     	str	x0, [x20, #32]
1000099fc:     	add	x2, x26, #1
100009a00:     	mov	x1, x23
100009a04:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
100009a08:     	ldur	q0, [x22, #24]
100009a0c:     	stur	q0, [x20, #56]
100009a10:     	ldr	x8, [x25]
100009a14:     	mov	x9, x25
100009a18:     	cbz	x8, 0x100009a98 <std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_multi<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&)+0x14c>
100009a1c:     	ldrb	w9, [x20, #55]
100009a20:     	sxtb	w10, w9
100009a24:     	ldp	x12, x11, [x20, #32]
100009a28:     	cmp	w10, #0
100009a2c:     	csel	x22, x11, x9, lt
100009a30:     	csel	x21, x12, x21, lt
100009a34:     	b	0x100009a40 <std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_multi<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&)+0xf4>
100009a38:     	ldr	x8, [x25, #8]
100009a3c:     	cbz	x8, 0x100009af0 <std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_multi<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&)+0x1a4>
100009a40:     	mov	x25, x8
100009a44:     	ldr	x9, [x8, #32]!
100009a48:     	ldrb	w10, [x8, #23]
100009a4c:     	sxtb	w11, w10
100009a50:     	ldr	x12, [x8, #8]
100009a54:     	cmp	w11, #0
100009a58:     	csel	x23, x12, x10, lt
100009a5c:     	csel	x1, x9, x8, lt
100009a60:     	cmp	x23, x22
100009a64:     	csel	x2, x23, x22, lo
100009a68:     	mov	x0, x21
100009a6c:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
100009a70:     	cmp	x22, x23
100009a74:     	cset	w8, lo
100009a78:     	cmp	w0, #0
100009a7c:     	cset	w9, lt
100009a80:     	csel	w8, w8, w9, eq
100009a84:     	cmp	w8, #1
100009a88:     	b.ne	0x100009a38 <std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_multi<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&)+0xec>
100009a8c:     	ldr	x8, [x25]
100009a90:     	mov	x9, x25
100009a94:     	cbnz	x8, 0x100009a40 <std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_multi<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&)+0xf4>
100009a98:     	stp	xzr, xzr, [x20]
100009a9c:     	str	x25, [x20, #16]
100009aa0:     	str	x20, [x9]
100009aa4:     	ldr	x8, [x19]
100009aa8:     	ldr	x8, [x8]
100009aac:     	cbz	x8, 0x100009ab8 <std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_multi<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&)+0x16c>
100009ab0:     	str	x8, [x19]
100009ab4:     	ldr	x20, [x9]
100009ab8:     	ldr	x0, [x19, #8]
100009abc:     	mov	x1, x20
100009ac0:     	bl	0x100006fe0 <void std::__1::__tree_balance_after_insert[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)>
100009ac4:     	ldr	x8, [x19, #16]
100009ac8:     	add	x8, x8, #1
100009acc:     	str	x8, [x19, #16]
100009ad0:     	ldr	x0, [sp, #8]
100009ad4:     	ldp	x29, x30, [sp, #96]
100009ad8:     	ldp	x20, x19, [sp, #80]
100009adc:     	ldp	x22, x21, [sp, #64]
100009ae0:     	ldp	x24, x23, [sp, #48]
100009ae4:     	ldp	x26, x25, [sp, #32]
100009ae8:     	add	sp, sp, #112
100009aec:     	ret
100009af0:     	add	x9, x25, #8
100009af4:     	stp	xzr, xzr, [x20]
100009af8:     	str	x25, [x20, #16]
100009afc:     	str	x20, [x9]
100009b00:     	ldr	x8, [x19]
100009b04:     	ldr	x8, [x8]
100009b08:     	cbnz	x8, 0x100009ab0 <std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_multi<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&)+0x164>
100009b0c:     	b	0x100009ab8 <std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_multi<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter> const&)+0x16c>
100009b10:     	mov	x0, x21
100009b14:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
100009b18:     	brk	#0x1
100009b1c:     	mov	x19, x0
100009b20:     	add	x0, sp, #8
100009b24:     	bl	0x10000901c <std::__1::unique_ptr<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>, std::__1::__tree_node_destructor<std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>>>>::~unique_ptr[abi:ue170006]()>
100009b28:     	mov	x0, x19
100009b2c:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100009b30 <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__throw_length_error[abi:ue170006]() const>:
100009b30:     	stp	x29, x30, [sp, #-16]!
100009b34:     	mov	x29, sp
100009b38:     	adrp	x0, 0x100031000 <std::__1::__split_buffer<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>&>::clear[abi:ue170006]()+0x94>
100009b3c:     	add	x0, x0, #3485
100009b40:     	bl	0x100006a48 <std::__1::__throw_length_error[abi:ue170006](char const*)>

0000000100009b44 <std::__1::__split_buffer<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>&>::clear[abi:ue170006]()>:
100009b44:     	stp	x22, x21, [sp, #-48]!
100009b48:     	stp	x20, x19, [sp, #16]
100009b4c:     	stp	x29, x30, [sp, #32]
100009b50:     	add	x29, sp, #32
100009b54:     	ldp	x21, x22, [x0, #8]
100009b58:     	cmp	x22, x21
100009b5c:     	b.eq	0x100009bd8 <std::__1::__split_buffer<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>&>::clear[abi:ue170006]()+0x94>
100009b60:     	mov	x19, x0
100009b64:     	b	0x100009b7c <std::__1::__split_buffer<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>&>::clear[abi:ue170006]()+0x38>
100009b68:     	mov	x0, x20
100009b6c:     	bl	0x1000090c8 <benchmark::BenchmarkName::~BenchmarkName()>
100009b70:     	ldr	x22, [x19, #16]
100009b74:     	cmp	x22, x21
100009b78:     	b.eq	0x100009bd8 <std::__1::__split_buffer<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>&>::clear[abi:ue170006]()+0x94>
100009b7c:     	sub	x20, x22, #448
100009b80:     	str	x20, [x19, #16]
100009b84:     	sub	x0, x22, #40
100009b88:     	ldur	x1, [x22, #-32]
100009b8c:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
100009b90:     	ldursb	w8, [x22, #-145]
100009b94:     	tbnz	w8, #31, 0x100009bac <std::__1::__split_buffer<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>&>::clear[abi:ue170006]()+0x68>
100009b98:     	ldursb	w8, [x22, #-177]
100009b9c:     	tbnz	w8, #31, 0x100009bbc <std::__1::__split_buffer<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>&>::clear[abi:ue170006]()+0x78>
100009ba0:     	ldursb	w8, [x22, #-209]
100009ba4:     	tbz	w8, #31, 0x100009b68 <std::__1::__split_buffer<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>&>::clear[abi:ue170006]()+0x24>
100009ba8:     	b	0x100009bcc <std::__1::__split_buffer<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>&>::clear[abi:ue170006]()+0x88>
100009bac:     	ldur	x0, [x22, #-168]
100009bb0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100009bb4:     	ldursb	w8, [x22, #-177]
100009bb8:     	tbz	w8, #31, 0x100009ba0 <std::__1::__split_buffer<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>&>::clear[abi:ue170006]()+0x5c>
100009bbc:     	ldur	x0, [x22, #-200]
100009bc0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100009bc4:     	ldursb	w8, [x22, #-209]
100009bc8:     	tbz	w8, #31, 0x100009b68 <std::__1::__split_buffer<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>&>::clear[abi:ue170006]()+0x24>
100009bcc:     	ldur	x0, [x22, #-232]
100009bd0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100009bd4:     	b	0x100009b68 <std::__1::__split_buffer<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>&>::clear[abi:ue170006]()+0x24>
100009bd8:     	ldp	x29, x30, [sp, #32]
100009bdc:     	ldp	x20, x19, [sp, #16]
100009be0:     	ldp	x22, x21, [sp], #48
100009be4:     	ret

0000000100009be8 <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)>:
100009be8:     	ldr	x9, [x1]
100009bec:     	mov	x10, x1
100009bf0:     	cbz	x9, 0x100009c08 <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x20>
100009bf4:     	ldr	x8, [x1, #8]
100009bf8:     	cbz	x8, 0x100009c44 <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x5c>
100009bfc:     	mov	x10, x8
100009c00:     	ldr	x8, [x8]
100009c04:     	cbnz	x8, 0x100009bfc <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x14>
100009c08:     	ldr	x9, [x10, #8]
100009c0c:     	cbnz	x9, 0x100009c48 <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x60>
100009c10:     	mov	w11, #1
100009c14:     	ldr	x12, [x10, #16]
100009c18:     	ldr	x8, [x12]
100009c1c:     	cmp	x8, x10
100009c20:     	b.ne	0x100009c64 <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x7c>
100009c24:     	str	x9, [x12]
100009c28:     	cmp	x10, x0
100009c2c:     	b.eq	0x100009e7c <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x294>
100009c30:     	ldr	x8, [x12, #8]
100009c34:     	ldrb	w12, [x10, #24]
100009c38:     	cmp	x10, x1
100009c3c:     	b.ne	0x100009c74 <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x8c>
100009c40:     	b	0x100009cb4 <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0xcc>
100009c44:     	mov	x10, x1
100009c48:     	mov	w11, #0
100009c4c:     	ldr	x8, [x10, #16]
100009c50:     	str	x8, [x9, #16]
100009c54:     	ldr	x12, [x10, #16]
100009c58:     	ldr	x8, [x12]
100009c5c:     	cmp	x8, x10
100009c60:     	b.eq	0x100009c24 <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x3c>
100009c64:     	str	x9, [x12, #8]
100009c68:     	ldrb	w12, [x10, #24]
100009c6c:     	cmp	x10, x1
100009c70:     	b.eq	0x100009cb4 <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0xcc>
100009c74:     	ldr	x13, [x1, #16]
100009c78:     	str	x13, [x10, #16]
100009c7c:     	ldr	x14, [x1, #16]
100009c80:     	ldr	x14, [x14]
100009c84:     	cmp	x14, x1
100009c88:     	cset	w14, ne
100009c8c:     	str	x10, [x13, w14, uxtw #3]
100009c90:     	ldp	x14, x13, [x1]
100009c94:     	str	x10, [x14, #16]
100009c98:     	stp	x14, x13, [x10]
100009c9c:     	cbz	x13, 0x100009ca4 <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0xbc>
100009ca0:     	str	x10, [x13, #16]
100009ca4:     	ldrb	w13, [x1, #24]
100009ca8:     	strb	w13, [x10, #24]
100009cac:     	cmp	x0, x1
100009cb0:     	csel	x0, x10, x0, eq
100009cb4:     	cbz	w12, 0x100009e78 <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x290>
100009cb8:     	cbz	x0, 0x100009e78 <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x290>
100009cbc:     	cbz	w11, 0x100009e70 <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x288>
100009cc0:     	mov	w9, #1
100009cc4:     	b	0x100009cf4 <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x10c>
100009cc8:     	strb	wzr, [x8, #24]
100009ccc:     	ldr	x8, [x8, #16]
100009cd0:     	ldrb	w10, [x8, #24]
100009cd4:     	cmp	w10, #0
100009cd8:     	ccmp	x8, x0, #4, ne
100009cdc:     	b.eq	0x100009e98 <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x2b0>
100009ce0:     	ldr	x10, [x8, #16]
100009ce4:     	ldr	x11, [x10]
100009ce8:     	cmp	x11, x8
100009cec:     	cset	w8, eq
100009cf0:     	ldr	x8, [x10, w8, uxtw #3]
100009cf4:     	ldr	x10, [x8, #16]
100009cf8:     	ldr	x12, [x10]
100009cfc:     	ldrb	w11, [x8, #24]
100009d00:     	cmp	x12, x8
100009d04:     	b.eq	0x100009d18 <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x130>
100009d08:     	cbz	w11, 0x100009d28 <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x140>
100009d0c:     	ldr	x10, [x8]
100009d10:     	cbnz	x10, 0x100009d80 <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x198>
100009d14:     	b	0x100009d88 <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x1a0>
100009d18:     	cbz	w11, 0x100009db4 <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x1cc>
100009d1c:     	ldr	x11, [x8]
100009d20:     	cbnz	x11, 0x100009e04 <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x21c>
100009d24:     	b	0x100009e0c <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x224>
100009d28:     	strb	w9, [x8, #24]
100009d2c:     	strb	wzr, [x10, #24]
100009d30:     	ldr	x11, [x10, #8]
100009d34:     	ldr	x12, [x11]
100009d38:     	str	x12, [x10, #8]
100009d3c:     	cbz	x12, 0x100009d44 <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x15c>
100009d40:     	str	x10, [x12, #16]
100009d44:     	ldr	x12, [x10, #16]
100009d48:     	str	x12, [x11, #16]
100009d4c:     	ldr	x12, [x10, #16]
100009d50:     	ldr	x13, [x12]
100009d54:     	cmp	x13, x10
100009d58:     	cset	w13, ne
100009d5c:     	str	x11, [x12, w13, uxtw #3]
100009d60:     	str	x10, [x11]
100009d64:     	str	x11, [x10, #16]
100009d68:     	ldr	x10, [x8]
100009d6c:     	cmp	x0, x10
100009d70:     	csel	x0, x8, x0, eq
100009d74:     	ldr	x8, [x10, #8]
100009d78:     	ldr	x10, [x8]
100009d7c:     	cbz	x10, 0x100009d88 <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x1a0>
100009d80:     	ldrb	w11, [x10, #24]
100009d84:     	cbz	w11, 0x100009ea4 <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x2bc>
100009d88:     	ldr	x11, [x8, #8]
100009d8c:     	cbz	x11, 0x100009d98 <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x1b0>
100009d90:     	ldrb	w12, [x11, #24]
100009d94:     	cbz	w12, 0x100009eac <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x2c4>
100009d98:     	strb	wzr, [x8, #24]
100009d9c:     	ldr	x8, [x8, #16]
100009da0:     	cmp	x8, x0
100009da4:     	b.eq	0x100009e94 <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x2ac>
100009da8:     	ldrb	w10, [x8, #24]
100009dac:     	cbnz	w10, 0x100009ce0 <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0xf8>
100009db0:     	b	0x100009e98 <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x2b0>
100009db4:     	strb	w9, [x8, #24]
100009db8:     	strb	wzr, [x10, #24]
100009dbc:     	ldr	x11, [x8, #8]
100009dc0:     	str	x11, [x10]
100009dc4:     	cbz	x11, 0x100009dcc <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x1e4>
100009dc8:     	str	x10, [x11, #16]
100009dcc:     	ldr	x11, [x10, #16]
100009dd0:     	str	x11, [x8, #16]
100009dd4:     	ldr	x11, [x10, #16]
100009dd8:     	ldr	x12, [x11]
100009ddc:     	cmp	x12, x10
100009de0:     	cset	w12, ne
100009de4:     	str	x8, [x11, w12, uxtw #3]
100009de8:     	str	x10, [x8, #8]
100009dec:     	str	x8, [x10, #16]
100009df0:     	cmp	x0, x10
100009df4:     	csel	x0, x8, x0, eq
100009df8:     	ldr	x8, [x10]
100009dfc:     	ldr	x11, [x8]
100009e00:     	cbz	x11, 0x100009e0c <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x224>
100009e04:     	ldrb	w10, [x11, #24]
100009e08:     	cbz	w10, 0x100009efc <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x314>
100009e0c:     	ldr	x10, [x8, #8]
100009e10:     	cbz	x10, 0x100009cc8 <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0xe0>
100009e14:     	ldrb	w12, [x10, #24]
100009e18:     	cbnz	w12, 0x100009cc8 <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0xe0>
100009e1c:     	cbz	x11, 0x100009e28 <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x240>
100009e20:     	ldrb	w9, [x11, #24]
100009e24:     	cbz	w9, 0x100009efc <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x314>
100009e28:     	mov	w9, #1
100009e2c:     	strb	w9, [x10, #24]
100009e30:     	strb	wzr, [x8, #24]
100009e34:     	ldr	x9, [x10]
100009e38:     	str	x9, [x8, #8]
100009e3c:     	cbz	x9, 0x100009e44 <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x25c>
100009e40:     	str	x8, [x9, #16]
100009e44:     	ldr	x9, [x8, #16]
100009e48:     	str	x9, [x10, #16]
100009e4c:     	ldr	x9, [x8, #16]
100009e50:     	ldr	x11, [x9]
100009e54:     	cmp	x11, x8
100009e58:     	cset	w11, ne
100009e5c:     	str	x10, [x9, w11, uxtw #3]
100009e60:     	str	x8, [x10]
100009e64:     	str	x10, [x8, #16]
100009e68:     	mov	x11, x8
100009e6c:     	b	0x100009f00 <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x318>
100009e70:     	mov	w8, #1
100009e74:     	strb	w8, [x9, #24]
100009e78:     	ret
100009e7c:     	mov	x8, #0
100009e80:     	mov	x0, x9
100009e84:     	ldrb	w12, [x10, #24]
100009e88:     	cmp	x10, x1
100009e8c:     	b.ne	0x100009c74 <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x8c>
100009e90:     	b	0x100009cb4 <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0xcc>
100009e94:     	mov	x8, x0
100009e98:     	mov	w9, #1
100009e9c:     	strb	w9, [x8, #24]
100009ea0:     	ret
100009ea4:     	ldr	x11, [x8, #8]
100009ea8:     	cbz	x11, 0x100009eb4 <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x2cc>
100009eac:     	ldrb	w9, [x11, #24]
100009eb0:     	cbz	w9, 0x100009f54 <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x36c>
100009eb4:     	mov	w9, #1
100009eb8:     	strb	w9, [x10, #24]
100009ebc:     	strb	wzr, [x8, #24]
100009ec0:     	ldr	x9, [x10, #8]
100009ec4:     	str	x9, [x8]
100009ec8:     	cbz	x9, 0x100009ed0 <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x2e8>
100009ecc:     	str	x8, [x9, #16]
100009ed0:     	ldr	x9, [x8, #16]
100009ed4:     	str	x9, [x10, #16]
100009ed8:     	ldr	x9, [x8, #16]
100009edc:     	ldr	x11, [x9]
100009ee0:     	cmp	x11, x8
100009ee4:     	cset	w11, ne
100009ee8:     	str	x10, [x9, w11, uxtw #3]
100009eec:     	str	x8, [x10, #8]
100009ef0:     	str	x10, [x8, #16]
100009ef4:     	mov	x11, x8
100009ef8:     	b	0x100009f58 <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x370>
100009efc:     	mov	x10, x8
100009f00:     	ldr	x8, [x10, #16]
100009f04:     	ldrb	w9, [x8, #24]
100009f08:     	strb	w9, [x10, #24]
100009f0c:     	mov	w9, #1
100009f10:     	strb	w9, [x8, #24]
100009f14:     	strb	w9, [x11, #24]
100009f18:     	ldr	x9, [x8]
100009f1c:     	ldr	x10, [x9, #8]
100009f20:     	str	x10, [x8]
100009f24:     	cbz	x10, 0x100009f2c <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x344>
100009f28:     	str	x8, [x10, #16]
100009f2c:     	ldr	x10, [x8, #16]
100009f30:     	str	x10, [x9, #16]
100009f34:     	ldr	x10, [x8, #16]
100009f38:     	ldr	x11, [x10]
100009f3c:     	cmp	x11, x8
100009f40:     	cset	w11, ne
100009f44:     	str	x9, [x10, w11, uxtw #3]
100009f48:     	str	x8, [x9, #8]
100009f4c:     	str	x9, [x8, #16]
100009f50:     	ret
100009f54:     	mov	x10, x8
100009f58:     	ldr	x8, [x10, #16]
100009f5c:     	ldrb	w9, [x8, #24]
100009f60:     	strb	w9, [x10, #24]
100009f64:     	mov	w9, #1
100009f68:     	strb	w9, [x8, #24]
100009f6c:     	strb	w9, [x11, #24]
100009f70:     	ldr	x9, [x8, #8]
100009f74:     	ldr	x10, [x9]
100009f78:     	str	x10, [x8, #8]
100009f7c:     	cbz	x10, 0x100009f84 <void std::__1::__tree_remove[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)+0x39c>
100009f80:     	str	x8, [x10, #16]
100009f84:     	ldr	x10, [x8, #16]
100009f88:     	str	x10, [x9, #16]
100009f8c:     	ldr	x10, [x8, #16]
100009f90:     	ldr	x11, [x10]
100009f94:     	cmp	x11, x8
100009f98:     	cset	w11, ne
100009f9c:     	str	x9, [x10, w11, uxtw #3]
100009fa0:     	str	x8, [x9]
100009fa4:     	str	x9, [x8, #16]
100009fa8:     	ret

0000000100009fac <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__destroy_vector::operator()[abi:ue170006]()>:
100009fac:     	stp	x24, x23, [sp, #-64]!
100009fb0:     	stp	x22, x21, [sp, #16]
100009fb4:     	stp	x20, x19, [sp, #32]
100009fb8:     	stp	x29, x30, [sp, #48]
100009fbc:     	add	x29, sp, #48
100009fc0:     	ldr	x21, [x0]
100009fc4:     	ldr	x22, [x21]
100009fc8:     	cbz	x22, 0x10000a058 <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__destroy_vector::operator()[abi:ue170006]()+0xac>
100009fcc:     	mov	x19, x0
100009fd0:     	ldr	x8, [x21, #8]
100009fd4:     	mov	x0, x22
100009fd8:     	cmp	x8, x22
100009fdc:     	b.eq	0x10000a074 <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__destroy_vector::operator()[abi:ue170006]()+0xc8>
100009fe0:     	sub	x23, x8, #209
100009fe4:     	b	0x100009ffc <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__destroy_vector::operator()[abi:ue170006]()+0x50>
100009fe8:     	mov	x0, x20
100009fec:     	bl	0x1000090c8 <benchmark::BenchmarkName::~BenchmarkName()>
100009ff0:     	sub	x23, x23, #448
100009ff4:     	cmp	x20, x22
100009ff8:     	b.eq	0x10000a06c <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__destroy_vector::operator()[abi:ue170006]()+0xc0>
100009ffc:     	add	x0, x23, #169
10000a000:     	ldur	x1, [x23, #177]
10000a004:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
10000a008:     	ldrsb	w8, [x23, #64]
10000a00c:     	tbnz	w8, #31, 0x10000a028 <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__destroy_vector::operator()[abi:ue170006]()+0x7c>
10000a010:     	ldrsb	w8, [x23, #32]
10000a014:     	tbnz	w8, #31, 0x10000a038 <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__destroy_vector::operator()[abi:ue170006]()+0x8c>
10000a018:     	sub	x20, x23, #239
10000a01c:     	ldrsb	w8, [x23]
10000a020:     	tbz	w8, #31, 0x100009fe8 <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__destroy_vector::operator()[abi:ue170006]()+0x3c>
10000a024:     	b	0x10000a04c <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__destroy_vector::operator()[abi:ue170006]()+0xa0>
10000a028:     	ldur	x0, [x23, #41]
10000a02c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000a030:     	ldrsb	w8, [x23, #32]
10000a034:     	tbz	w8, #31, 0x10000a018 <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__destroy_vector::operator()[abi:ue170006]()+0x6c>
10000a038:     	ldur	x0, [x23, #9]
10000a03c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000a040:     	sub	x20, x23, #239
10000a044:     	ldrsb	w8, [x23]
10000a048:     	tbz	w8, #31, 0x100009fe8 <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__destroy_vector::operator()[abi:ue170006]()+0x3c>
10000a04c:     	ldur	x0, [x23, #-23]
10000a050:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000a054:     	b	0x100009fe8 <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__destroy_vector::operator()[abi:ue170006]()+0x3c>
10000a058:     	ldp	x29, x30, [sp, #48]
10000a05c:     	ldp	x20, x19, [sp, #32]
10000a060:     	ldp	x22, x21, [sp, #16]
10000a064:     	ldp	x24, x23, [sp], #64
10000a068:     	ret
10000a06c:     	ldr	x8, [x19]
10000a070:     	ldr	x0, [x8]
10000a074:     	str	x22, [x21, #8]
10000a078:     	ldp	x29, x30, [sp, #48]
10000a07c:     	ldp	x20, x19, [sp, #32]
10000a080:     	ldp	x22, x21, [sp, #16]
10000a084:     	ldp	x24, x23, [sp], #64
10000a088:     	b	0x10002f014 <_vsnprintf+0x10002f014>

000000010000a08c <std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::__base_destruct_at_end[abi:ue170006](benchmark::internal::BenchmarkRunner*)>:
10000a08c:     	sub	sp, sp, #80
10000a090:     	stp	x24, x23, [sp, #16]
10000a094:     	stp	x22, x21, [sp, #32]
10000a098:     	stp	x20, x19, [sp, #48]
10000a09c:     	stp	x29, x30, [sp, #64]
10000a0a0:     	add	x29, sp, #64
10000a0a4:     	mov	x19, x1
10000a0a8:     	mov	x20, x0
10000a0ac:     	ldr	x21, [x0, #8]
10000a0b0:     	cmp	x21, x1
10000a0b4:     	b.ne	0x10000a108 <std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::__base_destruct_at_end[abi:ue170006](benchmark::internal::BenchmarkRunner*)+0x7c>
10000a0b8:     	str	x19, [x20, #8]
10000a0bc:     	ldp	x29, x30, [sp, #64]
10000a0c0:     	ldp	x20, x19, [sp, #48]
10000a0c4:     	ldp	x22, x21, [sp, #32]
10000a0c8:     	ldp	x24, x23, [sp, #16]
10000a0cc:     	add	sp, sp, #80
10000a0d0:     	ret
10000a0d4:     	stur	x23, [x21, #-56]
10000a0d8:     	mov	x0, x8
10000a0dc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000a0e0:     	sub	x8, x21, #160
10000a0e4:     	str	x8, [sp, #8]
10000a0e8:     	add	x0, sp, #8
10000a0ec:     	bl	0x100009fac <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__destroy_vector::operator()[abi:ue170006]()>
10000a0f0:     	str	x22, [sp, #8]
10000a0f4:     	add	x0, sp, #8
10000a0f8:     	bl	0x100009fac <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__destroy_vector::operator()[abi:ue170006]()>
10000a0fc:     	mov	x21, x22
10000a100:     	cmp	x22, x19
10000a104:     	b.eq	0x10000a0b8 <std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::__base_destruct_at_end[abi:ue170006](benchmark::internal::BenchmarkRunner*)+0x2c>
10000a108:     	ldur	x0, [x21, #-40]
10000a10c:     	cbz	x0, 0x10000a118 <std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::__base_destruct_at_end[abi:ue170006](benchmark::internal::BenchmarkRunner*)+0x8c>
10000a110:     	stur	x0, [x21, #-32]
10000a114:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000a118:     	sub	x22, x21, #184
10000a11c:     	ldur	x23, [x21, #-64]
10000a120:     	cbz	x23, 0x10000a0e0 <std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::__base_destruct_at_end[abi:ue170006](benchmark::internal::BenchmarkRunner*)+0x54>
10000a124:     	ldur	x0, [x21, #-56]
10000a128:     	mov	x8, x23
10000a12c:     	cmp	x0, x23
10000a130:     	b.eq	0x10000a0d4 <std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::__base_destruct_at_end[abi:ue170006](benchmark::internal::BenchmarkRunner*)+0x48>
10000a134:     	sub	x0, x0, #8
10000a138:     	bl	0x10002efa8 <_vsnprintf+0x10002efa8>
10000a13c:     	cmp	x0, x23
10000a140:     	b.ne	0x10000a134 <std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::__base_destruct_at_end[abi:ue170006](benchmark::internal::BenchmarkRunner*)+0xa8>
10000a144:     	ldur	x8, [x21, #-64]
10000a148:     	b	0x10000a0d4 <std::__1::vector<benchmark::internal::BenchmarkRunner, std::__1::allocator<benchmark::internal::BenchmarkRunner>>::__base_destruct_at_end[abi:ue170006](benchmark::internal::BenchmarkRunner*)+0x48>

000000010000a14c <benchmark::internal::PerfCounters::~PerfCounters()>:
10000a14c:     	stp	x22, x21, [sp, #-48]!
10000a150:     	stp	x20, x19, [sp, #16]
10000a154:     	stp	x29, x30, [sp, #32]
10000a158:     	add	x29, sp, #32
10000a15c:     	mov	x19, x0
10000a160:     	bl	0x1000295d4 <benchmark::internal::PerfCounters::CloseCounters() const>
10000a164:     	ldr	x20, [x19, #48]
10000a168:     	cbz	x20, 0x10000a1b0 <benchmark::internal::PerfCounters::~PerfCounters()+0x64>
10000a16c:     	ldr	x8, [x19, #56]
10000a170:     	mov	x0, x20
10000a174:     	cmp	x8, x20
10000a178:     	b.ne	0x10000a18c <benchmark::internal::PerfCounters::~PerfCounters()+0x40>
10000a17c:     	b	0x10000a1a8 <benchmark::internal::PerfCounters::~PerfCounters()+0x5c>
10000a180:     	mov	x8, x21
10000a184:     	cmp	x21, x20
10000a188:     	b.eq	0x10000a1a4 <benchmark::internal::PerfCounters::~PerfCounters()+0x58>
10000a18c:     	sub	x21, x8, #24
10000a190:     	ldursb	w9, [x8, #-1]
10000a194:     	tbz	w9, #31, 0x10000a180 <benchmark::internal::PerfCounters::~PerfCounters()+0x34>
10000a198:     	ldur	x0, [x8, #-24]
10000a19c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000a1a0:     	b	0x10000a180 <benchmark::internal::PerfCounters::~PerfCounters()+0x34>
10000a1a4:     	ldr	x0, [x19, #48]
10000a1a8:     	str	x20, [x19, #56]
10000a1ac:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000a1b0:     	ldr	x0, [x19, #24]
10000a1b4:     	cbz	x0, 0x10000a1c0 <benchmark::internal::PerfCounters::~PerfCounters()+0x74>
10000a1b8:     	str	x0, [x19, #32]
10000a1bc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000a1c0:     	ldr	x0, [x19]
10000a1c4:     	cbz	x0, 0x10000a1d0 <benchmark::internal::PerfCounters::~PerfCounters()+0x84>
10000a1c8:     	str	x0, [x19, #8]
10000a1cc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000a1d0:     	mov	x0, x19
10000a1d4:     	ldp	x29, x30, [sp, #32]
10000a1d8:     	ldp	x20, x19, [sp, #16]
10000a1dc:     	ldp	x22, x21, [sp], #48
10000a1e0:     	ret
10000a1e4:     	bl	0x100006a3c <___clang_call_terminate>

000000010000a1e8 <std::__1::__tree<std::__1::__value_type<int, benchmark::BenchmarkReporter::PerFamilyRunReports>, std::__1::__map_value_compare<int, std::__1::__value_type<int, benchmark::BenchmarkReporter::PerFamilyRunReports>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, benchmark::BenchmarkReporter::PerFamilyRunReports>>>::destroy(std::__1::__tree_node<std::__1::__value_type<int, benchmark::BenchmarkReporter::PerFamilyRunReports>, void*>*)>:
10000a1e8:     	cbz	x1, 0x10000a23c <std::__1::__tree<std::__1::__value_type<int, benchmark::BenchmarkReporter::PerFamilyRunReports>, std::__1::__map_value_compare<int, std::__1::__value_type<int, benchmark::BenchmarkReporter::PerFamilyRunReports>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, benchmark::BenchmarkReporter::PerFamilyRunReports>>>::destroy(std::__1::__tree_node<std::__1::__value_type<int, benchmark::BenchmarkReporter::PerFamilyRunReports>, void*>*)+0x54>
10000a1ec:     	sub	sp, sp, #48
10000a1f0:     	stp	x20, x19, [sp, #16]
10000a1f4:     	stp	x29, x30, [sp, #32]
10000a1f8:     	add	x29, sp, #32
10000a1fc:     	mov	x19, x1
10000a200:     	mov	x20, x0
10000a204:     	ldr	x1, [x1]
10000a208:     	bl	0x10000a1e8 <std::__1::__tree<std::__1::__value_type<int, benchmark::BenchmarkReporter::PerFamilyRunReports>, std::__1::__map_value_compare<int, std::__1::__value_type<int, benchmark::BenchmarkReporter::PerFamilyRunReports>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, benchmark::BenchmarkReporter::PerFamilyRunReports>>>::destroy(std::__1::__tree_node<std::__1::__value_type<int, benchmark::BenchmarkReporter::PerFamilyRunReports>, void*>*)>
10000a20c:     	ldr	x1, [x19, #8]
10000a210:     	mov	x0, x20
10000a214:     	bl	0x10000a1e8 <std::__1::__tree<std::__1::__value_type<int, benchmark::BenchmarkReporter::PerFamilyRunReports>, std::__1::__map_value_compare<int, std::__1::__value_type<int, benchmark::BenchmarkReporter::PerFamilyRunReports>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, benchmark::BenchmarkReporter::PerFamilyRunReports>>>::destroy(std::__1::__tree_node<std::__1::__value_type<int, benchmark::BenchmarkReporter::PerFamilyRunReports>, void*>*)>
10000a218:     	add	x8, x19, #48
10000a21c:     	str	x8, [sp, #8]
10000a220:     	add	x0, sp, #8
10000a224:     	bl	0x100009fac <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__destroy_vector::operator()[abi:ue170006]()>
10000a228:     	mov	x0, x19
10000a22c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000a230:     	ldp	x29, x30, [sp, #32]
10000a234:     	ldp	x20, x19, [sp, #16]
10000a238:     	add	sp, sp, #48
10000a23c:     	ret

000000010000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>:
10000a240:     	stp	x29, x30, [sp, #-16]!
10000a244:     	mov	x29, sp
10000a248:     	adrp	x0, 0x100031000 <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>, std::__1::tuple<>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>&&, std::__1::tuple<>&&)+0x4>
10000a24c:     	add	x0, x0, #3691
10000a250:     	bl	0x100006a48 <std::__1::__throw_length_error[abi:ue170006](char const*)>

000000010000a254 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*)>:
10000a254:     	cbz	x1, 0x10000a2a0 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*)+0x4c>
10000a258:     	stp	x20, x19, [sp, #-32]!
10000a25c:     	stp	x29, x30, [sp, #16]
10000a260:     	add	x29, sp, #16
10000a264:     	mov	x19, x1
10000a268:     	mov	x20, x0
10000a26c:     	ldr	x1, [x1]
10000a270:     	bl	0x10000a254 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*)>
10000a274:     	ldr	x1, [x19, #8]
10000a278:     	mov	x0, x20
10000a27c:     	bl	0x10000a254 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*)>
10000a280:     	ldrsb	w8, [x19, #79]
10000a284:     	tbnz	w8, #31, 0x10000a2a4 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*)+0x50>
10000a288:     	ldrsb	w8, [x19, #55]
10000a28c:     	tbnz	w8, #31, 0x10000a2b4 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*)+0x60>
10000a290:     	mov	x0, x19
10000a294:     	ldp	x29, x30, [sp, #16]
10000a298:     	ldp	x20, x19, [sp], #32
10000a29c:     	b	0x10002f014 <_vsnprintf+0x10002f014>
10000a2a0:     	ret
10000a2a4:     	ldr	x0, [x19, #56]
10000a2a8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000a2ac:     	ldrsb	w8, [x19, #55]
10000a2b0:     	tbz	w8, #31, 0x10000a290 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*)+0x3c>
10000a2b4:     	ldr	x0, [x19, #32]
10000a2b8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000a2bc:     	mov	x0, x19
10000a2c0:     	ldp	x29, x30, [sp, #16]
10000a2c4:     	ldp	x20, x19, [sp], #32
10000a2c8:     	b	0x10002f014 <_vsnprintf+0x10002f014>

000000010000a2cc <std::__1::vector<long long, std::__1::allocator<long long>>::__throw_length_error[abi:ue170006]() const>:
10000a2cc:     	stp	x29, x30, [sp, #-16]!
10000a2d0:     	mov	x29, sp
10000a2d4:     	adrp	x0, 0x100031000 <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>, std::__1::tuple<>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>&&, std::__1::tuple<>&&)+0x90>
10000a2d8:     	add	x0, x0, #3485
10000a2dc:     	bl	0x100006a48 <std::__1::__throw_length_error[abi:ue170006](char const*)>

000000010000a2e0 <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>, std::__1::tuple<>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>&&, std::__1::tuple<>&&)>:
10000a2e0:     	stp	x26, x25, [sp, #-80]!
10000a2e4:     	stp	x24, x23, [sp, #16]
10000a2e8:     	stp	x22, x21, [sp, #32]
10000a2ec:     	stp	x20, x19, [sp, #48]
10000a2f0:     	stp	x29, x30, [sp, #64]
10000a2f4:     	add	x29, sp, #64
10000a2f8:     	mov	x21, x3
10000a2fc:     	mov	x19, x0
10000a300:     	mov	x23, x0
10000a304:     	ldr	x8, [x23, #8]!
10000a308:     	cbz	x8, 0x10000a3c4 <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>, std::__1::tuple<>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>&&, std::__1::tuple<>&&)+0xe4>
10000a30c:     	ldrb	w9, [x1, #23]
10000a310:     	sxtb	w10, w9
10000a314:     	ldp	x12, x11, [x1]
10000a318:     	cmp	w10, #0
10000a31c:     	csel	x25, x11, x9, lt
10000a320:     	csel	x20, x12, x1, lt
10000a324:     	b	0x10000a334 <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>, std::__1::tuple<>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>&&, std::__1::tuple<>&&)+0x54>
10000a328:     	ldr	x8, [x24]
10000a32c:     	mov	x23, x24
10000a330:     	cbz	x8, 0x10000a3c8 <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>, std::__1::tuple<>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>&&, std::__1::tuple<>&&)+0xe8>
10000a334:     	mov	x24, x8
10000a338:     	ldr	x9, [x8, #32]!
10000a33c:     	ldrb	w10, [x8, #23]
10000a340:     	sxtb	w11, w10
10000a344:     	ldr	x12, [x8, #8]
10000a348:     	cmp	w11, #0
10000a34c:     	csel	x26, x12, x10, lt
10000a350:     	csel	x22, x9, x8, lt
10000a354:     	cmp	x26, x25
10000a358:     	csel	x23, x26, x25, lo
10000a35c:     	mov	x0, x20
10000a360:     	mov	x1, x22
10000a364:     	mov	x2, x23
10000a368:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
10000a36c:     	cmp	x25, x26
10000a370:     	cset	w8, lo
10000a374:     	cmp	w0, #0
10000a378:     	cset	w9, lt
10000a37c:     	csel	w8, w8, w9, eq
10000a380:     	cmp	w8, #1
10000a384:     	b.eq	0x10000a328 <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>, std::__1::tuple<>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>&&, std::__1::tuple<>&&)+0x48>
10000a388:     	mov	x0, x22
10000a38c:     	mov	x1, x20
10000a390:     	mov	x2, x23
10000a394:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
10000a398:     	cmp	x26, x25
10000a39c:     	cset	w8, lo
10000a3a0:     	cmp	w0, #0
10000a3a4:     	cset	w9, lt
10000a3a8:     	csel	w8, w8, w9, eq
10000a3ac:     	cmp	w8, #1
10000a3b0:     	b.ne	0x10000a40c <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>, std::__1::tuple<>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>&&, std::__1::tuple<>&&)+0x12c>
10000a3b4:     	ldr	x8, [x24, #8]
10000a3b8:     	cbnz	x8, 0x10000a334 <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>, std::__1::tuple<>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>&&, std::__1::tuple<>&&)+0x54>
10000a3bc:     	add	x23, x24, #8
10000a3c0:     	b	0x10000a3c8 <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>, std::__1::tuple<>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>&&, std::__1::tuple<>&&)+0xe8>
10000a3c4:     	mov	x24, x23
10000a3c8:     	mov	w0, #72
10000a3cc:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000a3d0:     	mov	x20, x0
10000a3d4:     	add	x0, x0, #32
10000a3d8:     	ldr	x8, [x21]
10000a3dc:     	ldrsb	w9, [x8, #23]
10000a3e0:     	tbnz	w9, #31, 0x10000a3f8 <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>, std::__1::tuple<>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>&&, std::__1::tuple<>&&)+0x118>
10000a3e4:     	ldr	q0, [x8]
10000a3e8:     	ldr	x8, [x8, #16]
10000a3ec:     	str	x8, [x0, #16]
10000a3f0:     	str	q0, [x0]
10000a3f4:     	b	0x10000a44c <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>, std::__1::tuple<>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>&&, std::__1::tuple<>&&)+0x16c>
10000a3f8:     	ldp	x21, x25, [x8]
10000a3fc:     	cmp	x25, #22
10000a400:     	b.hi	0x10000a418 <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>, std::__1::tuple<>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>&&, std::__1::tuple<>&&)+0x138>
10000a404:     	strb	w25, [x20, #55]
10000a408:     	b	0x10000a440 <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>, std::__1::tuple<>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>&&, std::__1::tuple<>&&)+0x160>
10000a40c:     	mov	x1, #0
10000a410:     	mov	x20, x24
10000a414:     	b	0x10000a498 <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>, std::__1::tuple<>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>&&, std::__1::tuple<>&&)+0x1b8>
10000a418:     	mov	x8, #9223372036854775792
10000a41c:     	cmp	x25, x8
10000a420:     	b.hs	0x10000a4b4 <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>, std::__1::tuple<>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>&&, std::__1::tuple<>&&)+0x1d4>
10000a424:     	orr	x8, x25, #0xf
10000a428:     	add	x22, x8, #1
10000a42c:     	mov	x0, x22
10000a430:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000a434:     	orr	x8, x22, #0x8000000000000000
10000a438:     	stp	x25, x8, [x20, #40]
10000a43c:     	str	x0, [x20, #32]
10000a440:     	add	x2, x25, #1
10000a444:     	mov	x1, x21
10000a448:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
10000a44c:     	str	xzr, [x20, #56]
10000a450:     	adrp	x8, 0x100032000 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)+0x20>
10000a454:     	ldr	d0, [x8, #2792]
10000a458:     	str	d0, [x20, #64]
10000a45c:     	stp	xzr, xzr, [x20]
10000a460:     	str	x24, [x20, #16]
10000a464:     	str	x20, [x23]
10000a468:     	ldr	x8, [x19]
10000a46c:     	ldr	x8, [x8]
10000a470:     	mov	x1, x20
10000a474:     	cbz	x8, 0x10000a480 <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>, std::__1::tuple<>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>&&, std::__1::tuple<>&&)+0x1a0>
10000a478:     	str	x8, [x19]
10000a47c:     	ldr	x1, [x23]
10000a480:     	ldr	x0, [x19, #8]
10000a484:     	bl	0x100006fe0 <void std::__1::__tree_balance_after_insert[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)>
10000a488:     	ldr	x8, [x19, #16]
10000a48c:     	add	x8, x8, #1
10000a490:     	str	x8, [x19, #16]
10000a494:     	mov	w1, #1
10000a498:     	mov	x0, x20
10000a49c:     	ldp	x29, x30, [sp, #64]
10000a4a0:     	ldp	x20, x19, [sp, #48]
10000a4a4:     	ldp	x22, x21, [sp, #32]
10000a4a8:     	ldp	x24, x23, [sp, #16]
10000a4ac:     	ldp	x26, x25, [sp], #80
10000a4b0:     	ret
10000a4b4:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
10000a4b8:     	brk	#0x1
10000a4bc:     	mov	x19, x0
10000a4c0:     	mov	x0, x20
10000a4c4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000a4c8:     	mov	x0, x19
10000a4cc:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>:
10000a4d0:     	sub	sp, sp, #112
10000a4d4:     	stp	x26, x25, [sp, #32]
10000a4d8:     	stp	x24, x23, [sp, #48]
10000a4dc:     	stp	x22, x21, [sp, #64]
10000a4e0:     	stp	x20, x19, [sp, #80]
10000a4e4:     	stp	x29, x30, [sp, #96]
10000a4e8:     	add	x29, sp, #96
10000a4ec:     	mov	x21, x2
10000a4f0:     	mov	x20, x1
10000a4f4:     	mov	x19, x0
10000a4f8:     	add	x0, sp, #8
10000a4fc:     	mov	x1, x19
10000a500:     	bl	0x10002edec <_vsnprintf+0x10002edec>
10000a504:     	ldrb	w8, [sp, #8]
10000a508:     	cbz	w8, 0x10000a5b0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)+0xe0>
10000a50c:     	ldr	x8, [x19]
10000a510:     	ldur	x8, [x8, #-24]
10000a514:     	add	x22, x19, x8
10000a518:     	ldr	x23, [x22, #40]
10000a51c:     	ldr	w25, [x22, #8]
10000a520:     	ldr	w24, [x22, #144]
10000a524:     	cmn	w24, #1
10000a528:     	b.ne	0x10000a568 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)+0x98>
10000a52c:     	add	x8, sp, #24
10000a530:     	mov	x0, x22
10000a534:     	bl	0x10002ecfc <_vsnprintf+0x10002ecfc>
10000a538:     	adrp	x1, 0x100034000 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)+0x110>
10000a53c:     	ldr	x1, [x1, #480]
10000a540:     	add	x0, sp, #24
10000a544:     	bl	0x10002ecf0 <_vsnprintf+0x10002ecf0>
10000a548:     	ldr	x8, [x0]
10000a54c:     	ldr	x8, [x8, #56]
10000a550:     	mov	w1, #32
10000a554:     	blr	x8
10000a558:     	mov	x24, x0
10000a55c:     	add	x0, sp, #24
10000a560:     	bl	0x10002ef84 <_vsnprintf+0x10002ef84>
10000a564:     	str	w24, [x22, #144]
10000a568:     	mov	w8, #176
10000a56c:     	and	w8, w25, w8
10000a570:     	add	x3, x20, x21
10000a574:     	cmp	w8, #32
10000a578:     	csel	x2, x3, x20, eq
10000a57c:     	sxtb	w5, w24
10000a580:     	mov	x0, x23
10000a584:     	mov	x1, x20
10000a588:     	mov	x4, x22
10000a58c:     	bl	0x10000a634 <std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>> std::__1::__pad_and_output[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>>, char const*, char const*, char const*, std::__1::ios_base&, char)>
10000a590:     	cbnz	x0, 0x10000a5b0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)+0xe0>
10000a594:     	ldr	x8, [x19]
10000a598:     	ldur	x8, [x8, #-24]
10000a59c:     	add	x0, x19, x8
10000a5a0:     	ldr	w8, [x0, #32]
10000a5a4:     	mov	w9, #5
10000a5a8:     	orr	w1, w8, w9
10000a5ac:     	bl	0x10002efd8 <_vsnprintf+0x10002efd8>
10000a5b0:     	add	x0, sp, #8
10000a5b4:     	bl	0x10002edf8 <_vsnprintf+0x10002edf8>
10000a5b8:     	mov	x0, x19
10000a5bc:     	ldp	x29, x30, [sp, #96]
10000a5c0:     	ldp	x20, x19, [sp, #80]
10000a5c4:     	ldp	x22, x21, [sp, #64]
10000a5c8:     	ldp	x24, x23, [sp, #48]
10000a5cc:     	ldp	x26, x25, [sp, #32]
10000a5d0:     	add	sp, sp, #112
10000a5d4:     	ret
10000a5d8:     	b	0x10000a5ec <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)+0x11c>
10000a5dc:     	mov	x20, x0
10000a5e0:     	add	x0, sp, #24
10000a5e4:     	bl	0x10002ef84 <_vsnprintf+0x10002ef84>
10000a5e8:     	b	0x10000a5f0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)+0x120>
10000a5ec:     	mov	x20, x0
10000a5f0:     	add	x0, sp, #8
10000a5f4:     	bl	0x10002edf8 <_vsnprintf+0x10002edf8>
10000a5f8:     	b	0x10000a600 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)+0x130>
10000a5fc:     	mov	x20, x0
10000a600:     	mov	x0, x20
10000a604:     	bl	0x10002f050 <_vsnprintf+0x10002f050>
10000a608:     	ldr	x8, [x19]
10000a60c:     	ldur	x8, [x8, #-24]
10000a610:     	add	x0, x19, x8
10000a614:     	bl	0x10002efb4 <_vsnprintf+0x10002efb4>
10000a618:     	bl	0x10002f05c <_vsnprintf+0x10002f05c>
10000a61c:     	b	0x10000a5b8 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)+0xe8>
10000a620:     	mov	x19, x0
10000a624:     	bl	0x10002f05c <_vsnprintf+0x10002f05c>
10000a628:     	mov	x0, x19
10000a62c:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
10000a630:     	bl	0x100006a3c <___clang_call_terminate>

000000010000a634 <std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>> std::__1::__pad_and_output[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>>, char const*, char const*, char const*, std::__1::ios_base&, char)>:
10000a634:     	sub	sp, sp, #112
10000a638:     	stp	x26, x25, [sp, #32]
10000a63c:     	stp	x24, x23, [sp, #48]
10000a640:     	stp	x22, x21, [sp, #64]
10000a644:     	stp	x20, x19, [sp, #80]
10000a648:     	stp	x29, x30, [sp, #96]
10000a64c:     	add	x29, sp, #96
10000a650:     	mov	x19, x0
10000a654:     	cbz	x0, 0x10000a784 <std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>> std::__1::__pad_and_output[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>>, char const*, char const*, char const*, std::__1::ios_base&, char)+0x150>
10000a658:     	mov	x24, x5
10000a65c:     	mov	x20, x4
10000a660:     	mov	x22, x3
10000a664:     	mov	x21, x2
10000a668:     	ldr	x8, [x4, #24]
10000a66c:     	sub	x9, x3, x1
10000a670:     	subs	x8, x8, x9
10000a674:     	csel	x23, x8, xzr, gt
10000a678:     	sub	x25, x2, x1
10000a67c:     	cmp	x25, #1
10000a680:     	b.lt	0x10000a6a0 <std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>> std::__1::__pad_and_output[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>>, char const*, char const*, char const*, std::__1::ios_base&, char)+0x6c>
10000a684:     	ldr	x8, [x19]
10000a688:     	ldr	x8, [x8, #96]
10000a68c:     	mov	x0, x19
10000a690:     	mov	x2, x25
10000a694:     	blr	x8
10000a698:     	cmp	x0, x25
10000a69c:     	b.ne	0x10000a780 <std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>> std::__1::__pad_and_output[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>>, char const*, char const*, char const*, std::__1::ios_base&, char)+0x14c>
10000a6a0:     	cmp	x23, #1
10000a6a4:     	b.lt	0x10000a74c <std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>> std::__1::__pad_and_output[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>>, char const*, char const*, char const*, std::__1::ios_base&, char)+0x118>
10000a6a8:     	mov	x8, #9223372036854775792
10000a6ac:     	cmp	x23, x8
10000a6b0:     	b.hs	0x10000a7a4 <std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>> std::__1::__pad_and_output[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>>, char const*, char const*, char const*, std::__1::ios_base&, char)+0x170>
10000a6b4:     	cmp	x23, #23
10000a6b8:     	b.hs	0x10000a6c8 <std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>> std::__1::__pad_and_output[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>>, char const*, char const*, char const*, std::__1::ios_base&, char)+0x94>
10000a6bc:     	strb	w23, [sp, #31]
10000a6c0:     	add	x25, sp, #8
10000a6c4:     	b	0x10000a6e8 <std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>> std::__1::__pad_and_output[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>>, char const*, char const*, char const*, std::__1::ios_base&, char)+0xb4>
10000a6c8:     	orr	x8, x23, #0xf
10000a6cc:     	add	x26, x8, #1
10000a6d0:     	mov	x0, x26
10000a6d4:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000a6d8:     	mov	x25, x0
10000a6dc:     	orr	x8, x26, #0x8000000000000000
10000a6e0:     	stp	x23, x8, [sp, #16]
10000a6e4:     	str	x0, [sp, #8]
10000a6e8:     	mov	x0, x25
10000a6ec:     	mov	x1, x24
10000a6f0:     	mov	x2, x23
10000a6f4:     	bl	0x10002f1dc <_vsnprintf+0x10002f1dc>
10000a6f8:     	strb	wzr, [x25, x23]
10000a6fc:     	ldrsb	w8, [sp, #31]
10000a700:     	ldr	x9, [sp, #8]
10000a704:     	cmp	w8, #0
10000a708:     	add	x8, sp, #8
10000a70c:     	csel	x1, x9, x8, lt
10000a710:     	ldr	x8, [x19]
10000a714:     	ldr	x8, [x8, #96]
10000a718:     	mov	x0, x19
10000a71c:     	mov	x2, x23
10000a720:     	blr	x8
10000a724:     	mov	x24, x0
10000a728:     	ldrsb	w8, [sp, #31]
10000a72c:     	tbnz	w8, #31, 0x10000a73c <std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>> std::__1::__pad_and_output[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>>, char const*, char const*, char const*, std::__1::ios_base&, char)+0x108>
10000a730:     	cmp	x24, x23
10000a734:     	b.ne	0x10000a780 <std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>> std::__1::__pad_and_output[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>>, char const*, char const*, char const*, std::__1::ios_base&, char)+0x14c>
10000a738:     	b	0x10000a74c <std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>> std::__1::__pad_and_output[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>>, char const*, char const*, char const*, std::__1::ios_base&, char)+0x118>
10000a73c:     	ldr	x0, [sp, #8]
10000a740:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000a744:     	cmp	x24, x23
10000a748:     	b.ne	0x10000a780 <std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>> std::__1::__pad_and_output[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>>, char const*, char const*, char const*, std::__1::ios_base&, char)+0x14c>
10000a74c:     	sub	x22, x22, x21
10000a750:     	cmp	x22, #1
10000a754:     	b.lt	0x10000a778 <std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>> std::__1::__pad_and_output[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>>, char const*, char const*, char const*, std::__1::ios_base&, char)+0x144>
10000a758:     	ldr	x8, [x19]
10000a75c:     	ldr	x8, [x8, #96]
10000a760:     	mov	x0, x19
10000a764:     	mov	x1, x21
10000a768:     	mov	x2, x22
10000a76c:     	blr	x8
10000a770:     	cmp	x0, x22
10000a774:     	b.ne	0x10000a780 <std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>> std::__1::__pad_and_output[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>>, char const*, char const*, char const*, std::__1::ios_base&, char)+0x14c>
10000a778:     	str	xzr, [x20, #24]
10000a77c:     	b	0x10000a784 <std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>> std::__1::__pad_and_output[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>>, char const*, char const*, char const*, std::__1::ios_base&, char)+0x150>
10000a780:     	mov	x19, #0
10000a784:     	mov	x0, x19
10000a788:     	ldp	x29, x30, [sp, #96]
10000a78c:     	ldp	x20, x19, [sp, #80]
10000a790:     	ldp	x22, x21, [sp, #64]
10000a794:     	ldp	x24, x23, [sp, #48]
10000a798:     	ldp	x26, x25, [sp, #32]
10000a79c:     	add	sp, sp, #112
10000a7a0:     	ret
10000a7a4:     	add	x0, sp, #8
10000a7a8:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
10000a7ac:     	mov	x19, x0
10000a7b0:     	ldrsb	w8, [sp, #31]
10000a7b4:     	tbz	w8, #31, 0x10000a7c0 <std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>> std::__1::__pad_and_output[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::ostreambuf_iterator<char, std::__1::char_traits<char>>, char const*, char const*, char const*, std::__1::ios_base&, char)+0x18c>
10000a7b8:     	ldr	x0, [sp, #8]
10000a7bc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000a7c0:     	mov	x0, x19
10000a7c4:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010000a7c8 <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>:
10000a7c8:     	stp	x28, x27, [sp, #-96]!
10000a7cc:     	stp	x26, x25, [sp, #16]
10000a7d0:     	stp	x24, x23, [sp, #32]
10000a7d4:     	stp	x22, x21, [sp, #48]
10000a7d8:     	stp	x20, x19, [sp, #64]
10000a7dc:     	stp	x29, x30, [sp, #80]
10000a7e0:     	add	x29, sp, #80
10000a7e4:     	mov	x20, x3
10000a7e8:     	mov	x21, x2
10000a7ec:     	mov	x19, x0
10000a7f0:     	mov	x23, x0
10000a7f4:     	ldr	x8, [x23, #8]!
10000a7f8:     	cbz	x8, 0x10000a8b4 <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xec>
10000a7fc:     	ldrb	w9, [x1, #23]
10000a800:     	sxtb	w10, w9
10000a804:     	ldp	x12, x11, [x1]
10000a808:     	cmp	w10, #0
10000a80c:     	csel	x26, x11, x9, lt
10000a810:     	csel	x22, x12, x1, lt
10000a814:     	b	0x10000a824 <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x5c>
10000a818:     	ldr	x8, [x25]
10000a81c:     	mov	x23, x25
10000a820:     	cbz	x8, 0x10000a8b8 <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xf0>
10000a824:     	mov	x25, x8
10000a828:     	ldr	x9, [x8, #32]!
10000a82c:     	ldrb	w10, [x8, #23]
10000a830:     	sxtb	w11, w10
10000a834:     	ldr	x12, [x8, #8]
10000a838:     	cmp	w11, #0
10000a83c:     	csel	x27, x12, x10, lt
10000a840:     	csel	x23, x9, x8, lt
10000a844:     	cmp	x27, x26
10000a848:     	csel	x24, x27, x26, lo
10000a84c:     	mov	x0, x22
10000a850:     	mov	x1, x23
10000a854:     	mov	x2, x24
10000a858:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
10000a85c:     	cmp	x26, x27
10000a860:     	cset	w8, lo
10000a864:     	cmp	w0, #0
10000a868:     	cset	w9, lt
10000a86c:     	csel	w8, w8, w9, eq
10000a870:     	cmp	w8, #1
10000a874:     	b.eq	0x10000a818 <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x50>
10000a878:     	mov	x0, x23
10000a87c:     	mov	x1, x22
10000a880:     	mov	x2, x24
10000a884:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
10000a888:     	cmp	x27, x26
10000a88c:     	cset	w8, lo
10000a890:     	cmp	w0, #0
10000a894:     	cset	w9, lt
10000a898:     	csel	w8, w8, w9, eq
10000a89c:     	cmp	w8, #1
10000a8a0:     	b.ne	0x10000a914 <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x14c>
10000a8a4:     	ldr	x8, [x25, #8]
10000a8a8:     	cbnz	x8, 0x10000a824 <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x5c>
10000a8ac:     	add	x23, x25, #8
10000a8b0:     	b	0x10000a8b8 <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xf0>
10000a8b4:     	mov	x25, x23
10000a8b8:     	mov	w0, #80
10000a8bc:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000a8c0:     	mov	x22, x0
10000a8c4:     	add	x0, x0, #32
10000a8c8:     	mov	x1, x21
10000a8cc:     	mov	x2, x20
10000a8d0:     	bl	0x10000a950 <std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>::pair[abi:ue170006]<true, (void*)0>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
10000a8d4:     	stp	xzr, xzr, [x22]
10000a8d8:     	str	x25, [x22, #16]
10000a8dc:     	str	x22, [x23]
10000a8e0:     	ldr	x8, [x19]
10000a8e4:     	ldr	x8, [x8]
10000a8e8:     	mov	x1, x22
10000a8ec:     	cbz	x8, 0x10000a8f8 <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x130>
10000a8f0:     	str	x8, [x19]
10000a8f4:     	ldr	x1, [x23]
10000a8f8:     	ldr	x0, [x19, #8]
10000a8fc:     	bl	0x100006fe0 <void std::__1::__tree_balance_after_insert[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)>
10000a900:     	ldr	x8, [x19, #16]
10000a904:     	add	x8, x8, #1
10000a908:     	str	x8, [x19, #16]
10000a90c:     	mov	w1, #1
10000a910:     	b	0x10000a91c <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x154>
10000a914:     	mov	x1, #0
10000a918:     	mov	x22, x25
10000a91c:     	mov	x0, x22
10000a920:     	ldp	x29, x30, [sp, #80]
10000a924:     	ldp	x20, x19, [sp, #64]
10000a928:     	ldp	x22, x21, [sp, #48]
10000a92c:     	ldp	x24, x23, [sp, #32]
10000a930:     	ldp	x26, x25, [sp, #16]
10000a934:     	ldp	x28, x27, [sp], #96
10000a938:     	ret
10000a93c:     	mov	x19, x0
10000a940:     	mov	x0, x22
10000a944:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000a948:     	mov	x0, x19
10000a94c:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010000a950 <std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>::pair[abi:ue170006]<true, (void*)0>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>:
10000a950:     	stp	x24, x23, [sp, #-64]!
10000a954:     	stp	x22, x21, [sp, #16]
10000a958:     	stp	x20, x19, [sp, #32]
10000a95c:     	stp	x29, x30, [sp, #48]
10000a960:     	add	x29, sp, #48
10000a964:     	mov	x20, x2
10000a968:     	mov	x19, x0
10000a96c:     	ldrsb	w8, [x1, #23]
10000a970:     	tbnz	w8, #31, 0x10000a9b8 <std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>::pair[abi:ue170006]<true, (void*)0>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x68>
10000a974:     	ldr	q0, [x1]
10000a978:     	ldr	x8, [x1, #16]
10000a97c:     	str	x8, [x19, #16]
10000a980:     	str	q0, [x19]
10000a984:     	add	x0, x19, #24
10000a988:     	ldrsb	w8, [x20, #23]
10000a98c:     	tbnz	w8, #31, 0x10000aa14 <std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>::pair[abi:ue170006]<true, (void*)0>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xc4>
10000a990:     	ldr	q0, [x20]
10000a994:     	ldr	x8, [x20, #16]
10000a998:     	str	x8, [x0, #16]
10000a99c:     	str	q0, [x0]
10000a9a0:     	mov	x0, x19
10000a9a4:     	ldp	x29, x30, [sp, #48]
10000a9a8:     	ldp	x20, x19, [sp, #32]
10000a9ac:     	ldp	x22, x21, [sp, #16]
10000a9b0:     	ldp	x24, x23, [sp], #64
10000a9b4:     	ret
10000a9b8:     	ldp	x21, x23, [x1]
10000a9bc:     	cmp	x23, #22
10000a9c0:     	b.hi	0x10000a9d0 <std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>::pair[abi:ue170006]<true, (void*)0>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x80>
10000a9c4:     	strb	w23, [x19, #23]
10000a9c8:     	mov	x0, x19
10000a9cc:     	b	0x10000a9fc <std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>::pair[abi:ue170006]<true, (void*)0>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xac>
10000a9d0:     	mov	x8, #-17
10000a9d4:     	movk	x8, #32767, lsl #48
10000a9d8:     	cmp	x23, x8
10000a9dc:     	b.hi	0x10000aa78 <std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>::pair[abi:ue170006]<true, (void*)0>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x128>
10000a9e0:     	orr	x8, x23, #0xf
10000a9e4:     	add	x22, x8, #1
10000a9e8:     	mov	x0, x22
10000a9ec:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000a9f0:     	orr	x8, x22, #0x8000000000000000
10000a9f4:     	stp	x23, x8, [x19, #8]
10000a9f8:     	str	x0, [x19]
10000a9fc:     	add	x2, x23, #1
10000aa00:     	mov	x1, x21
10000aa04:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
10000aa08:     	add	x0, x19, #24
10000aa0c:     	ldrsb	w8, [x20, #23]
10000aa10:     	tbz	w8, #31, 0x10000a990 <std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>::pair[abi:ue170006]<true, (void*)0>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x40>
10000aa14:     	ldp	x21, x22, [x20]
10000aa18:     	cmp	x22, #22
10000aa1c:     	b.hi	0x10000aa28 <std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>::pair[abi:ue170006]<true, (void*)0>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xd8>
10000aa20:     	strb	w22, [x19, #47]
10000aa24:     	b	0x10000aa54 <std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>::pair[abi:ue170006]<true, (void*)0>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x104>
10000aa28:     	mov	x8, #-17
10000aa2c:     	movk	x8, #32767, lsl #48
10000aa30:     	cmp	x22, x8
10000aa34:     	b.hi	0x10000aa80 <std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>::pair[abi:ue170006]<true, (void*)0>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x130>
10000aa38:     	orr	x8, x22, #0xf
10000aa3c:     	add	x20, x8, #1
10000aa40:     	mov	x0, x20
10000aa44:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000aa48:     	orr	x8, x20, #0x8000000000000000
10000aa4c:     	stp	x22, x8, [x19, #32]
10000aa50:     	str	x0, [x19, #24]
10000aa54:     	add	x2, x22, #1
10000aa58:     	mov	x1, x21
10000aa5c:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
10000aa60:     	mov	x0, x19
10000aa64:     	ldp	x29, x30, [sp, #48]
10000aa68:     	ldp	x20, x19, [sp, #32]
10000aa6c:     	ldp	x22, x21, [sp, #16]
10000aa70:     	ldp	x24, x23, [sp], #64
10000aa74:     	ret
10000aa78:     	mov	x0, x19
10000aa7c:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
10000aa80:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
10000aa84:     	brk	#0x1
10000aa88:     	mov	x20, x0
10000aa8c:     	ldrsb	w8, [x19, #23]
10000aa90:     	tbz	w8, #31, 0x10000aa9c <std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>::pair[abi:ue170006]<true, (void*)0>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x14c>
10000aa94:     	ldr	x0, [x19]
10000aa98:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000aa9c:     	mov	x0, x20
10000aaa0:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010000aaa4 <__GLOBAL__sub_I_benchmark.cc>:
10000aaa4:     	sub	sp, sp, #96
10000aaa8:     	stp	x24, x23, [sp, #32]
10000aaac:     	stp	x22, x21, [sp, #48]
10000aab0:     	stp	x20, x19, [sp, #64]
10000aab4:     	stp	x29, x30, [sp, #80]
10000aab8:     	add	x29, sp, #80
10000aabc:     	adrp	x8, 0x100038000 <__GLOBAL__sub_I_benchmark.cc+0xd0>
10000aac0:     	add	x8, x8, #80
10000aac4:     	ldaprb	w8, [x8]
10000aac8:     	tbz	w8, #0, 0x10000b0c8 <__GLOBAL__sub_I_benchmark.cc+0x624>
10000aacc:     	mov	x23, #-17
10000aad0:     	movk	x23, #32767, lsl #48
10000aad4:     	bl	0x100029524 <benchmark::internal::PerfCounters::Initialize()>
10000aad8:     	adrp	x0, 0x100031000 <__GLOBAL__sub_I_benchmark.cc+0xd0>
10000aadc:     	add	x0, x0, #1867
10000aae0:     	mov	w1, #0
10000aae4:     	bl	0x100020700 <benchmark::BoolFromEnv(char const*, bool)>
10000aae8:     	adrp	x8, 0x100038000 <__GLOBAL__sub_I_benchmark.cc+0xfc>
10000aaec:     	strb	w0, [x8, #248]
10000aaf0:     	adrp	x0, 0x100031000 <__GLOBAL__sub_I_benchmark.cc+0xe8>
10000aaf4:     	add	x0, x0, #1888
10000aaf8:     	adrp	x1, 0x100031000 <__GLOBAL__sub_I_benchmark.cc+0xf0>
10000aafc:     	add	x1, x1, #1905
10000ab00:     	bl	0x1000211e8 <benchmark::StringFromEnv(char const*, char const*)>
10000ab04:     	mov	x20, x0
10000ab08:     	bl	0x10002f254 <_vsnprintf+0x10002f254>
10000ab0c:     	cmp	x0, x23
10000ab10:     	b.hi	0x10000b10c <__GLOBAL__sub_I_benchmark.cc+0x668>
10000ab14:     	mov	x19, x0
10000ab18:     	adrp	x21, 0x100038000 <__GLOBAL__sub_I_benchmark.cc+0x12c>
10000ab1c:     	add	x21, x21, #256
10000ab20:     	cmp	x0, #23
10000ab24:     	b.hs	0x10000ab34 <__GLOBAL__sub_I_benchmark.cc+0x90>
10000ab28:     	strb	w19, [x21, #23]
10000ab2c:     	cbnz	x19, 0x10000ab54 <__GLOBAL__sub_I_benchmark.cc+0xb0>
10000ab30:     	b	0x10000ab64 <__GLOBAL__sub_I_benchmark.cc+0xc0>
10000ab34:     	orr	x8, x19, #0xf
10000ab38:     	add	x22, x8, #1
10000ab3c:     	mov	x0, x22
10000ab40:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000ab44:     	orr	x8, x22, #0x8000000000000000
10000ab48:     	stp	x19, x8, [x21, #8]
10000ab4c:     	str	x0, [x21]
10000ab50:     	mov	x21, x0
10000ab54:     	mov	x0, x21
10000ab58:     	mov	x1, x20
10000ab5c:     	mov	x2, x19
10000ab60:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
10000ab64:     	strb	wzr, [x21, x19]
10000ab68:     	adrp	x0, 0x100034000 <__GLOBAL__sub_I_benchmark.cc+0x16c>
10000ab6c:     	ldr	x0, [x0, #168]
10000ab70:     	adrp	x1, 0x100038000 <__GLOBAL__sub_I_benchmark.cc+0x184>
10000ab74:     	add	x1, x1, #256
10000ab78:     	adrp	x2, 0x100000000 <__GLOBAL__sub_I_benchmark.cc+0xac>
10000ab7c:     	add	x2, x2, #0
10000ab80:     	bl	0x10002f044 <_vsnprintf+0x10002f044>
10000ab84:     	adrp	x0, 0x100031000 <__GLOBAL__sub_I_benchmark.cc+0x17c>
10000ab88:     	add	x0, x0, #1906
10000ab8c:     	adrp	x1, 0x100032000 <__GLOBAL__sub_I_benchmark.cc+0x188>
10000ab90:     	add	x1, x1, #2848
10000ab94:     	bl	0x1000211e8 <benchmark::StringFromEnv(char const*, char const*)>
10000ab98:     	mov	x20, x0
10000ab9c:     	bl	0x10002f254 <_vsnprintf+0x10002f254>
10000aba0:     	cmp	x0, x23
10000aba4:     	b.hi	0x10000b118 <__GLOBAL__sub_I_benchmark.cc+0x674>
10000aba8:     	mov	x19, x0
10000abac:     	adrp	x21, 0x100038000 <__GLOBAL__sub_I_benchmark.cc+0x1c0>
10000abb0:     	add	x21, x21, #280
10000abb4:     	cmp	x0, #23
10000abb8:     	b.hs	0x10000abc8 <__GLOBAL__sub_I_benchmark.cc+0x124>
10000abbc:     	strb	w19, [x21, #23]
10000abc0:     	cbnz	x19, 0x10000abe8 <__GLOBAL__sub_I_benchmark.cc+0x144>
10000abc4:     	b	0x10000abf8 <__GLOBAL__sub_I_benchmark.cc+0x154>
10000abc8:     	orr	x8, x19, #0xf
10000abcc:     	add	x22, x8, #1
10000abd0:     	mov	x0, x22
10000abd4:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000abd8:     	orr	x8, x22, #0x8000000000000000
10000abdc:     	stp	x19, x8, [x21, #8]
10000abe0:     	str	x0, [x21]
10000abe4:     	mov	x21, x0
10000abe8:     	mov	x0, x21
10000abec:     	mov	x1, x20
10000abf0:     	mov	x2, x19
10000abf4:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
10000abf8:     	strb	wzr, [x21, x19]
10000abfc:     	adrp	x0, 0x100034000 <__GLOBAL__sub_I_benchmark.cc+0x200>
10000ac00:     	ldr	x0, [x0, #168]
10000ac04:     	adrp	x1, 0x100038000 <__GLOBAL__sub_I_benchmark.cc+0x218>
10000ac08:     	add	x1, x1, #280
10000ac0c:     	adrp	x2, 0x100000000 <__GLOBAL__sub_I_benchmark.cc+0x140>
10000ac10:     	add	x2, x2, #0
10000ac14:     	bl	0x10002f044 <_vsnprintf+0x10002f044>
10000ac18:     	adrp	x0, 0x100031000 <__GLOBAL__sub_I_benchmark.cc+0x210>
10000ac1c:     	add	x0, x0, #1925
10000ac20:     	movi	d0, #0000000000000000
10000ac24:     	bl	0x100020f90 <benchmark::DoubleFromEnv(char const*, double)>
10000ac28:     	adrp	x8, 0x100038000 <__GLOBAL__sub_I_benchmark.cc+0x23c>
10000ac2c:     	str	d0, [x8, #304]
10000ac30:     	adrp	x0, 0x100031000 <__GLOBAL__sub_I_benchmark.cc+0x228>
10000ac34:     	add	x0, x0, #1951
10000ac38:     	mov	w1, #1
10000ac3c:     	bl	0x100020c8c <benchmark::Int32FromEnv(char const*, int)>
10000ac40:     	adrp	x8, 0x100038000 <__GLOBAL__sub_I_benchmark.cc+0x254>
10000ac44:     	str	w0, [x8, #312]
10000ac48:     	adrp	x0, 0x100031000 <__GLOBAL__sub_I_benchmark.cc+0x240>
10000ac4c:     	add	x0, x0, #1973
10000ac50:     	mov	w1, #0
10000ac54:     	bl	0x100020700 <benchmark::BoolFromEnv(char const*, bool)>
10000ac58:     	adrp	x8, 0x100038000 <__GLOBAL__sub_I_benchmark.cc+0x26c>
10000ac5c:     	strb	w0, [x8, #316]
10000ac60:     	adrp	x0, 0x100031000 <__GLOBAL__sub_I_benchmark.cc+0x258>
10000ac64:     	add	x0, x0, #2010
10000ac68:     	mov	w1, #0
10000ac6c:     	bl	0x100020700 <benchmark::BoolFromEnv(char const*, bool)>
10000ac70:     	adrp	x8, 0x100038000 <__GLOBAL__sub_I_benchmark.cc+0x284>
10000ac74:     	strb	w0, [x8, #317]
10000ac78:     	adrp	x0, 0x100031000 <__GLOBAL__sub_I_benchmark.cc+0x270>
10000ac7c:     	add	x0, x0, #2043
10000ac80:     	mov	w1, #0
10000ac84:     	bl	0x100020700 <benchmark::BoolFromEnv(char const*, bool)>
10000ac88:     	adrp	x8, 0x100038000 <__GLOBAL__sub_I_benchmark.cc+0x29c>
10000ac8c:     	strb	w0, [x8, #318]
10000ac90:     	adrp	x0, 0x100031000 <__GLOBAL__sub_I_benchmark.cc+0x288>
10000ac94:     	add	x0, x0, #2077
10000ac98:     	adrp	x1, 0x100031000 <__GLOBAL__sub_I_benchmark.cc+0x290>
10000ac9c:     	add	x1, x1, #2094
10000aca0:     	bl	0x1000211e8 <benchmark::StringFromEnv(char const*, char const*)>
10000aca4:     	mov	x20, x0
10000aca8:     	bl	0x10002f254 <_vsnprintf+0x10002f254>
10000acac:     	cmp	x0, x23
10000acb0:     	b.hi	0x10000b124 <__GLOBAL__sub_I_benchmark.cc+0x680>
10000acb4:     	mov	x19, x0
10000acb8:     	adrp	x21, 0x100038000 <__GLOBAL__sub_I_benchmark.cc+0x2cc>
10000acbc:     	add	x21, x21, #320
10000acc0:     	cmp	x0, #23
10000acc4:     	b.hs	0x10000acd4 <__GLOBAL__sub_I_benchmark.cc+0x230>
10000acc8:     	strb	w19, [x21, #23]
10000accc:     	cbnz	x19, 0x10000acf4 <__GLOBAL__sub_I_benchmark.cc+0x250>
10000acd0:     	b	0x10000ad04 <__GLOBAL__sub_I_benchmark.cc+0x260>
10000acd4:     	orr	x8, x19, #0xf
10000acd8:     	add	x22, x8, #1
10000acdc:     	mov	x0, x22
10000ace0:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000ace4:     	orr	x8, x22, #0x8000000000000000
10000ace8:     	stp	x19, x8, [x21, #8]
10000acec:     	str	x0, [x21]
10000acf0:     	mov	x21, x0
10000acf4:     	mov	x0, x21
10000acf8:     	mov	x1, x20
10000acfc:     	mov	x2, x19
10000ad00:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
10000ad04:     	strb	wzr, [x21, x19]
10000ad08:     	adrp	x0, 0x100034000 <__GLOBAL__sub_I_benchmark.cc+0x30c>
10000ad0c:     	ldr	x0, [x0, #168]
10000ad10:     	adrp	x1, 0x100038000 <__GLOBAL__sub_I_benchmark.cc+0x324>
10000ad14:     	add	x1, x1, #320
10000ad18:     	adrp	x2, 0x100000000 <__GLOBAL__sub_I_benchmark.cc+0x24c>
10000ad1c:     	add	x2, x2, #0
10000ad20:     	bl	0x10002f044 <_vsnprintf+0x10002f044>
10000ad24:     	adrp	x0, 0x100031000 <__GLOBAL__sub_I_benchmark.cc+0x31c>
10000ad28:     	add	x0, x0, #2102
10000ad2c:     	adrp	x1, 0x100031000 <__GLOBAL__sub_I_benchmark.cc+0x324>
10000ad30:     	add	x1, x1, #2123
10000ad34:     	bl	0x1000211e8 <benchmark::StringFromEnv(char const*, char const*)>
10000ad38:     	mov	x20, x0
10000ad3c:     	bl	0x10002f254 <_vsnprintf+0x10002f254>
10000ad40:     	cmp	x0, x23
10000ad44:     	b.hi	0x10000b130 <__GLOBAL__sub_I_benchmark.cc+0x68c>
10000ad48:     	mov	x19, x0
10000ad4c:     	cmp	x0, #23
10000ad50:     	b.hs	0x10000ad68 <__GLOBAL__sub_I_benchmark.cc+0x2c4>
10000ad54:     	adrp	x21, 0x100038000 <__GLOBAL__sub_I_benchmark.cc+0x368>
10000ad58:     	add	x21, x21, #344
10000ad5c:     	strb	w19, [x21, #23]
10000ad60:     	cbnz	x19, 0x10000ad90 <__GLOBAL__sub_I_benchmark.cc+0x2ec>
10000ad64:     	b	0x10000ada0 <__GLOBAL__sub_I_benchmark.cc+0x2fc>
10000ad68:     	orr	x8, x19, #0xf
10000ad6c:     	add	x22, x8, #1
10000ad70:     	mov	x0, x22
10000ad74:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000ad78:     	mov	x21, x0
10000ad7c:     	adrp	x8, 0x100038000 <__GLOBAL__sub_I_benchmark.cc+0x390>
10000ad80:     	add	x8, x8, #344
10000ad84:     	orr	x9, x22, #0x8000000000000000
10000ad88:     	stp	x19, x9, [x8, #8]
10000ad8c:     	str	x0, [x8]
10000ad90:     	mov	x0, x21
10000ad94:     	mov	x1, x20
10000ad98:     	mov	x2, x19
10000ad9c:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
10000ada0:     	strb	wzr, [x21, x19]
10000ada4:     	adrp	x0, 0x100034000 <__GLOBAL__sub_I_benchmark.cc+0x3a8>
10000ada8:     	ldr	x0, [x0, #168]
10000adac:     	adrp	x1, 0x100038000 <__GLOBAL__sub_I_benchmark.cc+0x3c0>
10000adb0:     	add	x1, x1, #344
10000adb4:     	adrp	x2, 0x100000000 <__GLOBAL__sub_I_benchmark.cc+0x2e8>
10000adb8:     	add	x2, x2, #0
10000adbc:     	bl	0x10002f044 <_vsnprintf+0x10002f044>
10000adc0:     	adrp	x0, 0x100031000 <__GLOBAL__sub_I_benchmark.cc+0x3b8>
10000adc4:     	add	x0, x0, #2128
10000adc8:     	adrp	x1, 0x100031000 <__GLOBAL__sub_I_benchmark.cc+0x3c0>
10000adcc:     	add	x1, x1, #1905
10000add0:     	bl	0x1000211e8 <benchmark::StringFromEnv(char const*, char const*)>
10000add4:     	mov	x20, x0
10000add8:     	bl	0x10002f254 <_vsnprintf+0x10002f254>
10000addc:     	cmp	x0, x23
10000ade0:     	b.hi	0x10000b13c <__GLOBAL__sub_I_benchmark.cc+0x698>
10000ade4:     	mov	x19, x0
10000ade8:     	cmp	x0, #23
10000adec:     	b.hs	0x10000ae04 <__GLOBAL__sub_I_benchmark.cc+0x360>
10000adf0:     	adrp	x21, 0x100038000 <__GLOBAL__sub_I_benchmark.cc+0x404>
10000adf4:     	add	x21, x21, #368
10000adf8:     	strb	w19, [x21, #23]
10000adfc:     	cbnz	x19, 0x10000ae2c <__GLOBAL__sub_I_benchmark.cc+0x388>
10000ae00:     	b	0x10000ae3c <__GLOBAL__sub_I_benchmark.cc+0x398>
10000ae04:     	orr	x8, x19, #0xf
10000ae08:     	add	x22, x8, #1
10000ae0c:     	mov	x0, x22
10000ae10:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000ae14:     	mov	x21, x0
10000ae18:     	adrp	x8, 0x100038000 <__GLOBAL__sub_I_benchmark.cc+0x42c>
10000ae1c:     	add	x8, x8, #368
10000ae20:     	orr	x9, x22, #0x8000000000000000
10000ae24:     	stp	x19, x9, [x8, #8]
10000ae28:     	str	x0, [x8]
10000ae2c:     	mov	x0, x21
10000ae30:     	mov	x1, x20
10000ae34:     	mov	x2, x19
10000ae38:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
10000ae3c:     	strb	wzr, [x21, x19]
10000ae40:     	adrp	x0, 0x100034000 <__GLOBAL__sub_I_benchmark.cc+0x444>
10000ae44:     	ldr	x0, [x0, #168]
10000ae48:     	adrp	x1, 0x100038000 <__GLOBAL__sub_I_benchmark.cc+0x45c>
10000ae4c:     	add	x1, x1, #368
10000ae50:     	adrp	x2, 0x100000000 <__GLOBAL__sub_I_benchmark.cc+0x384>
10000ae54:     	add	x2, x2, #0
10000ae58:     	bl	0x10002f044 <_vsnprintf+0x10002f044>
10000ae5c:     	adrp	x0, 0x100031000 <__GLOBAL__sub_I_benchmark.cc+0x454>
10000ae60:     	add	x0, x0, #2142
10000ae64:     	adrp	x1, 0x100031000 <__GLOBAL__sub_I_benchmark.cc+0x45c>
10000ae68:     	add	x1, x1, #2158
10000ae6c:     	bl	0x1000211e8 <benchmark::StringFromEnv(char const*, char const*)>
10000ae70:     	mov	x20, x0
10000ae74:     	bl	0x10002f254 <_vsnprintf+0x10002f254>
10000ae78:     	cmp	x0, x23
10000ae7c:     	b.hi	0x10000b148 <__GLOBAL__sub_I_benchmark.cc+0x6a4>
10000ae80:     	mov	x19, x0
10000ae84:     	cmp	x0, #23
10000ae88:     	b.hs	0x10000aea0 <__GLOBAL__sub_I_benchmark.cc+0x3fc>
10000ae8c:     	adrp	x21, 0x100038000 <__GLOBAL__sub_I_benchmark.cc+0x4a0>
10000ae90:     	add	x21, x21, #392
10000ae94:     	strb	w19, [x21, #23]
10000ae98:     	cbnz	x19, 0x10000aec8 <__GLOBAL__sub_I_benchmark.cc+0x424>
10000ae9c:     	b	0x10000aed8 <__GLOBAL__sub_I_benchmark.cc+0x434>
10000aea0:     	orr	x8, x19, #0xf
10000aea4:     	add	x22, x8, #1
10000aea8:     	mov	x0, x22
10000aeac:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000aeb0:     	mov	x21, x0
10000aeb4:     	adrp	x8, 0x100038000 <__GLOBAL__sub_I_benchmark.cc+0x4c8>
10000aeb8:     	add	x8, x8, #392
10000aebc:     	orr	x9, x22, #0x8000000000000000
10000aec0:     	stp	x19, x9, [x8, #8]
10000aec4:     	str	x0, [x8]
10000aec8:     	mov	x0, x21
10000aecc:     	mov	x1, x20
10000aed0:     	mov	x2, x19
10000aed4:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
10000aed8:     	strb	wzr, [x21, x19]
10000aedc:     	adrp	x0, 0x100034000 <__GLOBAL__sub_I_benchmark.cc+0x4e0>
10000aee0:     	ldr	x0, [x0, #168]
10000aee4:     	adrp	x1, 0x100038000 <__GLOBAL__sub_I_benchmark.cc+0x4f8>
10000aee8:     	add	x1, x1, #392
10000aeec:     	adrp	x2, 0x100000000 <__GLOBAL__sub_I_benchmark.cc+0x420>
10000aef0:     	add	x2, x2, #0
10000aef4:     	bl	0x10002f044 <_vsnprintf+0x10002f044>
10000aef8:     	adrp	x0, 0x100031000 <__GLOBAL__sub_I_benchmark.cc+0x4f0>
10000aefc:     	add	x0, x0, #2163
10000af00:     	mov	w1, #0
10000af04:     	bl	0x100020700 <benchmark::BoolFromEnv(char const*, bool)>
10000af08:     	adrp	x8, 0x100038000 <__GLOBAL__sub_I_benchmark.cc+0x51c>
10000af0c:     	strb	w0, [x8, #416]
10000af10:     	adrp	x0, 0x100031000 <__GLOBAL__sub_I_benchmark.cc+0x508>
10000af14:     	add	x0, x0, #2190
10000af18:     	adrp	x1, 0x100031000 <__GLOBAL__sub_I_benchmark.cc+0x510>
10000af1c:     	add	x1, x1, #1905
10000af20:     	bl	0x1000211e8 <benchmark::StringFromEnv(char const*, char const*)>
10000af24:     	mov	x20, x0
10000af28:     	bl	0x10002f254 <_vsnprintf+0x10002f254>
10000af2c:     	cmp	x0, x23
10000af30:     	b.hi	0x10000b154 <__GLOBAL__sub_I_benchmark.cc+0x6b0>
10000af34:     	mov	x19, x0
10000af38:     	cmp	x0, #23
10000af3c:     	b.hs	0x10000af54 <__GLOBAL__sub_I_benchmark.cc+0x4b0>
10000af40:     	adrp	x21, 0x100038000 <__GLOBAL__sub_I_benchmark.cc+0x554>
10000af44:     	add	x21, x21, #424
10000af48:     	strb	w19, [x21, #23]
10000af4c:     	cbnz	x19, 0x10000af7c <__GLOBAL__sub_I_benchmark.cc+0x4d8>
10000af50:     	b	0x10000af8c <__GLOBAL__sub_I_benchmark.cc+0x4e8>
10000af54:     	orr	x8, x19, #0xf
10000af58:     	add	x22, x8, #1
10000af5c:     	mov	x0, x22
10000af60:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000af64:     	mov	x21, x0
10000af68:     	adrp	x8, 0x100038000 <__GLOBAL__sub_I_benchmark.cc+0x57c>
10000af6c:     	add	x8, x8, #424
10000af70:     	orr	x9, x22, #0x8000000000000000
10000af74:     	stp	x19, x9, [x8, #8]
10000af78:     	str	x0, [x8]
10000af7c:     	mov	x0, x21
10000af80:     	mov	x1, x20
10000af84:     	mov	x2, x19
10000af88:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
10000af8c:     	strb	wzr, [x21, x19]
10000af90:     	adrp	x0, 0x100034000 <__GLOBAL__sub_I_benchmark.cc+0x594>
10000af94:     	ldr	x0, [x0, #168]
10000af98:     	adrp	x1, 0x100038000 <__GLOBAL__sub_I_benchmark.cc+0x5ac>
10000af9c:     	add	x1, x1, #424
10000afa0:     	adrp	x2, 0x100000000 <__GLOBAL__sub_I_benchmark.cc+0x4d4>
10000afa4:     	add	x2, x2, #0
10000afa8:     	bl	0x10002f044 <_vsnprintf+0x10002f044>
10000afac:     	add	x8, sp, #8
10000afb0:     	stp	xzr, xzr, [sp, #16]
10000afb4:     	add	x8, x8, #8
10000afb8:     	str	x8, [sp, #8]
10000afbc:     	adrp	x8, 0x100038000 <__GLOBAL__sub_I_benchmark.cc+0x5d0>
10000afc0:     	add	x8, x8, #448
10000afc4:     	adrp	x0, 0x100031000 <__GLOBAL__sub_I_benchmark.cc+0x5bc>
10000afc8:     	add	x0, x0, #2214
10000afcc:     	add	x1, sp, #8
10000afd0:     	bl	0x100021264 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)>
10000afd4:     	ldr	x1, [sp, #16]
10000afd8:     	add	x0, sp, #8
10000afdc:     	bl	0x10000a254 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*)>
10000afe0:     	adrp	x0, 0x100003000 <__GLOBAL__sub_I_benchmark.cc+0x520>
10000afe4:     	add	x0, x0, #1744
10000afe8:     	adrp	x1, 0x100038000 <__GLOBAL__sub_I_benchmark.cc+0x5fc>
10000afec:     	add	x1, x1, #448
10000aff0:     	adrp	x2, 0x100000000 <__GLOBAL__sub_I_benchmark.cc+0x524>
10000aff4:     	add	x2, x2, #0
10000aff8:     	bl	0x10002f044 <_vsnprintf+0x10002f044>
10000affc:     	adrp	x0, 0x100031000 <__GLOBAL__sub_I_benchmark.cc+0x5f4>
10000b000:     	add	x0, x0, #2232
10000b004:     	adrp	x1, 0x100031000 <__GLOBAL__sub_I_benchmark.cc+0x5f8>
10000b008:     	add	x1, x1, #1905
10000b00c:     	bl	0x1000211e8 <benchmark::StringFromEnv(char const*, char const*)>
10000b010:     	mov	x20, x0
10000b014:     	bl	0x10002f254 <_vsnprintf+0x10002f254>
10000b018:     	cmp	x0, x23
10000b01c:     	b.hi	0x10000b160 <__GLOBAL__sub_I_benchmark.cc+0x6bc>
10000b020:     	mov	x19, x0
10000b024:     	cmp	x0, #23
10000b028:     	b.hs	0x10000b040 <__GLOBAL__sub_I_benchmark.cc+0x59c>
10000b02c:     	adrp	x21, 0x100038000 <__GLOBAL__sub_I_benchmark.cc+0x63c>
10000b030:     	add	x21, x21, #472
10000b034:     	strb	w19, [x21, #23]
10000b038:     	cbnz	x19, 0x10000b068 <__GLOBAL__sub_I_benchmark.cc+0x5c4>
10000b03c:     	b	0x10000b078 <__GLOBAL__sub_I_benchmark.cc+0x5d4>
10000b040:     	orr	x8, x19, #0xf
10000b044:     	add	x22, x8, #1
10000b048:     	mov	x0, x22
10000b04c:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000b050:     	mov	x21, x0
10000b054:     	adrp	x8, 0x100038000 <__GLOBAL__sub_I_benchmark.cc+0x664>
10000b058:     	add	x8, x8, #472
10000b05c:     	orr	x9, x22, #0x8000000000000000
10000b060:     	stp	x19, x9, [x8, #8]
10000b064:     	str	x0, [x8]
10000b068:     	mov	x0, x21
10000b06c:     	mov	x1, x20
10000b070:     	mov	x2, x19
10000b074:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
10000b078:     	strb	wzr, [x21, x19]
10000b07c:     	adrp	x0, 0x100034000 <__GLOBAL__sub_I_benchmark.cc+0x67c>
10000b080:     	ldr	x0, [x0, #168]
10000b084:     	adrp	x1, 0x100038000 <__GLOBAL__sub_I_benchmark.cc+0x694>
10000b088:     	add	x1, x1, #472
10000b08c:     	adrp	x2, 0x100000000 <__GLOBAL__sub_I_benchmark.cc+0x5bc>
10000b090:     	add	x2, x2, #0
10000b094:     	bl	0x10002f044 <_vsnprintf+0x10002f044>
10000b098:     	adrp	x0, 0x100031000 <__GLOBAL__sub_I_benchmark.cc+0x68c>
10000b09c:     	add	x0, x0, #2252
10000b0a0:     	mov	w1, #0
10000b0a4:     	bl	0x100020c8c <benchmark::Int32FromEnv(char const*, int)>
10000b0a8:     	adrp	x8, 0x100038000 <__GLOBAL__sub_I_benchmark.cc+0x6b8>
10000b0ac:     	str	w0, [x8, #496]
10000b0b0:     	ldp	x29, x30, [sp, #80]
10000b0b4:     	ldp	x20, x19, [sp, #64]
10000b0b8:     	ldp	x22, x21, [sp, #48]
10000b0bc:     	ldp	x24, x23, [sp, #32]
10000b0c0:     	add	sp, sp, #96
10000b0c4:     	ret
10000b0c8:     	adrp	x0, 0x100038000 <__GLOBAL__sub_I_benchmark.cc+0x6d8>
10000b0cc:     	add	x0, x0, #80
10000b0d0:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10000b0d4:     	cbz	w0, 0x10000aacc <__GLOBAL__sub_I_benchmark.cc+0x28>
10000b0d8:     	adrp	x19, 0x100038000 <__GLOBAL__sub_I_benchmark.cc+0x6e8>
10000b0dc:     	add	x19, x19, #56
10000b0e0:     	mov	x0, x19
10000b0e4:     	bl	0x10002efc0 <_vsnprintf+0x10002efc0>
10000b0e8:     	adrp	x0, 0x100034000 <__GLOBAL__sub_I_benchmark.cc+0x6e8>
10000b0ec:     	ldr	x0, [x0, #608]
10000b0f0:     	adrp	x2, 0x100000000 <__GLOBAL__sub_I_benchmark.cc+0x620>
10000b0f4:     	add	x2, x2, #0
10000b0f8:     	mov	x1, x19
10000b0fc:     	bl	0x10002f044 <_vsnprintf+0x10002f044>
10000b100:     	add	x0, x19, #24
10000b104:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10000b108:     	b	0x10000aacc <__GLOBAL__sub_I_benchmark.cc+0x28>
10000b10c:     	adrp	x0, 0x100038000 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x24>
10000b110:     	add	x0, x0, #256
10000b114:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
10000b118:     	adrp	x0, 0x100038000 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x30>
10000b11c:     	add	x0, x0, #280
10000b120:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
10000b124:     	adrp	x0, 0x100038000 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x3c>
10000b128:     	add	x0, x0, #320
10000b12c:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
10000b130:     	adrp	x0, 0x100038000 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x48>
10000b134:     	add	x0, x0, #344
10000b138:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
10000b13c:     	adrp	x0, 0x100038000 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x54>
10000b140:     	add	x0, x0, #368
10000b144:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
10000b148:     	adrp	x0, 0x100038000 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x60>
10000b14c:     	add	x0, x0, #392
10000b150:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
10000b154:     	adrp	x0, 0x100038000 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x6c>
10000b158:     	add	x0, x0, #424
10000b15c:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
10000b160:     	adrp	x0, 0x100038000 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x78>
10000b164:     	add	x0, x0, #472
10000b168:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
10000b16c:     	mov	x19, x0
10000b170:     	adrp	x0, 0x100038000 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x88>
10000b174:     	add	x0, x0, #80
10000b178:     	bl	0x10002f074 <_vsnprintf+0x10002f074>
10000b17c:     	mov	x0, x19
10000b180:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
10000b184:     	mov	x19, x0
10000b188:     	ldr	x1, [sp, #16]
10000b18c:     	add	x0, sp, #8
10000b190:     	bl	0x10000a254 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*)>
10000b194:     	mov	x0, x19
10000b198:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010000b19c <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)>:
10000b19c:     	sub	sp, sp, #144
10000b1a0:     	stp	x28, x27, [sp, #48]
10000b1a4:     	stp	x26, x25, [sp, #64]
10000b1a8:     	stp	x24, x23, [sp, #80]
10000b1ac:     	stp	x22, x21, [sp, #96]
10000b1b0:     	stp	x20, x19, [sp, #112]
10000b1b4:     	stp	x29, x30, [sp, #128]
10000b1b8:     	add	x29, sp, #128
10000b1bc:     	mov	x23, x5
10000b1c0:     	mov	x22, x4
10000b1c4:     	mov	x21, x1
10000b1c8:     	mov	x19, x0
10000b1cc:     	movi.2d	v0, #0000000000000000
10000b1d0:     	stp	q0, q0, [x0, #160]
10000b1d4:     	stp	q0, q0, [x0, #128]
10000b1d8:     	stp	q0, q0, [x0, #96]
10000b1dc:     	stp	q0, q0, [x0, #64]
10000b1e0:     	stp	q0, q0, [x0, #32]
10000b1e4:     	stp	q0, q0, [x0]
10000b1e8:     	str	x1, [x0, #192]
10000b1ec:     	stp	w2, w3, [x0, #200]
10000b1f0:     	ldr	w8, [x1, #32]
10000b1f4:     	str	w8, [x0, #208]
10000b1f8:     	str	x4, [x0, #216]
10000b1fc:     	mov	x0, x1
10000b200:     	bl	0x10001030c <benchmark::internal::Benchmark::GetTimeUnit() const>
10000b204:     	str	w0, [x19, #224]
10000b208:     	ldr	x8, [x19, #192]
10000b20c:     	ldrb	w9, [x8, #132]
10000b210:     	strb	w9, [x19, #228]
10000b214:     	ldurh	w9, [x8, #133]
10000b218:     	sturh	w9, [x19, #229]
10000b21c:     	ldr	w9, [x8, #136]
10000b220:     	str	w9, [x19, #232]
10000b224:     	ldr	x9, [x8, #144]
10000b228:     	str	x9, [x19, #240]
10000b22c:     	add	x10, x19, #256
10000b230:     	mov	x9, x19
10000b234:     	str	x10, [x9, #248]!
10000b238:     	stp	x10, x9, [sp, #8]
10000b23c:     	stp	xzr, xzr, [x19, #256]
10000b240:     	add	x9, x8, #152
10000b244:     	str	x9, [x19, #272]
10000b248:     	ldr	w9, [x8, #128]
10000b24c:     	str	w9, [x19, #280]
10000b250:     	ldur	q0, [x8, #104]
10000b254:     	str	q0, [x19, #288]
10000b258:     	ldr	x9, [x8, #120]
10000b25c:     	str	x9, [x19, #304]
10000b260:     	str	w23, [x19, #312]
10000b264:     	add	x1, x8, #8
10000b268:     	stp	xzr, xzr, [x19, #320]
10000b26c:     	mov	x0, x19
10000b270:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
10000b274:     	ldp	x26, x27, [x22]
10000b278:     	cmp	x26, x27
10000b27c:     	b.eq	0x10000b3b4 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x218>
10000b280:     	mov	x28, #0
10000b284:     	mov	x25, #0
10000b288:     	mov	x20, #0
10000b28c:     	add	x22, x19, #24
10000b290:     	add	x23, sp, #24
10000b294:     	adrp	x24, 0x100031000 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x190>
10000b298:     	add	x24, x24, #3708
10000b29c:     	b	0x10000b2b8 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x11c>
10000b2a0:     	add	x20, x20, #1
10000b2a4:     	add	x25, x25, #24
10000b2a8:     	add	x28, x28, #8
10000b2ac:     	add	x8, x26, x28
10000b2b0:     	cmp	x8, x27
10000b2b4:     	b.eq	0x10000b3b4 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x218>
10000b2b8:     	ldrsb	w8, [x19, #47]
10000b2bc:     	tbnz	w8, #31, 0x10000b2cc <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x130>
10000b2c0:     	and	x8, x8, #0xff
10000b2c4:     	cbnz	x8, 0x10000b2d4 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x138>
10000b2c8:     	b	0x10000b2e0 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x144>
10000b2cc:     	ldr	x8, [x19, #32]
10000b2d0:     	cbz	x8, 0x10000b2e0 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x144>
10000b2d4:     	mov	x0, x22
10000b2d8:     	mov	w1, #47
10000b2dc:     	bl	0x10002ed74 <_vsnprintf+0x10002ed74>
10000b2e0:     	ldp	x9, x8, [x21, #40]
10000b2e4:     	sub	x8, x8, x9
10000b2e8:     	asr	x8, x8, #3
10000b2ec:     	mov	x9, #-6148914691236517206
10000b2f0:     	movk	x9, #43691
10000b2f4:     	mul	x8, x8, x9
10000b2f8:     	cmp	x20, x8
10000b2fc:     	b.hs	0x10000b36c <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x1d0>
10000b300:     	ldr	x8, [x19, #192]
10000b304:     	ldr	x8, [x8, #40]
10000b308:     	add	x8, x8, x25
10000b30c:     	ldrsb	w9, [x8, #23]
10000b310:     	tbnz	w9, #31, 0x10000b31c <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x180>
10000b314:     	cbnz	w9, 0x10000b328 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x18c>
10000b318:     	b	0x10000b36c <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x1d0>
10000b31c:     	ldr	x9, [x8, #8]
10000b320:     	cbz	x9, 0x10000b36c <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x1d0>
10000b324:     	ldr	x8, [x8]
10000b328:     	str	x8, [sp]
10000b32c:     	add	x8, sp, #24
10000b330:     	adrp	x0, 0x100031000 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x22c>
10000b334:     	add	x0, x0, #3704
10000b338:     	bl	0x10002c6d0 <benchmark::StrFormat(char const*, ...)>
10000b33c:     	ldrb	w8, [sp, #47]
10000b340:     	sxtb	w9, w8
10000b344:     	ldp	x10, x11, [sp, #24]
10000b348:     	cmp	w9, #0
10000b34c:     	csel	x1, x10, x23, lt
10000b350:     	csel	x2, x11, x8, lt
10000b354:     	mov	x0, x22
10000b358:     	bl	0x10002ed38 <_vsnprintf+0x10002ed38>
10000b35c:     	ldrsb	w8, [sp, #47]
10000b360:     	tbz	w8, #31, 0x10000b36c <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x1d0>
10000b364:     	ldr	x0, [sp, #24]
10000b368:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000b36c:     	ldr	x8, [x26, x20, lsl #3]
10000b370:     	str	x8, [sp]
10000b374:     	add	x8, sp, #24
10000b378:     	mov	x0, x24
10000b37c:     	bl	0x10002c6d0 <benchmark::StrFormat(char const*, ...)>
10000b380:     	ldrb	w8, [sp, #47]
10000b384:     	sxtb	w9, w8
10000b388:     	ldp	x10, x11, [sp, #24]
10000b38c:     	cmp	w9, #0
10000b390:     	csel	x1, x10, x23, lt
10000b394:     	csel	x2, x11, x8, lt
10000b398:     	mov	x0, x22
10000b39c:     	bl	0x10002ed38 <_vsnprintf+0x10002ed38>
10000b3a0:     	ldrsb	w8, [sp, #47]
10000b3a4:     	tbz	w8, #31, 0x10000b2a0 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x104>
10000b3a8:     	ldr	x0, [sp, #24]
10000b3ac:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000b3b0:     	b	0x10000b2a0 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x104>
10000b3b4:     	ldr	d0, [x21, #104]
10000b3b8:     	bl	0x1000041e8 <benchmark::internal::IsZero(double)>
10000b3bc:     	tbnz	w0, #0, 0x10000b400 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x264>
10000b3c0:     	ldr	x8, [x19, #192]
10000b3c4:     	ldr	d0, [x8, #104]
10000b3c8:     	str	d0, [sp]
10000b3cc:     	adrp	x0, 0x100031000 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x2c8>
10000b3d0:     	add	x0, x0, #3713
10000b3d4:     	add	x8, sp, #24
10000b3d8:     	bl	0x10002c6d0 <benchmark::StrFormat(char const*, ...)>
10000b3dc:     	add	x20, x19, #48
10000b3e0:     	ldrsb	w8, [x19, #71]
10000b3e4:     	tbz	w8, #31, 0x10000b3f0 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x254>
10000b3e8:     	ldr	x0, [x20]
10000b3ec:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000b3f0:     	ldur	q0, [sp, #24]
10000b3f4:     	str	q0, [x20]
10000b3f8:     	ldr	x8, [sp, #40]
10000b3fc:     	str	x8, [x20, #16]
10000b400:     	ldr	d0, [x21, #112]
10000b404:     	bl	0x1000041e8 <benchmark::internal::IsZero(double)>
10000b408:     	tbnz	w0, #0, 0x10000b44c <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x2b0>
10000b40c:     	ldr	x8, [x19, #192]
10000b410:     	ldr	d0, [x8, #112]
10000b414:     	str	d0, [sp]
10000b418:     	adrp	x0, 0x100031000 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x314>
10000b41c:     	add	x0, x0, #3728
10000b420:     	add	x8, sp, #24
10000b424:     	bl	0x10002c6d0 <benchmark::StrFormat(char const*, ...)>
10000b428:     	add	x20, x19, #72
10000b42c:     	ldrsb	w8, [x19, #95]
10000b430:     	tbz	w8, #31, 0x10000b43c <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x2a0>
10000b434:     	ldr	x0, [x20]
10000b438:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000b43c:     	ldur	q0, [sp, #24]
10000b440:     	str	q0, [x20]
10000b444:     	ldr	x8, [sp, #40]
10000b448:     	str	x8, [x20, #16]
10000b44c:     	ldr	x8, [x19, #192]
10000b450:     	ldr	x9, [x8, #120]
10000b454:     	cbz	x9, 0x10000b494 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x2f8>
10000b458:     	str	x9, [sp]
10000b45c:     	adrp	x0, 0x100031000 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x358>
10000b460:     	add	x0, x0, #3750
10000b464:     	add	x8, sp, #24
10000b468:     	bl	0x10002c6d0 <benchmark::StrFormat(char const*, ...)>
10000b46c:     	add	x20, x19, #96
10000b470:     	ldrsb	w8, [x19, #119]
10000b474:     	tbz	w8, #31, 0x10000b480 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x2e4>
10000b478:     	ldr	x0, [x20]
10000b47c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000b480:     	ldur	q0, [sp, #24]
10000b484:     	str	q0, [x20]
10000b488:     	ldr	x8, [sp, #40]
10000b48c:     	str	x8, [x20, #16]
10000b490:     	ldr	x8, [x19, #192]
10000b494:     	ldr	w9, [x8, #128]
10000b498:     	cbz	w9, 0x10000b4d8 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x33c>
10000b49c:     	str	x9, [sp]
10000b4a0:     	adrp	x0, 0x100031000 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x39c>
10000b4a4:     	add	x0, x0, #3765
10000b4a8:     	add	x8, sp, #24
10000b4ac:     	bl	0x10002c6d0 <benchmark::StrFormat(char const*, ...)>
10000b4b0:     	add	x20, x19, #120
10000b4b4:     	ldrsb	w8, [x19, #143]
10000b4b8:     	tbz	w8, #31, 0x10000b4c4 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x328>
10000b4bc:     	ldr	x0, [x20]
10000b4c0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000b4c4:     	ldur	q0, [sp, #24]
10000b4c8:     	str	q0, [x20]
10000b4cc:     	ldr	x8, [sp, #40]
10000b4d0:     	str	x8, [x20, #16]
10000b4d4:     	ldr	x8, [x19, #192]
10000b4d8:     	ldrb	w9, [x8, #132]
10000b4dc:     	cbz	w9, 0x10000b4f4 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x358>
10000b4e0:     	add	x0, x19, #144
10000b4e4:     	adrp	x1, 0x100031000 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x3e0>
10000b4e8:     	add	x1, x1, #3776
10000b4ec:     	bl	0x10002ed44 <_vsnprintf+0x10002ed44>
10000b4f0:     	ldr	x8, [x19, #192]
10000b4f4:     	ldrb	w9, [x8, #134]
10000b4f8:     	cbz	w9, 0x10000b514 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x378>
10000b4fc:     	add	x21, x19, #144
10000b500:     	ldrsb	w8, [x19, #167]
10000b504:     	tbnz	w8, #31, 0x10000b534 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x398>
10000b508:     	and	x8, x8, #0xff
10000b50c:     	cbnz	x8, 0x10000b53c <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x3a0>
10000b510:     	b	0x10000b548 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x3ac>
10000b514:     	ldrb	w8, [x8, #133]
10000b518:     	cbz	w8, 0x10000b578 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x3dc>
10000b51c:     	add	x21, x19, #144
10000b520:     	ldrsb	w8, [x19, #167]
10000b524:     	tbnz	w8, #31, 0x10000b554 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x3b8>
10000b528:     	and	x8, x8, #0xff
10000b52c:     	cbnz	x8, 0x10000b55c <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x3c0>
10000b530:     	b	0x10000b568 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x3cc>
10000b534:     	ldr	x8, [x19, #152]
10000b538:     	cbz	x8, 0x10000b548 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x3ac>
10000b53c:     	mov	x0, x21
10000b540:     	mov	w1, #47
10000b544:     	bl	0x10002ed74 <_vsnprintf+0x10002ed74>
10000b548:     	adrp	x1, 0x100031000 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x444>
10000b54c:     	add	x1, x1, #3789
10000b550:     	b	0x10000b570 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x3d4>
10000b554:     	ldr	x8, [x19, #152]
10000b558:     	cbz	x8, 0x10000b568 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x3cc>
10000b55c:     	mov	x0, x21
10000b560:     	mov	w1, #47
10000b564:     	bl	0x10002ed74 <_vsnprintf+0x10002ed74>
10000b568:     	adrp	x1, 0x100031000 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x464>
10000b56c:     	add	x1, x1, #3801
10000b570:     	mov	x0, x21
10000b574:     	bl	0x10002ed2c <_vsnprintf+0x10002ed2c>
10000b578:     	ldr	x8, [x19, #192]
10000b57c:     	ldp	x9, x10, [x8, #176]
10000b580:     	cmp	x9, x10
10000b584:     	b.eq	0x10000b5c8 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x42c>
10000b588:     	ldr	w8, [x19, #312]
10000b58c:     	str	x8, [sp]
10000b590:     	adrp	x0, 0x100031000 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x48c>
10000b594:     	add	x0, x0, #3811
10000b598:     	add	x8, sp, #24
10000b59c:     	bl	0x10002c6d0 <benchmark::StrFormat(char const*, ...)>
10000b5a0:     	add	x20, x19, #168
10000b5a4:     	ldrsb	w8, [x19, #191]
10000b5a8:     	tbz	w8, #31, 0x10000b5b4 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x418>
10000b5ac:     	ldr	x0, [x20]
10000b5b0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000b5b4:     	ldur	q0, [sp, #24]
10000b5b8:     	str	q0, [x20]
10000b5bc:     	ldr	x8, [sp, #40]
10000b5c0:     	str	x8, [x20, #16]
10000b5c4:     	ldr	x8, [x19, #192]
10000b5c8:     	ldr	x9, [x8, #200]
10000b5cc:     	str	x9, [x19, #320]
10000b5d0:     	ldr	x8, [x8, #208]
10000b5d4:     	str	x8, [x19, #328]
10000b5d8:     	mov	x0, x19
10000b5dc:     	ldp	x29, x30, [sp, #128]
10000b5e0:     	ldp	x20, x19, [sp, #112]
10000b5e4:     	ldp	x22, x21, [sp, #96]
10000b5e8:     	ldp	x24, x23, [sp, #80]
10000b5ec:     	ldp	x26, x25, [sp, #64]
10000b5f0:     	ldp	x28, x27, [sp, #48]
10000b5f4:     	add	sp, sp, #144
10000b5f8:     	ret
10000b5fc:     	b	0x10000b644 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x4a8>
10000b600:     	b	0x10000b644 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x4a8>
10000b604:     	b	0x10000b644 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x4a8>
10000b608:     	b	0x10000b644 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x4a8>
10000b60c:     	b	0x10000b644 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x4a8>
10000b610:     	b	0x10000b644 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x4a8>
10000b614:     	mov	x21, x0
10000b618:     	b	0x10000b654 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x4b8>
10000b61c:     	b	0x10000b644 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x4a8>
10000b620:     	b	0x10000b62c <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x490>
10000b624:     	b	0x10000b644 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x4a8>
10000b628:     	b	0x10000b644 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x4a8>
10000b62c:     	mov	x21, x0
10000b630:     	ldrsb	w8, [sp, #47]
10000b634:     	tbz	w8, #31, 0x10000b648 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x4ac>
10000b638:     	ldr	x0, [sp, #24]
10000b63c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000b640:     	b	0x10000b648 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)+0x4ac>
10000b644:     	mov	x21, x0
10000b648:     	ldp	x8, x0, [sp, #8]
10000b64c:     	ldr	x1, [x8]
10000b650:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
10000b654:     	mov	x0, x19
10000b658:     	bl	0x1000090c8 <benchmark::BenchmarkName::~BenchmarkName()>
10000b65c:     	mov	x0, x21
10000b660:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010000b664 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)>:
10000b664:     	b	0x10000b19c <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)>

000000010000b668 <benchmark::internal::BenchmarkInstance::Run(long long, int, benchmark::internal::ThreadTimer*, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*) const>:
10000b668:     	sub	sp, sp, #144
10000b66c:     	stp	x28, x27, [sp, #48]
10000b670:     	stp	x26, x25, [sp, #64]
10000b674:     	stp	x24, x23, [sp, #80]
10000b678:     	stp	x22, x21, [sp, #96]
10000b67c:     	stp	x20, x19, [sp, #112]
10000b680:     	stp	x29, x30, [sp, #128]
10000b684:     	add	x29, sp, #128
10000b688:     	mov	x25, x5
10000b68c:     	mov	x21, x4
10000b690:     	mov	x22, x3
10000b694:     	mov	x23, x2
10000b698:     	mov	x24, x1
10000b69c:     	mov	x20, x0
10000b6a0:     	mov	x19, x8
10000b6a4:     	ldrsb	w8, [x0, #23]
10000b6a8:     	tbnz	w8, #31, 0x10000b6c0 <benchmark::internal::BenchmarkInstance::Run(long long, int, benchmark::internal::ThreadTimer*, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*) const+0x58>
10000b6ac:     	ldr	q0, [x20]
10000b6b0:     	str	q0, [sp, #16]
10000b6b4:     	ldr	x8, [x20, #16]
10000b6b8:     	str	x8, [sp, #32]
10000b6bc:     	b	0x10000b70c <benchmark::internal::BenchmarkInstance::Run(long long, int, benchmark::internal::ThreadTimer*, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*) const+0xa4>
10000b6c0:     	ldp	x26, x28, [x20]
10000b6c4:     	cmp	x28, #22
10000b6c8:     	b.hi	0x10000b6d8 <benchmark::internal::BenchmarkInstance::Run(long long, int, benchmark::internal::ThreadTimer*, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*) const+0x70>
10000b6cc:     	strb	w28, [sp, #39]
10000b6d0:     	add	x0, sp, #16
10000b6d4:     	b	0x10000b700 <benchmark::internal::BenchmarkInstance::Run(long long, int, benchmark::internal::ThreadTimer*, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*) const+0x98>
10000b6d8:     	mov	x8, #9223372036854775792
10000b6dc:     	cmp	x28, x8
10000b6e0:     	b.hs	0x10000b778 <benchmark::internal::BenchmarkInstance::Run(long long, int, benchmark::internal::ThreadTimer*, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*) const+0x110>
10000b6e4:     	orr	x8, x28, #0xf
10000b6e8:     	add	x27, x8, #1
10000b6ec:     	mov	x0, x27
10000b6f0:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000b6f4:     	orr	x8, x27, #0x8000000000000000
10000b6f8:     	stp	x28, x8, [sp, #24]
10000b6fc:     	str	x0, [sp, #16]
10000b700:     	add	x2, x28, #1
10000b704:     	mov	x1, x26
10000b708:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
10000b70c:     	ldr	x3, [x20, #216]
10000b710:     	ldr	w5, [x20, #312]
10000b714:     	str	x25, [sp]
10000b718:     	add	x1, sp, #16
10000b71c:     	mov	x0, x19
10000b720:     	mov	x2, x24
10000b724:     	mov	x4, x23
10000b728:     	mov	x6, x22
10000b72c:     	mov	x7, x21
10000b730:     	bl	0x1000038d8 <benchmark::State::State(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, long long, std::__1::vector<long long, std::__1::allocator<long long>> const&, int, int, benchmark::internal::ThreadTimer*, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)>
10000b734:     	ldrsb	w8, [sp, #39]
10000b738:     	tbz	w8, #31, 0x10000b744 <benchmark::internal::BenchmarkInstance::Run(long long, int, benchmark::internal::ThreadTimer*, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*) const+0xdc>
10000b73c:     	ldr	x0, [sp, #16]
10000b740:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000b744:     	ldr	x0, [x20, #192]
10000b748:     	ldr	x8, [x0]
10000b74c:     	ldr	x8, [x8, #16]
10000b750:     	mov	x1, x19
10000b754:     	blr	x8
10000b758:     	ldp	x29, x30, [sp, #128]
10000b75c:     	ldp	x20, x19, [sp, #112]
10000b760:     	ldp	x22, x21, [sp, #96]
10000b764:     	ldp	x24, x23, [sp, #80]
10000b768:     	ldp	x26, x25, [sp, #64]
10000b76c:     	ldp	x28, x27, [sp, #48]
10000b770:     	add	sp, sp, #144
10000b774:     	ret
10000b778:     	add	x0, sp, #16
10000b77c:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
10000b780:     	mov	x20, x0
10000b784:     	mov	x0, x19
10000b788:     	bl	0x10000b7ac <benchmark::State::~State()>
10000b78c:     	b	0x10000b7a4 <benchmark::internal::BenchmarkInstance::Run(long long, int, benchmark::internal::ThreadTimer*, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*) const+0x13c>
10000b790:     	mov	x20, x0
10000b794:     	ldrsb	w8, [sp, #39]
10000b798:     	tbz	w8, #31, 0x10000b7a4 <benchmark::internal::BenchmarkInstance::Run(long long, int, benchmark::internal::ThreadTimer*, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*) const+0x13c>
10000b79c:     	ldr	x0, [sp, #16]
10000b7a0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000b7a4:     	mov	x0, x20
10000b7a8:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010000b7ac <benchmark::State::~State()>:
10000b7ac:     	stp	x20, x19, [sp, #-32]!
10000b7b0:     	stp	x29, x30, [sp, #16]
10000b7b4:     	add	x29, sp, #16
10000b7b8:     	mov	x19, x0
10000b7bc:     	ldrsb	w8, [x0, #111]
10000b7c0:     	tbnz	w8, #31, 0x10000b7f0 <benchmark::State::~State()+0x44>
10000b7c4:     	add	x0, x19, #64
10000b7c8:     	ldr	x1, [x19, #72]
10000b7cc:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
10000b7d0:     	ldr	x0, [x19, #32]
10000b7d4:     	cbz	x0, 0x10000b7e0 <benchmark::State::~State()+0x34>
10000b7d8:     	str	x0, [x19, #40]
10000b7dc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000b7e0:     	mov	x0, x19
10000b7e4:     	ldp	x29, x30, [sp, #16]
10000b7e8:     	ldp	x20, x19, [sp], #32
10000b7ec:     	ret
10000b7f0:     	ldr	x0, [x19, #88]
10000b7f4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000b7f8:     	add	x0, x19, #64
10000b7fc:     	ldr	x1, [x19, #72]
10000b800:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
10000b804:     	ldr	x0, [x19, #32]
10000b808:     	cbnz	x0, 0x10000b7d8 <benchmark::State::~State()+0x2c>
10000b80c:     	b	0x10000b7e0 <benchmark::State::~State()+0x34>

000000010000b810 <benchmark::internal::BenchmarkInstance::Setup() const>:
10000b810:     	sub	sp, sp, #240
10000b814:     	stp	x22, x21, [sp, #192]
10000b818:     	stp	x20, x19, [sp, #208]
10000b81c:     	stp	x29, x30, [sp, #224]
10000b820:     	add	x29, sp, #224
10000b824:     	ldr	x8, [x0, #320]
10000b828:     	cbz	x8, 0x10000b90c <benchmark::internal::BenchmarkInstance::Setup() const+0xfc>
10000b82c:     	mov	x19, x0
10000b830:     	ldrsb	w8, [x0, #23]
10000b834:     	tbnz	w8, #31, 0x10000b84c <benchmark::internal::BenchmarkInstance::Setup() const+0x3c>
10000b838:     	ldr	q0, [x19]
10000b83c:     	str	q0, [sp, #16]
10000b840:     	ldr	x8, [x19, #16]
10000b844:     	str	x8, [sp, #32]
10000b848:     	b	0x10000b898 <benchmark::internal::BenchmarkInstance::Setup() const+0x88>
10000b84c:     	ldp	x20, x22, [x19]
10000b850:     	cmp	x22, #22
10000b854:     	b.hi	0x10000b864 <benchmark::internal::BenchmarkInstance::Setup() const+0x54>
10000b858:     	strb	w22, [sp, #39]
10000b85c:     	add	x0, sp, #16
10000b860:     	b	0x10000b88c <benchmark::internal::BenchmarkInstance::Setup() const+0x7c>
10000b864:     	mov	x8, #9223372036854775792
10000b868:     	cmp	x22, x8
10000b86c:     	b.hs	0x10000b920 <benchmark::internal::BenchmarkInstance::Setup() const+0x110>
10000b870:     	orr	x8, x22, #0xf
10000b874:     	add	x21, x8, #1
10000b878:     	mov	x0, x21
10000b87c:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000b880:     	orr	x8, x21, #0x8000000000000000
10000b884:     	stp	x22, x8, [sp, #24]
10000b888:     	str	x0, [sp, #16]
10000b88c:     	add	x2, x22, #1
10000b890:     	mov	x1, x20
10000b894:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
10000b898:     	ldr	x3, [x19, #216]
10000b89c:     	ldr	w5, [x19, #312]
10000b8a0:     	str	xzr, [sp]
10000b8a4:     	add	x0, sp, #48
10000b8a8:     	add	x1, sp, #16
10000b8ac:     	mov	w2, #1
10000b8b0:     	mov	w4, #0
10000b8b4:     	mov	x6, #0
10000b8b8:     	mov	x7, #0
10000b8bc:     	bl	0x1000038d8 <benchmark::State::State(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, long long, std::__1::vector<long long, std::__1::allocator<long long>> const&, int, int, benchmark::internal::ThreadTimer*, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)>
10000b8c0:     	ldrsb	w8, [sp, #39]
10000b8c4:     	tbz	w8, #31, 0x10000b8d0 <benchmark::internal::BenchmarkInstance::Setup() const+0xc0>
10000b8c8:     	ldr	x0, [sp, #16]
10000b8cc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000b8d0:     	ldr	x8, [x19, #320]
10000b8d4:     	add	x0, sp, #48
10000b8d8:     	blr	x8
10000b8dc:     	ldrsb	w8, [sp, #159]
10000b8e0:     	tbz	w8, #31, 0x10000b8ec <benchmark::internal::BenchmarkInstance::Setup() const+0xdc>
10000b8e4:     	ldr	x0, [sp, #136]
10000b8e8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000b8ec:     	add	x8, sp, #48
10000b8f0:     	add	x0, x8, #64
10000b8f4:     	ldr	x1, [sp, #120]
10000b8f8:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
10000b8fc:     	ldr	x0, [sp, #80]
10000b900:     	cbz	x0, 0x10000b90c <benchmark::internal::BenchmarkInstance::Setup() const+0xfc>
10000b904:     	str	x0, [sp, #88]
10000b908:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000b90c:     	ldp	x29, x30, [sp, #224]
10000b910:     	ldp	x20, x19, [sp, #208]
10000b914:     	ldp	x22, x21, [sp, #192]
10000b918:     	add	sp, sp, #240
10000b91c:     	ret
10000b920:     	add	x0, sp, #16
10000b924:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
10000b928:     	mov	x19, x0
10000b92c:     	add	x0, sp, #48
10000b930:     	bl	0x10000b7ac <benchmark::State::~State()>
10000b934:     	b	0x10000b94c <benchmark::internal::BenchmarkInstance::Setup() const+0x13c>
10000b938:     	mov	x19, x0
10000b93c:     	ldrsb	w8, [sp, #39]
10000b940:     	tbz	w8, #31, 0x10000b94c <benchmark::internal::BenchmarkInstance::Setup() const+0x13c>
10000b944:     	ldr	x0, [sp, #16]
10000b948:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000b94c:     	mov	x0, x19
10000b950:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010000b954 <benchmark::internal::BenchmarkInstance::Teardown() const>:
10000b954:     	sub	sp, sp, #240
10000b958:     	stp	x22, x21, [sp, #192]
10000b95c:     	stp	x20, x19, [sp, #208]
10000b960:     	stp	x29, x30, [sp, #224]
10000b964:     	add	x29, sp, #224
10000b968:     	ldr	x8, [x0, #328]
10000b96c:     	cbz	x8, 0x10000ba50 <benchmark::internal::BenchmarkInstance::Teardown() const+0xfc>
10000b970:     	mov	x19, x0
10000b974:     	ldrsb	w8, [x0, #23]
10000b978:     	tbnz	w8, #31, 0x10000b990 <benchmark::internal::BenchmarkInstance::Teardown() const+0x3c>
10000b97c:     	ldr	q0, [x19]
10000b980:     	str	q0, [sp, #16]
10000b984:     	ldr	x8, [x19, #16]
10000b988:     	str	x8, [sp, #32]
10000b98c:     	b	0x10000b9dc <benchmark::internal::BenchmarkInstance::Teardown() const+0x88>
10000b990:     	ldp	x20, x22, [x19]
10000b994:     	cmp	x22, #22
10000b998:     	b.hi	0x10000b9a8 <benchmark::internal::BenchmarkInstance::Teardown() const+0x54>
10000b99c:     	strb	w22, [sp, #39]
10000b9a0:     	add	x0, sp, #16
10000b9a4:     	b	0x10000b9d0 <benchmark::internal::BenchmarkInstance::Teardown() const+0x7c>
10000b9a8:     	mov	x8, #9223372036854775792
10000b9ac:     	cmp	x22, x8
10000b9b0:     	b.hs	0x10000ba64 <benchmark::internal::BenchmarkInstance::Teardown() const+0x110>
10000b9b4:     	orr	x8, x22, #0xf
10000b9b8:     	add	x21, x8, #1
10000b9bc:     	mov	x0, x21
10000b9c0:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000b9c4:     	orr	x8, x21, #0x8000000000000000
10000b9c8:     	stp	x22, x8, [sp, #24]
10000b9cc:     	str	x0, [sp, #16]
10000b9d0:     	add	x2, x22, #1
10000b9d4:     	mov	x1, x20
10000b9d8:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
10000b9dc:     	ldr	x3, [x19, #216]
10000b9e0:     	ldr	w5, [x19, #312]
10000b9e4:     	str	xzr, [sp]
10000b9e8:     	add	x0, sp, #48
10000b9ec:     	add	x1, sp, #16
10000b9f0:     	mov	w2, #1
10000b9f4:     	mov	w4, #0
10000b9f8:     	mov	x6, #0
10000b9fc:     	mov	x7, #0
10000ba00:     	bl	0x1000038d8 <benchmark::State::State(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, long long, std::__1::vector<long long, std::__1::allocator<long long>> const&, int, int, benchmark::internal::ThreadTimer*, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)>
10000ba04:     	ldrsb	w8, [sp, #39]
10000ba08:     	tbz	w8, #31, 0x10000ba14 <benchmark::internal::BenchmarkInstance::Teardown() const+0xc0>
10000ba0c:     	ldr	x0, [sp, #16]
10000ba10:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000ba14:     	ldr	x8, [x19, #328]
10000ba18:     	add	x0, sp, #48
10000ba1c:     	blr	x8
10000ba20:     	ldrsb	w8, [sp, #159]
10000ba24:     	tbz	w8, #31, 0x10000ba30 <benchmark::internal::BenchmarkInstance::Teardown() const+0xdc>
10000ba28:     	ldr	x0, [sp, #136]
10000ba2c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000ba30:     	add	x8, sp, #48
10000ba34:     	add	x0, x8, #64
10000ba38:     	ldr	x1, [sp, #120]
10000ba3c:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
10000ba40:     	ldr	x0, [sp, #80]
10000ba44:     	cbz	x0, 0x10000ba50 <benchmark::internal::BenchmarkInstance::Teardown() const+0xfc>
10000ba48:     	str	x0, [sp, #88]
10000ba4c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000ba50:     	ldp	x29, x30, [sp, #224]
10000ba54:     	ldp	x20, x19, [sp, #208]
10000ba58:     	ldp	x22, x21, [sp, #192]
10000ba5c:     	add	sp, sp, #240
10000ba60:     	ret
10000ba64:     	add	x0, sp, #16
10000ba68:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
10000ba6c:     	mov	x19, x0
10000ba70:     	add	x0, sp, #48
10000ba74:     	bl	0x10000b7ac <benchmark::State::~State()>
10000ba78:     	b	0x10000ba90 <benchmark::internal::BenchmarkInstance::Teardown() const+0x13c>
10000ba7c:     	mov	x19, x0
10000ba80:     	ldrsb	w8, [sp, #39]
10000ba84:     	tbz	w8, #31, 0x10000ba90 <benchmark::internal::BenchmarkInstance::Teardown() const+0x13c>
10000ba88:     	ldr	x0, [sp, #16]
10000ba8c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000ba90:     	mov	x0, x19
10000ba94:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010000ba98 <__GLOBAL__sub_I_benchmark_api_internal.cc>:
10000ba98:     	b	0x10000363c <benchmark::internal::InitializeStreams()>

000000010000ba9c <benchmark::BenchmarkName::str() const>:
10000ba9c:     	stp	x26, x25, [sp, #-80]!
10000baa0:     	stp	x24, x23, [sp, #16]
10000baa4:     	stp	x22, x21, [sp, #32]
10000baa8:     	stp	x20, x19, [sp, #48]
10000baac:     	stp	x29, x30, [sp, #64]
10000bab0:     	add	x29, sp, #64
10000bab4:     	mov	x20, x0
10000bab8:     	mov	x19, x8
10000babc:     	stp	xzr, xzr, [x8]
10000bac0:     	str	xzr, [x8, #16]
10000bac4:     	ldr	x8, [x0, #8]
10000bac8:     	ldrb	w9, [x0, #23]
10000bacc:     	sxtb	w10, w9
10000bad0:     	ldr	x11, [x0, #32]
10000bad4:     	ldrb	w12, [x0, #47]
10000bad8:     	sxtb	w13, w12
10000badc:     	ldr	x14, [x0, #56]
10000bae0:     	ldrb	w15, [x0, #71]
10000bae4:     	sxtb	w16, w15
10000bae8:     	ldr	x17, [x0, #80]
10000baec:     	ldrb	w0, [x0, #95]
10000baf0:     	sxtb	w1, w0
10000baf4:     	ldr	x2, [x20, #104]
10000baf8:     	ldrb	w3, [x20, #119]
10000bafc:     	sxtb	w4, w3
10000bb00:     	ldr	x5, [x20, #128]
10000bb04:     	ldrb	w6, [x20, #143]
10000bb08:     	sxtb	w7, w6
10000bb0c:     	ldr	x21, [x20, #152]
10000bb10:     	ldrb	w22, [x20, #167]
10000bb14:     	sxtb	w23, w22
10000bb18:     	ldr	x24, [x20, #176]
10000bb1c:     	ldrb	w25, [x20, #191]
10000bb20:     	sxtb	w26, w25
10000bb24:     	cmp	w10, #0
10000bb28:     	csel	x8, x8, x9, lt
10000bb2c:     	cmp	w13, #0
10000bb30:     	csel	x9, x11, x12, lt
10000bb34:     	cmp	w16, #0
10000bb38:     	csel	x10, x14, x15, lt
10000bb3c:     	cmp	w1, #0
10000bb40:     	csel	x11, x17, x0, lt
10000bb44:     	cmp	w4, #0
10000bb48:     	csel	x12, x2, x3, lt
10000bb4c:     	cmp	w7, #0
10000bb50:     	csel	x13, x5, x6, lt
10000bb54:     	cmp	w23, #0
10000bb58:     	csel	x14, x21, x22, lt
10000bb5c:     	cmp	w26, #0
10000bb60:     	csel	x15, x24, x25, lt
10000bb64:     	add	x8, x8, x9
10000bb68:     	add	x8, x8, x10
10000bb6c:     	add	x8, x8, x11
10000bb70:     	add	x8, x8, x12
10000bb74:     	add	x8, x8, x13
10000bb78:     	add	x8, x8, x14
10000bb7c:     	add	x8, x8, x15
10000bb80:     	add	x1, x8, #8
10000bb84:     	mov	x0, x19
10000bb88:     	bl	0x10002ed68 <_vsnprintf+0x10002ed68>
10000bb8c:     	ldrb	w8, [x19, #23]
10000bb90:     	sxtb	w9, w8
10000bb94:     	ldr	x10, [x19, #8]
10000bb98:     	cmp	w9, #0
10000bb9c:     	csel	x8, x10, x8, lt
10000bba0:     	cbz	x8, 0x10000bbc8 <benchmark::BenchmarkName::str() const+0x12c>
10000bba4:     	ldrb	w8, [x20, #23]
10000bba8:     	sxtb	w9, w8
10000bbac:     	ldr	x10, [x20, #8]
10000bbb0:     	cmp	w9, #0
10000bbb4:     	csel	x8, x10, x8, lt
10000bbb8:     	cbz	x8, 0x10000bbc8 <benchmark::BenchmarkName::str() const+0x12c>
10000bbbc:     	mov	x0, x19
10000bbc0:     	mov	w1, #47
10000bbc4:     	bl	0x10002ed74 <_vsnprintf+0x10002ed74>
10000bbc8:     	ldrb	w8, [x20, #23]
10000bbcc:     	sxtb	w9, w8
10000bbd0:     	ldp	x10, x11, [x20]
10000bbd4:     	cmp	w9, #0
10000bbd8:     	csel	x1, x10, x20, lt
10000bbdc:     	csel	x2, x11, x8, lt
10000bbe0:     	mov	x0, x19
10000bbe4:     	bl	0x10002ed38 <_vsnprintf+0x10002ed38>
10000bbe8:     	ldrb	w8, [x19, #23]
10000bbec:     	sxtb	w9, w8
10000bbf0:     	ldr	x10, [x19, #8]
10000bbf4:     	cmp	w9, #0
10000bbf8:     	csel	x8, x10, x8, lt
10000bbfc:     	cbz	x8, 0x10000bc24 <benchmark::BenchmarkName::str() const+0x188>
10000bc00:     	ldrb	w8, [x20, #47]
10000bc04:     	sxtb	w9, w8
10000bc08:     	ldr	x10, [x20, #32]
10000bc0c:     	cmp	w9, #0
10000bc10:     	csel	x8, x10, x8, lt
10000bc14:     	cbz	x8, 0x10000bc24 <benchmark::BenchmarkName::str() const+0x188>
10000bc18:     	mov	x0, x19
10000bc1c:     	mov	w1, #47
10000bc20:     	bl	0x10002ed74 <_vsnprintf+0x10002ed74>
10000bc24:     	add	x8, x20, #24
10000bc28:     	ldrb	w9, [x20, #47]
10000bc2c:     	sxtb	w10, w9
10000bc30:     	ldp	x11, x12, [x20, #24]
10000bc34:     	cmp	w10, #0
10000bc38:     	csel	x1, x11, x8, lt
10000bc3c:     	csel	x2, x12, x9, lt
10000bc40:     	mov	x0, x19
10000bc44:     	bl	0x10002ed38 <_vsnprintf+0x10002ed38>
10000bc48:     	ldrb	w8, [x19, #23]
10000bc4c:     	sxtb	w9, w8
10000bc50:     	ldr	x10, [x19, #8]
10000bc54:     	cmp	w9, #0
10000bc58:     	csel	x8, x10, x8, lt
10000bc5c:     	cbz	x8, 0x10000bc84 <benchmark::BenchmarkName::str() const+0x1e8>
10000bc60:     	ldrb	w8, [x20, #71]
10000bc64:     	sxtb	w9, w8
10000bc68:     	ldr	x10, [x20, #56]
10000bc6c:     	cmp	w9, #0
10000bc70:     	csel	x8, x10, x8, lt
10000bc74:     	cbz	x8, 0x10000bc84 <benchmark::BenchmarkName::str() const+0x1e8>
10000bc78:     	mov	x0, x19
10000bc7c:     	mov	w1, #47
10000bc80:     	bl	0x10002ed74 <_vsnprintf+0x10002ed74>
10000bc84:     	add	x8, x20, #48
10000bc88:     	ldrb	w9, [x20, #71]
10000bc8c:     	sxtb	w10, w9
10000bc90:     	ldp	x11, x12, [x20, #48]
10000bc94:     	cmp	w10, #0
10000bc98:     	csel	x1, x11, x8, lt
10000bc9c:     	csel	x2, x12, x9, lt
10000bca0:     	mov	x0, x19
10000bca4:     	bl	0x10002ed38 <_vsnprintf+0x10002ed38>
10000bca8:     	ldrb	w8, [x19, #23]
10000bcac:     	sxtb	w9, w8
10000bcb0:     	ldr	x10, [x19, #8]
10000bcb4:     	cmp	w9, #0
10000bcb8:     	csel	x8, x10, x8, lt
10000bcbc:     	cbz	x8, 0x10000bce4 <benchmark::BenchmarkName::str() const+0x248>
10000bcc0:     	ldrb	w8, [x20, #95]
10000bcc4:     	sxtb	w9, w8
10000bcc8:     	ldr	x10, [x20, #80]
10000bccc:     	cmp	w9, #0
10000bcd0:     	csel	x8, x10, x8, lt
10000bcd4:     	cbz	x8, 0x10000bce4 <benchmark::BenchmarkName::str() const+0x248>
10000bcd8:     	mov	x0, x19
10000bcdc:     	mov	w1, #47
10000bce0:     	bl	0x10002ed74 <_vsnprintf+0x10002ed74>
10000bce4:     	add	x8, x20, #72
10000bce8:     	ldrb	w9, [x20, #95]
10000bcec:     	sxtb	w10, w9
10000bcf0:     	ldp	x11, x12, [x20, #72]
10000bcf4:     	cmp	w10, #0
10000bcf8:     	csel	x1, x11, x8, lt
10000bcfc:     	csel	x2, x12, x9, lt
10000bd00:     	mov	x0, x19
10000bd04:     	bl	0x10002ed38 <_vsnprintf+0x10002ed38>
10000bd08:     	ldrb	w8, [x19, #23]
10000bd0c:     	sxtb	w9, w8
10000bd10:     	ldr	x10, [x19, #8]
10000bd14:     	cmp	w9, #0
10000bd18:     	csel	x8, x10, x8, lt
10000bd1c:     	cbz	x8, 0x10000bd44 <benchmark::BenchmarkName::str() const+0x2a8>
10000bd20:     	ldrb	w8, [x20, #119]
10000bd24:     	sxtb	w9, w8
10000bd28:     	ldr	x10, [x20, #104]
10000bd2c:     	cmp	w9, #0
10000bd30:     	csel	x8, x10, x8, lt
10000bd34:     	cbz	x8, 0x10000bd44 <benchmark::BenchmarkName::str() const+0x2a8>
10000bd38:     	mov	x0, x19
10000bd3c:     	mov	w1, #47
10000bd40:     	bl	0x10002ed74 <_vsnprintf+0x10002ed74>
10000bd44:     	add	x8, x20, #96
10000bd48:     	ldrb	w9, [x20, #119]
10000bd4c:     	sxtb	w10, w9
10000bd50:     	ldp	x11, x12, [x20, #96]
10000bd54:     	cmp	w10, #0
10000bd58:     	csel	x1, x11, x8, lt
10000bd5c:     	csel	x2, x12, x9, lt
10000bd60:     	mov	x0, x19
10000bd64:     	bl	0x10002ed38 <_vsnprintf+0x10002ed38>
10000bd68:     	ldrb	w8, [x19, #23]
10000bd6c:     	sxtb	w9, w8
10000bd70:     	ldr	x10, [x19, #8]
10000bd74:     	cmp	w9, #0
10000bd78:     	csel	x8, x10, x8, lt
10000bd7c:     	cbz	x8, 0x10000bda4 <benchmark::BenchmarkName::str() const+0x308>
10000bd80:     	ldrb	w8, [x20, #143]
10000bd84:     	sxtb	w9, w8
10000bd88:     	ldr	x10, [x20, #128]
10000bd8c:     	cmp	w9, #0
10000bd90:     	csel	x8, x10, x8, lt
10000bd94:     	cbz	x8, 0x10000bda4 <benchmark::BenchmarkName::str() const+0x308>
10000bd98:     	mov	x0, x19
10000bd9c:     	mov	w1, #47
10000bda0:     	bl	0x10002ed74 <_vsnprintf+0x10002ed74>
10000bda4:     	add	x8, x20, #120
10000bda8:     	ldrb	w9, [x20, #143]
10000bdac:     	sxtb	w10, w9
10000bdb0:     	ldp	x11, x12, [x20, #120]
10000bdb4:     	cmp	w10, #0
10000bdb8:     	csel	x1, x11, x8, lt
10000bdbc:     	csel	x2, x12, x9, lt
10000bdc0:     	mov	x0, x19
10000bdc4:     	bl	0x10002ed38 <_vsnprintf+0x10002ed38>
10000bdc8:     	ldrb	w8, [x19, #23]
10000bdcc:     	sxtb	w9, w8
10000bdd0:     	ldr	x10, [x19, #8]
10000bdd4:     	cmp	w9, #0
10000bdd8:     	csel	x8, x10, x8, lt
10000bddc:     	cbz	x8, 0x10000be04 <benchmark::BenchmarkName::str() const+0x368>
10000bde0:     	ldrb	w8, [x20, #167]
10000bde4:     	sxtb	w9, w8
10000bde8:     	ldr	x10, [x20, #152]
10000bdec:     	cmp	w9, #0
10000bdf0:     	csel	x8, x10, x8, lt
10000bdf4:     	cbz	x8, 0x10000be04 <benchmark::BenchmarkName::str() const+0x368>
10000bdf8:     	mov	x0, x19
10000bdfc:     	mov	w1, #47
10000be00:     	bl	0x10002ed74 <_vsnprintf+0x10002ed74>
10000be04:     	add	x8, x20, #144
10000be08:     	ldrb	w9, [x20, #167]
10000be0c:     	sxtb	w10, w9
10000be10:     	ldp	x11, x12, [x20, #144]
10000be14:     	cmp	w10, #0
10000be18:     	csel	x1, x11, x8, lt
10000be1c:     	csel	x2, x12, x9, lt
10000be20:     	mov	x0, x19
10000be24:     	bl	0x10002ed38 <_vsnprintf+0x10002ed38>
10000be28:     	ldrb	w8, [x19, #23]
10000be2c:     	sxtb	w9, w8
10000be30:     	ldr	x10, [x19, #8]
10000be34:     	cmp	w9, #0
10000be38:     	csel	x8, x10, x8, lt
10000be3c:     	cbz	x8, 0x10000be64 <benchmark::BenchmarkName::str() const+0x3c8>
10000be40:     	ldrb	w8, [x20, #191]
10000be44:     	sxtb	w9, w8
10000be48:     	ldr	x10, [x20, #176]
10000be4c:     	cmp	w9, #0
10000be50:     	csel	x8, x10, x8, lt
10000be54:     	cbz	x8, 0x10000be64 <benchmark::BenchmarkName::str() const+0x3c8>
10000be58:     	mov	x0, x19
10000be5c:     	mov	w1, #47
10000be60:     	bl	0x10002ed74 <_vsnprintf+0x10002ed74>
10000be64:     	add	x8, x20, #168
10000be68:     	ldrb	w9, [x20, #191]
10000be6c:     	sxtb	w10, w9
10000be70:     	ldp	x11, x12, [x20, #168]
10000be74:     	cmp	w10, #0
10000be78:     	csel	x1, x11, x8, lt
10000be7c:     	csel	x2, x12, x9, lt
10000be80:     	mov	x0, x19
10000be84:     	bl	0x10002ed38 <_vsnprintf+0x10002ed38>
10000be88:     	ldp	x29, x30, [sp, #64]
10000be8c:     	ldp	x20, x19, [sp, #48]
10000be90:     	ldp	x22, x21, [sp, #32]
10000be94:     	ldp	x24, x23, [sp, #16]
10000be98:     	ldp	x26, x25, [sp], #80
10000be9c:     	ret
10000bea0:     	mov	x20, x0
10000bea4:     	ldrsb	w8, [x19, #23]
10000bea8:     	tbz	w8, #31, 0x10000beb4 <benchmark::BenchmarkName::str() const+0x418>
10000beac:     	ldr	x0, [x19]
10000beb0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000beb4:     	mov	x0, x20
10000beb8:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010000bebc <__GLOBAL__sub_I_benchmark_name.cc>:
10000bebc:     	b	0x10000363c <benchmark::internal::InitializeStreams()>

000000010000bec0 <benchmark::internal::BenchmarkFamilies::GetInstance()>:
10000bec0:     	stp	x20, x19, [sp, #-32]!
10000bec4:     	stp	x29, x30, [sp, #16]
10000bec8:     	add	x29, sp, #16
10000becc:     	adrp	x8, 0x100038000 <benchmark::internal::BenchmarkFamilies::~BenchmarkFamilies()+0x20>
10000bed0:     	add	x8, x8, #88
10000bed4:     	ldaprb	w8, [x8]
10000bed8:     	tbz	w8, #0, 0x10000bef0 <benchmark::internal::BenchmarkFamilies::GetInstance()+0x30>
10000bedc:     	adrp	x0, 0x100038000 <benchmark::internal::BenchmarkFamilies::~BenchmarkFamilies()+0x30>
10000bee0:     	add	x0, x0, #96
10000bee4:     	ldp	x29, x30, [sp, #16]
10000bee8:     	ldp	x20, x19, [sp], #32
10000beec:     	ret
10000bef0:     	adrp	x19, 0x100038000 <benchmark::internal::BenchmarkFamilies::~BenchmarkFamilies()+0x44>
10000bef4:     	add	x19, x19, #88
10000bef8:     	mov	x0, x19
10000befc:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10000bf00:     	cbz	w0, 0x10000bedc <benchmark::internal::BenchmarkFamilies::GetInstance()+0x1c>
10000bf04:     	stp	xzr, xzr, [x19, #16]
10000bf08:     	mov	x1, x19
10000bf0c:     	str	xzr, [x1, #8]!
10000bf10:     	mov	w8, #43943
10000bf14:     	movk	w8, #12970, lsl #16
10000bf18:     	str	x8, [x19, #32]
10000bf1c:     	movi.2d	v0, #0000000000000000
10000bf20:     	stur	q0, [x19, #40]
10000bf24:     	stur	q0, [x19, #56]
10000bf28:     	stur	q0, [x19, #72]
10000bf2c:     	str	xzr, [x19, #88]
10000bf30:     	adrp	x0, 0x10000b000 <benchmark::internal::BenchmarkFamilies::GetInstance()+0x70>
10000bf34:     	add	x0, x0, #3936
10000bf38:     	adrp	x2, 0x100000000 <benchmark::internal::BenchmarkFamilies::GetInstance()+0x4c>
10000bf3c:     	add	x2, x2, #0
10000bf40:     	bl	0x10002f044 <_vsnprintf+0x10002f044>
10000bf44:     	mov	x0, x19
10000bf48:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10000bf4c:     	adrp	x0, 0x100038000 <benchmark::internal::BenchmarkFamilies::AddBenchmark(std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>)+0x24>
10000bf50:     	add	x0, x0, #96
10000bf54:     	ldp	x29, x30, [sp, #16]
10000bf58:     	ldp	x20, x19, [sp], #32
10000bf5c:     	ret

000000010000bf60 <benchmark::internal::BenchmarkFamilies::~BenchmarkFamilies()>:
10000bf60:     	stp	x22, x21, [sp, #-48]!
10000bf64:     	stp	x20, x19, [sp, #16]
10000bf68:     	stp	x29, x30, [sp, #32]
10000bf6c:     	add	x29, sp, #32
10000bf70:     	mov	x19, x0
10000bf74:     	add	x0, x0, #24
10000bf78:     	bl	0x10002ef3c <_vsnprintf+0x10002ef3c>
10000bf7c:     	ldr	x20, [x19]
10000bf80:     	cbz	x20, 0x10000bfc8 <benchmark::internal::BenchmarkFamilies::~BenchmarkFamilies()+0x68>
10000bf84:     	ldr	x21, [x19, #8]
10000bf88:     	mov	x0, x20
10000bf8c:     	cmp	x21, x20
10000bf90:     	b.ne	0x10000bfa0 <benchmark::internal::BenchmarkFamilies::~BenchmarkFamilies()+0x40>
10000bf94:     	b	0x10000bfc0 <benchmark::internal::BenchmarkFamilies::~BenchmarkFamilies()+0x60>
10000bf98:     	cmp	x21, x20
10000bf9c:     	b.eq	0x10000bfbc <benchmark::internal::BenchmarkFamilies::~BenchmarkFamilies()+0x5c>
10000bfa0:     	ldr	x0, [x21, #-8]!
10000bfa4:     	str	xzr, [x21]
10000bfa8:     	cbz	x0, 0x10000bf98 <benchmark::internal::BenchmarkFamilies::~BenchmarkFamilies()+0x38>
10000bfac:     	ldr	x8, [x0]
10000bfb0:     	ldr	x8, [x8, #8]
10000bfb4:     	blr	x8
10000bfb8:     	b	0x10000bf98 <benchmark::internal::BenchmarkFamilies::~BenchmarkFamilies()+0x38>
10000bfbc:     	ldr	x0, [x19]
10000bfc0:     	str	x20, [x19, #8]
10000bfc4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000bfc8:     	mov	x0, x19
10000bfcc:     	ldp	x29, x30, [sp, #32]
10000bfd0:     	ldp	x20, x19, [sp, #16]
10000bfd4:     	ldp	x22, x21, [sp], #48
10000bfd8:     	ret

000000010000bfdc <benchmark::internal::BenchmarkFamilies::AddBenchmark(std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>)>:
10000bfdc:     	stp	x24, x23, [sp, #-64]!
10000bfe0:     	stp	x22, x21, [sp, #16]
10000bfe4:     	stp	x20, x19, [sp, #32]
10000bfe8:     	stp	x29, x30, [sp, #48]
10000bfec:     	add	x29, sp, #48
10000bff0:     	mov	x21, x1
10000bff4:     	mov	x20, x0
10000bff8:     	add	x19, x0, #24
10000bffc:     	mov	x0, x19
10000c000:     	bl	0x10002ef24 <_vsnprintf+0x10002ef24>
10000c004:     	ldp	x23, x22, [x20]
10000c008:     	ldr	x8, [x20, #16]
10000c00c:     	cmp	x22, x8
10000c010:     	b.hs	0x10000c02c <benchmark::internal::BenchmarkFamilies::AddBenchmark(std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>)+0x50>
10000c014:     	ldr	x8, [x21]
10000c018:     	str	xzr, [x21]
10000c01c:     	mov	x9, x22
10000c020:     	str	x8, [x9], #8
10000c024:     	str	x9, [x20, #8]
10000c028:     	b	0x10000c038 <benchmark::internal::BenchmarkFamilies::AddBenchmark(std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>)+0x5c>
10000c02c:     	mov	x0, x20
10000c030:     	mov	x1, x21
10000c034:     	bl	0x10001bf04 <void std::__1::vector<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>, std::__1::allocator<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>>::__push_back_slow_path<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>(std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>&&)>
10000c038:     	sub	x8, x22, x23
10000c03c:     	asr	x20, x8, #3
10000c040:     	mov	x0, x19
10000c044:     	bl	0x10002ef30 <_vsnprintf+0x10002ef30>
10000c048:     	mov	x0, x20
10000c04c:     	ldp	x29, x30, [sp, #48]
10000c050:     	ldp	x20, x19, [sp, #32]
10000c054:     	ldp	x22, x21, [sp, #16]
10000c058:     	ldp	x24, x23, [sp], #64
10000c05c:     	ret
10000c060:     	mov	x20, x0
10000c064:     	mov	x0, x19
10000c068:     	bl	0x10002ef30 <_vsnprintf+0x10002ef30>
10000c06c:     	mov	x0, x20
10000c070:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010000c074 <benchmark::internal::BenchmarkFamilies::ClearBenchmarks()>:
10000c074:     	stp	x22, x21, [sp, #-48]!
10000c078:     	stp	x20, x19, [sp, #16]
10000c07c:     	stp	x29, x30, [sp, #32]
10000c080:     	add	x29, sp, #32
10000c084:     	mov	x20, x0
10000c088:     	add	x19, x0, #24
10000c08c:     	mov	x0, x19
10000c090:     	bl	0x10002ef24 <_vsnprintf+0x10002ef24>
10000c094:     	ldp	x21, x22, [x20]
10000c098:     	cmp	x22, x21
10000c09c:     	b.eq	0x10000c0bc <benchmark::internal::BenchmarkFamilies::ClearBenchmarks()+0x48>
10000c0a0:     	ldr	x0, [x22, #-8]!
10000c0a4:     	str	xzr, [x22]
10000c0a8:     	cbz	x0, 0x10000c098 <benchmark::internal::BenchmarkFamilies::ClearBenchmarks()+0x24>
10000c0ac:     	ldr	x8, [x0]
10000c0b0:     	ldr	x8, [x8, #8]
10000c0b4:     	blr	x8
10000c0b8:     	b	0x10000c098 <benchmark::internal::BenchmarkFamilies::ClearBenchmarks()+0x24>
10000c0bc:     	str	x21, [x20, #8]
10000c0c0:     	mov	x0, x20
10000c0c4:     	bl	0x10000c0dc <std::__1::vector<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>, std::__1::allocator<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>>::shrink_to_fit()>
10000c0c8:     	mov	x0, x19
10000c0cc:     	ldp	x29, x30, [sp, #32]
10000c0d0:     	ldp	x20, x19, [sp, #16]
10000c0d4:     	ldp	x22, x21, [sp], #48
10000c0d8:     	b	0x10002ef30 <_vsnprintf+0x10002ef30>

000000010000c0dc <std::__1::vector<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>, std::__1::allocator<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>>::shrink_to_fit()>:
10000c0dc:     	stp	x22, x21, [sp, #-48]!
10000c0e0:     	stp	x20, x19, [sp, #16]
10000c0e4:     	stp	x29, x30, [sp, #32]
10000c0e8:     	add	x29, sp, #32
10000c0ec:     	mov	x20, x0
10000c0f0:     	ldp	x21, x8, [x0, #8]
10000c0f4:     	ldr	x19, [x0]
10000c0f8:     	sub	x8, x8, x19
10000c0fc:     	sub	x0, x21, x19
10000c100:     	asr	x22, x0, #3
10000c104:     	cmp	x22, x8, asr #3
10000c108:     	b.hs	0x10000c1b4 <std::__1::vector<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>, std::__1::allocator<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>>::shrink_to_fit()+0xd8>
10000c10c:     	cmp	x21, x19
10000c110:     	b.eq	0x10000c180 <std::__1::vector<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>, std::__1::allocator<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>>::shrink_to_fit()+0xa4>
10000c114:     	tbnz	x0, #63, 0x10000c1a4 <std::__1::vector<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>, std::__1::allocator<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>>::shrink_to_fit()+0xc8>
10000c118:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000c11c:     	add	x8, x0, x22, lsl #3
10000c120:     	mov	x9, x8
10000c124:     	ldr	x10, [x21, #-8]!
10000c128:     	str	xzr, [x21]
10000c12c:     	str	x10, [x9, #-8]!
10000c130:     	cmp	x21, x19
10000c134:     	b.ne	0x10000c124 <std::__1::vector<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>, std::__1::allocator<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>>::shrink_to_fit()+0x48>
10000c138:     	ldp	x21, x19, [x20]
10000c13c:     	stp	x9, x8, [x20]
10000c140:     	str	x8, [x20, #16]
10000c144:     	cmp	x19, x21
10000c148:     	b.ne	0x10000c158 <std::__1::vector<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>, std::__1::allocator<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>>::shrink_to_fit()+0x7c>
10000c14c:     	b	0x10000c178 <std::__1::vector<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>, std::__1::allocator<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>>::shrink_to_fit()+0x9c>
10000c150:     	cmp	x19, x21
10000c154:     	b.eq	0x10000c174 <std::__1::vector<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>, std::__1::allocator<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>>::shrink_to_fit()+0x98>
10000c158:     	ldr	x0, [x19, #-8]!
10000c15c:     	str	xzr, [x19]
10000c160:     	cbz	x0, 0x10000c150 <std::__1::vector<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>, std::__1::allocator<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>>::shrink_to_fit()+0x74>
10000c164:     	ldr	x8, [x0]
10000c168:     	ldr	x8, [x8, #8]
10000c16c:     	blr	x8
10000c170:     	b	0x10000c150 <std::__1::vector<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>, std::__1::allocator<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>>::shrink_to_fit()+0x74>
10000c174:     	mov	x19, x21
10000c178:     	cbnz	x19, 0x10000c190 <std::__1::vector<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>, std::__1::allocator<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>>::shrink_to_fit()+0xb4>
10000c17c:     	b	0x10000c1b4 <std::__1::vector<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>, std::__1::allocator<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>>::shrink_to_fit()+0xd8>
10000c180:     	lsl	x8, x22, #3
10000c184:     	stp	x8, x8, [x20]
10000c188:     	str	x8, [x20, #16]
10000c18c:     	cbz	x19, 0x10000c1b4 <std::__1::vector<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>, std::__1::allocator<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>>::shrink_to_fit()+0xd8>
10000c190:     	mov	x0, x19
10000c194:     	ldp	x29, x30, [sp, #32]
10000c198:     	ldp	x20, x19, [sp, #16]
10000c19c:     	ldp	x22, x21, [sp], #48
10000c1a0:     	b	0x10002f014 <_vsnprintf+0x10002f014>
10000c1a4:     	bl	0x100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>
10000c1a8:     	brk	#0x1
10000c1ac:     	bl	0x10002f050 <_vsnprintf+0x10002f050>
10000c1b0:     	bl	0x10002f05c <_vsnprintf+0x10002f05c>
10000c1b4:     	ldp	x29, x30, [sp, #32]
10000c1b8:     	ldp	x20, x19, [sp, #16]
10000c1bc:     	ldp	x22, x21, [sp], #48
10000c1c0:     	ret
10000c1c4:     	bl	0x100006a3c <___clang_call_terminate>

000000010000c1c8 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)>:
10000c1c8:     	stp	x28, x27, [sp, #-96]!
10000c1cc:     	stp	x26, x25, [sp, #16]
10000c1d0:     	stp	x24, x23, [sp, #32]
10000c1d4:     	stp	x22, x21, [sp, #48]
10000c1d8:     	stp	x20, x19, [sp, #64]
10000c1dc:     	stp	x29, x30, [sp, #80]
10000c1e0:     	add	x29, sp, #80
10000c1e4:     	sub	sp, sp, #784
10000c1e8:     	str	x3, [sp, #24]
10000c1ec:     	str	x2, [sp, #168]
10000c1f0:     	mov	x20, x1
10000c1f4:     	mov	x24, x0
10000c1f8:     	add	x21, sp, #560
10000c1fc:     	adrp	x8, 0x100038000 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0xe4>
10000c200:     	add	x8, x8, #8
10000c204:     	ldaprb	w8, [x8]
10000c208:     	tbz	w8, #0, 0x10000cb80 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x9b8>
10000c20c:     	stp	xzr, xzr, [x29, #-232]
10000c210:     	stur	xzr, [x29, #-216]
10000c214:     	add	x19, x21, #8
10000c218:     	strb	wzr, [sp, #560]
10000c21c:     	mov	x0, x19
10000c220:     	bl	0x10002ef78 <_vsnprintf+0x10002ef78>
10000c224:     	adrp	x1, 0x100034000 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0xfc>
10000c228:     	ldr	x1, [x1, #480]
10000c22c:     	str	x19, [sp, #160]
10000c230:     	bl	0x10002ecf0 <_vsnprintf+0x10002ecf0>
10000c234:     	str	x0, [sp, #576]
10000c238:     	adrp	x1, 0x100034000 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x110>
10000c23c:     	ldr	x1, [x1, #584]
10000c240:     	mov	x0, x19
10000c244:     	bl	0x10002ecf0 <_vsnprintf+0x10002ecf0>
10000c248:     	movi.2d	v0, #0000000000000000
10000c24c:     	stp	q0, q0, [x21, #32]
10000c250:     	str	x0, [sp, #584]
10000c254:     	str	xzr, [sp, #624]
10000c258:     	ldrsb	w9, [x20, #23]
10000c25c:     	mov	x8, x20
10000c260:     	tbnz	w9, #31, 0x10000c278 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0xb0>
10000c264:     	ldrb	w8, [x8]
10000c268:     	str	w8, [sp, #152]
10000c26c:     	cmp	w8, #45
10000c270:     	b.eq	0x10000c28c <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0xc4>
10000c274:     	b	0x10000c2a4 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0xdc>
10000c278:     	ldr	x8, [x20]
10000c27c:     	ldrb	w8, [x8]
10000c280:     	str	w8, [sp, #152]
10000c284:     	cmp	w8, #45
10000c288:     	b.ne	0x10000c2a4 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0xdc>
10000c28c:     	adrp	x3, 0x100031000 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x158>
10000c290:     	add	x3, x3, #1905
10000c294:     	mov	x0, x20
10000c298:     	mov	x1, #0
10000c29c:     	mov	w2, #1
10000c2a0:     	bl	0x10002ed5c <_vsnprintf+0x10002ed5c>
10000c2a4:     	add	x0, sp, #560
10000c2a8:     	sub	x2, x29, #232
10000c2ac:     	mov	x1, x20
10000c2b0:     	bl	0x10000cc98 <benchmark::Regex::Init(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)>
10000c2b4:     	mov	x19, x0
10000c2b8:     	tbz	w0, #0, 0x10000ca54 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x88c>
10000c2bc:     	mov	w0, #4
10000c2c0:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000c2c4:     	str	x20, [sp, #32]
10000c2c8:     	str	w19, [sp, #4]
10000c2cc:     	str	x0, [sp, #552]
10000c2d0:     	mov	w8, #1
10000c2d4:     	str	x0, [sp, #16]
10000c2d8:     	mov	x9, x0
10000c2dc:     	str	w8, [x9], #4
10000c2e0:     	str	x9, [sp, #544]
10000c2e4:     	add	x0, x24, #24
10000c2e8:     	str	x0, [sp, #8]
10000c2ec:     	bl	0x10002ef24 <_vsnprintf+0x10002ef24>
10000c2f0:     	ldp	x22, x9, [x24]
10000c2f4:     	str	x9, [sp, #40]
10000c2f8:     	cmp	x22, x9
10000c2fc:     	b.eq	0x10000caec <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x924>
10000c300:     	mov	w27, #0
10000c304:     	ldr	w8, [sp, #152]
10000c308:     	cmp	w8, #45
10000c30c:     	cset	w8, ne
10000c310:     	str	w8, [sp, #156]
10000c314:     	sub	x8, x29, #208
10000c318:     	add	x19, x8, #48
10000c31c:     	add	x21, x8, #72
10000c320:     	add	x8, sp, #208
10000c324:     	add	x10, x8, #24
10000c328:     	add	x9, x8, #48
10000c32c:     	stp	x9, x10, [sp, #136]
10000c330:     	add	x10, x8, #72
10000c334:     	add	x9, x8, #96
10000c338:     	stp	x9, x10, [sp, #120]
10000c33c:     	add	x10, x8, #120
10000c340:     	add	x9, x8, #144
10000c344:     	stp	x9, x10, [sp, #104]
10000c348:     	add	x10, x8, #168
10000c34c:     	add	x9, x8, #192
10000c350:     	stp	x9, x10, [sp, #88]
10000c354:     	add	x9, x8, #248
10000c358:     	str	x9, [sp, #176]
10000c35c:     	add	x9, x8, #256
10000c360:     	add	x8, x8, #272
10000c364:     	stp	x9, x8, [sp, #72]
10000c368:     	b	0x10000c384 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x1bc>
10000c36c:     	mov	x26, x27
10000c370:     	add	x22, x22, #8
10000c374:     	mov	x27, x26
10000c378:     	ldr	x8, [sp, #40]
10000c37c:     	cmp	x22, x8
10000c380:     	b.eq	0x10000caec <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x924>
10000c384:     	ldr	x0, [x22]
10000c388:     	cbz	x0, 0x10000c36c <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x1a4>
10000c38c:     	ldp	x8, x9, [x0, #64]
10000c390:     	cmp	x8, x9
10000c394:     	b.eq	0x10000c3b4 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x1ec>
10000c398:     	ldp	x11, x10, [x8]
10000c39c:     	sub	x10, x10, x11
10000c3a0:     	lsr	x10, x10, #3
10000c3a4:     	ldr	x20, [sp, #32]
10000c3a8:     	cmn	w10, #1
10000c3ac:     	b.eq	0x10000c3e0 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x218>
10000c3b0:     	b	0x10000c408 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x240>
10000c3b4:     	ldp	x10, x11, [x0, #40]
10000c3b8:     	cmp	x10, x11
10000c3bc:     	ldr	x20, [sp, #32]
10000c3c0:     	b.eq	0x10000c3e0 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x218>
10000c3c4:     	sub	x10, x11, x10
10000c3c8:     	asr	x10, x10, #3
10000c3cc:     	mov	x11, #-6148914691236517206
10000c3d0:     	movk	x11, #43691
10000c3d4:     	mul	x10, x10, x11
10000c3d8:     	cmn	w10, #1
10000c3dc:     	b.ne	0x10000c408 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x240>
10000c3e0:     	stp	xzr, xzr, [sp, #208]
10000c3e4:     	str	xzr, [sp, #224]
10000c3e8:     	add	x1, sp, #208
10000c3ec:     	bl	0x10000ced0 <benchmark::internal::Benchmark::Args(std::__1::vector<long long, std::__1::allocator<long long>> const&)>
10000c3f0:     	ldr	x0, [sp, #208]
10000c3f4:     	cbz	x0, 0x10000c400 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x238>
10000c3f8:     	str	x0, [sp, #216]
10000c3fc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000c400:     	ldr	x0, [x22]
10000c404:     	ldp	x8, x9, [x0, #64]
10000c408:     	ldr	x10, [x0, #176]!
10000c40c:     	mov	x11, x0
10000c410:     	ldr	x12, [x11, #8]!
10000c414:     	sub	x8, x9, x8
10000c418:     	cmp	x10, x12
10000c41c:     	add	x9, sp, #552
10000c420:     	csel	x10, x9, x0, eq
10000c424:     	asr	x8, x8, #3
10000c428:     	add	x9, sp, #544
10000c42c:     	csel	x9, x9, x11, eq
10000c430:     	stp	x9, x10, [sp, #56]
10000c434:     	ldr	x9, [x9]
10000c438:     	ldr	x10, [x10]
10000c43c:     	sub	x9, x9, x10
10000c440:     	asr	x9, x9, #2
10000c444:     	mul	x8, x8, x9
10000c448:     	mov	x9, #-6148914691236517206
10000c44c:     	movk	x9, #43691
10000c450:     	mul	x25, x8, x9
10000c454:     	cmp	x25, #101
10000c458:     	b.lo	0x10000c4bc <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x2f4>
10000c45c:     	ldr	x0, [sp, #24]
10000c460:     	adrp	x1, 0x100031000 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x32c>
10000c464:     	add	x1, x1, #3855
10000c468:     	mov	w2, #36
10000c46c:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10000c470:     	ldr	x8, [x22]
10000c474:     	ldr	x9, [x8, #8]!
10000c478:     	ldrb	w10, [x8, #23]
10000c47c:     	sxtb	w11, w10
10000c480:     	ldr	x12, [x8, #8]
10000c484:     	cmp	w11, #0
10000c488:     	csel	x1, x9, x8, lt
10000c48c:     	csel	x2, x12, x10, lt
10000c490:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10000c494:     	adrp	x1, 0x100031000 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x360>
10000c498:     	add	x1, x1, #3892
10000c49c:     	mov	w2, #27
10000c4a0:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10000c4a4:     	mov	x1, x25
10000c4a8:     	bl	0x10002ee34 <_vsnprintf+0x10002ee34>
10000c4ac:     	adrp	x1, 0x100031000 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x378>
10000c4b0:     	add	x1, x1, #3920
10000c4b4:     	mov	w2, #8
10000c4b8:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10000c4bc:     	ldrsb	w9, [x20, #23]
10000c4c0:     	tbnz	w9, #31, 0x10000c4e0 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x318>
10000c4c4:     	mov	x8, x20
10000c4c8:     	cmp	w9, #1
10000c4cc:     	b.ne	0x10000c524 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x35c>
10000c4d0:     	ldrb	w8, [x8]
10000c4d4:     	cmp	w8, #46
10000c4d8:     	b.eq	0x10000c4fc <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x334>
10000c4dc:     	b	0x10000c524 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x35c>
10000c4e0:     	ldr	x8, [x20, #8]
10000c4e4:     	cmp	x8, #1
10000c4e8:     	b.ne	0x10000c524 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x35c>
10000c4ec:     	ldr	x8, [x20]
10000c4f0:     	ldrb	w8, [x8]
10000c4f4:     	cmp	w8, #46
10000c4f8:     	b.ne	0x10000c524 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x35c>
10000c4fc:     	ldr	x0, [sp, #168]
10000c500:     	ldp	x9, x8, [x0]
10000c504:     	sub	x8, x8, x9
10000c508:     	asr	x8, x8, #4
10000c50c:     	mov	x9, #53053
10000c510:     	movk	x9, #15603, lsl #16
10000c514:     	movk	x9, #62415, lsl #32
10000c518:     	movk	x9, #53052, lsl #48
10000c51c:     	madd	x1, x8, x9, x25
10000c520:     	bl	0x10000cfe4 <std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::reserve(unsigned long)>
10000c524:     	ldr	x8, [x22]
10000c528:     	ldp	x28, x8, [x8, #64]
10000c52c:     	str	x8, [sp, #48]
10000c530:     	cmp	x28, x8
10000c534:     	b.eq	0x10000c36c <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x1a4>
10000c538:     	ldp	x9, x8, [sp, #56]
10000c53c:     	ldr	x8, [x8]
10000c540:     	ldr	x9, [x9]
10000c544:     	cmp	x8, x9
10000c548:     	b.eq	0x10000c36c <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x1a4>
10000c54c:     	mov	w25, #0
10000c550:     	mov	x26, x27
10000c554:     	b	0x10000c568 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x3a0>
10000c558:     	add	x28, x28, #24
10000c55c:     	ldr	x8, [sp, #48]
10000c560:     	cmp	x28, x8
10000c564:     	b.eq	0x10000c370 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x1a8>
10000c568:     	ldr	x8, [sp, #64]
10000c56c:     	ldr	x23, [x8]
10000c570:     	ldr	x8, [sp, #56]
10000c574:     	ldr	x20, [x8]
10000c578:     	b	0x10000c590 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x3c8>
10000c57c:     	ldr	x0, [sp, #232]
10000c580:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000c584:     	ldrsb	w8, [sp, #231]
10000c588:     	tbnz	w8, #31, 0x10000ca0c <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x844>
10000c58c:     	add	x23, x23, #4
10000c590:     	cmp	x23, x20
10000c594:     	b.eq	0x10000c558 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x390>
10000c598:     	ldr	w5, [x23]
10000c59c:     	ldr	x1, [x22]
10000c5a0:     	add	x0, sp, #208
10000c5a4:     	mov	x2, x27
10000c5a8:     	mov	x3, x25
10000c5ac:     	mov	x4, x28
10000c5b0:     	bl	0x10000b664 <benchmark::internal::BenchmarkInstance::BenchmarkInstance(benchmark::internal::Benchmark*, int, int, std::__1::vector<long long, std::__1::allocator<long long>> const&, int)>
10000c5b4:     	add	x8, sp, #184
10000c5b8:     	add	x0, sp, #208
10000c5bc:     	bl	0x10000ba9c <benchmark::BenchmarkName::str() const>
10000c5c0:     	ldrb	w8, [sp, #207]
10000c5c4:     	sxtb	w9, w8
10000c5c8:     	ldp	x10, x11, [sp, #184]
10000c5cc:     	cmp	w9, #0
10000c5d0:     	add	x9, sp, #184
10000c5d4:     	csel	x1, x10, x9, lt
10000c5d8:     	csel	x8, x11, x8, lt
10000c5dc:     	cmp	x8, #9
10000c5e0:     	mov	w9, #9
10000c5e4:     	csel	x9, x8, x9, lo
10000c5e8:     	cbz	x9, 0x10000c6e8 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x520>
10000c5ec:     	add	x10, x1, x9
10000c5f0:     	mov	x11, x1
10000c5f4:     	mov	x9, x10
10000c5f8:     	mov	x12, x11
10000c5fc:     	ldrb	w13, [x11], #1
10000c600:     	cmp	w13, #68
10000c604:     	b.eq	0x10000c618 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x450>
10000c608:     	mov	x12, x11
10000c60c:     	cmp	x11, x10
10000c610:     	b.ne	0x10000c5fc <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x434>
10000c614:     	b	0x10000c6d8 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x510>
10000c618:     	cmp	x11, x10
10000c61c:     	b.eq	0x10000c6d8 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x510>
10000c620:     	ldrb	w13, [x11]
10000c624:     	cmp	w13, #73
10000c628:     	b.ne	0x10000c5f8 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x430>
10000c62c:     	add	x13, x12, #2
10000c630:     	cmp	x13, x10
10000c634:     	b.eq	0x10000c6d8 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x510>
10000c638:     	ldrb	w13, [x13]
10000c63c:     	cmp	w13, #83
10000c640:     	b.ne	0x10000c5f8 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x430>
10000c644:     	add	x13, x12, #3
10000c648:     	cmp	x13, x10
10000c64c:     	b.eq	0x10000c6d8 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x510>
10000c650:     	ldrb	w13, [x13]
10000c654:     	cmp	w13, #65
10000c658:     	b.ne	0x10000c5f8 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x430>
10000c65c:     	add	x13, x12, #4
10000c660:     	cmp	x13, x10
10000c664:     	b.eq	0x10000c6d8 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x510>
10000c668:     	ldrb	w13, [x13]
10000c66c:     	cmp	w13, #66
10000c670:     	b.ne	0x10000c5f8 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x430>
10000c674:     	add	x13, x12, #5
10000c678:     	cmp	x13, x10
10000c67c:     	b.eq	0x10000c6d8 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x510>
10000c680:     	ldrb	w13, [x13]
10000c684:     	cmp	w13, #76
10000c688:     	b.ne	0x10000c5f8 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x430>
10000c68c:     	add	x13, x12, #6
10000c690:     	cmp	x13, x10
10000c694:     	b.eq	0x10000c6d8 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x510>
10000c698:     	ldrb	w13, [x13]
10000c69c:     	cmp	w13, #69
10000c6a0:     	b.ne	0x10000c5f8 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x430>
10000c6a4:     	add	x13, x12, #7
10000c6a8:     	cmp	x13, x10
10000c6ac:     	b.eq	0x10000c6d8 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x510>
10000c6b0:     	ldrb	w13, [x13]
10000c6b4:     	cmp	w13, #68
10000c6b8:     	b.ne	0x10000c5f8 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x430>
10000c6bc:     	add	x13, x12, #8
10000c6c0:     	cmp	x13, x10
10000c6c4:     	b.eq	0x10000c6d8 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x510>
10000c6c8:     	ldrb	w13, [x12, #8]
10000c6cc:     	cmp	w13, #95
10000c6d0:     	csel	x9, x12, x9, eq
10000c6d4:     	b	0x10000c5f8 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x430>
10000c6d8:     	cmp	x9, x10
10000c6dc:     	b.eq	0x10000c6e8 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x520>
10000c6e0:     	cmp	x9, x1
10000c6e4:     	b.eq	0x10000c7d0 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x608>
10000c6e8:     	ldrb	w9, [sp, #560]
10000c6ec:     	cbz	w9, 0x10000c820 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x658>
10000c6f0:     	stp	xzr, xzr, [x19]
10000c6f4:     	strb	wzr, [x19, #16]
10000c6f8:     	stp	xzr, xzr, [x21]
10000c6fc:     	strb	wzr, [x21, #16]
10000c700:     	sturb	wzr, [x29, #-112]
10000c704:     	stur	xzr, [x29, #-104]
10000c708:     	add	x9, sp, #560
10000c70c:     	movi.2d	v0, #0000000000000000
10000c710:     	stp	q0, q0, [x9, #96]
10000c714:     	add	x2, x1, x8
10000c718:     	stur	q0, [x9, #121]
10000c71c:     	sub	x3, x29, #208
10000c720:     	ldr	x0, [sp, #160]
10000c724:     	mov	w4, #0
10000c728:     	bl	0x100019878 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__search<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type) const>
10000c72c:     	mov	x24, x0
10000c730:     	ldur	x0, [x29, #-208]
10000c734:     	cbz	x0, 0x10000c740 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x578>
10000c738:     	stur	x0, [x29, #-200]
10000c73c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000c740:     	cbz	w24, 0x10000c750 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x588>
10000c744:     	ldr	w8, [sp, #152]
10000c748:     	cmp	w8, #45
10000c74c:     	b.ne	0x10000c830 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x668>
10000c750:     	ldrb	w8, [sp, #560]
10000c754:     	cbz	w8, 0x10000c820 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x658>
10000c758:     	stp	xzr, xzr, [x19]
10000c75c:     	strb	wzr, [x19, #16]
10000c760:     	stp	xzr, xzr, [x21]
10000c764:     	strb	wzr, [x21, #16]
10000c768:     	sturb	wzr, [x29, #-112]
10000c76c:     	stur	xzr, [x29, #-104]
10000c770:     	add	x8, sp, #560
10000c774:     	movi.2d	v0, #0000000000000000
10000c778:     	stp	q0, q0, [x8, #96]
10000c77c:     	stur	q0, [x8, #121]
10000c780:     	ldrb	w8, [sp, #207]
10000c784:     	sxtb	w9, w8
10000c788:     	ldp	x10, x11, [sp, #184]
10000c78c:     	cmp	w9, #0
10000c790:     	add	x9, sp, #184
10000c794:     	csel	x1, x10, x9, lt
10000c798:     	csel	x8, x11, x8, lt
10000c79c:     	add	x2, x1, x8
10000c7a0:     	sub	x3, x29, #208
10000c7a4:     	ldr	x0, [sp, #160]
10000c7a8:     	mov	w4, #0
10000c7ac:     	bl	0x100019878 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__search<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type) const>
10000c7b0:     	mov	x24, x0
10000c7b4:     	ldur	x0, [x29, #-208]
10000c7b8:     	cbz	x0, 0x10000c7c4 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x5fc>
10000c7bc:     	stur	x0, [x29, #-200]
10000c7c0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000c7c4:     	ldr	w8, [sp, #156]
10000c7c8:     	orr	w8, w24, w8
10000c7cc:     	tbz	w8, #0, 0x10000c830 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x668>
10000c7d0:     	ldrsb	w8, [sp, #207]
10000c7d4:     	tbnz	w8, #31, 0x10000c988 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x7c0>
10000c7d8:     	ldr	x1, [sp, #464]
10000c7dc:     	ldr	x0, [sp, #176]
10000c7e0:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
10000c7e4:     	ldrsb	w8, [sp, #399]
10000c7e8:     	tbnz	w8, #31, 0x10000c9a4 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x7dc>
10000c7ec:     	ldrsb	w8, [sp, #375]
10000c7f0:     	tbnz	w8, #31, 0x10000c9b4 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x7ec>
10000c7f4:     	ldrsb	w8, [sp, #351]
10000c7f8:     	tbnz	w8, #31, 0x10000c9c4 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x7fc>
10000c7fc:     	ldrsb	w8, [sp, #327]
10000c800:     	tbnz	w8, #31, 0x10000c9d4 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x80c>
10000c804:     	ldrsb	w8, [sp, #303]
10000c808:     	tbnz	w8, #31, 0x10000c9e4 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x81c>
10000c80c:     	ldrsb	w8, [sp, #279]
10000c810:     	tbnz	w8, #31, 0x10000c9f4 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x82c>
10000c814:     	ldrsb	w8, [sp, #255]
10000c818:     	tbz	w8, #31, 0x10000ca04 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x83c>
10000c81c:     	b	0x10000c57c <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x3b4>
10000c820:     	mov	w24, #0
10000c824:     	ldr	w8, [sp, #156]
10000c828:     	orr	w8, w24, w8
10000c82c:     	tbnz	w8, #0, 0x10000c7d0 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x608>
10000c830:     	ldr	x0, [sp, #168]
10000c834:     	ldp	x8, x9, [x0, #8]
10000c838:     	cmp	x8, x9
10000c83c:     	b.hs	0x10000c96c <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x7a4>
10000c840:     	ldr	q0, [sp, #208]
10000c844:     	ldr	x9, [sp, #224]
10000c848:     	str	x9, [x8, #16]
10000c84c:     	str	q0, [x8]
10000c850:     	stp	xzr, xzr, [sp, #216]
10000c854:     	str	xzr, [sp, #208]
10000c858:     	ldr	x10, [sp, #144]
10000c85c:     	ldr	x9, [x10, #16]
10000c860:     	ldr	q0, [x10]
10000c864:     	stur	q0, [x8, #24]
10000c868:     	str	x9, [x8, #40]
10000c86c:     	stp	xzr, xzr, [x10, #8]
10000c870:     	str	xzr, [x10]
10000c874:     	ldr	x10, [sp, #136]
10000c878:     	ldr	q0, [x10]
10000c87c:     	ldr	x9, [x10, #16]
10000c880:     	str	x9, [x8, #64]
10000c884:     	str	q0, [x8, #48]
10000c888:     	stp	xzr, xzr, [x10, #8]
10000c88c:     	str	xzr, [x10]
10000c890:     	ldr	x10, [sp, #128]
10000c894:     	ldr	q0, [x10]
10000c898:     	ldr	x9, [x10, #16]
10000c89c:     	str	x9, [x8, #88]
10000c8a0:     	stur	q0, [x8, #72]
10000c8a4:     	stp	xzr, xzr, [x10]
10000c8a8:     	str	xzr, [x10, #16]
10000c8ac:     	ldr	x10, [sp, #120]
10000c8b0:     	ldr	q0, [x10]
10000c8b4:     	ldr	x9, [x10, #16]
10000c8b8:     	str	x9, [x8, #112]
10000c8bc:     	str	q0, [x8, #96]
10000c8c0:     	stp	xzr, xzr, [x10]
10000c8c4:     	str	xzr, [x10, #16]
10000c8c8:     	ldr	x10, [sp, #112]
10000c8cc:     	ldr	q0, [x10]
10000c8d0:     	ldr	x9, [x10, #16]
10000c8d4:     	str	x9, [x8, #136]
10000c8d8:     	stur	q0, [x8, #120]
10000c8dc:     	stp	xzr, xzr, [x10]
10000c8e0:     	str	xzr, [x10, #16]
10000c8e4:     	ldr	x10, [sp, #104]
10000c8e8:     	ldr	q0, [x10]
10000c8ec:     	ldr	x9, [x10, #16]
10000c8f0:     	str	x9, [x8, #160]
10000c8f4:     	str	q0, [x8, #144]
10000c8f8:     	stp	xzr, xzr, [x10]
10000c8fc:     	str	xzr, [x10, #16]
10000c900:     	ldr	x10, [sp, #96]
10000c904:     	ldr	q0, [x10]
10000c908:     	ldr	x9, [x10, #16]
10000c90c:     	str	x9, [x8, #184]
10000c910:     	stur	q0, [x8, #168]
10000c914:     	stp	xzr, xzr, [x10]
10000c918:     	str	xzr, [x10, #16]
10000c91c:     	ldr	x9, [sp, #88]
10000c920:     	ldp	q0, q1, [x9]
10000c924:     	ldr	q2, [x9, #32]
10000c928:     	ldr	x9, [x9, #48]
10000c92c:     	str	x9, [x8, #240]
10000c930:     	stp	q1, q2, [x8, #208]
10000c934:     	str	q0, [x8, #192]
10000c938:     	ldr	x9, [sp, #456]
10000c93c:     	str	x9, [x8, #248]
10000c940:     	add	x9, x8, #256
10000c944:     	ldr	x10, [sp, #464]
10000c948:     	str	x10, [x8, #256]
10000c94c:     	ldr	x11, [sp, #472]
10000c950:     	str	x11, [x8, #264]
10000c954:     	cbz	x11, 0x10000ca18 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x850>
10000c958:     	str	x9, [x10, #16]
10000c95c:     	ldr	x9, [sp, #72]
10000c960:     	str	x9, [sp, #456]
10000c964:     	stp	xzr, xzr, [x9]
10000c968:     	b	0x10000ca1c <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x854>
10000c96c:     	add	x1, sp, #208
10000c970:     	bl	0x10001c068 <void std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::__push_back_slow_path<benchmark::internal::BenchmarkInstance>(benchmark::internal::BenchmarkInstance&&)>
10000c974:     	add	w25, w25, #1
10000c978:     	cmp	w26, w27
10000c97c:     	cinc	w26, w26, eq
10000c980:     	ldrsb	w8, [sp, #207]
10000c984:     	tbz	w8, #31, 0x10000c7d8 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x610>
10000c988:     	ldr	x0, [sp, #184]
10000c98c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000c990:     	ldr	x1, [sp, #464]
10000c994:     	ldr	x0, [sp, #176]
10000c998:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
10000c99c:     	ldrsb	w8, [sp, #399]
10000c9a0:     	tbz	w8, #31, 0x10000c7ec <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x624>
10000c9a4:     	ldr	x0, [sp, #376]
10000c9a8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000c9ac:     	ldrsb	w8, [sp, #375]
10000c9b0:     	tbz	w8, #31, 0x10000c7f4 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x62c>
10000c9b4:     	ldr	x0, [sp, #352]
10000c9b8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000c9bc:     	ldrsb	w8, [sp, #351]
10000c9c0:     	tbz	w8, #31, 0x10000c7fc <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x634>
10000c9c4:     	ldr	x0, [sp, #328]
10000c9c8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000c9cc:     	ldrsb	w8, [sp, #327]
10000c9d0:     	tbz	w8, #31, 0x10000c804 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x63c>
10000c9d4:     	ldr	x0, [sp, #304]
10000c9d8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000c9dc:     	ldrsb	w8, [sp, #303]
10000c9e0:     	tbz	w8, #31, 0x10000c80c <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x644>
10000c9e4:     	ldr	x0, [sp, #280]
10000c9e8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000c9ec:     	ldrsb	w8, [sp, #279]
10000c9f0:     	tbz	w8, #31, 0x10000c814 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x64c>
10000c9f4:     	ldr	x0, [sp, #256]
10000c9f8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000c9fc:     	ldrsb	w8, [sp, #255]
10000ca00:     	tbnz	w8, #31, 0x10000c57c <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x3b4>
10000ca04:     	ldrsb	w8, [sp, #231]
10000ca08:     	tbz	w8, #31, 0x10000c58c <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x3c4>
10000ca0c:     	ldr	x0, [sp, #208]
10000ca10:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000ca14:     	b	0x10000c58c <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x3c4>
10000ca18:     	str	x9, [x8, #248]
10000ca1c:     	ldr	x9, [sp, #80]
10000ca20:     	ldp	q0, q1, [x9]
10000ca24:     	ldp	q2, q3, [x9, #32]
10000ca28:     	stp	q2, q3, [x8, #304]
10000ca2c:     	stp	q0, q1, [x8, #272]
10000ca30:     	add	x8, x8, #336
10000ca34:     	ldr	x9, [sp, #168]
10000ca38:     	str	x8, [x9, #8]
10000ca3c:     	add	w25, w25, #1
10000ca40:     	cmp	w26, w27
10000ca44:     	cinc	w26, w26, eq
10000ca48:     	ldrsb	w8, [sp, #207]
10000ca4c:     	tbz	w8, #31, 0x10000c7d8 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x610>
10000ca50:     	b	0x10000c988 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x7c0>
10000ca54:     	adrp	x1, 0x100031000 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x920>
10000ca58:     	add	x1, x1, #3822
10000ca5c:     	ldr	x0, [sp, #24]
10000ca60:     	mov	w2, #32
10000ca64:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10000ca68:     	ldurb	w8, [x29, #-209]
10000ca6c:     	sxtb	w9, w8
10000ca70:     	ldp	x10, x11, [x29, #-232]
10000ca74:     	cmp	w9, #0
10000ca78:     	sub	x9, x29, #232
10000ca7c:     	csel	x1, x10, x9, lt
10000ca80:     	csel	x2, x11, x8, lt
10000ca84:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10000ca88:     	mov	x21, x0
10000ca8c:     	ldr	x8, [x0]
10000ca90:     	ldur	x8, [x8, #-24]
10000ca94:     	add	x0, x0, x8
10000ca98:     	add	x8, sp, #208
10000ca9c:     	bl	0x10002ecfc <_vsnprintf+0x10002ecfc>
10000caa0:     	adrp	x1, 0x100034000 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x978>
10000caa4:     	ldr	x1, [x1, #480]
10000caa8:     	add	x0, sp, #208
10000caac:     	bl	0x10002ecf0 <_vsnprintf+0x10002ecf0>
10000cab0:     	ldr	x8, [x0]
10000cab4:     	ldr	x8, [x8, #56]
10000cab8:     	mov	w1, #10
10000cabc:     	blr	x8
10000cac0:     	mov	x22, x0
10000cac4:     	add	x0, sp, #208
10000cac8:     	bl	0x10002ef84 <_vsnprintf+0x10002ef84>
10000cacc:     	mov	x0, x21
10000cad0:     	mov	x1, x22
10000cad4:     	bl	0x10002edd4 <_vsnprintf+0x10002edd4>
10000cad8:     	mov	x0, x21
10000cadc:     	bl	0x10002ede0 <_vsnprintf+0x10002ede0>
10000cae0:     	ldr	x21, [sp, #616]
10000cae4:     	cbnz	x21, 0x10000cb08 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x940>
10000cae8:     	b	0x10000cb18 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x950>
10000caec:     	ldr	x0, [sp, #8]
10000caf0:     	bl	0x10002ef30 <_vsnprintf+0x10002ef30>
10000caf4:     	ldr	x0, [sp, #16]
10000caf8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000cafc:     	ldr	w19, [sp, #4]
10000cb00:     	ldr	x21, [sp, #616]
10000cb04:     	cbz	x21, 0x10000cb18 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x950>
10000cb08:     	add	x8, x21, #8
10000cb0c:     	mov	x9, #-1
10000cb10:     	ldaddal	x9, x8, [x8]
10000cb14:     	cbz	x8, 0x10000cb54 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x98c>
10000cb18:     	ldr	x0, [sp, #160]
10000cb1c:     	bl	0x10002ef84 <_vsnprintf+0x10002ef84>
10000cb20:     	ldursb	w8, [x29, #-209]
10000cb24:     	tbz	w8, #31, 0x10000cb30 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x968>
10000cb28:     	ldur	x0, [x29, #-232]
10000cb2c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000cb30:     	mov	x0, x19
10000cb34:     	add	sp, sp, #784
10000cb38:     	ldp	x29, x30, [sp, #80]
10000cb3c:     	ldp	x20, x19, [sp, #64]
10000cb40:     	ldp	x22, x21, [sp, #48]
10000cb44:     	ldp	x24, x23, [sp, #32]
10000cb48:     	ldp	x26, x25, [sp, #16]
10000cb4c:     	ldp	x28, x27, [sp], #96
10000cb50:     	ret
10000cb54:     	ldr	x8, [x21]
10000cb58:     	ldr	x8, [x8, #16]
10000cb5c:     	mov	x0, x21
10000cb60:     	blr	x8
10000cb64:     	mov	x0, x21
10000cb68:     	bl	0x10002eee8 <_vsnprintf+0x10002eee8>
10000cb6c:     	ldr	x0, [sp, #160]
10000cb70:     	bl	0x10002ef84 <_vsnprintf+0x10002ef84>
10000cb74:     	ldursb	w8, [x29, #-209]
10000cb78:     	tbz	w8, #31, 0x10000cb30 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x968>
10000cb7c:     	b	0x10000cb28 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x960>
10000cb80:     	adrp	x0, 0x100038000 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0xa68>
10000cb84:     	add	x0, x0, #8
10000cb88:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10000cb8c:     	cbz	w0, 0x10000c20c <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x44>
10000cb90:     	adrp	x8, 0x100038000 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0xa78>
10000cb94:     	str	xzr, [x8]
10000cb98:     	adrp	x0, 0x100038000 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0xa80>
10000cb9c:     	add	x0, x0, #8
10000cba0:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10000cba4:     	b	0x10000c20c <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x44>
10000cba8:     	mov	x20, x0
10000cbac:     	b	0x10000cc40 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0xa78>
10000cbb0:     	b	0x10000cbe4 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0xa1c>
10000cbb4:     	mov	x20, x0
10000cbb8:     	add	x0, sp, #208
10000cbbc:     	bl	0x10002ef84 <_vsnprintf+0x10002ef84>
10000cbc0:     	b	0x10000cc48 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0xa80>
10000cbc4:     	mov	x20, x0
10000cbc8:     	b	0x10000cc78 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0xab0>
10000cbcc:     	mov	x20, x0
10000cbd0:     	ldr	x0, [sp, #208]
10000cbd4:     	cbz	x0, 0x10000cc38 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0xa70>
10000cbd8:     	str	x0, [sp, #216]
10000cbdc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000cbe0:     	b	0x10000cc38 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0xa70>
10000cbe4:     	mov	x20, x0
10000cbe8:     	b	0x10000cc48 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0xa80>
10000cbec:     	b	0x10000cc34 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0xa6c>
10000cbf0:     	b	0x10000cbfc <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0xa34>
10000cbf4:     	mov	x20, x0
10000cbf8:     	b	0x10000cc10 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0xa48>
10000cbfc:     	mov	x20, x0
10000cc00:     	ldur	x0, [x29, #-208]
10000cc04:     	cbz	x0, 0x10000cc10 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0xa48>
10000cc08:     	stur	x0, [x29, #-200]
10000cc0c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000cc10:     	ldrsb	w8, [sp, #207]
10000cc14:     	tbz	w8, #31, 0x10000cc28 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0xa60>
10000cc18:     	ldr	x0, [sp, #184]
10000cc1c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000cc20:     	b	0x10000cc28 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0xa60>
10000cc24:     	mov	x20, x0
10000cc28:     	add	x0, sp, #208
10000cc2c:     	bl	0x10000d24c <benchmark::internal::BenchmarkInstance::~BenchmarkInstance()>
10000cc30:     	b	0x10000cc38 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0xa70>
10000cc34:     	mov	x20, x0
10000cc38:     	ldr	x0, [sp, #8]
10000cc3c:     	bl	0x10002ef30 <_vsnprintf+0x10002ef30>
10000cc40:     	ldr	x0, [sp, #16]
10000cc44:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000cc48:     	ldr	x21, [sp, #616]
10000cc4c:     	cbz	x21, 0x10000cc78 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0xab0>
10000cc50:     	add	x8, x21, #8
10000cc54:     	mov	x9, #-1
10000cc58:     	ldaddal	x9, x8, [x8]
10000cc5c:     	cbnz	x8, 0x10000cc78 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0xab0>
10000cc60:     	ldr	x8, [x21]
10000cc64:     	ldr	x8, [x8, #16]
10000cc68:     	mov	x0, x21
10000cc6c:     	blr	x8
10000cc70:     	mov	x0, x21
10000cc74:     	bl	0x10002eee8 <_vsnprintf+0x10002eee8>
10000cc78:     	ldr	x0, [sp, #160]
10000cc7c:     	bl	0x10002ef84 <_vsnprintf+0x10002ef84>
10000cc80:     	ldursb	w8, [x29, #-209]
10000cc84:     	tbz	w8, #31, 0x10000cc90 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0xac8>
10000cc88:     	ldur	x0, [x29, #-232]
10000cc8c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000cc90:     	mov	x0, x20
10000cc94:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010000cc98 <benchmark::Regex::Init(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)>:
10000cc98:     	sub	sp, sp, #128
10000cc9c:     	stp	x24, x23, [sp, #64]
10000cca0:     	stp	x22, x21, [sp, #80]
10000cca4:     	stp	x20, x19, [sp, #96]
10000cca8:     	stp	x29, x30, [sp, #112]
10000ccac:     	add	x29, sp, #112
10000ccb0:     	mov	x20, x2
10000ccb4:     	mov	x22, x1
10000ccb8:     	mov	x19, x0
10000ccbc:     	mov	x23, sp
10000ccc0:     	mov	x0, sp
10000ccc4:     	bl	0x10002ef78 <_vsnprintf+0x10002ef78>
10000ccc8:     	adrp	x1, 0x100034000 <benchmark::Regex::Init(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0xd0>
10000cccc:     	ldr	x1, [x1, #480]
10000ccd0:     	mov	x0, sp
10000ccd4:     	bl	0x10002ecf0 <_vsnprintf+0x10002ecf0>
10000ccd8:     	str	x0, [sp, #8]
10000ccdc:     	adrp	x1, 0x100034000 <benchmark::Regex::Init(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0xe4>
10000cce0:     	ldr	x1, [x1, #584]
10000cce4:     	mov	x0, sp
10000cce8:     	bl	0x10002ecf0 <_vsnprintf+0x10002ecf0>
10000ccec:     	str	x0, [sp, #16]
10000ccf0:     	mov	x24, sp
10000ccf4:     	mov	w8, #32
10000ccf8:     	str	w8, [sp, #24]
10000ccfc:     	add	x21, x24, #40
10000cd00:     	movi.2d	v0, #0000000000000000
10000cd04:     	stur	q0, [sp, #28]
10000cd08:     	stur	q0, [sp, #44]
10000cd0c:     	str	wzr, [sp, #60]
10000cd10:     	ldrb	w8, [x22, #23]
10000cd14:     	sxtb	w9, w8
10000cd18:     	ldp	x10, x11, [x22]
10000cd1c:     	cmp	w9, #0
10000cd20:     	csel	x1, x10, x22, lt
10000cd24:     	csel	x8, x11, x8, lt
10000cd28:     	add	x22, x1, x8
10000cd2c:     	mov	x0, sp
10000cd30:     	mov	x2, x22
10000cd34:     	bl	0x10001081c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>
10000cd38:     	cmp	x22, x0
10000cd3c:     	b.ne	0x10000cdf8 <benchmark::Regex::Init(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x160>
10000cd40:     	add	x20, x23, #8
10000cd44:     	add	x22, x24, #24
10000cd48:     	add	x0, x19, #8
10000cd4c:     	mov	x1, sp
10000cd50:     	bl	0x10002ef90 <_vsnprintf+0x10002ef90>
10000cd54:     	ldr	q0, [x20]
10000cd58:     	ldr	q1, [x22]
10000cd5c:     	stp	q0, q1, [x19, #16]
10000cd60:     	ldp	x8, x9, [sp, #40]
10000cd64:     	stp	xzr, xzr, [x21]
10000cd68:     	ldr	x20, [x19, #56]
10000cd6c:     	stp	x8, x9, [x19, #48]
10000cd70:     	cbz	x20, 0x10000cd9c <benchmark::Regex::Init(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x104>
10000cd74:     	add	x8, x20, #8
10000cd78:     	mov	x9, #-1
10000cd7c:     	ldaddal	x9, x8, [x8]
10000cd80:     	cbnz	x8, 0x10000cd9c <benchmark::Regex::Init(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x104>
10000cd84:     	ldr	x8, [x20]
10000cd88:     	ldr	x8, [x8, #16]
10000cd8c:     	mov	x0, x20
10000cd90:     	blr	x8
10000cd94:     	mov	x0, x20
10000cd98:     	bl	0x10002eee8 <_vsnprintf+0x10002eee8>
10000cd9c:     	ldp	x20, x8, [sp, #48]
10000cda0:     	str	x8, [x19, #64]
10000cda4:     	cbz	x20, 0x10000cdd0 <benchmark::Regex::Init(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x138>
10000cda8:     	add	x8, x20, #8
10000cdac:     	mov	x9, #-1
10000cdb0:     	ldaddal	x9, x8, [x8]
10000cdb4:     	cbnz	x8, 0x10000cdd0 <benchmark::Regex::Init(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x138>
10000cdb8:     	ldr	x8, [x20]
10000cdbc:     	ldr	x8, [x8, #16]
10000cdc0:     	mov	x0, x20
10000cdc4:     	blr	x8
10000cdc8:     	mov	x0, x20
10000cdcc:     	bl	0x10002eee8 <_vsnprintf+0x10002eee8>
10000cdd0:     	mov	x0, sp
10000cdd4:     	bl	0x10002ef84 <_vsnprintf+0x10002ef84>
10000cdd8:     	mov	w0, #1
10000cddc:     	strb	w0, [x19]
10000cde0:     	ldp	x29, x30, [sp, #112]
10000cde4:     	ldp	x20, x19, [sp, #96]
10000cde8:     	ldp	x22, x21, [sp, #80]
10000cdec:     	ldp	x24, x23, [sp, #64]
10000cdf0:     	add	sp, sp, #128
10000cdf4:     	ret
10000cdf8:     	bl	0x100010a04 <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)17>()>
10000cdfc:     	brk	#0x1
10000ce00:     	mov	x23, x1
10000ce04:     	mov	x22, x0
10000ce08:     	mov	x0, x21
10000ce0c:     	bl	0x1000107bc <std::__1::shared_ptr<std::__1::__empty_state<char>>::~shared_ptr[abi:ue170006]()>
10000ce10:     	b	0x10000ce1c <benchmark::Regex::Init(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x184>
10000ce14:     	mov	x23, x1
10000ce18:     	mov	x22, x0
10000ce1c:     	mov	x0, sp
10000ce20:     	bl	0x10002ef84 <_vsnprintf+0x10002ef84>
10000ce24:     	cmp	w23, #1
10000ce28:     	b.ne	0x10000ce80 <benchmark::Regex::Init(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x1e8>
10000ce2c:     	mov	x0, x22
10000ce30:     	bl	0x10002f050 <_vsnprintf+0x10002f050>
10000ce34:     	cbz	x20, 0x10000ce50 <benchmark::Regex::Init(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x1b8>
10000ce38:     	ldr	x8, [x0]
10000ce3c:     	ldr	x8, [x8, #16]
10000ce40:     	blr	x8
10000ce44:     	mov	x1, x0
10000ce48:     	mov	x0, x20
10000ce4c:     	bl	0x10002ed44 <_vsnprintf+0x10002ed44>
10000ce50:     	bl	0x10002f05c <_vsnprintf+0x10002f05c>
10000ce54:     	ldrb	w8, [x19]
10000ce58:     	cmp	w8, #0
10000ce5c:     	cset	w0, ne
10000ce60:     	ldp	x29, x30, [sp, #112]
10000ce64:     	ldp	x20, x19, [sp, #96]
10000ce68:     	ldp	x22, x21, [sp, #80]
10000ce6c:     	ldp	x24, x23, [sp, #64]
10000ce70:     	add	sp, sp, #128
10000ce74:     	ret
10000ce78:     	mov	x22, x0
10000ce7c:     	bl	0x10002f05c <_vsnprintf+0x10002f05c>
10000ce80:     	mov	x0, x22
10000ce84:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
10000ce88:     	bl	0x100006a3c <___clang_call_terminate>

000000010000ce8c <benchmark::internal::Benchmark::ArgsCnt() const>:
10000ce8c:     	ldp	x8, x9, [x0, #64]
10000ce90:     	cmp	x8, x9
10000ce94:     	b.eq	0x10000cea8 <benchmark::internal::Benchmark::ArgsCnt() const+0x1c>
10000ce98:     	ldp	x8, x9, [x8]
10000ce9c:     	sub	x8, x9, x8
10000cea0:     	lsr	x0, x8, #3
10000cea4:     	ret
10000cea8:     	ldp	x8, x9, [x0, #40]
10000ceac:     	mov	w10, #-1
10000ceb0:     	sub	x11, x9, x8
10000ceb4:     	lsr	x11, x11, #3
10000ceb8:     	mov	w12, #43691
10000cebc:     	movk	w12, #43690, lsl #16
10000cec0:     	mul	w11, w11, w12
10000cec4:     	cmp	x8, x9
10000cec8:     	csel	w0, w10, w11, eq
10000cecc:     	ret

000000010000ced0 <benchmark::internal::Benchmark::Args(std::__1::vector<long long, std::__1::allocator<long long>> const&)>:
10000ced0:     	stp	x24, x23, [sp, #-64]!
10000ced4:     	stp	x22, x21, [sp, #16]
10000ced8:     	stp	x20, x19, [sp, #32]
10000cedc:     	stp	x29, x30, [sp, #48]
10000cee0:     	add	x29, sp, #48
10000cee4:     	mov	x19, x0
10000cee8:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::Args(std::__1::vector<long long, std::__1::allocator<long long>> const&)+0xc8>
10000ceec:     	add	x8, x8, #8
10000cef0:     	ldaprb	w8, [x8]
10000cef4:     	tbz	w8, #0, 0x10000cf84 <benchmark::internal::Benchmark::Args(std::__1::vector<long long, std::__1::allocator<long long>> const&)+0xb4>
10000cef8:     	ldp	x20, x8, [x19, #72]
10000cefc:     	cmp	x20, x8
10000cf00:     	b.eq	0x10000cf64 <benchmark::internal::Benchmark::Args(std::__1::vector<long long, std::__1::allocator<long long>> const&)+0x94>
10000cf04:     	stp	xzr, xzr, [x20, #8]
10000cf08:     	str	xzr, [x20]
10000cf0c:     	ldp	x21, x8, [x1]
10000cf10:     	subs	x22, x8, x21
10000cf14:     	b.eq	0x10000cf44 <benchmark::internal::Benchmark::Args(std::__1::vector<long long, std::__1::allocator<long long>> const&)+0x74>
10000cf18:     	tbnz	x22, #63, 0x10000cfb8 <benchmark::internal::Benchmark::Args(std::__1::vector<long long, std::__1::allocator<long long>> const&)+0xe8>
10000cf1c:     	mov	x0, x22
10000cf20:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000cf24:     	asr	x8, x22, #3
10000cf28:     	stp	x0, x0, [x20]
10000cf2c:     	add	x23, x0, x8, lsl #3
10000cf30:     	str	x23, [x20, #16]
10000cf34:     	mov	x1, x21
10000cf38:     	mov	x2, x22
10000cf3c:     	bl	0x10002f1c4 <_vsnprintf+0x10002f1c4>
10000cf40:     	str	x23, [x20, #8]
10000cf44:     	add	x8, x20, #24
10000cf48:     	str	x8, [x19, #72]
10000cf4c:     	mov	x0, x19
10000cf50:     	ldp	x29, x30, [sp, #48]
10000cf54:     	ldp	x20, x19, [sp, #32]
10000cf58:     	ldp	x22, x21, [sp, #16]
10000cf5c:     	ldp	x24, x23, [sp], #64
10000cf60:     	ret
10000cf64:     	add	x0, x19, #64
10000cf68:     	bl	0x10001cb50 <void std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__push_back_slow_path<std::__1::vector<long long, std::__1::allocator<long long>> const&>(std::__1::vector<long long, std::__1::allocator<long long>> const&)>
10000cf6c:     	mov	x0, x19
10000cf70:     	ldp	x29, x30, [sp, #48]
10000cf74:     	ldp	x20, x19, [sp, #32]
10000cf78:     	ldp	x22, x21, [sp, #16]
10000cf7c:     	ldp	x24, x23, [sp], #64
10000cf80:     	ret
10000cf84:     	adrp	x0, 0x100038000 <std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::reserve(unsigned long)+0x50>
10000cf88:     	add	x0, x0, #8
10000cf8c:     	mov	x20, x1
10000cf90:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10000cf94:     	mov	x1, x20
10000cf98:     	cbz	w0, 0x10000cef8 <benchmark::internal::Benchmark::Args(std::__1::vector<long long, std::__1::allocator<long long>> const&)+0x28>
10000cf9c:     	adrp	x8, 0x100038000 <std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::reserve(unsigned long)+0x68>
10000cfa0:     	str	xzr, [x8]
10000cfa4:     	adrp	x0, 0x100038000 <std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::reserve(unsigned long)+0x70>
10000cfa8:     	add	x0, x0, #8
10000cfac:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10000cfb0:     	mov	x1, x20
10000cfb4:     	b	0x10000cef8 <benchmark::internal::Benchmark::Args(std::__1::vector<long long, std::__1::allocator<long long>> const&)+0x28>
10000cfb8:     	mov	x0, x20
10000cfbc:     	bl	0x10000a2cc <std::__1::vector<long long, std::__1::allocator<long long>>::__throw_length_error[abi:ue170006]() const>
10000cfc0:     	brk	#0x1
10000cfc4:     	mov	x21, x0
10000cfc8:     	ldr	x0, [x20]
10000cfcc:     	cbz	x0, 0x10000cfd8 <benchmark::internal::Benchmark::Args(std::__1::vector<long long, std::__1::allocator<long long>> const&)+0x108>
10000cfd0:     	str	x0, [x20, #8]
10000cfd4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000cfd8:     	str	x20, [x19, #72]
10000cfdc:     	mov	x0, x21
10000cfe0:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010000cfe4 <std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::reserve(unsigned long)>:
10000cfe4:     	stp	x22, x21, [sp, #-48]!
10000cfe8:     	stp	x20, x19, [sp, #16]
10000cfec:     	stp	x29, x30, [sp, #32]
10000cff0:     	add	x29, sp, #32
10000cff4:     	ldr	x8, [x0, #16]
10000cff8:     	ldr	x19, [x0]
10000cffc:     	sub	x8, x8, x19
10000d000:     	asr	x8, x8, #4
10000d004:     	mov	x9, #53053
10000d008:     	movk	x9, #15603, lsl #16
10000d00c:     	movk	x9, #62415, lsl #32
10000d010:     	movk	x9, #53052, lsl #48
10000d014:     	mul	x8, x8, x9
10000d018:     	cmp	x8, x1
10000d01c:     	b.hs	0x10000d234 <std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::reserve(unsigned long)+0x250>
10000d020:     	mov	x20, x0
10000d024:     	mov	x8, #12484
10000d028:     	movk	x8, #49932, lsl #16
10000d02c:     	movk	x8, #3120, lsl #32
10000d030:     	movk	x8, #195, lsl #48
10000d034:     	cmp	x1, x8
10000d038:     	b.hs	0x10000d244 <std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::reserve(unsigned long)+0x260>
10000d03c:     	ldr	x22, [x20, #8]
10000d040:     	mov	w8, #336
10000d044:     	mul	x21, x1, x8
10000d048:     	mov	x0, x21
10000d04c:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000d050:     	subs	x8, x22, x19
10000d054:     	add	x8, x0, x8
10000d058:     	add	x9, x0, x21
10000d05c:     	b.eq	0x10000d20c <std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::reserve(unsigned long)+0x228>
10000d060:     	mov	x10, #0
10000d064:     	b	0x10000d09c <std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::reserve(unsigned long)+0xb8>
10000d068:     	str	x14, [x15, #16]
10000d06c:     	stur	x13, [x11, #-88]
10000d070:     	stp	xzr, xzr, [x13]
10000d074:     	add	x11, x8, x10
10000d078:     	add	x12, x22, x10
10000d07c:     	ldp	q0, q1, [x12, #-64]
10000d080:     	ldp	q2, q3, [x12, #-32]
10000d084:     	stp	q2, q3, [x11, #-32]
10000d088:     	stp	q0, q1, [x11, #-64]
10000d08c:     	sub	x10, x10, #336
10000d090:     	add	x11, x22, x10
10000d094:     	cmp	x11, x19
10000d098:     	b.eq	0x10000d1c8 <std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::reserve(unsigned long)+0x1e4>
10000d09c:     	add	x12, x8, x10
10000d0a0:     	sub	x13, x12, #336
10000d0a4:     	add	x11, x22, x10
10000d0a8:     	sub	x14, x11, #336
10000d0ac:     	ldr	q0, [x14]
10000d0b0:     	ldr	x15, [x14, #16]
10000d0b4:     	str	x15, [x13, #16]
10000d0b8:     	str	q0, [x13]
10000d0bc:     	stp	xzr, xzr, [x14, #8]
10000d0c0:     	str	xzr, [x14]
10000d0c4:     	sub	x13, x12, #312
10000d0c8:     	sub	x14, x11, #312
10000d0cc:     	ldr	q0, [x14]
10000d0d0:     	ldr	x15, [x14, #16]
10000d0d4:     	str	x15, [x13, #16]
10000d0d8:     	str	q0, [x13]
10000d0dc:     	stp	xzr, xzr, [x14, #8]
10000d0e0:     	str	xzr, [x14]
10000d0e4:     	sub	x13, x12, #288
10000d0e8:     	sub	x14, x11, #288
10000d0ec:     	ldr	q0, [x14]
10000d0f0:     	ldr	x15, [x14, #16]
10000d0f4:     	str	x15, [x13, #16]
10000d0f8:     	str	q0, [x13]
10000d0fc:     	stp	xzr, xzr, [x14, #8]
10000d100:     	str	xzr, [x14]
10000d104:     	sub	x13, x12, #264
10000d108:     	sub	x14, x11, #264
10000d10c:     	ldr	q0, [x14]
10000d110:     	ldur	x15, [x11, #-248]
10000d114:     	stur	x15, [x12, #-248]
10000d118:     	str	q0, [x13]
10000d11c:     	str	xzr, [x14]
10000d120:     	stp	xzr, xzr, [x11, #-256]
10000d124:     	ldur	q0, [x11, #-240]
10000d128:     	ldur	x13, [x11, #-224]
10000d12c:     	stur	x13, [x12, #-224]
10000d130:     	stur	q0, [x12, #-240]
10000d134:     	stp	xzr, xzr, [x11, #-240]
10000d138:     	stur	xzr, [x11, #-224]
10000d13c:     	ldur	q0, [x11, #-216]
10000d140:     	ldur	x13, [x11, #-200]
10000d144:     	stur	x13, [x12, #-200]
10000d148:     	stur	q0, [x12, #-216]
10000d14c:     	stp	xzr, xzr, [x11, #-216]
10000d150:     	stur	xzr, [x11, #-200]
10000d154:     	ldur	q0, [x11, #-192]
10000d158:     	ldur	x13, [x11, #-176]
10000d15c:     	stur	x13, [x12, #-176]
10000d160:     	stur	q0, [x12, #-192]
10000d164:     	stp	xzr, xzr, [x11, #-192]
10000d168:     	stur	xzr, [x11, #-176]
10000d16c:     	ldur	q0, [x11, #-168]
10000d170:     	ldur	x13, [x11, #-152]
10000d174:     	stur	x13, [x12, #-152]
10000d178:     	stur	q0, [x12, #-168]
10000d17c:     	stp	xzr, xzr, [x11, #-168]
10000d180:     	stur	xzr, [x11, #-152]
10000d184:     	ldp	q0, q1, [x11, #-144]
10000d188:     	ldur	q2, [x11, #-112]
10000d18c:     	ldur	x13, [x11, #-96]
10000d190:     	stur	x13, [x12, #-96]
10000d194:     	stp	q1, q2, [x12, #-128]
10000d198:     	stur	q0, [x12, #-144]
10000d19c:     	ldur	x13, [x11, #-88]
10000d1a0:     	stur	x13, [x12, #-88]
10000d1a4:     	mov	x13, x11
10000d1a8:     	ldr	x15, [x13, #-80]!
10000d1ac:     	mov	x14, x12
10000d1b0:     	str	x15, [x14, #-80]!
10000d1b4:     	ldur	x16, [x11, #-72]
10000d1b8:     	stur	x16, [x12, #-72]
10000d1bc:     	cbnz	x16, 0x10000d068 <std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::reserve(unsigned long)+0x84>
10000d1c0:     	stur	x14, [x12, #-88]
10000d1c4:     	b	0x10000d074 <std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::reserve(unsigned long)+0x90>
10000d1c8:     	add	x11, x8, x10
10000d1cc:     	ldp	x19, x10, [x20]
10000d1d0:     	stp	x11, x8, [x20]
10000d1d4:     	str	x9, [x20, #16]
10000d1d8:     	cmp	x10, x19
10000d1dc:     	b.eq	0x10000d22c <std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::reserve(unsigned long)+0x248>
10000d1e0:     	sub	x20, x10, #88
10000d1e4:     	sub	x21, x20, #248
10000d1e8:     	ldr	x1, [x20, #8]
10000d1ec:     	mov	x0, x20
10000d1f0:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
10000d1f4:     	mov	x0, x21
10000d1f8:     	bl	0x1000090c8 <benchmark::BenchmarkName::~BenchmarkName()>
10000d1fc:     	sub	x20, x20, #336
10000d200:     	cmp	x21, x19
10000d204:     	b.ne	0x10000d1e4 <std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::reserve(unsigned long)+0x200>
10000d208:     	b	0x10000d214 <std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::reserve(unsigned long)+0x230>
10000d20c:     	stp	x8, x8, [x20]
10000d210:     	str	x9, [x20, #16]
10000d214:     	cbz	x19, 0x10000d234 <std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::reserve(unsigned long)+0x250>
10000d218:     	mov	x0, x19
10000d21c:     	ldp	x29, x30, [sp, #32]
10000d220:     	ldp	x20, x19, [sp, #16]
10000d224:     	ldp	x22, x21, [sp], #48
10000d228:     	b	0x10002f014 <_vsnprintf+0x10002f014>
10000d22c:     	mov	x19, x10
10000d230:     	cbnz	x10, 0x10000d218 <std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::reserve(unsigned long)+0x234>
10000d234:     	ldp	x29, x30, [sp, #32]
10000d238:     	ldp	x20, x19, [sp, #16]
10000d23c:     	ldp	x22, x21, [sp], #48
10000d240:     	ret
10000d244:     	mov	x0, x20
10000d248:     	bl	0x10001c054 <std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::__throw_length_error[abi:ue170006]() const>

000000010000d24c <benchmark::internal::BenchmarkInstance::~BenchmarkInstance()>:
10000d24c:     	stp	x20, x19, [sp, #-32]!
10000d250:     	stp	x29, x30, [sp, #16]
10000d254:     	add	x29, sp, #16
10000d258:     	mov	x19, x0
10000d25c:     	add	x0, x0, #248
10000d260:     	ldr	x1, [x19, #256]
10000d264:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
10000d268:     	mov	x0, x19
10000d26c:     	ldp	x29, x30, [sp, #16]
10000d270:     	ldp	x20, x19, [sp], #32
10000d274:     	b	0x1000090c8 <benchmark::BenchmarkName::~BenchmarkName()>

000000010000d278 <benchmark::internal::RegisterBenchmarkInternal(benchmark::internal::Benchmark*)>:
10000d278:     	sub	sp, sp, #48
10000d27c:     	stp	x20, x19, [sp, #16]
10000d280:     	stp	x29, x30, [sp, #32]
10000d284:     	add	x29, sp, #32
10000d288:     	mov	x19, x0
10000d28c:     	adrp	x8, 0x100038000 <benchmark::internal::RegisterBenchmarkInternal(benchmark::internal::Benchmark*)+0xc0>
10000d290:     	add	x8, x8, #88
10000d294:     	ldaprb	w8, [x8]
10000d298:     	tbz	w8, #0, 0x10000d31c <benchmark::internal::RegisterBenchmarkInternal(benchmark::internal::Benchmark*)+0xa4>
10000d29c:     	str	x19, [sp, #8]
10000d2a0:     	adrp	x0, 0x100038000 <benchmark::internal::RegisterBenchmarkInternal(benchmark::internal::Benchmark*)+0xd4>
10000d2a4:     	add	x0, x0, #120
10000d2a8:     	bl	0x10002ef24 <_vsnprintf+0x10002ef24>
10000d2ac:     	adrp	x9, 0x100038000 <benchmark::internal::RegisterBenchmarkInternal(benchmark::internal::Benchmark*)+0xe0>
10000d2b0:     	add	x9, x9, #104
10000d2b4:     	ldp	x8, x9, [x9]
10000d2b8:     	cmp	x8, x9
10000d2bc:     	b.hs	0x10000d2d4 <benchmark::internal::RegisterBenchmarkInternal(benchmark::internal::Benchmark*)+0x5c>
10000d2c0:     	str	xzr, [sp, #8]
10000d2c4:     	str	x19, [x8], #8
10000d2c8:     	adrp	x9, 0x100038000 <benchmark::internal::RegisterBenchmarkInternal(benchmark::internal::Benchmark*)+0xfc>
10000d2cc:     	str	x8, [x9, #104]
10000d2d0:     	b	0x10000d2e4 <benchmark::internal::RegisterBenchmarkInternal(benchmark::internal::Benchmark*)+0x6c>
10000d2d4:     	adrp	x0, 0x100038000 <benchmark::internal::RegisterBenchmarkInternal(benchmark::internal::Benchmark*)+0x108>
10000d2d8:     	add	x0, x0, #96
10000d2dc:     	add	x1, sp, #8
10000d2e0:     	bl	0x10001bf04 <void std::__1::vector<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>, std::__1::allocator<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>>::__push_back_slow_path<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>(std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>&&)>
10000d2e4:     	adrp	x0, 0x100038000 <benchmark::internal::RegisterBenchmarkInternal(benchmark::internal::Benchmark*)+0x118>
10000d2e8:     	add	x0, x0, #120
10000d2ec:     	bl	0x10002ef30 <_vsnprintf+0x10002ef30>
10000d2f0:     	ldr	x0, [sp, #8]
10000d2f4:     	str	xzr, [sp, #8]
10000d2f8:     	cbz	x0, 0x10000d308 <benchmark::internal::RegisterBenchmarkInternal(benchmark::internal::Benchmark*)+0x90>
10000d2fc:     	ldr	x8, [x0]
10000d300:     	ldr	x8, [x8, #8]
10000d304:     	blr	x8
10000d308:     	mov	x0, x19
10000d30c:     	ldp	x29, x30, [sp, #32]
10000d310:     	ldp	x20, x19, [sp, #16]
10000d314:     	add	sp, sp, #48
10000d318:     	ret
10000d31c:     	adrp	x20, 0x100038000 <benchmark::internal::FindBenchmarksInternal(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x10>
10000d320:     	add	x20, x20, #88
10000d324:     	mov	x0, x20
10000d328:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10000d32c:     	cbz	w0, 0x10000d29c <benchmark::internal::RegisterBenchmarkInternal(benchmark::internal::Benchmark*)+0x24>
10000d330:     	stp	xzr, xzr, [x20, #16]
10000d334:     	mov	x1, x20
10000d338:     	str	xzr, [x1, #8]!
10000d33c:     	mov	w8, #43943
10000d340:     	movk	w8, #12970, lsl #16
10000d344:     	str	x8, [x20, #32]
10000d348:     	movi.2d	v0, #0000000000000000
10000d34c:     	stur	q0, [x20, #40]
10000d350:     	stur	q0, [x20, #56]
10000d354:     	stur	q0, [x20, #72]
10000d358:     	str	xzr, [x20, #88]
10000d35c:     	adrp	x0, 0x10000b000 <benchmark::internal::RegisterBenchmarkInternal(benchmark::internal::Benchmark*)+0xdc>
10000d360:     	add	x0, x0, #3936
10000d364:     	adrp	x2, 0x100000000 <benchmark::internal::RegisterBenchmarkInternal(benchmark::internal::Benchmark*)+0xb8>
10000d368:     	add	x2, x2, #0
10000d36c:     	bl	0x10002f044 <_vsnprintf+0x10002f044>
10000d370:     	mov	x0, x20
10000d374:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10000d378:     	b	0x10000d29c <benchmark::internal::RegisterBenchmarkInternal(benchmark::internal::Benchmark*)+0x24>
10000d37c:     	mov	x20, x0
10000d380:     	adrp	x0, 0x100038000 <benchmark::internal::FindBenchmarksInternal(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x74>
10000d384:     	add	x0, x0, #120
10000d388:     	bl	0x10002ef30 <_vsnprintf+0x10002ef30>
10000d38c:     	ldr	x19, [sp, #8]
10000d390:     	b	0x10000d398 <benchmark::internal::RegisterBenchmarkInternal(benchmark::internal::Benchmark*)+0x120>
10000d394:     	mov	x20, x0
10000d398:     	str	xzr, [sp, #8]
10000d39c:     	cbz	x19, 0x10000d3b0 <benchmark::internal::RegisterBenchmarkInternal(benchmark::internal::Benchmark*)+0x138>
10000d3a0:     	ldr	x8, [x19]
10000d3a4:     	ldr	x8, [x8, #8]
10000d3a8:     	mov	x0, x19
10000d3ac:     	blr	x8
10000d3b0:     	mov	x0, x20
10000d3b4:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010000d3b8 <benchmark::internal::FindBenchmarksInternal(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)>:
10000d3b8:     	sub	sp, sp, #96
10000d3bc:     	stp	x24, x23, [sp, #32]
10000d3c0:     	stp	x22, x21, [sp, #48]
10000d3c4:     	stp	x20, x19, [sp, #64]
10000d3c8:     	stp	x29, x30, [sp, #80]
10000d3cc:     	add	x29, sp, #80
10000d3d0:     	mov	x19, x2
10000d3d4:     	mov	x20, x1
10000d3d8:     	adrp	x8, 0x100038000 <benchmark::internal::FindBenchmarksInternal(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0xcc>
10000d3dc:     	add	x8, x8, #88
10000d3e0:     	ldaprb	w8, [x8]
10000d3e4:     	tbz	w8, #0, 0x10000d498 <benchmark::internal::FindBenchmarksInternal(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0xe0>
10000d3e8:     	ldrsb	w8, [x0, #23]
10000d3ec:     	tbnz	w8, #31, 0x10000d404 <benchmark::internal::FindBenchmarksInternal(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x4c>
10000d3f0:     	ldr	q0, [x0]
10000d3f4:     	str	q0, [sp]
10000d3f8:     	ldr	x8, [x0, #16]
10000d3fc:     	str	x8, [sp, #16]
10000d400:     	b	0x10000d450 <benchmark::internal::FindBenchmarksInternal(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x98>
10000d404:     	ldp	x21, x23, [x0]
10000d408:     	cmp	x23, #22
10000d40c:     	b.hi	0x10000d41c <benchmark::internal::FindBenchmarksInternal(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x64>
10000d410:     	strb	w23, [sp, #23]
10000d414:     	mov	x0, sp
10000d418:     	b	0x10000d444 <benchmark::internal::FindBenchmarksInternal(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x8c>
10000d41c:     	mov	x8, #9223372036854775792
10000d420:     	cmp	x23, x8
10000d424:     	b.hs	0x10000d508 <benchmark::internal::FindBenchmarksInternal(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x150>
10000d428:     	orr	x8, x23, #0xf
10000d42c:     	add	x22, x8, #1
10000d430:     	mov	x0, x22
10000d434:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000d438:     	orr	x8, x22, #0x8000000000000000
10000d43c:     	stp	x23, x8, [sp, #8]
10000d440:     	str	x0, [sp]
10000d444:     	add	x2, x23, #1
10000d448:     	mov	x1, x21
10000d44c:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
10000d450:     	adrp	x0, 0x100038000 <benchmark::internal::FindBenchmarksInternal(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x144>
10000d454:     	add	x0, x0, #96
10000d458:     	mov	x1, sp
10000d45c:     	mov	x2, x20
10000d460:     	mov	x3, x19
10000d464:     	bl	0x10000c1c8 <benchmark::internal::BenchmarkFamilies::FindBenchmarks(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)>
10000d468:     	mov	x19, x0
10000d46c:     	ldrsb	w8, [sp, #23]
10000d470:     	tbz	w8, #31, 0x10000d47c <benchmark::internal::FindBenchmarksInternal(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0xc4>
10000d474:     	ldr	x0, [sp]
10000d478:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000d47c:     	mov	x0, x19
10000d480:     	ldp	x29, x30, [sp, #80]
10000d484:     	ldp	x20, x19, [sp, #64]
10000d488:     	ldp	x22, x21, [sp, #48]
10000d48c:     	ldp	x24, x23, [sp, #32]
10000d490:     	add	sp, sp, #96
10000d494:     	ret
10000d498:     	adrp	x21, 0x100038000 <benchmark::internal::Benchmark::Benchmark(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x18>
10000d49c:     	add	x21, x21, #88
10000d4a0:     	mov	x22, x0
10000d4a4:     	mov	x0, x21
10000d4a8:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10000d4ac:     	mov	x8, x0
10000d4b0:     	mov	x0, x22
10000d4b4:     	cbz	w8, 0x10000d3e8 <benchmark::internal::FindBenchmarksInternal(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x30>
10000d4b8:     	stp	xzr, xzr, [x21, #16]
10000d4bc:     	mov	x1, x21
10000d4c0:     	str	xzr, [x1, #8]!
10000d4c4:     	mov	w8, #43943
10000d4c8:     	movk	w8, #12970, lsl #16
10000d4cc:     	str	x8, [x21, #32]
10000d4d0:     	movi.2d	v0, #0000000000000000
10000d4d4:     	stur	q0, [x21, #40]
10000d4d8:     	stur	q0, [x21, #56]
10000d4dc:     	stur	q0, [x21, #72]
10000d4e0:     	str	xzr, [x21, #88]
10000d4e4:     	adrp	x0, 0x10000b000 <benchmark::internal::FindBenchmarksInternal(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x124>
10000d4e8:     	add	x0, x0, #3936
10000d4ec:     	adrp	x2, 0x100000000 <benchmark::internal::FindBenchmarksInternal(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x100>
10000d4f0:     	add	x2, x2, #0
10000d4f4:     	bl	0x10002f044 <_vsnprintf+0x10002f044>
10000d4f8:     	mov	x0, x21
10000d4fc:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10000d500:     	mov	x0, x22
10000d504:     	b	0x10000d3e8 <benchmark::internal::FindBenchmarksInternal(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x30>
10000d508:     	mov	x0, sp
10000d50c:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
10000d510:     	mov	x19, x0
10000d514:     	ldrsb	w8, [sp, #23]
10000d518:     	tbz	w8, #31, 0x10000d524 <benchmark::internal::FindBenchmarksInternal(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>*, std::__1::basic_ostream<char, std::__1::char_traits<char>>*)+0x16c>
10000d51c:     	ldr	x0, [sp]
10000d520:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000d524:     	mov	x0, x19
10000d528:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010000d52c <benchmark::internal::Benchmark::Benchmark(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>:
10000d52c:     	sub	sp, sp, #112
10000d530:     	stp	x24, x23, [sp, #48]
10000d534:     	stp	x22, x21, [sp, #64]
10000d538:     	stp	x20, x19, [sp, #80]
10000d53c:     	stp	x29, x30, [sp, #96]
10000d540:     	add	x29, sp, #96
10000d544:     	mov	x19, x0
10000d548:     	adrp	x8, 0x100034000 <benchmark::internal::Benchmark::Benchmark(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xb8>
10000d54c:     	add	x8, x8, #1288
10000d550:     	mov	x20, x0
10000d554:     	str	x8, [x20], #8
10000d558:     	ldrsb	w8, [x1, #23]
10000d55c:     	tbnz	w8, #31, 0x10000d574 <benchmark::internal::Benchmark::Benchmark(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x48>
10000d560:     	ldr	q0, [x1]
10000d564:     	ldr	x8, [x1, #16]
10000d568:     	str	x8, [x20, #16]
10000d56c:     	str	q0, [x20]
10000d570:     	b	0x10000d5c0 <benchmark::internal::Benchmark::Benchmark(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x94>
10000d574:     	ldp	x21, x23, [x1]
10000d578:     	cmp	x23, #22
10000d57c:     	b.hi	0x10000d58c <benchmark::internal::Benchmark::Benchmark(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x60>
10000d580:     	strb	w23, [x19, #31]
10000d584:     	mov	x0, x20
10000d588:     	b	0x10000d5b4 <benchmark::internal::Benchmark::Benchmark(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x88>
10000d58c:     	mov	x8, #9223372036854775792
10000d590:     	cmp	x23, x8
10000d594:     	b.hs	0x10000d7f0 <benchmark::internal::Benchmark::Benchmark(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x2c4>
10000d598:     	orr	x8, x23, #0xf
10000d59c:     	add	x22, x8, #1
10000d5a0:     	mov	x0, x22
10000d5a4:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000d5a8:     	orr	x8, x22, #0x8000000000000000
10000d5ac:     	stp	x23, x8, [x19, #16]
10000d5b0:     	str	x0, [x19, #8]
10000d5b4:     	add	x2, x23, #1
10000d5b8:     	mov	x1, x21
10000d5bc:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
10000d5c0:     	movi.2d	v0, #0000000000000000
10000d5c4:     	mov	x21, x19
10000d5c8:     	str	q0, [x21, #40]!
10000d5cc:     	stur	wzr, [x21, #-8]
10000d5d0:     	stp	q0, q0, [x21, #16]
10000d5d4:     	bl	0x100005e00 <benchmark::GetDefaultTimeUnit()>
10000d5d8:     	str	w0, [x19, #88]
10000d5dc:     	mov	w8, #1
10000d5e0:     	strb	w8, [x19, #92]
10000d5e4:     	mov	w8, #8
10000d5e8:     	str	w8, [x19, #96]
10000d5ec:     	str	wzr, [x19, #136]
10000d5f0:     	add	x22, x19, #152
10000d5f4:     	stp	xzr, xzr, [x19, #112]
10000d5f8:     	str	xzr, [x19, #104]
10000d5fc:     	stur	xzr, [x19, #127]
10000d600:     	movi.2d	v0, #0000000000000000
10000d604:     	stp	q0, q0, [x19, #144]
10000d608:     	stp	q0, q0, [x19, #176]
10000d60c:     	str	xzr, [x19, #208]
10000d610:     	mov	w8, #4
10000d614:     	strb	w8, [sp, #31]
10000d618:     	mov	w8, #25965
10000d61c:     	movk	w8, #28257, lsl #16
10000d620:     	str	w8, [sp, #8]
10000d624:     	strb	wzr, [sp, #12]
10000d628:     	adrp	x8, 0x10002a000 <benchmark::internal::Benchmark::Benchmark(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x170>
10000d62c:     	add	x8, x8, #12
10000d630:     	str	x8, [sp, #40]
10000d634:     	str	wzr, [sp, #36]
10000d638:     	add	x1, sp, #8
10000d63c:     	add	x2, sp, #40
10000d640:     	add	x3, sp, #36
10000d644:     	mov	x0, x22
10000d648:     	bl	0x10001d450 <void std::__1::vector<benchmark::internal::Statistics, std::__1::allocator<benchmark::internal::Statistics>>::__emplace_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&)>
10000d64c:     	ldrsb	w8, [sp, #31]
10000d650:     	tbz	w8, #31, 0x10000d65c <benchmark::internal::Benchmark::Benchmark(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x130>
10000d654:     	ldr	x0, [sp, #8]
10000d658:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000d65c:     	mov	w8, #6
10000d660:     	strb	w8, [sp, #31]
10000d664:     	mov	w8, #25965
10000d668:     	movk	w8, #26980, lsl #16
10000d66c:     	str	w8, [sp, #8]
10000d670:     	mov	w8, #28257
10000d674:     	strh	w8, [sp, #12]
10000d678:     	adrp	x9, 0x10002a000 <benchmark::internal::Benchmark::Benchmark(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x1c0>
10000d67c:     	add	x9, x9, #168
10000d680:     	strb	wzr, [sp, #14]
10000d684:     	str	x9, [sp, #40]
10000d688:     	str	wzr, [sp, #36]
10000d68c:     	ldp	x8, x10, [x19, #160]
10000d690:     	cmp	x8, x10
10000d694:     	b.hs	0x10000d6b8 <benchmark::internal::Benchmark::Benchmark(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x18c>
10000d698:     	ldur	q0, [sp, #8]
10000d69c:     	ldr	x10, [sp, #24]
10000d6a0:     	str	q0, [x8]
10000d6a4:     	stp	x10, x9, [x8, #16]
10000d6a8:     	str	wzr, [x8, #32]
10000d6ac:     	add	x8, x8, #40
10000d6b0:     	str	x8, [x19, #160]
10000d6b4:     	b	0x10000d6cc <benchmark::internal::Benchmark::Benchmark(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x1a0>
10000d6b8:     	add	x1, sp, #8
10000d6bc:     	add	x2, sp, #40
10000d6c0:     	add	x3, sp, #36
10000d6c4:     	mov	x0, x22
10000d6c8:     	bl	0x10001d450 <void std::__1::vector<benchmark::internal::Statistics, std::__1::allocator<benchmark::internal::Statistics>>::__emplace_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&)>
10000d6cc:     	ldrsb	w8, [sp, #31]
10000d6d0:     	tbz	w8, #31, 0x10000d6dc <benchmark::internal::Benchmark::Benchmark(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x1b0>
10000d6d4:     	ldr	x0, [sp, #8]
10000d6d8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000d6dc:     	mov	w8, #6
10000d6e0:     	strb	w8, [sp, #31]
10000d6e4:     	mov	w8, #29811
10000d6e8:     	movk	w8, #25700, lsl #16
10000d6ec:     	str	w8, [sp, #8]
10000d6f0:     	mov	w8, #30309
10000d6f4:     	strh	w8, [sp, #12]
10000d6f8:     	adrp	x9, 0x10002a000 <benchmark::internal::Benchmark::Benchmark(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x240>
10000d6fc:     	add	x9, x9, #664
10000d700:     	strb	wzr, [sp, #14]
10000d704:     	str	x9, [sp, #40]
10000d708:     	str	wzr, [sp, #36]
10000d70c:     	ldp	x8, x10, [x19, #160]
10000d710:     	cmp	x8, x10
10000d714:     	b.hs	0x10000d738 <benchmark::internal::Benchmark::Benchmark(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x20c>
10000d718:     	ldur	q0, [sp, #8]
10000d71c:     	ldr	x10, [sp, #24]
10000d720:     	str	q0, [x8]
10000d724:     	stp	x10, x9, [x8, #16]
10000d728:     	str	wzr, [x8, #32]
10000d72c:     	add	x8, x8, #40
10000d730:     	str	x8, [x19, #160]
10000d734:     	b	0x10000d74c <benchmark::internal::Benchmark::Benchmark(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x220>
10000d738:     	add	x1, sp, #8
10000d73c:     	add	x2, sp, #40
10000d740:     	add	x3, sp, #36
10000d744:     	mov	x0, x22
10000d748:     	bl	0x10001d450 <void std::__1::vector<benchmark::internal::Statistics, std::__1::allocator<benchmark::internal::Statistics>>::__emplace_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&)>
10000d74c:     	ldrsb	w8, [sp, #31]
10000d750:     	tbz	w8, #31, 0x10000d75c <benchmark::internal::Benchmark::Benchmark(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x230>
10000d754:     	ldr	x0, [sp, #8]
10000d758:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000d75c:     	mov	w8, #2
10000d760:     	strb	w8, [sp, #31]
10000d764:     	mov	w8, #30307
10000d768:     	strh	w8, [sp, #8]
10000d76c:     	strb	wzr, [sp, #10]
10000d770:     	adrp	x8, 0x10002a000 <benchmark::internal::Benchmark::Benchmark(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x2b8>
10000d774:     	add	x8, x8, #980
10000d778:     	str	x8, [sp, #40]
10000d77c:     	mov	w9, #1
10000d780:     	str	w9, [sp, #36]
10000d784:     	ldp	x10, x11, [x19, #160]
10000d788:     	cmp	x10, x11
10000d78c:     	b.hs	0x10000d7b0 <benchmark::internal::Benchmark::Benchmark(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x284>
10000d790:     	ldur	q0, [sp, #8]
10000d794:     	ldr	x11, [sp, #24]
10000d798:     	str	q0, [x10]
10000d79c:     	stp	x11, x8, [x10, #16]
10000d7a0:     	str	w9, [x10, #32]
10000d7a4:     	add	x8, x10, #40
10000d7a8:     	str	x8, [x19, #160]
10000d7ac:     	b	0x10000d7c4 <benchmark::internal::Benchmark::Benchmark(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x298>
10000d7b0:     	add	x1, sp, #8
10000d7b4:     	add	x2, sp, #40
10000d7b8:     	add	x3, sp, #36
10000d7bc:     	mov	x0, x22
10000d7c0:     	bl	0x10001d450 <void std::__1::vector<benchmark::internal::Statistics, std::__1::allocator<benchmark::internal::Statistics>>::__emplace_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&)>
10000d7c4:     	ldrsb	w8, [sp, #31]
10000d7c8:     	tbz	w8, #31, 0x10000d7d4 <benchmark::internal::Benchmark::Benchmark(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x2a8>
10000d7cc:     	ldr	x0, [sp, #8]
10000d7d0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000d7d4:     	mov	x0, x19
10000d7d8:     	ldp	x29, x30, [sp, #96]
10000d7dc:     	ldp	x20, x19, [sp, #80]
10000d7e0:     	ldp	x22, x21, [sp, #64]
10000d7e4:     	ldp	x24, x23, [sp, #48]
10000d7e8:     	add	sp, sp, #112
10000d7ec:     	ret
10000d7f0:     	mov	x0, x20
10000d7f4:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
10000d7f8:     	b	0x10000d804 <benchmark::internal::Benchmark::Benchmark(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x2d8>
10000d7fc:     	b	0x10000d804 <benchmark::internal::Benchmark::Benchmark(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x2d8>
10000d800:     	b	0x10000d804 <benchmark::internal::Benchmark::Benchmark(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x2d8>
10000d804:     	mov	x23, x0
10000d808:     	ldrsb	w8, [sp, #31]
10000d80c:     	tbz	w8, #31, 0x10000d818 <benchmark::internal::Benchmark::Benchmark(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x2ec>
10000d810:     	ldr	x0, [sp, #8]
10000d814:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000d818:     	ldr	x0, [x19, #176]
10000d81c:     	cbz	x0, 0x10000d828 <benchmark::internal::Benchmark::Benchmark(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x2fc>
10000d820:     	str	x0, [x19, #184]
10000d824:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000d828:     	mov	x0, x22
10000d82c:     	bl	0x10000d95c <std::__1::vector<benchmark::internal::Statistics, std::__1::allocator<benchmark::internal::Statistics>>::~vector[abi:ue170006]()>
10000d830:     	b	0x10000d838 <benchmark::internal::Benchmark::Benchmark(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x30c>
10000d834:     	mov	x23, x0
10000d838:     	add	x0, x21, #24
10000d83c:     	bl	0x10000d9d0 <std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::~vector[abi:ue170006]()>
10000d840:     	mov	x0, x21
10000d844:     	bl	0x100006bdc <std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::~vector[abi:ue170006]()>
10000d848:     	ldrsb	w8, [x19, #31]
10000d84c:     	tbz	w8, #31, 0x10000d858 <benchmark::internal::Benchmark::Benchmark(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x32c>
10000d850:     	ldr	x0, [x20]
10000d854:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000d858:     	mov	x0, x23
10000d85c:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010000d860 <benchmark::internal::Benchmark::ComputeStatistics(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit)>:
10000d860:     	sub	sp, sp, #96
10000d864:     	stp	x26, x25, [sp, #16]
10000d868:     	stp	x24, x23, [sp, #32]
10000d86c:     	stp	x22, x21, [sp, #48]
10000d870:     	stp	x20, x19, [sp, #64]
10000d874:     	stp	x29, x30, [sp, #80]
10000d878:     	add	x29, sp, #80
10000d87c:     	mov	x19, x0
10000d880:     	str	x2, [sp, #8]
10000d884:     	str	w3, [sp, #4]
10000d888:     	ldp	x20, x8, [x0, #160]
10000d88c:     	cmp	x20, x8
10000d890:     	b.hs	0x10000d8b8 <benchmark::internal::Benchmark::ComputeStatistics(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit)+0x58>
10000d894:     	mov	x21, x3
10000d898:     	mov	x22, x2
10000d89c:     	ldrsb	w8, [x1, #23]
10000d8a0:     	tbnz	w8, #31, 0x10000d8cc <benchmark::internal::Benchmark::ComputeStatistics(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit)+0x6c>
10000d8a4:     	ldr	q0, [x1]
10000d8a8:     	ldr	x8, [x1, #16]
10000d8ac:     	str	x8, [x20, #16]
10000d8b0:     	str	q0, [x20]
10000d8b4:     	b	0x10000d918 <benchmark::internal::Benchmark::ComputeStatistics(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit)+0xb8>
10000d8b8:     	add	x0, x19, #152
10000d8bc:     	add	x2, sp, #8
10000d8c0:     	add	x3, sp, #4
10000d8c4:     	bl	0x10001d450 <void std::__1::vector<benchmark::internal::Statistics, std::__1::allocator<benchmark::internal::Statistics>>::__emplace_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&)>
10000d8c8:     	b	0x10000d928 <benchmark::internal::Benchmark::ComputeStatistics(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit)+0xc8>
10000d8cc:     	ldp	x23, x25, [x1]
10000d8d0:     	cmp	x25, #22
10000d8d4:     	b.hi	0x10000d8e4 <benchmark::internal::Benchmark::ComputeStatistics(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit)+0x84>
10000d8d8:     	strb	w25, [x20, #23]
10000d8dc:     	mov	x0, x20
10000d8e0:     	b	0x10000d90c <benchmark::internal::Benchmark::ComputeStatistics(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit)+0xac>
10000d8e4:     	mov	x8, #9223372036854775792
10000d8e8:     	cmp	x25, x8
10000d8ec:     	b.hs	0x10000d948 <benchmark::internal::Benchmark::ComputeStatistics(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit)+0xe8>
10000d8f0:     	orr	x8, x25, #0xf
10000d8f4:     	add	x24, x8, #1
10000d8f8:     	mov	x0, x24
10000d8fc:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000d900:     	orr	x8, x24, #0x8000000000000000
10000d904:     	stp	x25, x8, [x20, #8]
10000d908:     	str	x0, [x20]
10000d90c:     	add	x2, x25, #1
10000d910:     	mov	x1, x23
10000d914:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
10000d918:     	str	x22, [x20, #24]
10000d91c:     	str	w21, [x20, #32]
10000d920:     	add	x8, x20, #40
10000d924:     	str	x8, [x19, #160]
10000d928:     	mov	x0, x19
10000d92c:     	ldp	x29, x30, [sp, #80]
10000d930:     	ldp	x20, x19, [sp, #64]
10000d934:     	ldp	x22, x21, [sp, #48]
10000d938:     	ldp	x24, x23, [sp, #32]
10000d93c:     	ldp	x26, x25, [sp, #16]
10000d940:     	add	sp, sp, #96
10000d944:     	ret
10000d948:     	mov	x0, x20
10000d94c:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
10000d950:     	brk	#0x1
10000d954:     	str	x20, [x19, #160]
10000d958:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010000d95c <std::__1::vector<benchmark::internal::Statistics, std::__1::allocator<benchmark::internal::Statistics>>::~vector[abi:ue170006]()>:
10000d95c:     	stp	x22, x21, [sp, #-48]!
10000d960:     	stp	x20, x19, [sp, #16]
10000d964:     	stp	x29, x30, [sp, #32]
10000d968:     	add	x29, sp, #32
10000d96c:     	mov	x19, x0
10000d970:     	ldr	x20, [x0]
10000d974:     	cbz	x20, 0x10000d9bc <std::__1::vector<benchmark::internal::Statistics, std::__1::allocator<benchmark::internal::Statistics>>::~vector[abi:ue170006]()+0x60>
10000d978:     	ldr	x8, [x19, #8]
10000d97c:     	mov	x0, x20
10000d980:     	cmp	x8, x20
10000d984:     	b.ne	0x10000d998 <std::__1::vector<benchmark::internal::Statistics, std::__1::allocator<benchmark::internal::Statistics>>::~vector[abi:ue170006]()+0x3c>
10000d988:     	b	0x10000d9b4 <std::__1::vector<benchmark::internal::Statistics, std::__1::allocator<benchmark::internal::Statistics>>::~vector[abi:ue170006]()+0x58>
10000d98c:     	mov	x8, x21
10000d990:     	cmp	x21, x20
10000d994:     	b.eq	0x10000d9b0 <std::__1::vector<benchmark::internal::Statistics, std::__1::allocator<benchmark::internal::Statistics>>::~vector[abi:ue170006]()+0x54>
10000d998:     	sub	x21, x8, #40
10000d99c:     	ldursb	w9, [x8, #-17]
10000d9a0:     	tbz	w9, #31, 0x10000d98c <std::__1::vector<benchmark::internal::Statistics, std::__1::allocator<benchmark::internal::Statistics>>::~vector[abi:ue170006]()+0x30>
10000d9a4:     	ldur	x0, [x8, #-40]
10000d9a8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000d9ac:     	b	0x10000d98c <std::__1::vector<benchmark::internal::Statistics, std::__1::allocator<benchmark::internal::Statistics>>::~vector[abi:ue170006]()+0x30>
10000d9b0:     	ldr	x0, [x19]
10000d9b4:     	str	x20, [x19, #8]
10000d9b8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000d9bc:     	mov	x0, x19
10000d9c0:     	ldp	x29, x30, [sp, #32]
10000d9c4:     	ldp	x20, x19, [sp, #16]
10000d9c8:     	ldp	x22, x21, [sp], #48
10000d9cc:     	ret

000000010000d9d0 <std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::~vector[abi:ue170006]()>:
10000d9d0:     	stp	x22, x21, [sp, #-48]!
10000d9d4:     	stp	x20, x19, [sp, #16]
10000d9d8:     	stp	x29, x30, [sp, #32]
10000d9dc:     	add	x29, sp, #32
10000d9e0:     	mov	x19, x0
10000d9e4:     	ldr	x20, [x0]
10000d9e8:     	cbz	x20, 0x10000da30 <std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::~vector[abi:ue170006]()+0x60>
10000d9ec:     	ldr	x8, [x19, #8]
10000d9f0:     	mov	x0, x20
10000d9f4:     	cmp	x8, x20
10000d9f8:     	b.eq	0x10000da28 <std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::~vector[abi:ue170006]()+0x58>
10000d9fc:     	mov	x21, x8
10000da00:     	b	0x10000da10 <std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::~vector[abi:ue170006]()+0x40>
10000da04:     	mov	x8, x21
10000da08:     	cmp	x21, x20
10000da0c:     	b.eq	0x10000da24 <std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::~vector[abi:ue170006]()+0x54>
10000da10:     	ldr	x0, [x21, #-24]!
10000da14:     	cbz	x0, 0x10000da04 <std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::~vector[abi:ue170006]()+0x34>
10000da18:     	stur	x0, [x8, #-16]
10000da1c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000da20:     	b	0x10000da04 <std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::~vector[abi:ue170006]()+0x34>
10000da24:     	ldr	x0, [x19]
10000da28:     	str	x20, [x19, #8]
10000da2c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000da30:     	mov	x0, x19
10000da34:     	ldp	x29, x30, [sp, #32]
10000da38:     	ldp	x20, x19, [sp, #16]
10000da3c:     	ldp	x22, x21, [sp], #48
10000da40:     	ret

000000010000da44 <benchmark::internal::Benchmark::~Benchmark()>:
10000da44:     	stp	x22, x21, [sp, #-48]!
10000da48:     	stp	x20, x19, [sp, #16]
10000da4c:     	stp	x29, x30, [sp, #32]
10000da50:     	add	x29, sp, #32
10000da54:     	mov	x19, x0
10000da58:     	adrp	x8, 0x100034000 <benchmark::internal::Benchmark::~Benchmark()+0xb0>
10000da5c:     	add	x8, x8, #1288
10000da60:     	str	x8, [x0]
10000da64:     	ldr	x0, [x0, #176]
10000da68:     	cbz	x0, 0x10000da74 <benchmark::internal::Benchmark::~Benchmark()+0x30>
10000da6c:     	str	x0, [x19, #184]
10000da70:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000da74:     	ldr	x20, [x19, #152]
10000da78:     	cbz	x20, 0x10000dac0 <benchmark::internal::Benchmark::~Benchmark()+0x7c>
10000da7c:     	ldr	x8, [x19, #160]
10000da80:     	mov	x0, x20
10000da84:     	cmp	x8, x20
10000da88:     	b.ne	0x10000da9c <benchmark::internal::Benchmark::~Benchmark()+0x58>
10000da8c:     	b	0x10000dab8 <benchmark::internal::Benchmark::~Benchmark()+0x74>
10000da90:     	mov	x8, x21
10000da94:     	cmp	x21, x20
10000da98:     	b.eq	0x10000dab4 <benchmark::internal::Benchmark::~Benchmark()+0x70>
10000da9c:     	sub	x21, x8, #40
10000daa0:     	ldursb	w9, [x8, #-17]
10000daa4:     	tbz	w9, #31, 0x10000da90 <benchmark::internal::Benchmark::~Benchmark()+0x4c>
10000daa8:     	ldur	x0, [x8, #-40]
10000daac:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000dab0:     	b	0x10000da90 <benchmark::internal::Benchmark::~Benchmark()+0x4c>
10000dab4:     	ldr	x0, [x19, #152]
10000dab8:     	str	x20, [x19, #160]
10000dabc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000dac0:     	ldr	x20, [x19, #64]
10000dac4:     	cbz	x20, 0x10000db0c <benchmark::internal::Benchmark::~Benchmark()+0xc8>
10000dac8:     	ldr	x8, [x19, #72]
10000dacc:     	mov	x0, x20
10000dad0:     	cmp	x8, x20
10000dad4:     	b.eq	0x10000db04 <benchmark::internal::Benchmark::~Benchmark()+0xc0>
10000dad8:     	mov	x21, x8
10000dadc:     	b	0x10000daec <benchmark::internal::Benchmark::~Benchmark()+0xa8>
10000dae0:     	mov	x8, x21
10000dae4:     	cmp	x21, x20
10000dae8:     	b.eq	0x10000db00 <benchmark::internal::Benchmark::~Benchmark()+0xbc>
10000daec:     	ldr	x0, [x21, #-24]!
10000daf0:     	cbz	x0, 0x10000dae0 <benchmark::internal::Benchmark::~Benchmark()+0x9c>
10000daf4:     	stur	x0, [x8, #-16]
10000daf8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000dafc:     	b	0x10000dae0 <benchmark::internal::Benchmark::~Benchmark()+0x9c>
10000db00:     	ldr	x0, [x19, #64]
10000db04:     	str	x20, [x19, #72]
10000db08:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000db0c:     	ldr	x20, [x19, #40]
10000db10:     	cbz	x20, 0x10000db58 <benchmark::internal::Benchmark::~Benchmark()+0x114>
10000db14:     	ldr	x8, [x19, #48]
10000db18:     	mov	x0, x20
10000db1c:     	cmp	x8, x20
10000db20:     	b.ne	0x10000db34 <benchmark::internal::Benchmark::~Benchmark()+0xf0>
10000db24:     	b	0x10000db50 <benchmark::internal::Benchmark::~Benchmark()+0x10c>
10000db28:     	mov	x8, x21
10000db2c:     	cmp	x21, x20
10000db30:     	b.eq	0x10000db4c <benchmark::internal::Benchmark::~Benchmark()+0x108>
10000db34:     	sub	x21, x8, #24
10000db38:     	ldursb	w9, [x8, #-1]
10000db3c:     	tbz	w9, #31, 0x10000db28 <benchmark::internal::Benchmark::~Benchmark()+0xe4>
10000db40:     	ldur	x0, [x8, #-24]
10000db44:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000db48:     	b	0x10000db28 <benchmark::internal::Benchmark::~Benchmark()+0xe4>
10000db4c:     	ldr	x0, [x19, #40]
10000db50:     	str	x20, [x19, #48]
10000db54:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000db58:     	ldrsb	w8, [x19, #31]
10000db5c:     	tbnz	w8, #31, 0x10000db74 <benchmark::internal::Benchmark::~Benchmark()+0x130>
10000db60:     	mov	x0, x19
10000db64:     	ldp	x29, x30, [sp, #32]
10000db68:     	ldp	x20, x19, [sp, #16]
10000db6c:     	ldp	x22, x21, [sp], #48
10000db70:     	ret
10000db74:     	ldr	x0, [x19, #8]
10000db78:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000db7c:     	mov	x0, x19
10000db80:     	ldp	x29, x30, [sp, #32]
10000db84:     	ldp	x20, x19, [sp, #16]
10000db88:     	ldp	x22, x21, [sp], #48
10000db8c:     	ret

000000010000db90 <benchmark::internal::Benchmark::~Benchmark()>:
10000db90:     	brk	#0x1

000000010000db94 <benchmark::internal::Benchmark::~Benchmark()>:
10000db94:     	brk	#0x1

000000010000db98 <benchmark::internal::Benchmark::Name(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>:
10000db98:     	stp	x20, x19, [sp, #-32]!
10000db9c:     	stp	x29, x30, [sp, #16]
10000dba0:     	add	x29, sp, #16
10000dba4:     	mov	x19, x0
10000dba8:     	add	x0, x0, #8
10000dbac:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
10000dbb0:     	mov	x0, x19
10000dbb4:     	ldp	x29, x30, [sp, #16]
10000dbb8:     	ldp	x20, x19, [sp], #32
10000dbbc:     	ret

000000010000dbc0 <benchmark::internal::Benchmark::SetName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>:
10000dbc0:     	add	x0, x0, #8
10000dbc4:     	b	0x10002ed80 <_vsnprintf+0x10002ed80>

000000010000dbc8 <benchmark::internal::Benchmark::Arg(long long)>:
10000dbc8:     	sub	sp, sp, #64
10000dbcc:     	stp	x20, x19, [sp, #32]
10000dbd0:     	stp	x29, x30, [sp, #48]
10000dbd4:     	add	x29, sp, #48
10000dbd8:     	mov	x20, x1
10000dbdc:     	mov	x19, x0
10000dbe0:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::Arg(long long)+0xc4>
10000dbe4:     	add	x8, x8, #8
10000dbe8:     	ldaprb	w8, [x8]
10000dbec:     	tbz	w8, #0, 0x10000dc6c <benchmark::internal::Benchmark::Arg(long long)+0xa4>
10000dbf0:     	mov	w0, #8
10000dbf4:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000dbf8:     	mov	x8, x0
10000dbfc:     	str	x20, [x8], #8
10000dc00:     	stp	x8, x8, [sp, #16]
10000dc04:     	str	x0, [sp, #8]
10000dc08:     	ldp	x9, x10, [x19, #72]
10000dc0c:     	cmp	x9, x10
10000dc10:     	b.hs	0x10000dc3c <benchmark::internal::Benchmark::Arg(long long)+0x74>
10000dc14:     	stp	x0, x8, [x9]
10000dc18:     	ldr	x8, [sp, #24]
10000dc1c:     	str	x8, [x9, #16]
10000dc20:     	add	x8, x9, #24
10000dc24:     	str	x8, [x19, #72]
10000dc28:     	mov	x0, x19
10000dc2c:     	ldp	x29, x30, [sp, #48]
10000dc30:     	ldp	x20, x19, [sp, #32]
10000dc34:     	add	sp, sp, #64
10000dc38:     	ret
10000dc3c:     	add	x0, x19, #64
10000dc40:     	add	x1, sp, #8
10000dc44:     	bl	0x10001c42c <void std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__push_back_slow_path<std::__1::vector<long long, std::__1::allocator<long long>>>(std::__1::vector<long long, std::__1::allocator<long long>>&&)>
10000dc48:     	ldr	x0, [sp, #8]
10000dc4c:     	cbz	x0, 0x10000dc28 <benchmark::internal::Benchmark::Arg(long long)+0x60>
10000dc50:     	str	x0, [sp, #16]
10000dc54:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000dc58:     	mov	x0, x19
10000dc5c:     	ldp	x29, x30, [sp, #48]
10000dc60:     	ldp	x20, x19, [sp, #32]
10000dc64:     	add	sp, sp, #64
10000dc68:     	ret
10000dc6c:     	adrp	x0, 0x100038000 <benchmark::internal::Benchmark::Range(long long, long long)+0x5c>
10000dc70:     	add	x0, x0, #8
10000dc74:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10000dc78:     	cbz	w0, 0x10000dbf0 <benchmark::internal::Benchmark::Arg(long long)+0x28>
10000dc7c:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::Range(long long, long long)+0x6c>
10000dc80:     	str	xzr, [x8]
10000dc84:     	adrp	x0, 0x100038000 <benchmark::internal::Benchmark::Range(long long, long long)+0x74>
10000dc88:     	add	x0, x0, #8
10000dc8c:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10000dc90:     	b	0x10000dbf0 <benchmark::internal::Benchmark::Arg(long long)+0x28>
10000dc94:     	mov	x19, x0
10000dc98:     	ldr	x0, [sp, #8]
10000dc9c:     	cbz	x0, 0x10000dca8 <benchmark::internal::Benchmark::Arg(long long)+0xe0>
10000dca0:     	str	x0, [sp, #16]
10000dca4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000dca8:     	mov	x0, x19
10000dcac:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010000dcb0 <benchmark::internal::Benchmark::Unit(benchmark::TimeUnit)>:
10000dcb0:     	str	w1, [x0, #88]
10000dcb4:     	strb	wzr, [x0, #92]
10000dcb8:     	ret

000000010000dcbc <benchmark::internal::Benchmark::Range(long long, long long)>:
10000dcbc:     	sub	sp, sp, #112
10000dcc0:     	stp	x24, x23, [sp, #48]
10000dcc4:     	stp	x22, x21, [sp, #64]
10000dcc8:     	stp	x20, x19, [sp, #80]
10000dccc:     	stp	x29, x30, [sp, #96]
10000dcd0:     	add	x29, sp, #96
10000dcd4:     	mov	x20, x2
10000dcd8:     	mov	x21, x1
10000dcdc:     	mov	x19, x0
10000dce0:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::Range(long long, long long)+0xd0>
10000dce4:     	add	x8, x8, #8
10000dce8:     	ldaprb	w8, [x8]
10000dcec:     	tbz	w8, #0, 0x10000ddc8 <benchmark::internal::Benchmark::Range(long long, long long)+0x10c>
10000dcf0:     	stp	xzr, xzr, [sp, #24]
10000dcf4:     	str	xzr, [sp, #40]
10000dcf8:     	ldr	w3, [x19, #96]
10000dcfc:     	add	x0, sp, #24
10000dd00:     	mov	x1, x21
10000dd04:     	mov	x2, x20
10000dd08:     	bl	0x10000de4c <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)>
10000dd0c:     	ldp	x20, x22, [sp, #24]
10000dd10:     	cmp	x20, x22
10000dd14:     	b.eq	0x10000dd9c <benchmark::internal::Benchmark::Range(long long, long long)+0xe0>
10000dd18:     	add	x21, x19, #64
10000dd1c:     	b	0x10000dd54 <benchmark::internal::Benchmark::Range(long long, long long)+0x98>
10000dd20:     	stp	xzr, xzr, [x8, #8]
10000dd24:     	str	xzr, [x8]
10000dd28:     	ldr	x9, [sp]
10000dd2c:     	str	x9, [x8]
10000dd30:     	ldr	x9, [sp, #8]
10000dd34:     	str	x9, [x8, #8]
10000dd38:     	ldr	x9, [sp, #16]
10000dd3c:     	str	x9, [x8, #16]
10000dd40:     	add	x8, x8, #24
10000dd44:     	str	x8, [x19, #72]
10000dd48:     	add	x20, x20, #8
10000dd4c:     	cmp	x20, x22
10000dd50:     	b.eq	0x10000dd98 <benchmark::internal::Benchmark::Range(long long, long long)+0xdc>
10000dd54:     	ldr	x23, [x20]
10000dd58:     	mov	w0, #8
10000dd5c:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000dd60:     	str	x0, [sp]
10000dd64:     	str	x23, [x0], #8
10000dd68:     	stp	x0, x0, [sp, #8]
10000dd6c:     	ldp	x8, x9, [x19, #72]
10000dd70:     	cmp	x8, x9
10000dd74:     	b.lo	0x10000dd20 <benchmark::internal::Benchmark::Range(long long, long long)+0x64>
10000dd78:     	mov	x1, sp
10000dd7c:     	mov	x0, x21
10000dd80:     	bl	0x10001c42c <void std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__push_back_slow_path<std::__1::vector<long long, std::__1::allocator<long long>>>(std::__1::vector<long long, std::__1::allocator<long long>>&&)>
10000dd84:     	ldr	x0, [sp]
10000dd88:     	cbz	x0, 0x10000dd48 <benchmark::internal::Benchmark::Range(long long, long long)+0x8c>
10000dd8c:     	str	x0, [sp, #8]
10000dd90:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000dd94:     	b	0x10000dd48 <benchmark::internal::Benchmark::Range(long long, long long)+0x8c>
10000dd98:     	ldr	x20, [sp, #24]
10000dd9c:     	cbz	x20, 0x10000ddac <benchmark::internal::Benchmark::Range(long long, long long)+0xf0>
10000dda0:     	str	x20, [sp, #32]
10000dda4:     	mov	x0, x20
10000dda8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000ddac:     	mov	x0, x19
10000ddb0:     	ldp	x29, x30, [sp, #96]
10000ddb4:     	ldp	x20, x19, [sp, #80]
10000ddb8:     	ldp	x22, x21, [sp, #64]
10000ddbc:     	ldp	x24, x23, [sp, #48]
10000ddc0:     	add	sp, sp, #112
10000ddc4:     	ret
10000ddc8:     	adrp	x0, 0x100038000 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x28>
10000ddcc:     	add	x0, x0, #8
10000ddd0:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10000ddd4:     	cbz	w0, 0x10000dcf0 <benchmark::internal::Benchmark::Range(long long, long long)+0x34>
10000ddd8:     	adrp	x8, 0x100038000 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x38>
10000dddc:     	str	xzr, [x8]
10000dde0:     	adrp	x0, 0x100038000 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x40>
10000dde4:     	add	x0, x0, #8
10000dde8:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10000ddec:     	b	0x10000dcf0 <benchmark::internal::Benchmark::Range(long long, long long)+0x34>
10000ddf0:     	mov	x19, x0
10000ddf4:     	ldr	x0, [sp, #24]
10000ddf8:     	cbz	x0, 0x10000de14 <benchmark::internal::Benchmark::Range(long long, long long)+0x158>
10000ddfc:     	b	0x10000de3c <benchmark::internal::Benchmark::Range(long long, long long)+0x180>
10000de00:     	mov	x19, x0
10000de04:     	ldr	x0, [sp]
10000de08:     	cbnz	x0, 0x10000de1c <benchmark::internal::Benchmark::Range(long long, long long)+0x160>
10000de0c:     	ldr	x0, [sp, #24]
10000de10:     	cbnz	x0, 0x10000de3c <benchmark::internal::Benchmark::Range(long long, long long)+0x180>
10000de14:     	mov	x0, x19
10000de18:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
10000de1c:     	str	x0, [sp, #8]
10000de20:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000de24:     	ldr	x0, [sp, #24]
10000de28:     	cbz	x0, 0x10000de14 <benchmark::internal::Benchmark::Range(long long, long long)+0x158>
10000de2c:     	b	0x10000de3c <benchmark::internal::Benchmark::Range(long long, long long)+0x180>
10000de30:     	mov	x19, x0
10000de34:     	ldr	x0, [sp, #24]
10000de38:     	cbz	x0, 0x10000de14 <benchmark::internal::Benchmark::Range(long long, long long)+0x158>
10000de3c:     	str	x0, [sp, #32]
10000de40:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000de44:     	mov	x0, x19
10000de48:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010000de4c <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)>:
10000de4c:     	stp	x28, x27, [sp, #-96]!
10000de50:     	stp	x26, x25, [sp, #16]
10000de54:     	stp	x24, x23, [sp, #32]
10000de58:     	stp	x22, x21, [sp, #48]
10000de5c:     	stp	x20, x19, [sp, #64]
10000de60:     	stp	x29, x30, [sp, #80]
10000de64:     	add	x29, sp, #80
10000de68:     	mov	x21, x3
10000de6c:     	mov	x20, x2
10000de70:     	mov	x22, x1
10000de74:     	mov	x19, x0
10000de78:     	adrp	x23, 0x100038000 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0xd8>
10000de7c:     	add	x23, x23, #8
10000de80:     	ldaprb	w8, [x23]
10000de84:     	tbz	w8, #0, 0x10000e3b0 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x564>
10000de88:     	ldaprb	w8, [x23]
10000de8c:     	tbz	w8, #0, 0x10000e3d8 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x58c>
10000de90:     	ldp	x24, x8, [x19, #8]
10000de94:     	cmp	x24, x8
10000de98:     	b.eq	0x10000dea8 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x5c>
10000de9c:     	str	x22, [x24], #8
10000dea0:     	str	x24, [x19, #8]
10000dea4:     	b	0x10000dfbc <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x170>
10000dea8:     	ldr	x23, [x19]
10000deac:     	sub	x26, x24, x23
10000deb0:     	asr	x25, x26, #3
10000deb4:     	add	x8, x25, #1
10000deb8:     	lsr	x9, x8, #61
10000debc:     	cbnz	x9, 0x10000e400 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x5b4>
10000dec0:     	asr	x9, x26, #2
10000dec4:     	cmp	x9, x8
10000dec8:     	csel	x8, x9, x8, hi
10000decc:     	mov	x9, #9223372036854775800
10000ded0:     	mov	x10, #2305843009213693951
10000ded4:     	cmp	x26, x9
10000ded8:     	csel	x27, x8, x10, lo
10000dedc:     	cbz	x27, 0x10000df0c <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0xc0>
10000dee0:     	lsr	x8, x27, #61
10000dee4:     	cbnz	x8, 0x10000e408 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x5bc>
10000dee8:     	lsl	x0, x27, #3
10000deec:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000def0:     	add	x9, x0, x25, lsl #3
10000def4:     	add	x8, x0, x27, lsl #3
10000def8:     	mov	x10, x9
10000defc:     	str	x22, [x10], #8
10000df00:     	subs	x11, x24, x23
10000df04:     	b.ne	0x10000df28 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0xdc>
10000df08:     	b	0x10000dfa8 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x15c>
10000df0c:     	mov	x0, #0
10000df10:     	add	x9, x0, x25, lsl #3
10000df14:     	add	x8, x0, x27, lsl #3
10000df18:     	mov	x10, x9
10000df1c:     	str	x22, [x10], #8
10000df20:     	subs	x11, x24, x23
10000df24:     	b.eq	0x10000dfa8 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x15c>
10000df28:     	sub	x11, x11, #8
10000df2c:     	cmp	x11, #88
10000df30:     	b.lo	0x10000df98 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x14c>
10000df34:     	add	x12, x26, x0
10000df38:     	sub	x12, x24, x12
10000df3c:     	cmp	x12, #64
10000df40:     	b.lo	0x10000df98 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x14c>
10000df44:     	lsr	x11, x11, #3
10000df48:     	add	x11, x11, #1
10000df4c:     	and	x12, x11, #0x3ffffffffffffff8
10000df50:     	lsl	x14, x12, #3
10000df54:     	sub	x13, x24, x14
10000df58:     	sub	x9, x9, x14
10000df5c:     	sub	x14, x24, #32
10000df60:     	add	x15, x0, x25, lsl #3
10000df64:     	sub	x15, x15, #32
10000df68:     	mov	x16, x12
10000df6c:     	ldp	q1, q0, [x14]
10000df70:     	ldp	q3, q2, [x14, #-32]
10000df74:     	stp	q1, q0, [x15]
10000df78:     	stp	q3, q2, [x15, #-32]
10000df7c:     	sub	x14, x14, #64
10000df80:     	sub	x15, x15, #64
10000df84:     	sub	x16, x16, #8
10000df88:     	cbnz	x16, 0x10000df6c <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x120>
10000df8c:     	mov	x24, x13
10000df90:     	cmp	x11, x12
10000df94:     	b.eq	0x10000dfa8 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x15c>
10000df98:     	ldr	x11, [x24, #-8]!
10000df9c:     	str	x11, [x9, #-8]!
10000dfa0:     	cmp	x24, x23
10000dfa4:     	b.ne	0x10000df98 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x14c>
10000dfa8:     	stp	x9, x10, [x19]
10000dfac:     	str	x8, [x19, #16]
10000dfb0:     	cbz	x23, 0x10000dfbc <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x170>
10000dfb4:     	mov	x0, x23
10000dfb8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000dfbc:     	cmp	x22, x20
10000dfc0:     	b.eq	0x10000e280 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x434>
10000dfc4:     	add	x23, x22, #1
10000dfc8:     	cmp	x23, x20
10000dfcc:     	b.ne	0x10000e040 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x1f4>
10000dfd0:     	ldp	x22, x8, [x19, #8]
10000dfd4:     	cmp	x22, x8
10000dfd8:     	b.ne	0x10000e278 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x42c>
10000dfdc:     	ldr	x21, [x19]
10000dfe0:     	sub	x24, x22, x21
10000dfe4:     	asr	x23, x24, #3
10000dfe8:     	add	x8, x23, #1
10000dfec:     	lsr	x9, x8, #61
10000dff0:     	cbnz	x9, 0x10000e400 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x5b4>
10000dff4:     	asr	x9, x24, #2
10000dff8:     	cmp	x9, x8
10000dffc:     	csel	x8, x9, x8, hi
10000e000:     	mov	x9, #9223372036854775800
10000e004:     	mov	x10, #2305843009213693951
10000e008:     	cmp	x24, x9
10000e00c:     	csel	x25, x8, x10, lo
10000e010:     	cbz	x25, 0x10000e0ec <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x2a0>
10000e014:     	lsr	x8, x25, #61
10000e018:     	cbnz	x8, 0x10000e408 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x5bc>
10000e01c:     	lsl	x0, x25, #3
10000e020:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000e024:     	add	x9, x0, x23, lsl #3
10000e028:     	add	x8, x0, x25, lsl #3
10000e02c:     	mov	x10, x9
10000e030:     	str	x20, [x10], #8
10000e034:     	subs	x11, x22, x21
10000e038:     	b.ne	0x10000e108 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x2bc>
10000e03c:     	b	0x10000e384 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x538>
10000e040:     	sub	x24, x20, #1
10000e044:     	cmn	x22, #2
10000e048:     	b.gt	0x10000e064 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x218>
10000e04c:     	cmn	x24, #1
10000e050:     	csinv	x2, x24, xzr, lt
10000e054:     	mov	x0, x19
10000e058:     	mov	x1, x23
10000e05c:     	mov	x3, x21
10000e060:     	bl	0x10001c624 <void benchmark::internal::AddNegatedPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)>
10000e064:     	tbz	x22, #63, 0x10000e23c <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x3f0>
10000e068:     	tbnz	x20, #63, 0x10000e23c <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x3f0>
10000e06c:     	ldp	x25, x8, [x19, #8]
10000e070:     	cmp	x25, x8
10000e074:     	b.hs	0x10000e084 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x238>
10000e078:     	str	xzr, [x25], #8
10000e07c:     	str	x25, [x19, #8]
10000e080:     	b	0x10000e23c <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x3f0>
10000e084:     	ldr	x22, [x19]
10000e088:     	sub	x27, x25, x22
10000e08c:     	asr	x26, x27, #3
10000e090:     	add	x9, x26, #1
10000e094:     	lsr	x10, x9, #61
10000e098:     	cbnz	x10, 0x10000e400 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x5b4>
10000e09c:     	mov	x10, #9223372036854775800
10000e0a0:     	sub	x8, x8, x22
10000e0a4:     	asr	x11, x8, #2
10000e0a8:     	cmp	x11, x9
10000e0ac:     	csel	x9, x11, x9, hi
10000e0b0:     	cmp	x8, x10
10000e0b4:     	mov	x8, #2305843009213693951
10000e0b8:     	csel	x28, x9, x8, lo
10000e0bc:     	cbz	x28, 0x10000e18c <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x340>
10000e0c0:     	lsr	x8, x28, #61
10000e0c4:     	cbnz	x8, 0x10000e408 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x5bc>
10000e0c8:     	lsl	x0, x28, #3
10000e0cc:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000e0d0:     	add	x9, x0, x26, lsl #3
10000e0d4:     	add	x8, x0, x28, lsl #3
10000e0d8:     	mov	x10, x9
10000e0dc:     	str	xzr, [x10], #8
10000e0e0:     	subs	x11, x25, x22
10000e0e4:     	b.ne	0x10000e1a8 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x35c>
10000e0e8:     	b	0x10000e228 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x3dc>
10000e0ec:     	mov	x0, #0
10000e0f0:     	add	x9, x0, x23, lsl #3
10000e0f4:     	add	x8, x0, x25, lsl #3
10000e0f8:     	mov	x10, x9
10000e0fc:     	str	x20, [x10], #8
10000e100:     	subs	x11, x22, x21
10000e104:     	b.eq	0x10000e384 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x538>
10000e108:     	sub	x11, x11, #8
10000e10c:     	cmp	x11, #88
10000e110:     	b.lo	0x10000e178 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x32c>
10000e114:     	sub	x12, x22, x0
10000e118:     	sub	x12, x12, x24
10000e11c:     	cmp	x12, #64
10000e120:     	b.lo	0x10000e178 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x32c>
10000e124:     	lsr	x11, x11, #3
10000e128:     	add	x11, x11, #1
10000e12c:     	and	x12, x11, #0x3ffffffffffffff8
10000e130:     	lsl	x14, x12, #3
10000e134:     	sub	x13, x22, x14
10000e138:     	sub	x9, x9, x14
10000e13c:     	sub	x14, x22, #32
10000e140:     	add	x15, x0, x23, lsl #3
10000e144:     	sub	x15, x15, #32
10000e148:     	mov	x16, x12
10000e14c:     	ldp	q1, q0, [x14]
10000e150:     	ldp	q3, q2, [x14, #-32]
10000e154:     	stp	q1, q0, [x15]
10000e158:     	stp	q3, q2, [x15, #-32]
10000e15c:     	sub	x14, x14, #64
10000e160:     	sub	x15, x15, #64
10000e164:     	sub	x16, x16, #8
10000e168:     	cbnz	x16, 0x10000e14c <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x300>
10000e16c:     	mov	x22, x13
10000e170:     	cmp	x11, x12
10000e174:     	b.eq	0x10000e384 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x538>
10000e178:     	ldr	x11, [x22, #-8]!
10000e17c:     	str	x11, [x9, #-8]!
10000e180:     	cmp	x22, x21
10000e184:     	b.ne	0x10000e178 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x32c>
10000e188:     	b	0x10000e384 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x538>
10000e18c:     	mov	x0, #0
10000e190:     	add	x9, x0, x26, lsl #3
10000e194:     	add	x8, x0, x28, lsl #3
10000e198:     	mov	x10, x9
10000e19c:     	str	xzr, [x10], #8
10000e1a0:     	subs	x11, x25, x22
10000e1a4:     	b.eq	0x10000e228 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x3dc>
10000e1a8:     	sub	x11, x11, #8
10000e1ac:     	cmp	x11, #88
10000e1b0:     	b.lo	0x10000e218 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x3cc>
10000e1b4:     	sub	x12, x25, x0
10000e1b8:     	sub	x12, x12, x27
10000e1bc:     	cmp	x12, #64
10000e1c0:     	b.lo	0x10000e218 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x3cc>
10000e1c4:     	lsr	x11, x11, #3
10000e1c8:     	add	x11, x11, #1
10000e1cc:     	and	x12, x11, #0x3ffffffffffffff8
10000e1d0:     	lsl	x14, x12, #3
10000e1d4:     	sub	x13, x25, x14
10000e1d8:     	sub	x9, x9, x14
10000e1dc:     	sub	x14, x25, #32
10000e1e0:     	add	x15, x0, x26, lsl #3
10000e1e4:     	sub	x15, x15, #32
10000e1e8:     	mov	x16, x12
10000e1ec:     	ldp	q1, q0, [x14]
10000e1f0:     	ldp	q3, q2, [x14, #-32]
10000e1f4:     	stp	q1, q0, [x15]
10000e1f8:     	stp	q3, q2, [x15, #-32]
10000e1fc:     	sub	x14, x14, #64
10000e200:     	sub	x15, x15, #64
10000e204:     	sub	x16, x16, #8
10000e208:     	cbnz	x16, 0x10000e1ec <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x3a0>
10000e20c:     	mov	x25, x13
10000e210:     	cmp	x11, x12
10000e214:     	b.eq	0x10000e228 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x3dc>
10000e218:     	ldr	x11, [x25, #-8]!
10000e21c:     	str	x11, [x9, #-8]!
10000e220:     	cmp	x25, x22
10000e224:     	b.ne	0x10000e218 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x3cc>
10000e228:     	stp	x9, x10, [x19]
10000e22c:     	str	x8, [x19, #16]
10000e230:     	cbz	x22, 0x10000e23c <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x3f0>
10000e234:     	mov	x0, x22
10000e238:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000e23c:     	cmp	x20, #2
10000e240:     	b.lt	0x10000e25c <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x410>
10000e244:     	cmp	x23, #1
10000e248:     	csinc	x1, x23, xzr, gt
10000e24c:     	mov	x0, x19
10000e250:     	mov	x2, x24
10000e254:     	mov	x3, x21
10000e258:     	bl	0x10001c894 <std::__1::vector<long long, std::__1::allocator<long long>>::iterator benchmark::internal::AddPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)>
10000e25c:     	ldr	x22, [x19, #8]
10000e260:     	ldur	x8, [x22, #-8]
10000e264:     	cmp	x8, x20
10000e268:     	b.eq	0x10000e280 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x434>
10000e26c:     	ldr	x8, [x19, #16]
10000e270:     	cmp	x22, x8
10000e274:     	b.eq	0x10000e29c <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x450>
10000e278:     	str	x20, [x22], #8
10000e27c:     	str	x22, [x19, #8]
10000e280:     	ldp	x29, x30, [sp, #80]
10000e284:     	ldp	x20, x19, [sp, #64]
10000e288:     	ldp	x22, x21, [sp, #48]
10000e28c:     	ldp	x24, x23, [sp, #32]
10000e290:     	ldp	x26, x25, [sp, #16]
10000e294:     	ldp	x28, x27, [sp], #96
10000e298:     	ret
10000e29c:     	ldr	x21, [x19]
10000e2a0:     	sub	x24, x22, x21
10000e2a4:     	asr	x23, x24, #3
10000e2a8:     	add	x8, x23, #1
10000e2ac:     	lsr	x9, x8, #61
10000e2b0:     	cbnz	x9, 0x10000e400 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x5b4>
10000e2b4:     	asr	x9, x24, #2
10000e2b8:     	cmp	x9, x8
10000e2bc:     	csel	x8, x9, x8, hi
10000e2c0:     	mov	x9, #9223372036854775800
10000e2c4:     	mov	x10, #2305843009213693951
10000e2c8:     	cmp	x24, x9
10000e2cc:     	csel	x25, x8, x10, lo
10000e2d0:     	cbz	x25, 0x10000e2e8 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x49c>
10000e2d4:     	lsr	x8, x25, #61
10000e2d8:     	cbnz	x8, 0x10000e408 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x5bc>
10000e2dc:     	lsl	x0, x25, #3
10000e2e0:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000e2e4:     	b	0x10000e2ec <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x4a0>
10000e2e8:     	mov	x0, #0
10000e2ec:     	add	x9, x0, x23, lsl #3
10000e2f0:     	add	x8, x0, x25, lsl #3
10000e2f4:     	mov	x10, x9
10000e2f8:     	str	x20, [x10], #8
10000e2fc:     	subs	x11, x22, x21
10000e300:     	b.eq	0x10000e384 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x538>
10000e304:     	sub	x11, x11, #8
10000e308:     	cmp	x11, #88
10000e30c:     	b.lo	0x10000e374 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x528>
10000e310:     	sub	x12, x22, x0
10000e314:     	sub	x12, x12, x24
10000e318:     	cmp	x12, #64
10000e31c:     	b.lo	0x10000e374 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x528>
10000e320:     	lsr	x11, x11, #3
10000e324:     	add	x11, x11, #1
10000e328:     	and	x12, x11, #0x3ffffffffffffff8
10000e32c:     	lsl	x14, x12, #3
10000e330:     	sub	x13, x22, x14
10000e334:     	sub	x9, x9, x14
10000e338:     	sub	x14, x22, #32
10000e33c:     	add	x15, x0, x23, lsl #3
10000e340:     	sub	x15, x15, #32
10000e344:     	mov	x16, x12
10000e348:     	ldp	q1, q0, [x14]
10000e34c:     	ldp	q3, q2, [x14, #-32]
10000e350:     	stp	q1, q0, [x15]
10000e354:     	stp	q3, q2, [x15, #-32]
10000e358:     	sub	x14, x14, #64
10000e35c:     	sub	x15, x15, #64
10000e360:     	sub	x16, x16, #8
10000e364:     	cbnz	x16, 0x10000e348 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x4fc>
10000e368:     	mov	x22, x13
10000e36c:     	cmp	x11, x12
10000e370:     	b.eq	0x10000e384 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x538>
10000e374:     	ldr	x11, [x22, #-8]!
10000e378:     	str	x11, [x9, #-8]!
10000e37c:     	cmp	x22, x21
10000e380:     	b.ne	0x10000e374 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x528>
10000e384:     	stp	x9, x10, [x19]
10000e388:     	str	x8, [x19, #16]
10000e38c:     	cbz	x21, 0x10000e280 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x434>
10000e390:     	mov	x0, x21
10000e394:     	ldp	x29, x30, [sp, #80]
10000e398:     	ldp	x20, x19, [sp, #64]
10000e39c:     	ldp	x22, x21, [sp, #48]
10000e3a0:     	ldp	x24, x23, [sp, #32]
10000e3a4:     	ldp	x26, x25, [sp, #16]
10000e3a8:     	ldp	x28, x27, [sp], #96
10000e3ac:     	b	0x10002f014 <_vsnprintf+0x10002f014>
10000e3b0:     	adrp	x0, 0x100038000 <benchmark::internal::Benchmark::Ranges(std::__1::vector<std::__1::pair<long long, long long>, std::__1::allocator<std::__1::pair<long long, long long>>> const&)+0x4c>
10000e3b4:     	add	x0, x0, #8
10000e3b8:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10000e3bc:     	cbz	w0, 0x10000de88 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x3c>
10000e3c0:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::Ranges(std::__1::vector<std::__1::pair<long long, long long>, std::__1::allocator<std::__1::pair<long long, long long>>> const&)+0x5c>
10000e3c4:     	str	xzr, [x8]
10000e3c8:     	adrp	x0, 0x100038000 <benchmark::internal::Benchmark::Ranges(std::__1::vector<std::__1::pair<long long, long long>, std::__1::allocator<std::__1::pair<long long, long long>>> const&)+0x64>
10000e3cc:     	add	x0, x0, #8
10000e3d0:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10000e3d4:     	b	0x10000de88 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x3c>
10000e3d8:     	adrp	x0, 0x100038000 <benchmark::internal::Benchmark::Ranges(std::__1::vector<std::__1::pair<long long, long long>, std::__1::allocator<std::__1::pair<long long, long long>>> const&)+0x74>
10000e3dc:     	add	x0, x0, #8
10000e3e0:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10000e3e4:     	cbz	w0, 0x10000de90 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x44>
10000e3e8:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::Ranges(std::__1::vector<std::__1::pair<long long, long long>, std::__1::allocator<std::__1::pair<long long, long long>>> const&)+0x84>
10000e3ec:     	str	xzr, [x8]
10000e3f0:     	adrp	x0, 0x100038000 <benchmark::internal::Benchmark::Ranges(std::__1::vector<std::__1::pair<long long, long long>, std::__1::allocator<std::__1::pair<long long, long long>>> const&)+0x8c>
10000e3f4:     	add	x0, x0, #8
10000e3f8:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10000e3fc:     	b	0x10000de90 <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x44>
10000e400:     	mov	x0, x19
10000e404:     	bl	0x10000a2cc <std::__1::vector<long long, std::__1::allocator<long long>>::__throw_length_error[abi:ue170006]() const>
10000e408:     	bl	0x100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>

000000010000e40c <benchmark::internal::Benchmark::Ranges(std::__1::vector<std::__1::pair<long long, long long>, std::__1::allocator<std::__1::pair<long long, long long>>> const&)>:
10000e40c:     	sub	sp, sp, #96
10000e410:     	stp	x24, x23, [sp, #32]
10000e414:     	stp	x22, x21, [sp, #48]
10000e418:     	stp	x20, x19, [sp, #64]
10000e41c:     	stp	x29, x30, [sp, #80]
10000e420:     	add	x29, sp, #80
10000e424:     	mov	x20, x1
10000e428:     	mov	x19, x0
10000e42c:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::Ranges(std::__1::vector<std::__1::pair<long long, long long>, std::__1::allocator<std::__1::pair<long long, long long>>> const&)+0xc8>
10000e430:     	add	x8, x8, #8
10000e434:     	ldaprb	w8, [x8]
10000e438:     	tbz	w8, #0, 0x10000e510 <benchmark::internal::Benchmark::Ranges(std::__1::vector<std::__1::pair<long long, long long>, std::__1::allocator<std::__1::pair<long long, long long>>> const&)+0x104>
10000e43c:     	ldp	x9, x8, [x20]
10000e440:     	sub	x8, x8, x9
10000e444:     	asr	x1, x8, #4
10000e448:     	add	x0, sp, #8
10000e44c:     	bl	0x10000e550 <std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::vector(unsigned long)>
10000e450:     	ldp	x8, x9, [x20]
10000e454:     	cmp	x9, x8
10000e458:     	b.eq	0x10000e49c <benchmark::internal::Benchmark::Ranges(std::__1::vector<std::__1::pair<long long, long long>, std::__1::allocator<std::__1::pair<long long, long long>>> const&)+0x90>
10000e45c:     	mov	x21, #0
10000e460:     	mov	x22, #0
10000e464:     	mov	x23, #0
10000e468:     	ldr	x9, [sp, #8]
10000e46c:     	add	x0, x9, x21
10000e470:     	add	x8, x8, x22
10000e474:     	ldp	x1, x2, [x8]
10000e478:     	ldr	w3, [x19, #96]
10000e47c:     	bl	0x10000de4c <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)>
10000e480:     	add	x23, x23, #1
10000e484:     	ldp	x8, x9, [x20]
10000e488:     	sub	x9, x9, x8
10000e48c:     	add	x22, x22, #16
10000e490:     	add	x21, x21, #24
10000e494:     	cmp	x23, x9, asr #4
10000e498:     	b.lo	0x10000e468 <benchmark::internal::Benchmark::Ranges(std::__1::vector<std::__1::pair<long long, long long>, std::__1::allocator<std::__1::pair<long long, long long>>> const&)+0x5c>
10000e49c:     	add	x1, sp, #8
10000e4a0:     	mov	x0, x19
10000e4a4:     	bl	0x10000e61c <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)>
10000e4a8:     	ldr	x20, [sp, #8]
10000e4ac:     	cbz	x20, 0x10000e4f4 <benchmark::internal::Benchmark::Ranges(std::__1::vector<std::__1::pair<long long, long long>, std::__1::allocator<std::__1::pair<long long, long long>>> const&)+0xe8>
10000e4b0:     	ldr	x8, [sp, #16]
10000e4b4:     	mov	x0, x20
10000e4b8:     	cmp	x8, x20
10000e4bc:     	b.eq	0x10000e4ec <benchmark::internal::Benchmark::Ranges(std::__1::vector<std::__1::pair<long long, long long>, std::__1::allocator<std::__1::pair<long long, long long>>> const&)+0xe0>
10000e4c0:     	mov	x21, x8
10000e4c4:     	b	0x10000e4d4 <benchmark::internal::Benchmark::Ranges(std::__1::vector<std::__1::pair<long long, long long>, std::__1::allocator<std::__1::pair<long long, long long>>> const&)+0xc8>
10000e4c8:     	mov	x8, x21
10000e4cc:     	cmp	x21, x20
10000e4d0:     	b.eq	0x10000e4e8 <benchmark::internal::Benchmark::Ranges(std::__1::vector<std::__1::pair<long long, long long>, std::__1::allocator<std::__1::pair<long long, long long>>> const&)+0xdc>
10000e4d4:     	ldr	x0, [x21, #-24]!
10000e4d8:     	cbz	x0, 0x10000e4c8 <benchmark::internal::Benchmark::Ranges(std::__1::vector<std::__1::pair<long long, long long>, std::__1::allocator<std::__1::pair<long long, long long>>> const&)+0xbc>
10000e4dc:     	stur	x0, [x8, #-16]
10000e4e0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000e4e4:     	b	0x10000e4c8 <benchmark::internal::Benchmark::Ranges(std::__1::vector<std::__1::pair<long long, long long>, std::__1::allocator<std::__1::pair<long long, long long>>> const&)+0xbc>
10000e4e8:     	ldr	x0, [sp, #8]
10000e4ec:     	str	x20, [sp, #16]
10000e4f0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000e4f4:     	mov	x0, x19
10000e4f8:     	ldp	x29, x30, [sp, #80]
10000e4fc:     	ldp	x20, x19, [sp, #64]
10000e500:     	ldp	x22, x21, [sp, #48]
10000e504:     	ldp	x24, x23, [sp, #32]
10000e508:     	add	sp, sp, #96
10000e50c:     	ret
10000e510:     	adrp	x0, 0x100038000 <std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::vector(unsigned long)+0x68>
10000e514:     	add	x0, x0, #8
10000e518:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10000e51c:     	cbz	w0, 0x10000e43c <benchmark::internal::Benchmark::Ranges(std::__1::vector<std::__1::pair<long long, long long>, std::__1::allocator<std::__1::pair<long long, long long>>> const&)+0x30>
10000e520:     	adrp	x8, 0x100038000 <std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::vector(unsigned long)+0x78>
10000e524:     	str	xzr, [x8]
10000e528:     	adrp	x0, 0x100038000 <std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::vector(unsigned long)+0x80>
10000e52c:     	add	x0, x0, #8
10000e530:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10000e534:     	b	0x10000e43c <benchmark::internal::Benchmark::Ranges(std::__1::vector<std::__1::pair<long long, long long>, std::__1::allocator<std::__1::pair<long long, long long>>> const&)+0x30>
10000e538:     	b	0x10000e53c <benchmark::internal::Benchmark::Ranges(std::__1::vector<std::__1::pair<long long, long long>, std::__1::allocator<std::__1::pair<long long, long long>>> const&)+0x130>
10000e53c:     	mov	x19, x0
10000e540:     	add	x0, sp, #8
10000e544:     	bl	0x10000d9d0 <std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::~vector[abi:ue170006]()>
10000e548:     	mov	x0, x19
10000e54c:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010000e550 <std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::vector(unsigned long)>:
10000e550:     	stp	x22, x21, [sp, #-48]!
10000e554:     	stp	x20, x19, [sp, #16]
10000e558:     	stp	x29, x30, [sp, #32]
10000e55c:     	add	x29, sp, #32
10000e560:     	mov	x19, x0
10000e564:     	stp	xzr, xzr, [x0]
10000e568:     	str	xzr, [x0, #16]
10000e56c:     	cbz	x1, 0x10000e5dc <std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::vector(unsigned long)+0x8c>
10000e570:     	mov	x20, x1
10000e574:     	mov	x8, #-6148914691236517206
10000e578:     	movk	x8, #43691
10000e57c:     	movk	x8, #2730, lsl #48
10000e580:     	cmp	x1, x8
10000e584:     	b.hs	0x10000e5f0 <std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::vector(unsigned long)+0xa0>
10000e588:     	add	x8, x20, x20, lsl #1
10000e58c:     	lsl	x22, x8, #3
10000e590:     	mov	x0, x22
10000e594:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000e598:     	mov	x21, x0
10000e59c:     	str	x0, [x19]
10000e5a0:     	mov	w8, #24
10000e5a4:     	madd	x8, x20, x8, x0
10000e5a8:     	str	x8, [x19, #16]
10000e5ac:     	sub	x8, x22, #24
10000e5b0:     	mov	x9, #-6148914691236517206
10000e5b4:     	movk	x9, #43691
10000e5b8:     	umulh	x8, x8, x9
10000e5bc:     	lsr	x8, x8, #4
10000e5c0:     	add	x8, x8, x8, lsl #1
10000e5c4:     	lsl	x20, x8, #3
10000e5c8:     	add	x1, x20, #24
10000e5cc:     	bl	0x10002f0f8 <_vsnprintf+0x10002f0f8>
10000e5d0:     	add	x8, x20, x21
10000e5d4:     	add	x8, x8, #24
10000e5d8:     	str	x8, [x19, #8]
10000e5dc:     	mov	x0, x19
10000e5e0:     	ldp	x29, x30, [sp, #32]
10000e5e4:     	ldp	x20, x19, [sp, #16]
10000e5e8:     	ldp	x22, x21, [sp], #48
10000e5ec:     	ret
10000e5f0:     	mov	x0, x19
10000e5f4:     	bl	0x10001c610 <std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__throw_length_error[abi:ue170006]() const>
10000e5f8:     	brk	#0x1
10000e5fc:     	mov	x20, x0
10000e600:     	ldr	x1, [x19]
10000e604:     	cbz	x1, 0x10000e614 <std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::vector(unsigned long)+0xc4>
10000e608:     	add	x0, x19, #8
10000e60c:     	mov	x2, x19
10000e610:     	bl	0x10002eb2c <std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::vector(unsigned long) (.cold.1)>
10000e614:     	mov	x0, x20
10000e618:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010000e61c <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)>:
10000e61c:     	sub	sp, sp, #192
10000e620:     	stp	x28, x27, [sp, #96]
10000e624:     	stp	x26, x25, [sp, #112]
10000e628:     	stp	x24, x23, [sp, #128]
10000e62c:     	stp	x22, x21, [sp, #144]
10000e630:     	stp	x20, x19, [sp, #160]
10000e634:     	stp	x29, x30, [sp, #176]
10000e638:     	add	x29, sp, #176
10000e63c:     	mov	x19, x1
10000e640:     	str	x0, [sp, #16]
10000e644:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0xd0>
10000e648:     	add	x8, x8, #8
10000e64c:     	ldaprb	w8, [x8]
10000e650:     	tbz	w8, #0, 0x10000eab4 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x498>
10000e654:     	ldp	x25, x26, [x19]
10000e658:     	str	x19, [sp, #32]
10000e65c:     	stp	xzr, xzr, [sp, #80]
10000e660:     	str	xzr, [sp, #72]
10000e664:     	subs	x20, x26, x25
10000e668:     	asr	x8, x20, #3
10000e66c:     	mov	x9, #-6148914691236517206
10000e670:     	movk	x9, #43691
10000e674:     	mul	x19, x8, x9
10000e678:     	lsr	x23, x19, #61
10000e67c:     	lsl	x22, x19, #3
10000e680:     	b.eq	0x10000e6c0 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0xa4>
10000e684:     	cbnz	x23, 0x10000eadc <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x4c0>
10000e688:     	mov	x0, x22
10000e68c:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000e690:     	mov	x21, x0
10000e694:     	add	x8, x0, x19, lsl #3
10000e698:     	str	x0, [sp, #72]
10000e69c:     	str	x8, [sp, #88]
10000e6a0:     	mov	x1, x22
10000e6a4:     	bl	0x10002f0f8 <_vsnprintf+0x10002f0f8>
10000e6a8:     	sub	x8, x20, #24
10000e6ac:     	cmp	x8, #72
10000e6b0:     	b.hs	0x10000e6cc <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0xb0>
10000e6b4:     	mov	w20, #1
10000e6b8:     	mov	x8, x25
10000e6bc:     	b	0x10000e764 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x148>
10000e6c0:     	mov	x21, #0
10000e6c4:     	mov	w20, #1
10000e6c8:     	b	0x10000e77c <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x160>
10000e6cc:     	mov	x9, #-6148914691236517206
10000e6d0:     	movk	x9, #43691
10000e6d4:     	umulh	x8, x8, x9
10000e6d8:     	lsr	x8, x8, #4
10000e6dc:     	add	x9, x8, #1
10000e6e0:     	and	x10, x9, #0x1ffffffffffffffc
10000e6e4:     	mov	w8, #24
10000e6e8:     	madd	x8, x10, x8, x25
10000e6ec:     	add	x12, x25, #48
10000e6f0:     	mov	w11, #1
10000e6f4:     	mov	x13, x10
10000e6f8:     	mov	w14, #1
10000e6fc:     	mov	w15, #1
10000e700:     	mov	w16, #1
10000e704:     	ldp	x17, x0, [x12, #-48]
10000e708:     	ldp	x1, x2, [x12, #-24]
10000e70c:     	ldp	x3, x4, [x12]
10000e710:     	ldp	x5, x6, [x12, #24]
10000e714:     	sub	x17, x0, x17
10000e718:     	sub	x0, x2, x1
10000e71c:     	sub	x1, x4, x3
10000e720:     	sub	x2, x6, x5
10000e724:     	asr	x17, x17, #3
10000e728:     	asr	x0, x0, #3
10000e72c:     	asr	x1, x1, #3
10000e730:     	asr	x2, x2, #3
10000e734:     	mul	x11, x17, x11
10000e738:     	mul	x14, x0, x14
10000e73c:     	mul	x15, x1, x15
10000e740:     	mul	x16, x2, x16
10000e744:     	add	x12, x12, #96
10000e748:     	subs	x13, x13, #4
10000e74c:     	b.ne	0x10000e704 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0xe8>
10000e750:     	mul	x11, x14, x11
10000e754:     	mul	x11, x15, x11
10000e758:     	mul	x20, x16, x11
10000e75c:     	cmp	x9, x10
10000e760:     	b.eq	0x10000e77c <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x160>
10000e764:     	ldp	x9, x10, [x8], #24
10000e768:     	sub	x9, x10, x9
10000e76c:     	asr	x9, x9, #3
10000e770:     	mul	x20, x9, x20
10000e774:     	cmp	x8, x26
10000e778:     	b.ne	0x10000e764 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x148>
10000e77c:     	stp	xzr, xzr, [sp, #48]
10000e780:     	str	xzr, [sp, #64]
10000e784:     	cmp	x26, x25
10000e788:     	b.eq	0x10000e7ac <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x190>
10000e78c:     	cbnz	x23, 0x10000eae8 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x4cc>
10000e790:     	mov	x0, x22
10000e794:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000e798:     	add	x8, x0, x19, lsl #3
10000e79c:     	stp	x0, x0, [sp, #48]
10000e7a0:     	str	x8, [sp, #64]
10000e7a4:     	cbnz	x20, 0x10000e7b4 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x198>
10000e7a8:     	b	0x10000ea58 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x43c>
10000e7ac:     	mov	x0, #0
10000e7b0:     	cbz	x20, 0x10000ea58 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x43c>
10000e7b4:     	mov	x15, #0
10000e7b8:     	ldr	x8, [sp, #16]
10000e7bc:     	add	x8, x8, #64
10000e7c0:     	stp	x8, x20, [sp]
10000e7c4:     	mov	x24, #-6148914691236517206
10000e7c8:     	movk	x24, #43691
10000e7cc:     	str	x15, [sp, #24]
10000e7d0:     	cmp	x26, x25
10000e7d4:     	b.eq	0x10000e970 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x354>
10000e7d8:     	mov	x19, #0
10000e7dc:     	b	0x10000e804 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x1e8>
10000e7e0:     	ldr	x8, [x28, x22, lsl #3]
10000e7e4:     	str	x8, [x27], #8
10000e7e8:     	str	x27, [sp, #56]
10000e7ec:     	add	x19, x19, #1
10000e7f0:     	sub	x8, x26, x25
10000e7f4:     	asr	x8, x8, #3
10000e7f8:     	mul	x8, x8, x24
10000e7fc:     	cmp	x19, x8
10000e800:     	b.hs	0x10000e970 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x354>
10000e804:     	ldr	x22, [x21, x19, lsl #3]
10000e808:     	mov	w8, #24
10000e80c:     	mul	x8, x19, x8
10000e810:     	ldr	x28, [x25, x8]
10000e814:     	ldp	x27, x8, [sp, #56]
10000e818:     	cmp	x27, x8
10000e81c:     	b.ne	0x10000e7e0 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x1c4>
10000e820:     	ldr	x23, [sp, #48]
10000e824:     	sub	x24, x27, x23
10000e828:     	asr	x20, x24, #3
10000e82c:     	add	x8, x20, #1
10000e830:     	lsr	x9, x8, #61
10000e834:     	cbnz	x9, 0x10000ea94 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x478>
10000e838:     	str	x26, [sp, #40]
10000e83c:     	asr	x9, x24, #2
10000e840:     	cmp	x9, x8
10000e844:     	csel	x8, x9, x8, hi
10000e848:     	mov	x9, #9223372036854775800
10000e84c:     	cmp	x24, x9
10000e850:     	mov	x9, #2305843009213693951
10000e854:     	csel	x26, x8, x9, lo
10000e858:     	cbz	x26, 0x10000e8a0 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x284>
10000e85c:     	lsr	x8, x26, #61
10000e860:     	cbnz	x8, 0x10000eaa0 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x484>
10000e864:     	lsl	x0, x26, #3
10000e868:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000e86c:     	add	x8, x0, x20, lsl #3
10000e870:     	ldr	x10, [x28, x22, lsl #3]
10000e874:     	mov	x9, x8
10000e878:     	str	x10, [x9], #8
10000e87c:     	cmp	x27, x23
10000e880:     	b.eq	0x10000e8bc <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x2a0>
10000e884:     	sub	x11, x27, #8
10000e888:     	sub	x10, x11, x23
10000e88c:     	cmp	x10, #88
10000e890:     	b.hs	0x10000e8c8 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x2ac>
10000e894:     	mov	x24, #-6148914691236517206
10000e898:     	movk	x24, #43691
10000e89c:     	b	0x10000e938 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x31c>
10000e8a0:     	mov	x0, #0
10000e8a4:     	add	x8, x0, x20, lsl #3
10000e8a8:     	ldr	x10, [x28, x22, lsl #3]
10000e8ac:     	mov	x9, x8
10000e8b0:     	str	x10, [x9], #8
10000e8b4:     	cmp	x27, x23
10000e8b8:     	b.ne	0x10000e884 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x268>
10000e8bc:     	mov	x24, #-6148914691236517206
10000e8c0:     	movk	x24, #43691
10000e8c4:     	b	0x10000e948 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x32c>
10000e8c8:     	add	x12, x0, x24
10000e8cc:     	sub	x11, x11, x12
10000e8d0:     	add	x11, x11, #8
10000e8d4:     	cmp	x11, #64
10000e8d8:     	mov	x24, #-6148914691236517206
10000e8dc:     	movk	x24, #43691
10000e8e0:     	b.lo	0x10000e938 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x31c>
10000e8e4:     	lsr	x10, x10, #3
10000e8e8:     	add	x10, x10, #1
10000e8ec:     	and	x11, x10, #0x3ffffffffffffff8
10000e8f0:     	lsl	x13, x11, #3
10000e8f4:     	sub	x12, x27, x13
10000e8f8:     	sub	x8, x8, x13
10000e8fc:     	sub	x13, x27, #32
10000e900:     	add	x14, x0, x20, lsl #3
10000e904:     	sub	x14, x14, #32
10000e908:     	mov	x15, x11
10000e90c:     	ldp	q1, q0, [x13]
10000e910:     	ldp	q3, q2, [x13, #-32]
10000e914:     	stp	q1, q0, [x14]
10000e918:     	stp	q3, q2, [x14, #-32]
10000e91c:     	sub	x13, x13, #64
10000e920:     	sub	x14, x14, #64
10000e924:     	sub	x15, x15, #8
10000e928:     	cbnz	x15, 0x10000e90c <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x2f0>
10000e92c:     	mov	x27, x12
10000e930:     	cmp	x10, x11
10000e934:     	b.eq	0x10000e948 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x32c>
10000e938:     	ldr	x10, [x27, #-8]!
10000e93c:     	str	x10, [x8, #-8]!
10000e940:     	cmp	x27, x23
10000e944:     	b.ne	0x10000e938 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x31c>
10000e948:     	add	x10, x0, x26, lsl #3
10000e94c:     	stp	x8, x9, [sp, #48]
10000e950:     	str	x10, [sp, #64]
10000e954:     	ldr	x26, [sp, #40]
10000e958:     	cbz	x23, 0x10000e7ec <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x1d0>
10000e95c:     	mov	x0, x23
10000e960:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000e964:     	ldr	x8, [sp, #32]
10000e968:     	ldp	x25, x26, [x8]
10000e96c:     	b	0x10000e7ec <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x1d0>
10000e970:     	ldr	x8, [sp, #16]
10000e974:     	ldp	x23, x8, [x8, #72]
10000e978:     	cmp	x23, x8
10000e97c:     	b.eq	0x10000e9e0 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x3c4>
10000e980:     	stp	xzr, xzr, [x23, #8]
10000e984:     	str	xzr, [x23]
10000e988:     	ldp	x21, x8, [sp, #48]
10000e98c:     	subs	x24, x8, x21
10000e990:     	ldr	x20, [sp, #8]
10000e994:     	b.eq	0x10000e9c4 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x3a8>
10000e998:     	tbnz	x24, #63, 0x10000eaa8 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x48c>
10000e99c:     	mov	x0, x24
10000e9a0:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000e9a4:     	asr	x8, x24, #3
10000e9a8:     	stp	x0, x0, [x23]
10000e9ac:     	add	x19, x0, x8, lsl #3
10000e9b0:     	str	x19, [x23, #16]
10000e9b4:     	mov	x1, x21
10000e9b8:     	mov	x2, x24
10000e9bc:     	bl	0x10002f1c4 <_vsnprintf+0x10002f1c4>
10000e9c0:     	str	x19, [x23, #8]
10000e9c4:     	add	x8, x23, #24
10000e9c8:     	ldr	x9, [sp, #16]
10000e9cc:     	str	x8, [x9, #72]
10000e9d0:     	ldr	x21, [sp, #72]
10000e9d4:     	mov	x24, #-6148914691236517206
10000e9d8:     	movk	x24, #43691
10000e9dc:     	b	0x10000e9f0 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x3d4>
10000e9e0:     	add	x1, sp, #48
10000e9e4:     	ldr	x0, [sp]
10000e9e8:     	bl	0x10001cb50 <void std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__push_back_slow_path<std::__1::vector<long long, std::__1::allocator<long long>> const&>(std::__1::vector<long long, std::__1::allocator<long long>> const&)>
10000e9ec:     	ldr	x20, [sp, #8]
10000e9f0:     	mov	x8, #0
10000e9f4:     	ldr	x0, [sp, #48]
10000e9f8:     	str	x0, [sp, #56]
10000e9fc:     	ldp	x15, x9, [sp, #24]
10000ea00:     	ldp	x25, x26, [x9]
10000ea04:     	sub	x9, x26, x25
10000ea08:     	asr	x9, x9, #3
10000ea0c:     	mul	x9, x9, x24
10000ea10:     	add	x10, x25, #8
10000ea14:     	lsl	x11, x8, #3
10000ea18:     	ldr	x12, [x21, x11]
10000ea1c:     	add	x12, x12, #1
10000ea20:     	ldp	x14, x13, [x10, #-8]
10000ea24:     	sub	x13, x13, x14
10000ea28:     	asr	x13, x13, #3
10000ea2c:     	udiv	x14, x12, x13
10000ea30:     	msub	x12, x14, x13, x12
10000ea34:     	str	x12, [x21, x11]
10000ea38:     	add	x8, x8, #1
10000ea3c:     	add	x10, x10, #24
10000ea40:     	cmp	x12, #0
10000ea44:     	ccmp	x8, x9, #2, eq
10000ea48:     	b.lo	0x10000ea14 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x3f8>
10000ea4c:     	add	x15, x15, #1
10000ea50:     	cmp	x15, x20
10000ea54:     	b.ne	0x10000e7cc <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x1b0>
10000ea58:     	cbz	x0, 0x10000ea64 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x448>
10000ea5c:     	str	x0, [sp, #56]
10000ea60:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000ea64:     	cbz	x21, 0x10000ea70 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x454>
10000ea68:     	mov	x0, x21
10000ea6c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000ea70:     	ldr	x0, [sp, #16]
10000ea74:     	ldp	x29, x30, [sp, #176]
10000ea78:     	ldp	x20, x19, [sp, #160]
10000ea7c:     	ldp	x22, x21, [sp, #144]
10000ea80:     	ldp	x24, x23, [sp, #128]
10000ea84:     	ldp	x26, x25, [sp, #112]
10000ea88:     	ldp	x28, x27, [sp, #96]
10000ea8c:     	add	sp, sp, #192
10000ea90:     	ret
10000ea94:     	add	x0, sp, #48
10000ea98:     	bl	0x10000a2cc <std::__1::vector<long long, std::__1::allocator<long long>>::__throw_length_error[abi:ue170006]() const>
10000ea9c:     	b	0x10000eaf0 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x4d4>
10000eaa0:     	bl	0x100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>
10000eaa4:     	b	0x10000eaf0 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x4d4>
10000eaa8:     	mov	x0, x23
10000eaac:     	bl	0x10000a2cc <std::__1::vector<long long, std::__1::allocator<long long>>::__throw_length_error[abi:ue170006]() const>
10000eab0:     	b	0x10000eaf0 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x4d4>
10000eab4:     	adrp	x0, 0x100038000 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x540>
10000eab8:     	add	x0, x0, #8
10000eabc:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10000eac0:     	cbz	w0, 0x10000e654 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x38>
10000eac4:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::ArgName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xc>
10000eac8:     	str	xzr, [x8]
10000eacc:     	adrp	x0, 0x100038000 <benchmark::internal::Benchmark::ArgName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x14>
10000ead0:     	add	x0, x0, #8
10000ead4:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10000ead8:     	b	0x10000e654 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x38>
10000eadc:     	add	x0, sp, #72
10000eae0:     	bl	0x10000745c <std::__1::vector<unsigned long, std::__1::allocator<unsigned long>>::__throw_length_error[abi:ue170006]() const>
10000eae4:     	b	0x10000eaf0 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x4d4>
10000eae8:     	add	x0, sp, #48
10000eaec:     	bl	0x10000a2cc <std::__1::vector<long long, std::__1::allocator<long long>>::__throw_length_error[abi:ue170006]() const>
10000eaf0:     	brk	#0x1
10000eaf4:     	b	0x10000eb38 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x51c>
10000eaf8:     	mov	x20, x0
10000eafc:     	ldr	x0, [sp, #72]
10000eb00:     	cbz	x0, 0x10000eb58 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x53c>
10000eb04:     	str	x0, [sp, #80]
10000eb08:     	b	0x10000eb54 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x538>
10000eb0c:     	b	0x10000eb38 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x51c>
10000eb10:     	b	0x10000eb14 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x4f8>
10000eb14:     	mov	x20, x0
10000eb18:     	ldr	x0, [x23]
10000eb1c:     	cbz	x0, 0x10000eb28 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x50c>
10000eb20:     	str	x0, [x23, #8]
10000eb24:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000eb28:     	ldr	x8, [sp, #16]
10000eb2c:     	str	x23, [x8, #72]
10000eb30:     	b	0x10000eb3c <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x520>
10000eb34:     	b	0x10000eb38 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x51c>
10000eb38:     	mov	x20, x0
10000eb3c:     	ldr	x0, [sp, #48]
10000eb40:     	cbz	x0, 0x10000eb4c <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x530>
10000eb44:     	str	x0, [sp, #56]
10000eb48:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000eb4c:     	ldr	x0, [sp, #72]
10000eb50:     	cbz	x0, 0x10000eb58 <benchmark::internal::Benchmark::ArgsProduct(std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>> const&)+0x53c>
10000eb54:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000eb58:     	mov	x0, x20
10000eb5c:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010000eb60 <benchmark::internal::Benchmark::ArgName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>:
10000eb60:     	sub	sp, sp, #80
10000eb64:     	stp	x22, x21, [sp, #32]
10000eb68:     	stp	x20, x19, [sp, #48]
10000eb6c:     	stp	x29, x30, [sp, #64]
10000eb70:     	add	x29, sp, #64
10000eb74:     	mov	x19, x0
10000eb78:     	adrp	x8, 0x100034000 <benchmark::internal::Benchmark::ArgName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xb0>
10000eb7c:     	ldr	x8, [x8, #928]
10000eb80:     	ldr	x8, [x8]
10000eb84:     	str	x8, [sp, #24]
10000eb88:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::ArgName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xd0>
10000eb8c:     	add	x8, x8, #8
10000eb90:     	ldaprb	w8, [x8]
10000eb94:     	tbz	w8, #0, 0x10000ec58 <benchmark::internal::Benchmark::ArgName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xf8>
10000eb98:     	ldrsb	w8, [x1, #23]
10000eb9c:     	tbnz	w8, #31, 0x10000ebb4 <benchmark::internal::Benchmark::ArgName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x54>
10000eba0:     	ldr	q0, [x1]
10000eba4:     	str	q0, [sp]
10000eba8:     	ldr	x8, [x1, #16]
10000ebac:     	str	x8, [sp, #16]
10000ebb0:     	b	0x10000ec00 <benchmark::internal::Benchmark::ArgName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xa0>
10000ebb4:     	ldp	x20, x22, [x1]
10000ebb8:     	cmp	x22, #22
10000ebbc:     	b.hi	0x10000ebcc <benchmark::internal::Benchmark::ArgName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x6c>
10000ebc0:     	strb	w22, [sp, #23]
10000ebc4:     	mov	x0, sp
10000ebc8:     	b	0x10000ebf4 <benchmark::internal::Benchmark::ArgName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x94>
10000ebcc:     	mov	x8, #9223372036854775792
10000ebd0:     	cmp	x22, x8
10000ebd4:     	b.hs	0x10000ec90 <benchmark::internal::Benchmark::ArgName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x130>
10000ebd8:     	orr	x8, x22, #0xf
10000ebdc:     	add	x21, x8, #1
10000ebe0:     	mov	x0, x21
10000ebe4:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000ebe8:     	orr	x8, x21, #0x8000000000000000
10000ebec:     	stp	x22, x8, [sp, #8]
10000ebf0:     	str	x0, [sp]
10000ebf4:     	add	x2, x22, #1
10000ebf8:     	mov	x1, x20
10000ebfc:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
10000ec00:     	add	x0, x19, #40
10000ec04:     	mov	x8, sp
10000ec08:     	add	x2, x8, #24
10000ec0c:     	mov	x1, sp
10000ec10:     	mov	w3, #1
10000ec14:     	bl	0x10001cd70 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__assign_with_size[abi:ue170006]<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, long)>
10000ec18:     	ldrsb	w8, [sp, #23]
10000ec1c:     	tbz	w8, #31, 0x10000ec28 <benchmark::internal::Benchmark::ArgName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xc8>
10000ec20:     	ldr	x0, [sp]
10000ec24:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000ec28:     	ldr	x8, [sp, #24]
10000ec2c:     	adrp	x9, 0x100034000 <benchmark::internal::Benchmark::ArgNames(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x10>
10000ec30:     	ldr	x9, [x9, #928]
10000ec34:     	ldr	x9, [x9]
10000ec38:     	cmp	x9, x8
10000ec3c:     	b.ne	0x10000ec8c <benchmark::internal::Benchmark::ArgName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x12c>
10000ec40:     	mov	x0, x19
10000ec44:     	ldp	x29, x30, [sp, #64]
10000ec48:     	ldp	x20, x19, [sp, #48]
10000ec4c:     	ldp	x22, x21, [sp, #32]
10000ec50:     	add	sp, sp, #80
10000ec54:     	ret
10000ec58:     	adrp	x0, 0x100038000 <benchmark::internal::Benchmark::ArgNames(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x4c>
10000ec5c:     	add	x0, x0, #8
10000ec60:     	mov	x20, x1
10000ec64:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10000ec68:     	mov	x1, x20
10000ec6c:     	cbz	w0, 0x10000eb98 <benchmark::internal::Benchmark::ArgName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x38>
10000ec70:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::ArgNames(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x64>
10000ec74:     	str	xzr, [x8]
10000ec78:     	adrp	x0, 0x100038000 <benchmark::internal::Benchmark::ArgNames(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x6c>
10000ec7c:     	add	x0, x0, #8
10000ec80:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10000ec84:     	mov	x1, x20
10000ec88:     	b	0x10000eb98 <benchmark::internal::Benchmark::ArgName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x38>
10000ec8c:     	bl	0x10002f0d4 <_vsnprintf+0x10002f0d4>
10000ec90:     	mov	x0, sp
10000ec94:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
10000ec98:     	mov	x19, x0
10000ec9c:     	ldrsb	w8, [sp, #23]
10000eca0:     	tbz	w8, #31, 0x10000ecac <benchmark::internal::Benchmark::ArgName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x14c>
10000eca4:     	ldr	x0, [sp]
10000eca8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000ecac:     	mov	x0, x19
10000ecb0:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010000ecb4 <benchmark::internal::Benchmark::ArgNames(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)>:
10000ecb4:     	sub	sp, sp, #48
10000ecb8:     	stp	x20, x19, [sp, #16]
10000ecbc:     	stp	x29, x30, [sp, #32]
10000ecc0:     	add	x29, sp, #32
10000ecc4:     	mov	x19, x0
10000ecc8:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::DenseRange(long long, long long, int)+0x24>
10000eccc:     	add	x8, x8, #8
10000ecd0:     	ldaprb	w8, [x8]
10000ecd4:     	tbz	w8, #0, 0x10000ed18 <benchmark::internal::Benchmark::ArgNames(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x64>
10000ecd8:     	add	x0, x19, #40
10000ecdc:     	cmp	x0, x1
10000ece0:     	b.eq	0x10000ed04 <benchmark::internal::Benchmark::ArgNames(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x50>
10000ece4:     	ldp	x8, x2, [x1]
10000ece8:     	sub	x9, x2, x8
10000ecec:     	asr	x9, x9, #3
10000ecf0:     	mov	x10, #-6148914691236517206
10000ecf4:     	movk	x10, #43691
10000ecf8:     	mul	x3, x9, x10
10000ecfc:     	mov	x1, x8
10000ed00:     	bl	0x10001d0e0 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__assign_with_size[abi:ue170006]<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, long)>
10000ed04:     	mov	x0, x19
10000ed08:     	ldp	x29, x30, [sp, #32]
10000ed0c:     	ldp	x20, x19, [sp, #16]
10000ed10:     	add	sp, sp, #48
10000ed14:     	ret
10000ed18:     	adrp	x0, 0x100038000 <benchmark::internal::Benchmark::DenseRange(long long, long long, int)+0x74>
10000ed1c:     	add	x0, x0, #8
10000ed20:     	str	x1, [sp, #8]
10000ed24:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10000ed28:     	ldr	x1, [sp, #8]
10000ed2c:     	cbz	w0, 0x10000ecd8 <benchmark::internal::Benchmark::ArgNames(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x24>
10000ed30:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::DenseRange(long long, long long, int)+0x8c>
10000ed34:     	str	xzr, [x8]
10000ed38:     	adrp	x0, 0x100038000 <benchmark::internal::Benchmark::DenseRange(long long, long long, int)+0x94>
10000ed3c:     	add	x0, x0, #8
10000ed40:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10000ed44:     	ldr	x1, [sp, #8]
10000ed48:     	b	0x10000ecd8 <benchmark::internal::Benchmark::ArgNames(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x24>

000000010000ed4c <benchmark::internal::Benchmark::DenseRange(long long, long long, int)>:
10000ed4c:     	sub	sp, sp, #96
10000ed50:     	stp	x24, x23, [sp, #32]
10000ed54:     	stp	x22, x21, [sp, #48]
10000ed58:     	stp	x20, x19, [sp, #64]
10000ed5c:     	stp	x29, x30, [sp, #80]
10000ed60:     	add	x29, sp, #80
10000ed64:     	mov	x19, x2
10000ed68:     	mov	x21, x1
10000ed6c:     	mov	x20, x0
10000ed70:     	adrp	x22, 0x100038000 <benchmark::internal::Benchmark::DenseRange(long long, long long, int)+0xcc>
10000ed74:     	add	x22, x22, #8
10000ed78:     	ldaprb	w8, [x22]
10000ed7c:     	tbz	w8, #0, 0x10000ee2c <benchmark::internal::Benchmark::DenseRange(long long, long long, int)+0xe0>
10000ed80:     	ldaprb	w8, [x22]
10000ed84:     	tbz	w8, #0, 0x10000ee60 <benchmark::internal::Benchmark::DenseRange(long long, long long, int)+0x114>
10000ed88:     	cmp	x21, x19
10000ed8c:     	b.le	0x10000edac <benchmark::internal::Benchmark::DenseRange(long long, long long, int)+0x60>
10000ed90:     	mov	x0, x20
10000ed94:     	ldp	x29, x30, [sp, #80]
10000ed98:     	ldp	x20, x19, [sp, #64]
10000ed9c:     	ldp	x22, x21, [sp, #48]
10000eda0:     	ldp	x24, x23, [sp, #32]
10000eda4:     	add	sp, sp, #96
10000eda8:     	ret
10000edac:     	add	x22, x20, #64
10000edb0:     	sxtw	x23, w3
10000edb4:     	b	0x10000edec <benchmark::internal::Benchmark::DenseRange(long long, long long, int)+0xa0>
10000edb8:     	stp	xzr, xzr, [x8, #8]
10000edbc:     	str	xzr, [x8]
10000edc0:     	ldr	x9, [sp, #8]
10000edc4:     	str	x9, [x8]
10000edc8:     	ldr	x9, [sp, #16]
10000edcc:     	str	x9, [x8, #8]
10000edd0:     	ldr	x9, [sp, #24]
10000edd4:     	str	x9, [x8, #16]
10000edd8:     	add	x8, x8, #24
10000eddc:     	str	x8, [x20, #72]
10000ede0:     	add	x21, x21, x23
10000ede4:     	cmp	x21, x19
10000ede8:     	b.gt	0x10000ed90 <benchmark::internal::Benchmark::DenseRange(long long, long long, int)+0x44>
10000edec:     	mov	w0, #8
10000edf0:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000edf4:     	str	x0, [sp, #8]
10000edf8:     	str	x21, [x0], #8
10000edfc:     	stp	x0, x0, [sp, #16]
10000ee00:     	ldp	x8, x9, [x20, #72]
10000ee04:     	cmp	x8, x9
10000ee08:     	b.lo	0x10000edb8 <benchmark::internal::Benchmark::DenseRange(long long, long long, int)+0x6c>
10000ee0c:     	add	x1, sp, #8
10000ee10:     	mov	x0, x22
10000ee14:     	bl	0x10001c42c <void std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__push_back_slow_path<std::__1::vector<long long, std::__1::allocator<long long>>>(std::__1::vector<long long, std::__1::allocator<long long>>&&)>
10000ee18:     	ldr	x0, [sp, #8]
10000ee1c:     	cbz	x0, 0x10000ede0 <benchmark::internal::Benchmark::DenseRange(long long, long long, int)+0x94>
10000ee20:     	str	x0, [sp, #16]
10000ee24:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000ee28:     	b	0x10000ede0 <benchmark::internal::Benchmark::DenseRange(long long, long long, int)+0x94>
10000ee2c:     	adrp	x0, 0x100038000 <benchmark::internal::Benchmark::Setup(void (*)(benchmark::State const&))>
10000ee30:     	add	x0, x0, #8
10000ee34:     	mov	x23, x3
10000ee38:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10000ee3c:     	mov	x3, x23
10000ee40:     	cbz	w0, 0x10000ed80 <benchmark::internal::Benchmark::DenseRange(long long, long long, int)+0x34>
10000ee44:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::Setup(void (*)(benchmark::State const&))+0x18>
10000ee48:     	str	xzr, [x8]
10000ee4c:     	adrp	x0, 0x100038000 <benchmark::internal::Benchmark::Setup(void (*)(benchmark::State const&))+0x20>
10000ee50:     	add	x0, x0, #8
10000ee54:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10000ee58:     	mov	x3, x23
10000ee5c:     	b	0x10000ed80 <benchmark::internal::Benchmark::DenseRange(long long, long long, int)+0x34>
10000ee60:     	adrp	x0, 0x100038000 <benchmark::internal::Benchmark::Setup(void (*)(benchmark::State const&))+0x34>
10000ee64:     	add	x0, x0, #8
10000ee68:     	mov	x22, x3
10000ee6c:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10000ee70:     	mov	x3, x22
10000ee74:     	cbz	w0, 0x10000ed88 <benchmark::internal::Benchmark::DenseRange(long long, long long, int)+0x3c>
10000ee78:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::Setup(void (*)(benchmark::State const&))+0x4c>
10000ee7c:     	str	xzr, [x8]
10000ee80:     	adrp	x0, 0x100038000 <benchmark::internal::Benchmark::Setup(void (*)(benchmark::State const&))+0x54>
10000ee84:     	add	x0, x0, #8
10000ee88:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10000ee8c:     	mov	x3, x22
10000ee90:     	b	0x10000ed88 <benchmark::internal::Benchmark::DenseRange(long long, long long, int)+0x3c>
10000ee94:     	mov	x19, x0
10000ee98:     	ldr	x0, [sp, #8]
10000ee9c:     	cbz	x0, 0x10000eea8 <benchmark::internal::Benchmark::DenseRange(long long, long long, int)+0x15c>
10000eea0:     	str	x0, [sp, #16]
10000eea4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000eea8:     	mov	x0, x19
10000eeac:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010000eeb0 <benchmark::internal::Benchmark::Apply(void (*)(benchmark::internal::Benchmark*))>:
10000eeb0:     	stp	x20, x19, [sp, #-32]!
10000eeb4:     	stp	x29, x30, [sp, #16]
10000eeb8:     	add	x29, sp, #16
10000eebc:     	mov	x19, x0
10000eec0:     	blr	x1
10000eec4:     	mov	x0, x19
10000eec8:     	ldp	x29, x30, [sp, #16]
10000eecc:     	ldp	x20, x19, [sp], #32
10000eed0:     	ret

000000010000eed4 <benchmark::internal::Benchmark::Setup(void (*)(benchmark::State const&))>:
10000eed4:     	sub	sp, sp, #32
10000eed8:     	stp	x29, x30, [sp, #16]
10000eedc:     	add	x29, sp, #16
10000eee0:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::Teardown(void (*)(benchmark::State const&))+0x40>
10000eee4:     	add	x8, x8, #8
10000eee8:     	ldaprb	w8, [x8]
10000eeec:     	tbz	w8, #0, 0x10000ef00 <benchmark::internal::Benchmark::Setup(void (*)(benchmark::State const&))+0x2c>
10000eef0:     	str	x1, [x0, #200]
10000eef4:     	ldp	x29, x30, [sp, #16]
10000eef8:     	add	sp, sp, #32
10000eefc:     	ret
10000ef00:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::Teardown(void (*)(benchmark::State const&))+0x60>
10000ef04:     	add	x8, x8, #8
10000ef08:     	stp	x1, x0, [sp]
10000ef0c:     	mov	x0, x8
10000ef10:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10000ef14:     	mov	x8, x0
10000ef18:     	ldp	x1, x0, [sp]
10000ef1c:     	cbz	w8, 0x10000eef0 <benchmark::internal::Benchmark::Setup(void (*)(benchmark::State const&))+0x1c>
10000ef20:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::RangeMultiplier(int)+0xc>
10000ef24:     	str	xzr, [x8]
10000ef28:     	adrp	x0, 0x100038000 <benchmark::internal::Benchmark::RangeMultiplier(int)+0x14>
10000ef2c:     	add	x0, x0, #8
10000ef30:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10000ef34:     	ldp	x1, x0, [sp]
10000ef38:     	str	x1, [x0, #200]
10000ef3c:     	ldp	x29, x30, [sp, #16]
10000ef40:     	add	sp, sp, #32
10000ef44:     	ret

000000010000ef48 <benchmark::internal::Benchmark::Teardown(void (*)(benchmark::State const&))>:
10000ef48:     	sub	sp, sp, #32
10000ef4c:     	stp	x29, x30, [sp, #16]
10000ef50:     	add	x29, sp, #16
10000ef54:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::RangeMultiplier(int)+0x40>
10000ef58:     	add	x8, x8, #8
10000ef5c:     	ldaprb	w8, [x8]
10000ef60:     	tbz	w8, #0, 0x10000ef74 <benchmark::internal::Benchmark::Teardown(void (*)(benchmark::State const&))+0x2c>
10000ef64:     	str	x1, [x0, #208]
10000ef68:     	ldp	x29, x30, [sp, #16]
10000ef6c:     	add	sp, sp, #32
10000ef70:     	ret
10000ef74:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::RangeMultiplier(int)+0x60>
10000ef78:     	add	x8, x8, #8
10000ef7c:     	stp	x1, x0, [sp]
10000ef80:     	mov	x0, x8
10000ef84:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10000ef88:     	mov	x8, x0
10000ef8c:     	ldp	x1, x0, [sp]
10000ef90:     	cbz	w8, 0x10000ef64 <benchmark::internal::Benchmark::Teardown(void (*)(benchmark::State const&))+0x1c>
10000ef94:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::MinTime(double)>
10000ef98:     	str	xzr, [x8]
10000ef9c:     	adrp	x0, 0x100038000 <benchmark::internal::Benchmark::MinTime(double)+0x8>
10000efa0:     	add	x0, x0, #8
10000efa4:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10000efa8:     	ldp	x1, x0, [sp]
10000efac:     	str	x1, [x0, #208]
10000efb0:     	ldp	x29, x30, [sp, #16]
10000efb4:     	add	sp, sp, #32
10000efb8:     	ret

000000010000efbc <benchmark::internal::Benchmark::RangeMultiplier(int)>:
10000efbc:     	sub	sp, sp, #32
10000efc0:     	stp	x29, x30, [sp, #16]
10000efc4:     	add	x29, sp, #16
10000efc8:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::MinTime(double)+0x34>
10000efcc:     	add	x8, x8, #8
10000efd0:     	ldaprb	w8, [x8]
10000efd4:     	tbz	w8, #0, 0x10000efe8 <benchmark::internal::Benchmark::RangeMultiplier(int)+0x2c>
10000efd8:     	str	w1, [x0, #96]
10000efdc:     	ldp	x29, x30, [sp, #16]
10000efe0:     	add	sp, sp, #32
10000efe4:     	ret
10000efe8:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::MinTime(double)+0x54>
10000efec:     	add	x8, x8, #8
10000eff0:     	str	x0, [sp, #8]
10000eff4:     	mov	x0, x8
10000eff8:     	str	w1, [sp, #4]
10000effc:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10000f000:     	ldr	w1, [sp, #4]
10000f004:     	mov	x8, x0
10000f008:     	ldr	x0, [sp, #8]
10000f00c:     	cbz	w8, 0x10000efd8 <benchmark::internal::Benchmark::RangeMultiplier(int)+0x1c>
10000f010:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::MinTime(double)+0x78>
10000f014:     	str	xzr, [x8]
10000f018:     	adrp	x0, 0x100038000 <benchmark::internal::Benchmark::MinTime(double)+0x80>
10000f01c:     	add	x0, x0, #8
10000f020:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10000f024:     	ldr	w1, [sp, #4]
10000f028:     	ldr	x0, [sp, #8]
10000f02c:     	str	w1, [x0, #96]
10000f030:     	ldp	x29, x30, [sp, #16]
10000f034:     	add	sp, sp, #32
10000f038:     	ret

000000010000f03c <benchmark::internal::Benchmark::MinTime(double)>:
10000f03c:     	sub	sp, sp, #32
10000f040:     	stp	x29, x30, [sp, #16]
10000f044:     	add	x29, sp, #16
10000f048:     	adrp	x9, 0x100038000 <benchmark::internal::Benchmark::MinTime(double)+0xb0>
10000f04c:     	add	x9, x9, #8
10000f050:     	ldaprb	w8, [x9]
10000f054:     	tbz	w8, #0, 0x10000f070 <benchmark::internal::Benchmark::MinTime(double)+0x34>
10000f058:     	ldaprb	w8, [x9]
10000f05c:     	tbz	w8, #0, 0x10000f0c8 <benchmark::internal::Benchmark::MinTime(double)+0x8c>
10000f060:     	str	d0, [x0, #104]
10000f064:     	ldp	x29, x30, [sp, #16]
10000f068:     	add	sp, sp, #32
10000f06c:     	ret
10000f070:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::MinTime(double)+0xd8>
10000f074:     	add	x8, x8, #8
10000f078:     	str	x0, [sp, #8]
10000f07c:     	mov	x0, x8
10000f080:     	str	d0, [sp]
10000f084:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10000f088:     	adrp	x9, 0x100038000 <benchmark::internal::Benchmark::MinWarmUpTime(double)+0x10>
10000f08c:     	add	x9, x9, #8
10000f090:     	ldr	d0, [sp]
10000f094:     	mov	x8, x0
10000f098:     	ldr	x0, [sp, #8]
10000f09c:     	cbz	w8, 0x10000f058 <benchmark::internal::Benchmark::MinTime(double)+0x1c>
10000f0a0:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::MinWarmUpTime(double)+0x28>
10000f0a4:     	str	xzr, [x8]
10000f0a8:     	adrp	x0, 0x100038000 <benchmark::internal::Benchmark::MinWarmUpTime(double)+0x30>
10000f0ac:     	add	x0, x0, #8
10000f0b0:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10000f0b4:     	adrp	x9, 0x100038000 <benchmark::internal::Benchmark::MinWarmUpTime(double)+0x3c>
10000f0b8:     	add	x9, x9, #8
10000f0bc:     	ldr	d0, [sp]
10000f0c0:     	ldr	x0, [sp, #8]
10000f0c4:     	b	0x10000f058 <benchmark::internal::Benchmark::MinTime(double)+0x1c>
10000f0c8:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::MinWarmUpTime(double)+0x50>
10000f0cc:     	add	x8, x8, #8
10000f0d0:     	str	x0, [sp, #8]
10000f0d4:     	mov	x0, x8
10000f0d8:     	str	d0, [sp]
10000f0dc:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10000f0e0:     	ldr	d0, [sp]
10000f0e4:     	mov	x8, x0
10000f0e8:     	ldr	x0, [sp, #8]
10000f0ec:     	cbz	w8, 0x10000f060 <benchmark::internal::Benchmark::MinTime(double)+0x24>
10000f0f0:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::MinWarmUpTime(double)+0x78>
10000f0f4:     	str	xzr, [x8]
10000f0f8:     	adrp	x0, 0x100038000 <benchmark::internal::Benchmark::MinWarmUpTime(double)+0x80>
10000f0fc:     	add	x0, x0, #8
10000f100:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10000f104:     	ldr	d0, [sp]
10000f108:     	ldr	x0, [sp, #8]
10000f10c:     	str	d0, [x0, #104]
10000f110:     	ldp	x29, x30, [sp, #16]
10000f114:     	add	sp, sp, #32
10000f118:     	ret

000000010000f11c <benchmark::internal::Benchmark::MinWarmUpTime(double)>:
10000f11c:     	sub	sp, sp, #32
10000f120:     	stp	x29, x30, [sp, #16]
10000f124:     	add	x29, sp, #16
10000f128:     	adrp	x9, 0x100038000 <benchmark::internal::Benchmark::MinWarmUpTime(double)+0xb0>
10000f12c:     	add	x9, x9, #8
10000f130:     	ldaprb	w8, [x9]
10000f134:     	tbz	w8, #0, 0x10000f150 <benchmark::internal::Benchmark::MinWarmUpTime(double)+0x34>
10000f138:     	ldaprb	w8, [x9]
10000f13c:     	tbz	w8, #0, 0x10000f1a8 <benchmark::internal::Benchmark::MinWarmUpTime(double)+0x8c>
10000f140:     	str	d0, [x0, #112]
10000f144:     	ldp	x29, x30, [sp, #16]
10000f148:     	add	sp, sp, #32
10000f14c:     	ret
10000f150:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::MinWarmUpTime(double)+0xd8>
10000f154:     	add	x8, x8, #8
10000f158:     	str	x0, [sp, #8]
10000f15c:     	mov	x0, x8
10000f160:     	str	d0, [sp]
10000f164:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10000f168:     	adrp	x9, 0x100038000 <benchmark::internal::Benchmark::Iterations(long long)+0x10>
10000f16c:     	add	x9, x9, #8
10000f170:     	ldr	d0, [sp]
10000f174:     	mov	x8, x0
10000f178:     	ldr	x0, [sp, #8]
10000f17c:     	cbz	w8, 0x10000f138 <benchmark::internal::Benchmark::MinWarmUpTime(double)+0x1c>
10000f180:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::Iterations(long long)+0x28>
10000f184:     	str	xzr, [x8]
10000f188:     	adrp	x0, 0x100038000 <benchmark::internal::Benchmark::Iterations(long long)+0x30>
10000f18c:     	add	x0, x0, #8
10000f190:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10000f194:     	adrp	x9, 0x100038000 <benchmark::internal::Benchmark::Iterations(long long)+0x3c>
10000f198:     	add	x9, x9, #8
10000f19c:     	ldr	d0, [sp]
10000f1a0:     	ldr	x0, [sp, #8]
10000f1a4:     	b	0x10000f138 <benchmark::internal::Benchmark::MinWarmUpTime(double)+0x1c>
10000f1a8:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::Iterations(long long)+0x50>
10000f1ac:     	add	x8, x8, #8
10000f1b0:     	str	x0, [sp, #8]
10000f1b4:     	mov	x0, x8
10000f1b8:     	str	d0, [sp]
10000f1bc:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10000f1c0:     	ldr	d0, [sp]
10000f1c4:     	mov	x8, x0
10000f1c8:     	ldr	x0, [sp, #8]
10000f1cc:     	cbz	w8, 0x10000f140 <benchmark::internal::Benchmark::MinWarmUpTime(double)+0x24>
10000f1d0:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::Iterations(long long)+0x78>
10000f1d4:     	str	xzr, [x8]
10000f1d8:     	adrp	x0, 0x100038000 <benchmark::internal::Benchmark::Iterations(long long)+0x80>
10000f1dc:     	add	x0, x0, #8
10000f1e0:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10000f1e4:     	ldr	d0, [sp]
10000f1e8:     	ldr	x0, [sp, #8]
10000f1ec:     	str	d0, [x0, #112]
10000f1f0:     	ldp	x29, x30, [sp, #16]
10000f1f4:     	add	sp, sp, #32
10000f1f8:     	ret

000000010000f1fc <benchmark::internal::Benchmark::Iterations(long long)>:
10000f1fc:     	sub	sp, sp, #32
10000f200:     	stp	x29, x30, [sp, #16]
10000f204:     	add	x29, sp, #16
10000f208:     	adrp	x9, 0x100038000 <benchmark::internal::Benchmark::Iterations(long long)+0xb0>
10000f20c:     	add	x9, x9, #8
10000f210:     	ldaprb	w8, [x9]
10000f214:     	tbz	w8, #0, 0x10000f238 <benchmark::internal::Benchmark::Iterations(long long)+0x3c>
10000f218:     	ldaprb	w8, [x9]
10000f21c:     	tbz	w8, #0, 0x10000f284 <benchmark::internal::Benchmark::Iterations(long long)+0x88>
10000f220:     	ldaprb	w8, [x9]
10000f224:     	tbz	w8, #0, 0x10000f2d0 <benchmark::internal::Benchmark::Iterations(long long)+0xd4>
10000f228:     	str	x1, [x0, #120]
10000f22c:     	ldp	x29, x30, [sp, #16]
10000f230:     	add	sp, sp, #32
10000f234:     	ret
10000f238:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::Iterations(long long)+0xe0>
10000f23c:     	add	x8, x8, #8
10000f240:     	stp	x1, x0, [sp]
10000f244:     	mov	x0, x8
10000f248:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10000f24c:     	adrp	x9, 0x100038000 <benchmark::internal::Benchmark::Iterations(long long)+0xf4>
10000f250:     	add	x9, x9, #8
10000f254:     	mov	x8, x0
10000f258:     	ldp	x1, x0, [sp]
10000f25c:     	cbz	w8, 0x10000f218 <benchmark::internal::Benchmark::Iterations(long long)+0x1c>
10000f260:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::Iterations(long long)+0x108>
10000f264:     	str	xzr, [x8]
10000f268:     	adrp	x0, 0x100038000 <benchmark::internal::Benchmark::Iterations(long long)+0x110>
10000f26c:     	add	x0, x0, #8
10000f270:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10000f274:     	adrp	x9, 0x100038000 <benchmark::internal::Benchmark::Repetitions(int)>
10000f278:     	add	x9, x9, #8
10000f27c:     	ldp	x1, x0, [sp]
10000f280:     	b	0x10000f218 <benchmark::internal::Benchmark::Iterations(long long)+0x1c>
10000f284:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::Repetitions(int)+0x10>
10000f288:     	add	x8, x8, #8
10000f28c:     	stp	x1, x0, [sp]
10000f290:     	mov	x0, x8
10000f294:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10000f298:     	adrp	x9, 0x100038000 <benchmark::internal::Benchmark::Repetitions(int)+0x24>
10000f29c:     	add	x9, x9, #8
10000f2a0:     	mov	x8, x0
10000f2a4:     	ldp	x1, x0, [sp]
10000f2a8:     	cbz	w8, 0x10000f220 <benchmark::internal::Benchmark::Iterations(long long)+0x24>
10000f2ac:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::Repetitions(int)+0x38>
10000f2b0:     	str	xzr, [x8]
10000f2b4:     	adrp	x0, 0x100038000 <benchmark::internal::Benchmark::Repetitions(int)+0x40>
10000f2b8:     	add	x0, x0, #8
10000f2bc:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10000f2c0:     	adrp	x9, 0x100038000 <benchmark::internal::Benchmark::Repetitions(int)+0x4c>
10000f2c4:     	add	x9, x9, #8
10000f2c8:     	ldp	x1, x0, [sp]
10000f2cc:     	b	0x10000f220 <benchmark::internal::Benchmark::Iterations(long long)+0x24>
10000f2d0:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::Repetitions(int)+0x5c>
10000f2d4:     	add	x8, x8, #8
10000f2d8:     	stp	x1, x0, [sp]
10000f2dc:     	mov	x0, x8
10000f2e0:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10000f2e4:     	mov	x8, x0
10000f2e8:     	ldp	x1, x0, [sp]
10000f2ec:     	cbz	w8, 0x10000f228 <benchmark::internal::Benchmark::Iterations(long long)+0x2c>
10000f2f0:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::Repetitions(int)+0x7c>
10000f2f4:     	str	xzr, [x8]
10000f2f8:     	adrp	x0, 0x100038000 <benchmark::internal::Benchmark::ReportAggregatesOnly(bool)+0x4>
10000f2fc:     	add	x0, x0, #8
10000f300:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10000f304:     	ldp	x1, x0, [sp]
10000f308:     	str	x1, [x0, #120]
10000f30c:     	ldp	x29, x30, [sp, #16]
10000f310:     	add	sp, sp, #32
10000f314:     	ret

000000010000f318 <benchmark::internal::Benchmark::Repetitions(int)>:
10000f318:     	sub	sp, sp, #32
10000f31c:     	stp	x29, x30, [sp, #16]
10000f320:     	add	x29, sp, #16
10000f324:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::DisplayAggregatesOnly(bool)+0x1c>
10000f328:     	add	x8, x8, #8
10000f32c:     	ldaprb	w8, [x8]
10000f330:     	tbz	w8, #0, 0x10000f344 <benchmark::internal::Benchmark::Repetitions(int)+0x2c>
10000f334:     	str	w1, [x0, #128]
10000f338:     	ldp	x29, x30, [sp, #16]
10000f33c:     	add	sp, sp, #32
10000f340:     	ret
10000f344:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::UseRealTime()+0xc>
10000f348:     	add	x8, x8, #8
10000f34c:     	str	x0, [sp, #8]
10000f350:     	mov	x0, x8
10000f354:     	str	w1, [sp, #4]
10000f358:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10000f35c:     	ldr	w1, [sp, #4]
10000f360:     	mov	x8, x0
10000f364:     	ldr	x0, [sp, #8]
10000f368:     	cbz	w8, 0x10000f334 <benchmark::internal::Benchmark::Repetitions(int)+0x1c>
10000f36c:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::UseRealTime()+0x34>
10000f370:     	str	xzr, [x8]
10000f374:     	adrp	x0, 0x100038000 <benchmark::internal::Benchmark::UseRealTime()+0x3c>
10000f378:     	add	x0, x0, #8
10000f37c:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10000f380:     	ldr	w1, [sp, #4]
10000f384:     	ldr	x0, [sp, #8]
10000f388:     	str	w1, [x0, #128]
10000f38c:     	ldp	x29, x30, [sp, #16]
10000f390:     	add	sp, sp, #32
10000f394:     	ret

000000010000f398 <benchmark::internal::Benchmark::ReportAggregatesOnly(bool)>:
10000f398:     	cmp	w1, #0
10000f39c:     	mov	w8, #6
10000f3a0:     	csinc	w8, w8, wzr, ne
10000f3a4:     	str	w8, [x0, #32]
10000f3a8:     	ret

000000010000f3ac <benchmark::internal::Benchmark::DisplayAggregatesOnly(bool)>:
10000f3ac:     	ldr	w8, [x0, #32]
10000f3b0:     	and	w9, w8, #0xfffffffb
10000f3b4:     	orr	w9, w9, #0x1
10000f3b8:     	mov	w10, #5
10000f3bc:     	orr	w8, w8, w10
10000f3c0:     	cmp	w1, #0
10000f3c4:     	csel	w8, w8, w9, ne
10000f3c8:     	str	w8, [x0, #32]
10000f3cc:     	ret

000000010000f3d0 <benchmark::internal::Benchmark::MeasureProcessCPUTime()>:
10000f3d0:     	mov	w8, #1
10000f3d4:     	strb	w8, [x0, #132]
10000f3d8:     	ret

000000010000f3dc <benchmark::internal::Benchmark::UseRealTime()>:
10000f3dc:     	stp	x20, x19, [sp, #-32]!
10000f3e0:     	stp	x29, x30, [sp, #16]
10000f3e4:     	add	x29, sp, #16
10000f3e8:     	mov	x19, x0
10000f3ec:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::UseManualTime()+0x34>
10000f3f0:     	add	x8, x8, #8
10000f3f4:     	ldaprb	w9, [x8]
10000f3f8:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::UseManualTime()+0x40>
10000f3fc:     	tbz	w9, #0, 0x10000f430 <benchmark::internal::Benchmark::UseRealTime()+0x54>
10000f400:     	ldr	x0, [x8]
10000f404:     	cbz	x0, 0x10000f418 <benchmark::internal::Benchmark::UseRealTime()+0x3c>
10000f408:     	adrp	x1, 0x100031000 <benchmark::internal::Benchmark::UseManualTime()+0x34>
10000f40c:     	add	x1, x1, #3943
10000f410:     	mov	w2, #56
10000f414:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10000f418:     	mov	w8, #1
10000f41c:     	strb	w8, [x19, #133]
10000f420:     	mov	x0, x19
10000f424:     	ldp	x29, x30, [sp, #16]
10000f428:     	ldp	x20, x19, [sp], #32
10000f42c:     	ret
10000f430:     	adrp	x0, 0x100038000 <benchmark::internal::Benchmark::UseManualTime()+0x78>
10000f434:     	add	x0, x0, #8
10000f438:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10000f43c:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::Complexity(benchmark::BigO)+0x4>
10000f440:     	cbz	w0, 0x10000f400 <benchmark::internal::Benchmark::UseRealTime()+0x24>
10000f444:     	str	xzr, [x8]
10000f448:     	adrp	x0, 0x100038000 <benchmark::internal::Benchmark::Complexity(double (*)(long long))+0x8>
10000f44c:     	add	x0, x0, #8
10000f450:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10000f454:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::Threads(int)+0x4>
10000f458:     	b	0x10000f400 <benchmark::internal::Benchmark::UseRealTime()+0x24>

000000010000f45c <benchmark::internal::Benchmark::UseManualTime()>:
10000f45c:     	stp	x20, x19, [sp, #-32]!
10000f460:     	stp	x29, x30, [sp, #16]
10000f464:     	add	x29, sp, #16
10000f468:     	mov	x19, x0
10000f46c:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::Threads(int)+0x1c>
10000f470:     	add	x8, x8, #8
10000f474:     	ldaprb	w9, [x8]
10000f478:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::Threads(int)+0x28>
10000f47c:     	tbz	w9, #0, 0x10000f4b0 <benchmark::internal::Benchmark::UseManualTime()+0x54>
10000f480:     	ldr	x0, [x8]
10000f484:     	cbz	x0, 0x10000f498 <benchmark::internal::Benchmark::UseManualTime()+0x3c>
10000f488:     	adrp	x1, 0x100031000 <benchmark::internal::Benchmark::Threads(int)+0x1c>
10000f48c:     	add	x1, x1, #3943
10000f490:     	mov	w2, #56
10000f494:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10000f498:     	mov	w8, #1
10000f49c:     	strb	w8, [x19, #134]
10000f4a0:     	mov	x0, x19
10000f4a4:     	ldp	x29, x30, [sp, #16]
10000f4a8:     	ldp	x20, x19, [sp], #32
10000f4ac:     	ret
10000f4b0:     	adrp	x0, 0x100038000 <benchmark::internal::Benchmark::Threads(int)+0x60>
10000f4b4:     	add	x0, x0, #8
10000f4b8:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10000f4bc:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::Threads(int)+0x6c>
10000f4c0:     	cbz	w0, 0x10000f480 <benchmark::internal::Benchmark::UseManualTime()+0x24>
10000f4c4:     	str	xzr, [x8]
10000f4c8:     	adrp	x0, 0x100038000 <benchmark::internal::Benchmark::Threads(int)+0x78>
10000f4cc:     	add	x0, x0, #8
10000f4d0:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10000f4d4:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::Threads(int)+0x84>
10000f4d8:     	b	0x10000f480 <benchmark::internal::Benchmark::UseManualTime()+0x24>

000000010000f4dc <benchmark::internal::Benchmark::Complexity(benchmark::BigO)>:
10000f4dc:     	str	w1, [x0, #136]
10000f4e0:     	ret

000000010000f4e4 <benchmark::internal::Benchmark::Complexity(double (*)(long long))>:
10000f4e4:     	str	x1, [x0, #144]
10000f4e8:     	mov	w8, #8
10000f4ec:     	str	w8, [x0, #136]
10000f4f0:     	ret

000000010000f4f4 <benchmark::internal::Benchmark::Threads(int)>:
10000f4f4:     	stp	x26, x25, [sp, #-80]!
10000f4f8:     	stp	x24, x23, [sp, #16]
10000f4fc:     	stp	x22, x21, [sp, #32]
10000f500:     	stp	x20, x19, [sp, #48]
10000f504:     	stp	x29, x30, [sp, #64]
10000f508:     	add	x29, sp, #64
10000f50c:     	mov	x21, x1
10000f510:     	mov	x19, x0
10000f514:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::Threads(int)+0xc4>
10000f518:     	add	x8, x8, #8
10000f51c:     	ldaprb	w8, [x8]
10000f520:     	tbz	w8, #0, 0x10000f670 <benchmark::internal::Benchmark::Threads(int)+0x17c>
10000f524:     	ldp	x22, x8, [x19, #184]
10000f528:     	cmp	x22, x8
10000f52c:     	b.eq	0x10000f53c <benchmark::internal::Benchmark::Threads(int)+0x48>
10000f530:     	str	w21, [x22], #4
10000f534:     	str	x22, [x19, #184]
10000f538:     	b	0x10000f654 <benchmark::internal::Benchmark::Threads(int)+0x160>
10000f53c:     	add	x0, x19, #176
10000f540:     	ldr	x20, [x0]
10000f544:     	sub	x24, x22, x20
10000f548:     	asr	x23, x24, #2
10000f54c:     	add	x8, x23, #1
10000f550:     	lsr	x9, x8, #62
10000f554:     	cbnz	x9, 0x10000f698 <benchmark::internal::Benchmark::Threads(int)+0x1a4>
10000f558:     	asr	x9, x24, #1
10000f55c:     	cmp	x9, x8
10000f560:     	csel	x8, x9, x8, hi
10000f564:     	mov	x9, #9223372036854775804
10000f568:     	mov	x10, #4611686018427387903
10000f56c:     	cmp	x24, x9
10000f570:     	csel	x25, x8, x10, lo
10000f574:     	cbz	x25, 0x10000f5a4 <benchmark::internal::Benchmark::Threads(int)+0xb0>
10000f578:     	lsr	x8, x25, #62
10000f57c:     	cbnz	x8, 0x10000f69c <benchmark::internal::Benchmark::Threads(int)+0x1a8>
10000f580:     	lsl	x0, x25, #2
10000f584:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000f588:     	add	x9, x0, x23, lsl #2
10000f58c:     	add	x8, x0, x25, lsl #2
10000f590:     	mov	x10, x9
10000f594:     	str	w21, [x10], #4
10000f598:     	subs	x11, x22, x20
10000f59c:     	b.ne	0x10000f5c0 <benchmark::internal::Benchmark::Threads(int)+0xcc>
10000f5a0:     	b	0x10000f640 <benchmark::internal::Benchmark::Threads(int)+0x14c>
10000f5a4:     	mov	x0, #0
10000f5a8:     	add	x9, x0, x23, lsl #2
10000f5ac:     	add	x8, x0, x25, lsl #2
10000f5b0:     	mov	x10, x9
10000f5b4:     	str	w21, [x10], #4
10000f5b8:     	subs	x11, x22, x20
10000f5bc:     	b.eq	0x10000f640 <benchmark::internal::Benchmark::Threads(int)+0x14c>
10000f5c0:     	sub	x11, x11, #4
10000f5c4:     	cmp	x11, #60
10000f5c8:     	b.lo	0x10000f630 <benchmark::internal::Benchmark::Threads(int)+0x13c>
10000f5cc:     	sub	x12, x22, x0
10000f5d0:     	sub	x12, x12, x24
10000f5d4:     	cmp	x12, #64
10000f5d8:     	b.lo	0x10000f630 <benchmark::internal::Benchmark::Threads(int)+0x13c>
10000f5dc:     	lsr	x11, x11, #2
10000f5e0:     	add	x11, x11, #1
10000f5e4:     	and	x12, x11, #0x7ffffffffffffff0
10000f5e8:     	lsl	x14, x12, #2
10000f5ec:     	sub	x13, x22, x14
10000f5f0:     	sub	x9, x9, x14
10000f5f4:     	sub	x14, x22, #32
10000f5f8:     	add	x15, x0, x23, lsl #2
10000f5fc:     	sub	x15, x15, #32
10000f600:     	mov	x16, x12
10000f604:     	ldp	q1, q0, [x14]
10000f608:     	ldp	q3, q2, [x14, #-32]
10000f60c:     	stp	q1, q0, [x15]
10000f610:     	stp	q3, q2, [x15, #-32]
10000f614:     	sub	x14, x14, #64
10000f618:     	sub	x15, x15, #64
10000f61c:     	sub	x16, x16, #16
10000f620:     	cbnz	x16, 0x10000f604 <benchmark::internal::Benchmark::Threads(int)+0x110>
10000f624:     	mov	x22, x13
10000f628:     	cmp	x11, x12
10000f62c:     	b.eq	0x10000f640 <benchmark::internal::Benchmark::Threads(int)+0x14c>
10000f630:     	ldr	w11, [x22, #-4]!
10000f634:     	str	w11, [x9, #-4]!
10000f638:     	cmp	x22, x20
10000f63c:     	b.ne	0x10000f630 <benchmark::internal::Benchmark::Threads(int)+0x13c>
10000f640:     	stp	x9, x10, [x19, #176]
10000f644:     	str	x8, [x19, #192]
10000f648:     	cbz	x20, 0x10000f654 <benchmark::internal::Benchmark::Threads(int)+0x160>
10000f64c:     	mov	x0, x20
10000f650:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000f654:     	mov	x0, x19
10000f658:     	ldp	x29, x30, [sp, #64]
10000f65c:     	ldp	x20, x19, [sp, #48]
10000f660:     	ldp	x22, x21, [sp, #32]
10000f664:     	ldp	x24, x23, [sp, #16]
10000f668:     	ldp	x26, x25, [sp], #80
10000f66c:     	ret
10000f670:     	adrp	x0, 0x100038000 <benchmark::internal::Benchmark::ThreadRange(int, int)+0x74>
10000f674:     	add	x0, x0, #8
10000f678:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10000f67c:     	cbz	w0, 0x10000f524 <benchmark::internal::Benchmark::Threads(int)+0x30>
10000f680:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::ThreadRange(int, int)+0x84>
10000f684:     	str	xzr, [x8]
10000f688:     	adrp	x0, 0x100038000 <benchmark::internal::Benchmark::ThreadRange(int, int)+0x8c>
10000f68c:     	add	x0, x0, #8
10000f690:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10000f694:     	b	0x10000f524 <benchmark::internal::Benchmark::Threads(int)+0x30>
10000f698:     	bl	0x10001c040 <std::__1::vector<int, std::__1::allocator<int>>::__throw_length_error[abi:ue170006]() const>
10000f69c:     	bl	0x100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>

000000010000f6a0 <benchmark::internal::Benchmark::ThreadRange(int, int)>:
10000f6a0:     	sub	sp, sp, #48
10000f6a4:     	stp	x20, x19, [sp, #16]
10000f6a8:     	stp	x29, x30, [sp, #32]
10000f6ac:     	add	x29, sp, #32
10000f6b0:     	mov	x19, x0
10000f6b4:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::ThreadRange(int, int)+0xb8>
10000f6b8:     	add	x8, x8, #8
10000f6bc:     	ldaprb	w9, [x8]
10000f6c0:     	tbz	w9, #0, 0x10000f6ec <benchmark::internal::Benchmark::ThreadRange(int, int)+0x4c>
10000f6c4:     	ldaprb	w8, [x8]
10000f6c8:     	tbz	w8, #0, 0x10000f730 <benchmark::internal::Benchmark::ThreadRange(int, int)+0x90>
10000f6cc:     	add	x0, x19, #176
10000f6d0:     	mov	w3, #2
10000f6d4:     	bl	0x10000f764 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)>
10000f6d8:     	mov	x0, x19
10000f6dc:     	ldp	x29, x30, [sp, #32]
10000f6e0:     	ldp	x20, x19, [sp, #16]
10000f6e4:     	add	sp, sp, #48
10000f6e8:     	ret
10000f6ec:     	adrp	x0, 0x100038000 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x2c>
10000f6f0:     	add	x0, x0, #8
10000f6f4:     	stp	w1, w2, [sp, #8]
10000f6f8:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10000f6fc:     	adrp	x8, 0x100038000 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x3c>
10000f700:     	add	x8, x8, #8
10000f704:     	ldp	w1, w2, [sp, #8]
10000f708:     	cbz	w0, 0x10000f6c4 <benchmark::internal::Benchmark::ThreadRange(int, int)+0x24>
10000f70c:     	adrp	x8, 0x100038000 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x4c>
10000f710:     	str	xzr, [x8]
10000f714:     	adrp	x0, 0x100038000 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x54>
10000f718:     	add	x0, x0, #8
10000f71c:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10000f720:     	adrp	x8, 0x100038000 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x60>
10000f724:     	add	x8, x8, #8
10000f728:     	ldp	w1, w2, [sp, #8]
10000f72c:     	b	0x10000f6c4 <benchmark::internal::Benchmark::ThreadRange(int, int)+0x24>
10000f730:     	adrp	x0, 0x100038000 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x70>
10000f734:     	add	x0, x0, #8
10000f738:     	stp	w1, w2, [sp, #8]
10000f73c:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10000f740:     	ldp	w1, w2, [sp, #8]
10000f744:     	cbz	w0, 0x10000f6cc <benchmark::internal::Benchmark::ThreadRange(int, int)+0x2c>
10000f748:     	adrp	x8, 0x100038000 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x88>
10000f74c:     	str	xzr, [x8]
10000f750:     	adrp	x0, 0x100038000 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x90>
10000f754:     	add	x0, x0, #8
10000f758:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10000f75c:     	ldp	w1, w2, [sp, #8]
10000f760:     	b	0x10000f6cc <benchmark::internal::Benchmark::ThreadRange(int, int)+0x2c>

000000010000f764 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)>:
10000f764:     	stp	x28, x27, [sp, #-96]!
10000f768:     	stp	x26, x25, [sp, #16]
10000f76c:     	stp	x24, x23, [sp, #32]
10000f770:     	stp	x22, x21, [sp, #48]
10000f774:     	stp	x20, x19, [sp, #64]
10000f778:     	stp	x29, x30, [sp, #80]
10000f77c:     	add	x29, sp, #80
10000f780:     	mov	x21, x3
10000f784:     	mov	x20, x2
10000f788:     	mov	x22, x1
10000f78c:     	mov	x19, x0
10000f790:     	adrp	x23, 0x100038000 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0xd0>
10000f794:     	add	x23, x23, #8
10000f798:     	ldaprb	w8, [x23]
10000f79c:     	tbz	w8, #0, 0x10000fcc8 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x564>
10000f7a0:     	ldaprb	w8, [x23]
10000f7a4:     	tbz	w8, #0, 0x10000fcf0 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x58c>
10000f7a8:     	ldp	x24, x8, [x19, #8]
10000f7ac:     	cmp	x24, x8
10000f7b0:     	b.eq	0x10000f7c0 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x5c>
10000f7b4:     	str	w22, [x24], #4
10000f7b8:     	str	x24, [x19, #8]
10000f7bc:     	b	0x10000f8d4 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x170>
10000f7c0:     	ldr	x23, [x19]
10000f7c4:     	sub	x26, x24, x23
10000f7c8:     	asr	x25, x26, #2
10000f7cc:     	add	x8, x25, #1
10000f7d0:     	lsr	x9, x8, #62
10000f7d4:     	cbnz	x9, 0x10000fd18 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x5b4>
10000f7d8:     	asr	x9, x26, #1
10000f7dc:     	cmp	x9, x8
10000f7e0:     	csel	x8, x9, x8, hi
10000f7e4:     	mov	x9, #9223372036854775804
10000f7e8:     	mov	x10, #4611686018427387903
10000f7ec:     	cmp	x26, x9
10000f7f0:     	csel	x27, x8, x10, lo
10000f7f4:     	cbz	x27, 0x10000f824 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0xc0>
10000f7f8:     	lsr	x8, x27, #62
10000f7fc:     	cbnz	x8, 0x10000fd20 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x5bc>
10000f800:     	lsl	x0, x27, #2
10000f804:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000f808:     	add	x9, x0, x25, lsl #2
10000f80c:     	add	x8, x0, x27, lsl #2
10000f810:     	mov	x10, x9
10000f814:     	str	w22, [x10], #4
10000f818:     	subs	x11, x24, x23
10000f81c:     	b.ne	0x10000f840 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0xdc>
10000f820:     	b	0x10000f8c0 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x15c>
10000f824:     	mov	x0, #0
10000f828:     	add	x9, x0, x25, lsl #2
10000f82c:     	add	x8, x0, x27, lsl #2
10000f830:     	mov	x10, x9
10000f834:     	str	w22, [x10], #4
10000f838:     	subs	x11, x24, x23
10000f83c:     	b.eq	0x10000f8c0 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x15c>
10000f840:     	sub	x11, x11, #4
10000f844:     	cmp	x11, #60
10000f848:     	b.lo	0x10000f8b0 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x14c>
10000f84c:     	add	x12, x26, x0
10000f850:     	sub	x12, x24, x12
10000f854:     	cmp	x12, #64
10000f858:     	b.lo	0x10000f8b0 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x14c>
10000f85c:     	lsr	x11, x11, #2
10000f860:     	add	x11, x11, #1
10000f864:     	and	x12, x11, #0x7ffffffffffffff0
10000f868:     	lsl	x14, x12, #2
10000f86c:     	sub	x13, x24, x14
10000f870:     	sub	x9, x9, x14
10000f874:     	sub	x14, x24, #32
10000f878:     	add	x15, x0, x25, lsl #2
10000f87c:     	sub	x15, x15, #32
10000f880:     	mov	x16, x12
10000f884:     	ldp	q1, q0, [x14]
10000f888:     	ldp	q3, q2, [x14, #-32]
10000f88c:     	stp	q1, q0, [x15]
10000f890:     	stp	q3, q2, [x15, #-32]
10000f894:     	sub	x14, x14, #64
10000f898:     	sub	x15, x15, #64
10000f89c:     	sub	x16, x16, #16
10000f8a0:     	cbnz	x16, 0x10000f884 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x120>
10000f8a4:     	mov	x24, x13
10000f8a8:     	cmp	x11, x12
10000f8ac:     	b.eq	0x10000f8c0 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x15c>
10000f8b0:     	ldr	w11, [x24, #-4]!
10000f8b4:     	str	w11, [x9, #-4]!
10000f8b8:     	cmp	x24, x23
10000f8bc:     	b.ne	0x10000f8b0 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x14c>
10000f8c0:     	stp	x9, x10, [x19]
10000f8c4:     	str	x8, [x19, #16]
10000f8c8:     	cbz	x23, 0x10000f8d4 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x170>
10000f8cc:     	mov	x0, x23
10000f8d0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000f8d4:     	cmp	w22, w20
10000f8d8:     	b.eq	0x10000fb98 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x434>
10000f8dc:     	add	w23, w22, #1
10000f8e0:     	cmp	w23, w20
10000f8e4:     	b.ne	0x10000f958 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x1f4>
10000f8e8:     	ldp	x22, x8, [x19, #8]
10000f8ec:     	cmp	x22, x8
10000f8f0:     	b.ne	0x10000fb90 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x42c>
10000f8f4:     	ldr	x21, [x19]
10000f8f8:     	sub	x24, x22, x21
10000f8fc:     	asr	x23, x24, #2
10000f900:     	add	x8, x23, #1
10000f904:     	lsr	x9, x8, #62
10000f908:     	cbnz	x9, 0x10000fd18 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x5b4>
10000f90c:     	asr	x9, x24, #1
10000f910:     	cmp	x9, x8
10000f914:     	csel	x8, x9, x8, hi
10000f918:     	mov	x9, #9223372036854775804
10000f91c:     	mov	x10, #4611686018427387903
10000f920:     	cmp	x24, x9
10000f924:     	csel	x25, x8, x10, lo
10000f928:     	cbz	x25, 0x10000fa04 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x2a0>
10000f92c:     	lsr	x8, x25, #62
10000f930:     	cbnz	x8, 0x10000fd20 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x5bc>
10000f934:     	lsl	x0, x25, #2
10000f938:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000f93c:     	add	x9, x0, x23, lsl #2
10000f940:     	add	x8, x0, x25, lsl #2
10000f944:     	mov	x10, x9
10000f948:     	str	w20, [x10], #4
10000f94c:     	subs	x11, x22, x21
10000f950:     	b.ne	0x10000fa20 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x2bc>
10000f954:     	b	0x10000fc9c <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x538>
10000f958:     	sub	w24, w20, #1
10000f95c:     	cmn	w22, #2
10000f960:     	b.gt	0x10000f97c <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x218>
10000f964:     	cmn	w24, #1
10000f968:     	csinv	w2, w24, wzr, lt
10000f96c:     	mov	x0, x19
10000f970:     	mov	x1, x23
10000f974:     	mov	x3, x21
10000f978:     	bl	0x10001d73c <void benchmark::internal::AddNegatedPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)>
10000f97c:     	tbz	w22, #31, 0x10000fb54 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x3f0>
10000f980:     	tbnz	w20, #31, 0x10000fb54 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x3f0>
10000f984:     	ldp	x25, x8, [x19, #8]
10000f988:     	cmp	x25, x8
10000f98c:     	b.hs	0x10000f99c <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x238>
10000f990:     	str	wzr, [x25], #4
10000f994:     	str	x25, [x19, #8]
10000f998:     	b	0x10000fb54 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x3f0>
10000f99c:     	ldr	x22, [x19]
10000f9a0:     	sub	x27, x25, x22
10000f9a4:     	asr	x26, x27, #2
10000f9a8:     	add	x9, x26, #1
10000f9ac:     	lsr	x10, x9, #62
10000f9b0:     	cbnz	x10, 0x10000fd18 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x5b4>
10000f9b4:     	mov	x10, #9223372036854775804
10000f9b8:     	sub	x8, x8, x22
10000f9bc:     	asr	x11, x8, #1
10000f9c0:     	cmp	x11, x9
10000f9c4:     	csel	x9, x11, x9, hi
10000f9c8:     	cmp	x8, x10
10000f9cc:     	mov	x8, #4611686018427387903
10000f9d0:     	csel	x28, x9, x8, lo
10000f9d4:     	cbz	x28, 0x10000faa4 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x340>
10000f9d8:     	lsr	x8, x28, #62
10000f9dc:     	cbnz	x8, 0x10000fd20 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x5bc>
10000f9e0:     	lsl	x0, x28, #2
10000f9e4:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000f9e8:     	add	x9, x0, x26, lsl #2
10000f9ec:     	add	x8, x0, x28, lsl #2
10000f9f0:     	mov	x10, x9
10000f9f4:     	str	wzr, [x10], #4
10000f9f8:     	subs	x11, x25, x22
10000f9fc:     	b.ne	0x10000fac0 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x35c>
10000fa00:     	b	0x10000fb40 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x3dc>
10000fa04:     	mov	x0, #0
10000fa08:     	add	x9, x0, x23, lsl #2
10000fa0c:     	add	x8, x0, x25, lsl #2
10000fa10:     	mov	x10, x9
10000fa14:     	str	w20, [x10], #4
10000fa18:     	subs	x11, x22, x21
10000fa1c:     	b.eq	0x10000fc9c <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x538>
10000fa20:     	sub	x11, x11, #4
10000fa24:     	cmp	x11, #60
10000fa28:     	b.lo	0x10000fa90 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x32c>
10000fa2c:     	sub	x12, x22, x0
10000fa30:     	sub	x12, x12, x24
10000fa34:     	cmp	x12, #64
10000fa38:     	b.lo	0x10000fa90 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x32c>
10000fa3c:     	lsr	x11, x11, #2
10000fa40:     	add	x11, x11, #1
10000fa44:     	and	x12, x11, #0x7ffffffffffffff0
10000fa48:     	lsl	x14, x12, #2
10000fa4c:     	sub	x13, x22, x14
10000fa50:     	sub	x9, x9, x14
10000fa54:     	sub	x14, x22, #32
10000fa58:     	add	x15, x0, x23, lsl #2
10000fa5c:     	sub	x15, x15, #32
10000fa60:     	mov	x16, x12
10000fa64:     	ldp	q1, q0, [x14]
10000fa68:     	ldp	q3, q2, [x14, #-32]
10000fa6c:     	stp	q1, q0, [x15]
10000fa70:     	stp	q3, q2, [x15, #-32]
10000fa74:     	sub	x14, x14, #64
10000fa78:     	sub	x15, x15, #64
10000fa7c:     	sub	x16, x16, #16
10000fa80:     	cbnz	x16, 0x10000fa64 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x300>
10000fa84:     	mov	x22, x13
10000fa88:     	cmp	x11, x12
10000fa8c:     	b.eq	0x10000fc9c <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x538>
10000fa90:     	ldr	w11, [x22, #-4]!
10000fa94:     	str	w11, [x9, #-4]!
10000fa98:     	cmp	x22, x21
10000fa9c:     	b.ne	0x10000fa90 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x32c>
10000faa0:     	b	0x10000fc9c <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x538>
10000faa4:     	mov	x0, #0
10000faa8:     	add	x9, x0, x26, lsl #2
10000faac:     	add	x8, x0, x28, lsl #2
10000fab0:     	mov	x10, x9
10000fab4:     	str	wzr, [x10], #4
10000fab8:     	subs	x11, x25, x22
10000fabc:     	b.eq	0x10000fb40 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x3dc>
10000fac0:     	sub	x11, x11, #4
10000fac4:     	cmp	x11, #60
10000fac8:     	b.lo	0x10000fb30 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x3cc>
10000facc:     	sub	x12, x25, x0
10000fad0:     	sub	x12, x12, x27
10000fad4:     	cmp	x12, #64
10000fad8:     	b.lo	0x10000fb30 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x3cc>
10000fadc:     	lsr	x11, x11, #2
10000fae0:     	add	x11, x11, #1
10000fae4:     	and	x12, x11, #0x7ffffffffffffff0
10000fae8:     	lsl	x14, x12, #2
10000faec:     	sub	x13, x25, x14
10000faf0:     	sub	x9, x9, x14
10000faf4:     	sub	x14, x25, #32
10000faf8:     	add	x15, x0, x26, lsl #2
10000fafc:     	sub	x15, x15, #32
10000fb00:     	mov	x16, x12
10000fb04:     	ldp	q1, q0, [x14]
10000fb08:     	ldp	q3, q2, [x14, #-32]
10000fb0c:     	stp	q1, q0, [x15]
10000fb10:     	stp	q3, q2, [x15, #-32]
10000fb14:     	sub	x14, x14, #64
10000fb18:     	sub	x15, x15, #64
10000fb1c:     	sub	x16, x16, #16
10000fb20:     	cbnz	x16, 0x10000fb04 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x3a0>
10000fb24:     	mov	x25, x13
10000fb28:     	cmp	x11, x12
10000fb2c:     	b.eq	0x10000fb40 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x3dc>
10000fb30:     	ldr	w11, [x25, #-4]!
10000fb34:     	str	w11, [x9, #-4]!
10000fb38:     	cmp	x25, x22
10000fb3c:     	b.ne	0x10000fb30 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x3cc>
10000fb40:     	stp	x9, x10, [x19]
10000fb44:     	str	x8, [x19, #16]
10000fb48:     	cbz	x22, 0x10000fb54 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x3f0>
10000fb4c:     	mov	x0, x22
10000fb50:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000fb54:     	cmp	w20, #2
10000fb58:     	b.lt	0x10000fb74 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x410>
10000fb5c:     	cmp	w23, #1
10000fb60:     	csinc	w1, w23, wzr, gt
10000fb64:     	mov	x0, x19
10000fb68:     	mov	x2, x24
10000fb6c:     	mov	x3, x21
10000fb70:     	bl	0x10001d97c <std::__1::vector<int, std::__1::allocator<int>>::iterator benchmark::internal::AddPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)>
10000fb74:     	ldr	x22, [x19, #8]
10000fb78:     	ldur	w8, [x22, #-4]
10000fb7c:     	cmp	w8, w20
10000fb80:     	b.eq	0x10000fb98 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x434>
10000fb84:     	ldr	x8, [x19, #16]
10000fb88:     	cmp	x22, x8
10000fb8c:     	b.eq	0x10000fbb4 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x450>
10000fb90:     	str	w20, [x22], #4
10000fb94:     	str	x22, [x19, #8]
10000fb98:     	ldp	x29, x30, [sp, #80]
10000fb9c:     	ldp	x20, x19, [sp, #64]
10000fba0:     	ldp	x22, x21, [sp, #48]
10000fba4:     	ldp	x24, x23, [sp, #32]
10000fba8:     	ldp	x26, x25, [sp, #16]
10000fbac:     	ldp	x28, x27, [sp], #96
10000fbb0:     	ret
10000fbb4:     	ldr	x21, [x19]
10000fbb8:     	sub	x24, x22, x21
10000fbbc:     	asr	x23, x24, #2
10000fbc0:     	add	x8, x23, #1
10000fbc4:     	lsr	x9, x8, #62
10000fbc8:     	cbnz	x9, 0x10000fd18 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x5b4>
10000fbcc:     	asr	x9, x24, #1
10000fbd0:     	cmp	x9, x8
10000fbd4:     	csel	x8, x9, x8, hi
10000fbd8:     	mov	x9, #9223372036854775804
10000fbdc:     	mov	x10, #4611686018427387903
10000fbe0:     	cmp	x24, x9
10000fbe4:     	csel	x25, x8, x10, lo
10000fbe8:     	cbz	x25, 0x10000fc00 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x49c>
10000fbec:     	lsr	x8, x25, #62
10000fbf0:     	cbnz	x8, 0x10000fd20 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x5bc>
10000fbf4:     	lsl	x0, x25, #2
10000fbf8:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000fbfc:     	b	0x10000fc04 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x4a0>
10000fc00:     	mov	x0, #0
10000fc04:     	add	x9, x0, x23, lsl #2
10000fc08:     	add	x8, x0, x25, lsl #2
10000fc0c:     	mov	x10, x9
10000fc10:     	str	w20, [x10], #4
10000fc14:     	subs	x11, x22, x21
10000fc18:     	b.eq	0x10000fc9c <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x538>
10000fc1c:     	sub	x11, x11, #4
10000fc20:     	cmp	x11, #60
10000fc24:     	b.lo	0x10000fc8c <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x528>
10000fc28:     	sub	x12, x22, x0
10000fc2c:     	sub	x12, x12, x24
10000fc30:     	cmp	x12, #64
10000fc34:     	b.lo	0x10000fc8c <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x528>
10000fc38:     	lsr	x11, x11, #2
10000fc3c:     	add	x11, x11, #1
10000fc40:     	and	x12, x11, #0x7ffffffffffffff0
10000fc44:     	lsl	x14, x12, #2
10000fc48:     	sub	x13, x22, x14
10000fc4c:     	sub	x9, x9, x14
10000fc50:     	sub	x14, x22, #32
10000fc54:     	add	x15, x0, x23, lsl #2
10000fc58:     	sub	x15, x15, #32
10000fc5c:     	mov	x16, x12
10000fc60:     	ldp	q1, q0, [x14]
10000fc64:     	ldp	q3, q2, [x14, #-32]
10000fc68:     	stp	q1, q0, [x15]
10000fc6c:     	stp	q3, q2, [x15, #-32]
10000fc70:     	sub	x14, x14, #64
10000fc74:     	sub	x15, x15, #64
10000fc78:     	sub	x16, x16, #16
10000fc7c:     	cbnz	x16, 0x10000fc60 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x4fc>
10000fc80:     	mov	x22, x13
10000fc84:     	cmp	x11, x12
10000fc88:     	b.eq	0x10000fc9c <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x538>
10000fc8c:     	ldr	w11, [x22, #-4]!
10000fc90:     	str	w11, [x9, #-4]!
10000fc94:     	cmp	x22, x21
10000fc98:     	b.ne	0x10000fc8c <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x528>
10000fc9c:     	stp	x9, x10, [x19]
10000fca0:     	str	x8, [x19, #16]
10000fca4:     	cbz	x21, 0x10000fb98 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x434>
10000fca8:     	mov	x0, x21
10000fcac:     	ldp	x29, x30, [sp, #80]
10000fcb0:     	ldp	x20, x19, [sp, #64]
10000fcb4:     	ldp	x22, x21, [sp, #48]
10000fcb8:     	ldp	x24, x23, [sp, #32]
10000fcbc:     	ldp	x26, x25, [sp, #16]
10000fcc0:     	ldp	x28, x27, [sp], #96
10000fcc4:     	b	0x10002f014 <_vsnprintf+0x10002f014>
10000fcc8:     	adrp	x0, 0x100038000 <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x48>
10000fccc:     	add	x0, x0, #8
10000fcd0:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10000fcd4:     	cbz	w0, 0x10000f7a0 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x3c>
10000fcd8:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x58>
10000fcdc:     	str	xzr, [x8]
10000fce0:     	adrp	x0, 0x100038000 <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x60>
10000fce4:     	add	x0, x0, #8
10000fce8:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10000fcec:     	b	0x10000f7a0 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x3c>
10000fcf0:     	adrp	x0, 0x100038000 <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x70>
10000fcf4:     	add	x0, x0, #8
10000fcf8:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10000fcfc:     	cbz	w0, 0x10000f7a8 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x44>
10000fd00:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x80>
10000fd04:     	str	xzr, [x8]
10000fd08:     	adrp	x0, 0x100038000 <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x88>
10000fd0c:     	add	x0, x0, #8
10000fd10:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10000fd14:     	b	0x10000f7a8 <void benchmark::internal::AddRange<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x44>
10000fd18:     	mov	x0, x19
10000fd1c:     	bl	0x10001c040 <std::__1::vector<int, std::__1::allocator<int>>::__throw_length_error[abi:ue170006]() const>
10000fd20:     	bl	0x100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>

000000010000fd24 <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)>:
10000fd24:     	stp	x28, x27, [sp, #-96]!
10000fd28:     	stp	x26, x25, [sp, #16]
10000fd2c:     	stp	x24, x23, [sp, #32]
10000fd30:     	stp	x22, x21, [sp, #48]
10000fd34:     	stp	x20, x19, [sp, #64]
10000fd38:     	stp	x29, x30, [sp, #80]
10000fd3c:     	add	x29, sp, #80
10000fd40:     	mov	x21, x3
10000fd44:     	mov	x20, x2
10000fd48:     	mov	x22, x1
10000fd4c:     	mov	x19, x0
10000fd50:     	adrp	x23, 0x100038000 <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0xd0>
10000fd54:     	add	x23, x23, #8
10000fd58:     	ldaprb	w8, [x23]
10000fd5c:     	tbz	w8, #0, 0x100010018 <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x2f4>
10000fd60:     	ldaprb	w8, [x23]
10000fd64:     	tbz	w8, #0, 0x100010040 <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x31c>
10000fd68:     	ldaprb	w8, [x23]
10000fd6c:     	tbz	w8, #0, 0x100010068 <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x344>
10000fd70:     	cmp	w22, w20
10000fd74:     	b.ge	0x10000febc <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x198>
10000fd78:     	add	x23, x19, #176
10000fd7c:     	b	0x10000fd94 <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x70>
10000fd80:     	str	w22, [x28], #4
10000fd84:     	str	x28, [x19, #184]
10000fd88:     	add	w22, w22, w21
10000fd8c:     	cmp	w22, w20
10000fd90:     	b.ge	0x10000febc <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x198>
10000fd94:     	ldp	x28, x8, [x19, #184]
10000fd98:     	cmp	x28, x8
10000fd9c:     	b.ne	0x10000fd80 <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x5c>
10000fda0:     	ldr	x24, [x23]
10000fda4:     	sub	x26, x28, x24
10000fda8:     	asr	x25, x26, #2
10000fdac:     	add	x8, x25, #1
10000fdb0:     	lsr	x9, x8, #62
10000fdb4:     	cbnz	x9, 0x10001000c <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x2e8>
10000fdb8:     	asr	x9, x26, #1
10000fdbc:     	cmp	x9, x8
10000fdc0:     	csel	x8, x9, x8, hi
10000fdc4:     	mov	x9, #9223372036854775804
10000fdc8:     	cmp	x26, x9
10000fdcc:     	mov	x9, #4611686018427387903
10000fdd0:     	csel	x27, x8, x9, lo
10000fdd4:     	cbz	x27, 0x10000fe00 <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0xdc>
10000fdd8:     	lsr	x8, x27, #62
10000fddc:     	cbnz	x8, 0x100010014 <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x2f0>
10000fde0:     	lsl	x0, x27, #2
10000fde4:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000fde8:     	add	x8, x0, x25, lsl #2
10000fdec:     	mov	x9, x8
10000fdf0:     	str	w22, [x9], #4
10000fdf4:     	cmp	x28, x24
10000fdf8:     	b.ne	0x10000fe18 <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0xf4>
10000fdfc:     	b	0x10000fea0 <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x17c>
10000fe00:     	mov	x0, #0
10000fe04:     	add	x8, x0, x25, lsl #2
10000fe08:     	mov	x9, x8
10000fe0c:     	str	w22, [x9], #4
10000fe10:     	cmp	x28, x24
10000fe14:     	b.eq	0x10000fea0 <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x17c>
10000fe18:     	sub	x11, x28, #4
10000fe1c:     	sub	x10, x11, x24
10000fe20:     	cmp	x10, #60
10000fe24:     	b.lo	0x10000fe90 <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x16c>
10000fe28:     	add	x12, x0, x26
10000fe2c:     	sub	x11, x11, x12
10000fe30:     	add	x11, x11, #4
10000fe34:     	cmp	x11, #64
10000fe38:     	b.lo	0x10000fe90 <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x16c>
10000fe3c:     	lsr	x10, x10, #2
10000fe40:     	add	x10, x10, #1
10000fe44:     	and	x11, x10, #0x7ffffffffffffff0
10000fe48:     	lsl	x13, x11, #2
10000fe4c:     	sub	x12, x28, x13
10000fe50:     	sub	x8, x8, x13
10000fe54:     	sub	x13, x28, #32
10000fe58:     	add	x14, x0, x25, lsl #2
10000fe5c:     	sub	x14, x14, #32
10000fe60:     	mov	x15, x11
10000fe64:     	ldp	q1, q0, [x13]
10000fe68:     	ldp	q3, q2, [x13, #-32]
10000fe6c:     	stp	q1, q0, [x14]
10000fe70:     	stp	q3, q2, [x14, #-32]
10000fe74:     	sub	x13, x13, #64
10000fe78:     	sub	x14, x14, #64
10000fe7c:     	sub	x15, x15, #16
10000fe80:     	cbnz	x15, 0x10000fe64 <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x140>
10000fe84:     	mov	x28, x12
10000fe88:     	cmp	x10, x11
10000fe8c:     	b.eq	0x10000fea0 <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x17c>
10000fe90:     	ldr	w10, [x28, #-4]!
10000fe94:     	str	w10, [x8, #-4]!
10000fe98:     	cmp	x28, x24
10000fe9c:     	b.ne	0x10000fe90 <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x16c>
10000fea0:     	add	x10, x0, x27, lsl #2
10000fea4:     	stp	x8, x9, [x19, #176]
10000fea8:     	str	x10, [x19, #192]
10000feac:     	cbz	x24, 0x10000fd88 <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x64>
10000feb0:     	mov	x0, x24
10000feb4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000feb8:     	b	0x10000fd88 <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x64>
10000febc:     	ldp	x22, x8, [x19, #184]
10000fec0:     	cmp	x22, x8
10000fec4:     	b.eq	0x10000fed4 <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x1b0>
10000fec8:     	str	w20, [x22], #4
10000fecc:     	str	x22, [x19, #184]
10000fed0:     	b	0x10000ffec <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x2c8>
10000fed4:     	add	x0, x19, #176
10000fed8:     	ldr	x21, [x0]
10000fedc:     	sub	x24, x22, x21
10000fee0:     	asr	x23, x24, #2
10000fee4:     	add	x8, x23, #1
10000fee8:     	lsr	x9, x8, #62
10000feec:     	cbnz	x9, 0x100010090 <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x36c>
10000fef0:     	asr	x9, x24, #1
10000fef4:     	cmp	x9, x8
10000fef8:     	csel	x8, x9, x8, hi
10000fefc:     	mov	x9, #9223372036854775804
10000ff00:     	mov	x10, #4611686018427387903
10000ff04:     	cmp	x24, x9
10000ff08:     	csel	x25, x8, x10, lo
10000ff0c:     	cbz	x25, 0x10000ff3c <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x218>
10000ff10:     	lsr	x8, x25, #62
10000ff14:     	cbnz	x8, 0x100010014 <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x2f0>
10000ff18:     	lsl	x0, x25, #2
10000ff1c:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10000ff20:     	add	x9, x0, x23, lsl #2
10000ff24:     	add	x8, x0, x25, lsl #2
10000ff28:     	mov	x10, x9
10000ff2c:     	str	w20, [x10], #4
10000ff30:     	subs	x11, x22, x21
10000ff34:     	b.ne	0x10000ff58 <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x234>
10000ff38:     	b	0x10000ffd8 <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x2b4>
10000ff3c:     	mov	x0, #0
10000ff40:     	add	x9, x0, x23, lsl #2
10000ff44:     	add	x8, x0, x25, lsl #2
10000ff48:     	mov	x10, x9
10000ff4c:     	str	w20, [x10], #4
10000ff50:     	subs	x11, x22, x21
10000ff54:     	b.eq	0x10000ffd8 <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x2b4>
10000ff58:     	sub	x11, x11, #4
10000ff5c:     	cmp	x11, #60
10000ff60:     	b.lo	0x10000ffc8 <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x2a4>
10000ff64:     	sub	x12, x22, x0
10000ff68:     	sub	x12, x12, x24
10000ff6c:     	cmp	x12, #64
10000ff70:     	b.lo	0x10000ffc8 <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x2a4>
10000ff74:     	lsr	x11, x11, #2
10000ff78:     	add	x11, x11, #1
10000ff7c:     	and	x12, x11, #0x7ffffffffffffff0
10000ff80:     	lsl	x14, x12, #2
10000ff84:     	sub	x13, x22, x14
10000ff88:     	sub	x9, x9, x14
10000ff8c:     	sub	x14, x22, #32
10000ff90:     	add	x15, x0, x23, lsl #2
10000ff94:     	sub	x15, x15, #32
10000ff98:     	mov	x16, x12
10000ff9c:     	ldp	q1, q0, [x14]
10000ffa0:     	ldp	q3, q2, [x14, #-32]
10000ffa4:     	stp	q1, q0, [x15]
10000ffa8:     	stp	q3, q2, [x15, #-32]
10000ffac:     	sub	x14, x14, #64
10000ffb0:     	sub	x15, x15, #64
10000ffb4:     	sub	x16, x16, #16
10000ffb8:     	cbnz	x16, 0x10000ff9c <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x278>
10000ffbc:     	mov	x22, x13
10000ffc0:     	cmp	x11, x12
10000ffc4:     	b.eq	0x10000ffd8 <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x2b4>
10000ffc8:     	ldr	w11, [x22, #-4]!
10000ffcc:     	str	w11, [x9, #-4]!
10000ffd0:     	cmp	x22, x21
10000ffd4:     	b.ne	0x10000ffc8 <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x2a4>
10000ffd8:     	stp	x9, x10, [x19, #176]
10000ffdc:     	str	x8, [x19, #192]
10000ffe0:     	cbz	x21, 0x10000ffec <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x2c8>
10000ffe4:     	mov	x0, x21
10000ffe8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10000ffec:     	mov	x0, x19
10000fff0:     	ldp	x29, x30, [sp, #80]
10000fff4:     	ldp	x20, x19, [sp, #64]
10000fff8:     	ldp	x22, x21, [sp, #48]
10000fffc:     	ldp	x24, x23, [sp, #32]
100010000:     	ldp	x26, x25, [sp, #16]
100010004:     	ldp	x28, x27, [sp], #96
100010008:     	ret
10001000c:     	mov	x0, x23
100010010:     	bl	0x10001c040 <std::__1::vector<int, std::__1::allocator<int>>::__throw_length_error[abi:ue170006]() const>
100010014:     	bl	0x100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>
100010018:     	adrp	x0, 0x100038000 <benchmark::internal::Benchmark::ThreadPerCpu()+0x24>
10001001c:     	add	x0, x0, #8
100010020:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
100010024:     	cbz	w0, 0x10000fd60 <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x3c>
100010028:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::ThreadPerCpu()+0x34>
10001002c:     	str	xzr, [x8]
100010030:     	adrp	x0, 0x100038000 <benchmark::internal::Benchmark::ThreadPerCpu()+0x3c>
100010034:     	add	x0, x0, #8
100010038:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10001003c:     	b	0x10000fd60 <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x3c>
100010040:     	adrp	x0, 0x100038000 <benchmark::internal::Benchmark::ThreadPerCpu()+0x4c>
100010044:     	add	x0, x0, #8
100010048:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10001004c:     	cbz	w0, 0x10000fd68 <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x44>
100010050:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::ThreadPerCpu()+0x5c>
100010054:     	str	xzr, [x8]
100010058:     	adrp	x0, 0x100038000 <benchmark::internal::Benchmark::ThreadPerCpu()+0x64>
10001005c:     	add	x0, x0, #8
100010060:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
100010064:     	b	0x10000fd68 <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x44>
100010068:     	adrp	x0, 0x100038000 <benchmark::internal::Benchmark::ThreadPerCpu()+0x74>
10001006c:     	add	x0, x0, #8
100010070:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
100010074:     	cbz	w0, 0x10000fd70 <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x4c>
100010078:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::ThreadPerCpu()+0x84>
10001007c:     	str	xzr, [x8]
100010080:     	adrp	x0, 0x100038000 <benchmark::internal::Benchmark::ThreadPerCpu()+0x8c>
100010084:     	add	x0, x0, #8
100010088:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10001008c:     	b	0x10000fd70 <benchmark::internal::Benchmark::DenseThreadRange(int, int, int)+0x4c>
100010090:     	bl	0x10001c040 <std::__1::vector<int, std::__1::allocator<int>>::__throw_length_error[abi:ue170006]() const>

0000000100010094 <benchmark::internal::Benchmark::ThreadPerCpu()>:
100010094:     	stp	x26, x25, [sp, #-80]!
100010098:     	stp	x24, x23, [sp, #16]
10001009c:     	stp	x22, x21, [sp, #32]
1000100a0:     	stp	x20, x19, [sp, #48]
1000100a4:     	stp	x29, x30, [sp, #64]
1000100a8:     	add	x29, sp, #64
1000100ac:     	mov	x19, x0
1000100b0:     	bl	0x10002cb64 <benchmark::CPUInfo::Get()>
1000100b4:     	mov	x21, x0
1000100b8:     	ldp	x23, x8, [x19, #184]
1000100bc:     	mov	x22, x23
1000100c0:     	cmp	x23, x8
1000100c4:     	b.eq	0x1000100d8 <benchmark::internal::Benchmark::ThreadPerCpu()+0x44>
1000100c8:     	ldr	w8, [x21]
1000100cc:     	str	w8, [x22], #4
1000100d0:     	str	x22, [x19, #184]
1000100d4:     	b	0x1000101d8 <benchmark::internal::Benchmark::ThreadPerCpu()+0x144>
1000100d8:     	add	x0, x19, #176
1000100dc:     	ldr	x20, [x0]
1000100e0:     	sub	x25, x23, x20
1000100e4:     	asr	x24, x25, #2
1000100e8:     	add	x8, x24, #1
1000100ec:     	lsr	x9, x8, #62
1000100f0:     	cbnz	x9, 0x1000101f4 <benchmark::internal::Benchmark::ThreadPerCpu()+0x160>
1000100f4:     	asr	x9, x25, #1
1000100f8:     	cmp	x9, x8
1000100fc:     	csel	x8, x9, x8, hi
100010100:     	mov	x9, #9223372036854775804
100010104:     	mov	x10, #4611686018427387903
100010108:     	cmp	x25, x9
10001010c:     	csel	x26, x8, x10, lo
100010110:     	cbz	x26, 0x100010128 <benchmark::internal::Benchmark::ThreadPerCpu()+0x94>
100010114:     	lsr	x8, x26, #62
100010118:     	cbnz	x8, 0x1000101f8 <benchmark::internal::Benchmark::ThreadPerCpu()+0x164>
10001011c:     	lsl	x0, x26, #2
100010120:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100010124:     	b	0x10001012c <benchmark::internal::Benchmark::ThreadPerCpu()+0x98>
100010128:     	mov	x0, #0
10001012c:     	add	x9, x0, x24, lsl #2
100010130:     	add	x8, x0, x26, lsl #2
100010134:     	ldr	w11, [x21]
100010138:     	mov	x10, x9
10001013c:     	str	w11, [x10], #4
100010140:     	subs	x11, x23, x20
100010144:     	b.eq	0x1000101c4 <benchmark::internal::Benchmark::ThreadPerCpu()+0x130>
100010148:     	sub	x11, x11, #4
10001014c:     	cmp	x11, #60
100010150:     	b.lo	0x1000101b4 <benchmark::internal::Benchmark::ThreadPerCpu()+0x120>
100010154:     	sub	x12, x23, x0
100010158:     	sub	x12, x12, x25
10001015c:     	cmp	x12, #64
100010160:     	b.lo	0x1000101b4 <benchmark::internal::Benchmark::ThreadPerCpu()+0x120>
100010164:     	lsr	x11, x11, #2
100010168:     	add	x11, x11, #1
10001016c:     	and	x12, x11, #0x7ffffffffffffff0
100010170:     	lsl	x13, x12, #2
100010174:     	sub	x22, x23, x13
100010178:     	sub	x9, x9, x13
10001017c:     	sub	x13, x23, #32
100010180:     	add	x14, x0, x24, lsl #2
100010184:     	sub	x14, x14, #32
100010188:     	mov	x15, x12
10001018c:     	ldp	q1, q0, [x13]
100010190:     	ldp	q3, q2, [x13, #-32]
100010194:     	stp	q1, q0, [x14]
100010198:     	stp	q3, q2, [x14, #-32]
10001019c:     	sub	x13, x13, #64
1000101a0:     	sub	x14, x14, #64
1000101a4:     	sub	x15, x15, #16
1000101a8:     	cbnz	x15, 0x10001018c <benchmark::internal::Benchmark::ThreadPerCpu()+0xf8>
1000101ac:     	cmp	x11, x12
1000101b0:     	b.eq	0x1000101c4 <benchmark::internal::Benchmark::ThreadPerCpu()+0x130>
1000101b4:     	ldr	w11, [x22, #-4]!
1000101b8:     	str	w11, [x9, #-4]!
1000101bc:     	cmp	x22, x20
1000101c0:     	b.ne	0x1000101b4 <benchmark::internal::Benchmark::ThreadPerCpu()+0x120>
1000101c4:     	stp	x9, x10, [x19, #176]
1000101c8:     	str	x8, [x19, #192]
1000101cc:     	cbz	x20, 0x1000101d8 <benchmark::internal::Benchmark::ThreadPerCpu()+0x144>
1000101d0:     	mov	x0, x20
1000101d4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000101d8:     	mov	x0, x19
1000101dc:     	ldp	x29, x30, [sp, #64]
1000101e0:     	ldp	x20, x19, [sp, #48]
1000101e4:     	ldp	x22, x21, [sp, #32]
1000101e8:     	ldp	x24, x23, [sp, #16]
1000101ec:     	ldp	x26, x25, [sp], #80
1000101f0:     	ret
1000101f4:     	bl	0x10001c040 <std::__1::vector<int, std::__1::allocator<int>>::__throw_length_error[abi:ue170006]() const>
1000101f8:     	bl	0x100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>

00000001000101fc <benchmark::internal::Benchmark::GetName() const>:
1000101fc:     	mov	x8, x0
100010200:     	add	x0, x0, #8
100010204:     	ldrsb	w8, [x8, #31]
100010208:     	tbnz	w8, #31, 0x100010210 <benchmark::internal::Benchmark::GetName() const+0x14>
10001020c:     	ret
100010210:     	ldr	x0, [x0]
100010214:     	ret

0000000100010218 <benchmark::internal::Benchmark::GetArgName(int) const>:
100010218:     	sub	sp, sp, #32
10001021c:     	stp	x29, x30, [sp, #16]
100010220:     	add	x29, sp, #16
100010224:     	adrp	x9, 0x100038000 <benchmark::internal::Benchmark::GetArgName(int) const+0xac>
100010228:     	add	x9, x9, #8
10001022c:     	ldaprb	w8, [x9]
100010230:     	tbz	w8, #0, 0x10001026c <benchmark::internal::Benchmark::GetArgName(int) const+0x54>
100010234:     	ldaprb	w8, [x9]
100010238:     	tbz	w8, #0, 0x1000102c4 <benchmark::internal::Benchmark::GetArgName(int) const+0xac>
10001023c:     	ldr	x8, [x0, #40]
100010240:     	mov	w9, #24
100010244:     	smaddl	x0, w1, w9, x8
100010248:     	ldrsb	w8, [x0, #23]
10001024c:     	tbnz	w8, #31, 0x10001025c <benchmark::internal::Benchmark::GetArgName(int) const+0x44>
100010250:     	ldp	x29, x30, [sp, #16]
100010254:     	add	sp, sp, #32
100010258:     	ret
10001025c:     	ldr	x0, [x0]
100010260:     	ldp	x29, x30, [sp, #16]
100010264:     	add	sp, sp, #32
100010268:     	ret
10001026c:     	adrp	x8, 0x100038000 <benchmark::internal::Benchmark::GetTimeUnit() const>
100010270:     	add	x8, x8, #8
100010274:     	str	x0, [sp, #8]
100010278:     	mov	x0, x8
10001027c:     	str	w1, [sp, #4]
100010280:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
100010284:     	adrp	x9, 0x100038000 <benchmark::internal::FunctionBenchmark::Run(benchmark::State&)+0x4>
100010288:     	add	x9, x9, #8
10001028c:     	ldr	w1, [sp, #4]
100010290:     	mov	x8, x0
100010294:     	ldr	x0, [sp, #8]
100010298:     	cbz	w8, 0x100010234 <benchmark::internal::Benchmark::GetArgName(int) const+0x1c>
10001029c:     	adrp	x8, 0x100038000 <benchmark::ClearRegisteredBenchmarks()+0x10>
1000102a0:     	str	xzr, [x8]
1000102a4:     	adrp	x0, 0x100038000 <benchmark::ClearRegisteredBenchmarks()+0x18>
1000102a8:     	add	x0, x0, #8
1000102ac:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
1000102b0:     	adrp	x9, 0x100038000 <benchmark::ClearRegisteredBenchmarks()+0x24>
1000102b4:     	add	x9, x9, #8
1000102b8:     	ldr	x0, [sp, #8]
1000102bc:     	ldr	w1, [sp, #4]
1000102c0:     	b	0x100010234 <benchmark::internal::Benchmark::GetArgName(int) const+0x1c>
1000102c4:     	adrp	x8, 0x100038000 <benchmark::ClearRegisteredBenchmarks()+0x38>
1000102c8:     	add	x8, x8, #8
1000102cc:     	str	x0, [sp, #8]
1000102d0:     	mov	x0, x8
1000102d4:     	str	w1, [sp, #4]
1000102d8:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
1000102dc:     	ldr	w1, [sp, #4]
1000102e0:     	mov	x8, x0
1000102e4:     	ldr	x0, [sp, #8]
1000102e8:     	cbz	w8, 0x10001023c <benchmark::internal::Benchmark::GetArgName(int) const+0x24>
1000102ec:     	adrp	x8, 0x100038000 <benchmark::ClearRegisteredBenchmarks()+0x60>
1000102f0:     	str	xzr, [x8]
1000102f4:     	adrp	x0, 0x100038000 <benchmark::ClearRegisteredBenchmarks()+0x68>
1000102f8:     	add	x0, x0, #8
1000102fc:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
100010300:     	ldr	x0, [sp, #8]
100010304:     	ldr	w1, [sp, #4]
100010308:     	b	0x10001023c <benchmark::internal::Benchmark::GetArgName(int) const+0x24>

000000010001030c <benchmark::internal::Benchmark::GetTimeUnit() const>:
10001030c:     	ldrb	w8, [x0, #92]
100010310:     	cbz	w8, 0x100010318 <benchmark::internal::Benchmark::GetTimeUnit() const+0xc>
100010314:     	b	0x100005e00 <benchmark::GetDefaultTimeUnit()>
100010318:     	ldr	w0, [x0, #88]
10001031c:     	ret

0000000100010320 <benchmark::internal::FunctionBenchmark::Run(benchmark::State&)>:
100010320:     	ldr	x2, [x0, #216]
100010324:     	mov	x0, x1
100010328:     	br	x2

000000010001032c <benchmark::ClearRegisteredBenchmarks()>:
10001032c:     	stp	x22, x21, [sp, #-48]!
100010330:     	stp	x20, x19, [sp, #16]
100010334:     	stp	x29, x30, [sp, #32]
100010338:     	add	x29, sp, #32
10001033c:     	adrp	x8, 0x100038000 <benchmark::ClearRegisteredBenchmarks()+0xb0>
100010340:     	add	x8, x8, #88
100010344:     	ldaprb	w8, [x8]
100010348:     	tbz	w8, #0, 0x1000103a8 <benchmark::ClearRegisteredBenchmarks()+0x7c>
10001034c:     	adrp	x20, 0x100038000 <benchmark::ClearRegisteredBenchmarks()+0xc0>
100010350:     	add	x20, x20, #96
100010354:     	add	x19, x20, #24
100010358:     	mov	x0, x19
10001035c:     	bl	0x10002ef24 <_vsnprintf+0x10002ef24>
100010360:     	ldp	x21, x22, [x20]
100010364:     	cmp	x22, x21
100010368:     	b.eq	0x100010388 <benchmark::ClearRegisteredBenchmarks()+0x5c>
10001036c:     	ldr	x0, [x22, #-8]!
100010370:     	str	xzr, [x22]
100010374:     	cbz	x0, 0x100010364 <benchmark::ClearRegisteredBenchmarks()+0x38>
100010378:     	ldr	x8, [x0]
10001037c:     	ldr	x8, [x8, #8]
100010380:     	blr	x8
100010384:     	b	0x100010364 <benchmark::ClearRegisteredBenchmarks()+0x38>
100010388:     	str	x21, [x20, #8]
10001038c:     	mov	x0, x20
100010390:     	bl	0x10000c0dc <std::__1::vector<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>, std::__1::allocator<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>>::shrink_to_fit()>
100010394:     	mov	x0, x19
100010398:     	ldp	x29, x30, [sp, #32]
10001039c:     	ldp	x20, x19, [sp, #16]
1000103a0:     	ldp	x22, x21, [sp], #48
1000103a4:     	b	0x10002ef30 <_vsnprintf+0x10002ef30>
1000103a8:     	adrp	x19, 0x100038000 <benchmark::CreateRange(long long, long long, int)+0x40>
1000103ac:     	add	x19, x19, #88
1000103b0:     	mov	x0, x19
1000103b4:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
1000103b8:     	cbz	w0, 0x10001034c <benchmark::ClearRegisteredBenchmarks()+0x20>
1000103bc:     	stp	xzr, xzr, [x19, #16]
1000103c0:     	mov	x1, x19
1000103c4:     	str	xzr, [x1, #8]!
1000103c8:     	mov	w8, #43943
1000103cc:     	movk	w8, #12970, lsl #16
1000103d0:     	str	x8, [x19, #32]
1000103d4:     	movi.2d	v0, #0000000000000000
1000103d8:     	stur	q0, [x19, #40]
1000103dc:     	stur	q0, [x19, #56]
1000103e0:     	stur	q0, [x19, #72]
1000103e4:     	str	xzr, [x19, #88]
1000103e8:     	adrp	x0, 0x10000b000 <benchmark::ClearRegisteredBenchmarks()+0xa8>
1000103ec:     	add	x0, x0, #3936
1000103f0:     	adrp	x2, 0x100000000 <benchmark::ClearRegisteredBenchmarks()+0x84>
1000103f4:     	add	x2, x2, #0
1000103f8:     	bl	0x10002f044 <_vsnprintf+0x10002f044>
1000103fc:     	mov	x0, x19
100010400:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
100010404:     	b	0x10001034c <benchmark::ClearRegisteredBenchmarks()+0x20>

0000000100010408 <benchmark::CreateRange(long long, long long, int)>:
100010408:     	stp	x20, x19, [sp, #-32]!
10001040c:     	stp	x29, x30, [sp, #16]
100010410:     	add	x29, sp, #16
100010414:     	mov	x3, x2
100010418:     	mov	x2, x1
10001041c:     	mov	x1, x0
100010420:     	mov	x19, x8
100010424:     	stp	xzr, xzr, [x8]
100010428:     	str	xzr, [x8, #16]
10001042c:     	mov	x0, x8
100010430:     	bl	0x10000de4c <void benchmark::internal::AddRange<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)>
100010434:     	ldp	x29, x30, [sp, #16]
100010438:     	ldp	x20, x19, [sp], #32
10001043c:     	ret
100010440:     	mov	x20, x0
100010444:     	ldr	x0, [x19]
100010448:     	cbz	x0, 0x100010454 <benchmark::CreateRange(long long, long long, int)+0x4c>
10001044c:     	str	x0, [x19, #8]
100010450:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100010454:     	mov	x0, x20
100010458:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010001045c <benchmark::CreateDenseRange(long long, long long, int)>:
10001045c:     	sub	sp, sp, #112
100010460:     	stp	x28, x27, [sp, #16]
100010464:     	stp	x26, x25, [sp, #32]
100010468:     	stp	x24, x23, [sp, #48]
10001046c:     	stp	x22, x21, [sp, #64]
100010470:     	stp	x20, x19, [sp, #80]
100010474:     	stp	x29, x30, [sp, #96]
100010478:     	add	x29, sp, #96
10001047c:     	mov	x22, x1
100010480:     	mov	x21, x0
100010484:     	mov	x19, x8
100010488:     	adrp	x8, 0x100038000 <benchmark::CreateDenseRange(long long, long long, int)+0xcc>
10001048c:     	add	x8, x8, #8
100010490:     	ldaprb	w8, [x8]
100010494:     	tbz	w8, #0, 0x10001067c <benchmark::CreateDenseRange(long long, long long, int)+0x220>
100010498:     	stp	xzr, xzr, [x19]
10001049c:     	str	xzr, [x19, #16]
1000104a0:     	cmp	x21, x22
1000104a4:     	b.le	0x1000104c8 <benchmark::CreateDenseRange(long long, long long, int)+0x6c>
1000104a8:     	ldp	x29, x30, [sp, #96]
1000104ac:     	ldp	x20, x19, [sp, #80]
1000104b0:     	ldp	x22, x21, [sp, #64]
1000104b4:     	ldp	x24, x23, [sp, #48]
1000104b8:     	ldp	x26, x25, [sp, #32]
1000104bc:     	ldp	x28, x27, [sp, #16]
1000104c0:     	add	sp, sp, #112
1000104c4:     	ret
1000104c8:     	mov	x24, #0
1000104cc:     	mov	x28, #0
1000104d0:     	mov	x26, #0
1000104d4:     	sxtw	x23, w2
1000104d8:     	str	x22, [sp, #8]
1000104dc:     	b	0x1000104f4 <benchmark::CreateDenseRange(long long, long long, int)+0x98>
1000104e0:     	str	x21, [x26], #8
1000104e4:     	str	x26, [x19, #8]
1000104e8:     	add	x21, x21, x23
1000104ec:     	cmp	x21, x22
1000104f0:     	b.gt	0x1000104a8 <benchmark::CreateDenseRange(long long, long long, int)+0x4c>
1000104f4:     	cmp	x26, x28
1000104f8:     	b.ne	0x1000104e0 <benchmark::CreateDenseRange(long long, long long, int)+0x84>
1000104fc:     	sub	x20, x28, x24
100010500:     	asr	x25, x20, #3
100010504:     	add	x8, x25, #1
100010508:     	lsr	x9, x8, #61
10001050c:     	cbnz	x9, 0x100010668 <benchmark::CreateDenseRange(long long, long long, int)+0x20c>
100010510:     	asr	x9, x20, #2
100010514:     	cmp	x9, x8
100010518:     	csel	x8, x9, x8, hi
10001051c:     	mov	x9, #9223372036854775800
100010520:     	cmp	x20, x9
100010524:     	mov	x9, #2305843009213693951
100010528:     	csel	x27, x8, x9, lo
10001052c:     	cbz	x27, 0x100010558 <benchmark::CreateDenseRange(long long, long long, int)+0xfc>
100010530:     	lsr	x8, x27, #61
100010534:     	cbnz	x8, 0x100010674 <benchmark::CreateDenseRange(long long, long long, int)+0x218>
100010538:     	lsl	x0, x27, #3
10001053c:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100010540:     	add	x22, x0, x25, lsl #3
100010544:     	mov	x26, x22
100010548:     	str	x21, [x26], #8
10001054c:     	cmp	x28, x24
100010550:     	b.ne	0x100010570 <benchmark::CreateDenseRange(long long, long long, int)+0x114>
100010554:     	b	0x100010594 <benchmark::CreateDenseRange(long long, long long, int)+0x138>
100010558:     	mov	x0, #0
10001055c:     	add	x22, x0, x25, lsl #3
100010560:     	mov	x26, x22
100010564:     	str	x21, [x26], #8
100010568:     	cmp	x28, x24
10001056c:     	b.eq	0x100010594 <benchmark::CreateDenseRange(long long, long long, int)+0x138>
100010570:     	sub	x9, x28, #8
100010574:     	sub	x8, x9, x24
100010578:     	cmp	x8, #360
10001057c:     	b.hs	0x1000105c4 <benchmark::CreateDenseRange(long long, long long, int)+0x168>
100010580:     	mov	x8, x28
100010584:     	ldr	x9, [x8, #-8]!
100010588:     	str	x9, [x22, #-8]!
10001058c:     	cmp	x8, x24
100010590:     	b.ne	0x100010584 <benchmark::CreateDenseRange(long long, long long, int)+0x128>
100010594:     	add	x28, x0, x27, lsl #3
100010598:     	stp	x22, x26, [x19]
10001059c:     	str	x28, [x19, #16]
1000105a0:     	cbz	x24, 0x1000105ac <benchmark::CreateDenseRange(long long, long long, int)+0x150>
1000105a4:     	mov	x0, x24
1000105a8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000105ac:     	mov	x24, x22
1000105b0:     	ldr	x22, [sp, #8]
1000105b4:     	add	x21, x21, x23
1000105b8:     	cmp	x21, x22
1000105bc:     	b.le	0x1000104f4 <benchmark::CreateDenseRange(long long, long long, int)+0x98>
1000105c0:     	b	0x1000104a8 <benchmark::CreateDenseRange(long long, long long, int)+0x4c>
1000105c4:     	and	x10, x8, #0xfffffffffffffff8
1000105c8:     	add	x11, x0, x20
1000105cc:     	sub	x11, x11, #8
1000105d0:     	sub	x12, x11, x10
1000105d4:     	cmp	x12, x11
1000105d8:     	b.hi	0x10001060c <benchmark::CreateDenseRange(long long, long long, int)+0x1b0>
1000105dc:     	sub	x10, x9, x10
1000105e0:     	cmp	x10, x9
1000105e4:     	b.hi	0x100010604 <benchmark::CreateDenseRange(long long, long long, int)+0x1a8>
1000105e8:     	add	x10, x0, x20
1000105ec:     	sub	x9, x9, x10
1000105f0:     	add	x9, x9, #8
1000105f4:     	cmp	x9, #64
1000105f8:     	b.hs	0x100010614 <benchmark::CreateDenseRange(long long, long long, int)+0x1b8>
1000105fc:     	mov	x8, x28
100010600:     	b	0x100010584 <benchmark::CreateDenseRange(long long, long long, int)+0x128>
100010604:     	mov	x8, x28
100010608:     	b	0x100010584 <benchmark::CreateDenseRange(long long, long long, int)+0x128>
10001060c:     	mov	x8, x28
100010610:     	b	0x100010584 <benchmark::CreateDenseRange(long long, long long, int)+0x128>
100010614:     	lsr	x8, x8, #3
100010618:     	add	x9, x8, #1
10001061c:     	and	x10, x9, #0x3ffffffffffffff8
100010620:     	lsl	x11, x10, #3
100010624:     	sub	x8, x28, x11
100010628:     	sub	x22, x22, x11
10001062c:     	sub	x11, x28, #32
100010630:     	add	x12, x0, x25, lsl #3
100010634:     	sub	x12, x12, #32
100010638:     	mov	x13, x10
10001063c:     	ldp	q1, q0, [x11]
100010640:     	ldp	q3, q2, [x11, #-32]
100010644:     	stp	q1, q0, [x12]
100010648:     	stp	q3, q2, [x12, #-32]
10001064c:     	sub	x11, x11, #64
100010650:     	sub	x12, x12, #64
100010654:     	sub	x13, x13, #8
100010658:     	cbnz	x13, 0x10001063c <benchmark::CreateDenseRange(long long, long long, int)+0x1e0>
10001065c:     	cmp	x9, x10
100010660:     	b.ne	0x100010584 <benchmark::CreateDenseRange(long long, long long, int)+0x128>
100010664:     	b	0x100010594 <benchmark::CreateDenseRange(long long, long long, int)+0x138>
100010668:     	mov	x0, x19
10001066c:     	bl	0x10000a2cc <std::__1::vector<long long, std::__1::allocator<long long>>::__throw_length_error[abi:ue170006]() const>
100010670:     	b	0x100010678 <benchmark::CreateDenseRange(long long, long long, int)+0x21c>
100010674:     	bl	0x100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>
100010678:     	brk	#0x1
10001067c:     	adrp	x0, 0x100038000 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::basic_regex[abi:ue170006]()+0x2c>
100010680:     	add	x0, x0, #8
100010684:     	mov	x20, x2
100010688:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10001068c:     	mov	x2, x20
100010690:     	cbz	w0, 0x100010498 <benchmark::CreateDenseRange(long long, long long, int)+0x3c>
100010694:     	adrp	x8, 0x100038000 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::basic_regex[abi:ue170006]()+0x44>
100010698:     	str	xzr, [x8]
10001069c:     	adrp	x0, 0x100038000 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::basic_regex[abi:ue170006]()+0x4c>
1000106a0:     	add	x0, x0, #8
1000106a4:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
1000106a8:     	mov	x2, x20
1000106ac:     	b	0x100010498 <benchmark::CreateDenseRange(long long, long long, int)+0x3c>
1000106b0:     	mov	x20, x0
1000106b4:     	b	0x1000106c0 <benchmark::CreateDenseRange(long long, long long, int)+0x264>
1000106b8:     	mov	x20, x0
1000106bc:     	ldr	x24, [x19]
1000106c0:     	cbz	x24, 0x1000106d0 <benchmark::CreateDenseRange(long long, long long, int)+0x274>
1000106c4:     	str	x24, [x19, #8]
1000106c8:     	mov	x0, x24
1000106cc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000106d0:     	mov	x0, x20
1000106d4:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

00000001000106d8 <benchmark::internal::FunctionBenchmark::~FunctionBenchmark()>:
1000106d8:     	b	0x10000da44 <benchmark::internal::Benchmark::~Benchmark()>

00000001000106dc <benchmark::internal::FunctionBenchmark::~FunctionBenchmark()>:
1000106dc:     	stp	x29, x30, [sp, #-16]!
1000106e0:     	mov	x29, sp
1000106e4:     	bl	0x10000da44 <benchmark::internal::Benchmark::~Benchmark()>
1000106e8:     	ldp	x29, x30, [sp], #16
1000106ec:     	b	0x10002f014 <_vsnprintf+0x10002f014>

00000001000106f0 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::basic_regex[abi:ue170006]()>:
1000106f0:     	stp	x20, x19, [sp, #-32]!
1000106f4:     	stp	x29, x30, [sp, #16]
1000106f8:     	add	x29, sp, #16
1000106fc:     	mov	x19, x0
100010700:     	bl	0x10002ef78 <_vsnprintf+0x10002ef78>
100010704:     	adrp	x1, 0x100034000 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::~basic_regex()+0x38>
100010708:     	ldr	x1, [x1, #480]
10001070c:     	bl	0x10002ecf0 <_vsnprintf+0x10002ecf0>
100010710:     	str	x0, [x19, #8]
100010714:     	adrp	x1, 0x100034000 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::~basic_regex()+0x48>
100010718:     	ldr	x1, [x1, #584]
10001071c:     	mov	x0, x19
100010720:     	bl	0x10002ecf0 <_vsnprintf+0x10002ecf0>
100010724:     	str	x0, [x19, #16]
100010728:     	movi.2d	v0, #0000000000000000
10001072c:     	stur	q0, [x19, #24]
100010730:     	stur	q0, [x19, #40]
100010734:     	str	xzr, [x19, #56]
100010738:     	mov	x0, x19
10001073c:     	ldp	x29, x30, [sp, #16]
100010740:     	ldp	x20, x19, [sp], #32
100010744:     	ret
100010748:     	mov	x20, x0
10001074c:     	mov	x0, x19
100010750:     	bl	0x10002ef84 <_vsnprintf+0x10002ef84>
100010754:     	mov	x0, x20
100010758:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010001075c <std::__1::basic_regex<char, std::__1::regex_traits<char>>::~basic_regex()>:
10001075c:     	stp	x20, x19, [sp, #-32]!
100010760:     	stp	x29, x30, [sp, #16]
100010764:     	add	x29, sp, #16
100010768:     	mov	x19, x0
10001076c:     	ldr	x20, [x0, #48]
100010770:     	cbz	x20, 0x100010784 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::~basic_regex()+0x28>
100010774:     	add	x8, x20, #8
100010778:     	mov	x9, #-1
10001077c:     	ldaddal	x9, x8, [x8]
100010780:     	cbz	x8, 0x100010794 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::~basic_regex()+0x38>
100010784:     	mov	x0, x19
100010788:     	ldp	x29, x30, [sp, #16]
10001078c:     	ldp	x20, x19, [sp], #32
100010790:     	b	0x10002ef84 <_vsnprintf+0x10002ef84>
100010794:     	ldr	x8, [x20]
100010798:     	ldr	x8, [x8, #16]
10001079c:     	mov	x0, x20
1000107a0:     	blr	x8
1000107a4:     	mov	x0, x20
1000107a8:     	bl	0x10002eee8 <_vsnprintf+0x10002eee8>
1000107ac:     	mov	x0, x19
1000107b0:     	ldp	x29, x30, [sp, #16]
1000107b4:     	ldp	x20, x19, [sp], #32
1000107b8:     	b	0x10002ef84 <_vsnprintf+0x10002ef84>

00000001000107bc <std::__1::shared_ptr<std::__1::__empty_state<char>>::~shared_ptr[abi:ue170006]()>:
1000107bc:     	stp	x20, x19, [sp, #-32]!
1000107c0:     	stp	x29, x30, [sp, #16]
1000107c4:     	add	x29, sp, #16
1000107c8:     	mov	x19, x0
1000107cc:     	ldr	x20, [x0, #8]
1000107d0:     	cbz	x20, 0x1000107e4 <std::__1::shared_ptr<std::__1::__empty_state<char>>::~shared_ptr[abi:ue170006]()+0x28>
1000107d4:     	add	x8, x20, #8
1000107d8:     	mov	x9, #-1
1000107dc:     	ldaddal	x9, x8, [x8]
1000107e0:     	cbz	x8, 0x1000107f4 <std::__1::shared_ptr<std::__1::__empty_state<char>>::~shared_ptr[abi:ue170006]()+0x38>
1000107e4:     	mov	x0, x19
1000107e8:     	ldp	x29, x30, [sp, #16]
1000107ec:     	ldp	x20, x19, [sp], #32
1000107f0:     	ret
1000107f4:     	ldr	x8, [x20]
1000107f8:     	ldr	x8, [x8, #16]
1000107fc:     	mov	x0, x20
100010800:     	blr	x8
100010804:     	mov	x0, x20
100010808:     	bl	0x10002eee8 <_vsnprintf+0x10002eee8>
10001080c:     	mov	x0, x19
100010810:     	ldp	x29, x30, [sp, #16]
100010814:     	ldp	x20, x19, [sp], #32
100010818:     	ret

000000010001081c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>:
10001081c:     	stp	x24, x23, [sp, #-64]!
100010820:     	stp	x22, x21, [sp, #16]
100010824:     	stp	x20, x19, [sp, #32]
100010828:     	stp	x29, x30, [sp, #48]
10001082c:     	add	x29, sp, #48
100010830:     	mov	x19, x2
100010834:     	mov	x20, x1
100010838:     	mov	x21, x0
10001083c:     	mov	w0, #8
100010840:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100010844:     	mov	x22, x0
100010848:     	adrp	x8, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xbc>
10001084c:     	add	x8, x8, #1408
100010850:     	str	x8, [x0]
100010854:     	mov	w0, #16
100010858:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001085c:     	mov	x23, x0
100010860:     	adrp	x8, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xd4>
100010864:     	add	x8, x8, #1576
100010868:     	stp	x8, x22, [x0]
10001086c:     	mov	w0, #32
100010870:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100010874:     	adrp	x8, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xe8>
100010878:     	add	x8, x8, #1496
10001087c:     	stp	x8, xzr, [x0]
100010880:     	stp	xzr, x23, [x0, #16]
100010884:     	ldr	x22, [x21, #48]
100010888:     	stp	x23, x0, [x21, #40]
10001088c:     	cbz	x22, 0x1000108a0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x84>
100010890:     	add	x8, x22, #8
100010894:     	mov	x9, #-1
100010898:     	ldaddal	x9, x8, [x8]
10001089c:     	cbz	x8, 0x1000108d0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xb4>
1000108a0:     	ldr	x8, [x21, #40]
1000108a4:     	str	x8, [x21, #56]
1000108a8:     	ldr	w8, [x21, #24]
1000108ac:     	and	w8, w8, #0x1f0
1000108b0:     	cmp	w8, #63
1000108b4:     	b.gt	0x100010900 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xe4>
1000108b8:     	cbz	w8, 0x100010958 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x13c>
1000108bc:     	cmp	w8, #16
1000108c0:     	b.eq	0x100010978 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x15c>
1000108c4:     	cmp	w8, #32
1000108c8:     	b.eq	0x100010938 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x11c>
1000108cc:     	b	0x1000109b8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x19c>
1000108d0:     	ldr	x8, [x22]
1000108d4:     	ldr	x8, [x8, #16]
1000108d8:     	mov	x0, x22
1000108dc:     	blr	x8
1000108e0:     	mov	x0, x22
1000108e4:     	bl	0x10002eee8 <_vsnprintf+0x10002eee8>
1000108e8:     	ldr	x8, [x21, #40]
1000108ec:     	str	x8, [x21, #56]
1000108f0:     	ldr	w8, [x21, #24]
1000108f4:     	and	w8, w8, #0x1f0
1000108f8:     	cmp	w8, #63
1000108fc:     	b.le	0x1000108b8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x9c>
100010900:     	cmp	w8, #64
100010904:     	b.eq	0x100010938 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x11c>
100010908:     	cmp	w8, #128
10001090c:     	b.eq	0x100010998 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x17c>
100010910:     	cmp	w8, #256
100010914:     	b.ne	0x1000109b8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x19c>
100010918:     	mov	x0, x21
10001091c:     	mov	x1, x20
100010920:     	mov	x2, x19
100010924:     	ldp	x29, x30, [sp, #48]
100010928:     	ldp	x20, x19, [sp, #32]
10001092c:     	ldp	x22, x21, [sp, #16]
100010930:     	ldp	x24, x23, [sp], #64
100010934:     	b	0x1000110f8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_egrep<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>
100010938:     	mov	x0, x21
10001093c:     	mov	x1, x20
100010940:     	mov	x2, x19
100010944:     	ldp	x29, x30, [sp, #48]
100010948:     	ldp	x20, x19, [sp, #32]
10001094c:     	ldp	x22, x21, [sp, #16]
100010950:     	ldp	x24, x23, [sp], #64
100010954:     	b	0x100010df8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_extended_reg_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>
100010958:     	mov	x0, x21
10001095c:     	mov	x1, x20
100010960:     	mov	x2, x19
100010964:     	ldp	x29, x30, [sp, #48]
100010968:     	ldp	x20, x19, [sp, #32]
10001096c:     	ldp	x22, x21, [sp, #16]
100010970:     	ldp	x24, x23, [sp], #64
100010974:     	b	0x100010a50 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ecma_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>
100010978:     	mov	x0, x21
10001097c:     	mov	x1, x20
100010980:     	mov	x2, x19
100010984:     	ldp	x29, x30, [sp, #48]
100010988:     	ldp	x20, x19, [sp, #32]
10001098c:     	ldp	x22, x21, [sp, #16]
100010990:     	ldp	x24, x23, [sp], #64
100010994:     	b	0x100010c88 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_basic_reg_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>
100010998:     	mov	x0, x21
10001099c:     	mov	x1, x20
1000109a0:     	mov	x2, x19
1000109a4:     	ldp	x29, x30, [sp, #48]
1000109a8:     	ldp	x20, x19, [sp, #32]
1000109ac:     	ldp	x22, x21, [sp, #16]
1000109b0:     	ldp	x24, x23, [sp], #64
1000109b4:     	b	0x100010f54 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_grep<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>
1000109b8:     	bl	0x10001129c <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)14>()>
1000109bc:     	mov	x19, x0
1000109c0:     	adrp	x8, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ecma_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>
1000109c4:     	add	x8, x8, #1696
1000109c8:     	str	x8, [x23]
1000109cc:     	mov	x0, x22
1000109d0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000109d4:     	mov	x0, x23
1000109d8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000109dc:     	ldr	x8, [x22]
1000109e0:     	b	0x1000109f0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x1d4>
1000109e4:     	mov	x19, x0
1000109e8:     	adrp	x8, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ecma_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x28>
1000109ec:     	add	x8, x8, #1408
1000109f0:     	ldr	x8, [x8, #8]
1000109f4:     	mov	x0, x22
1000109f8:     	blr	x8
1000109fc:     	mov	x0, x19
100010a00:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100010a04 <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)17>()>:
100010a04:     	stp	x20, x19, [sp, #-32]!
100010a08:     	stp	x29, x30, [sp, #16]
100010a0c:     	add	x29, sp, #16
100010a10:     	mov	w0, #24
100010a14:     	bl	0x10002f038 <_vsnprintf+0x10002f038>
100010a18:     	mov	x19, x0
100010a1c:     	mov	w1, #17
100010a20:     	bl	0x10002ed20 <_vsnprintf+0x10002ed20>
100010a24:     	adrp	x1, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ecma_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x64>
100010a28:     	ldr	x1, [x1, #656]
100010a2c:     	adrp	x2, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ecma_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x6c>
100010a30:     	ldr	x2, [x2, #104]
100010a34:     	mov	x0, x19
100010a38:     	bl	0x10002f0a4 <_vsnprintf+0x10002f0a4>
100010a3c:     	mov	x20, x0
100010a40:     	mov	x0, x19
100010a44:     	bl	0x10002f068 <_vsnprintf+0x10002f068>
100010a48:     	mov	x0, x20
100010a4c:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100010a50 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ecma_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>:
100010a50:     	stp	x28, x27, [sp, #-96]!
100010a54:     	stp	x26, x25, [sp, #16]
100010a58:     	stp	x24, x23, [sp, #32]
100010a5c:     	stp	x22, x21, [sp, #48]
100010a60:     	stp	x20, x19, [sp, #64]
100010a64:     	stp	x29, x30, [sp, #80]
100010a68:     	add	x29, sp, #80
100010a6c:     	mov	x19, x2
100010a70:     	mov	x22, x1
100010a74:     	mov	x20, x0
100010a78:     	ldr	x24, [x0, #56]
100010a7c:     	mov	x0, x1
100010a80:     	b	0x100010a8c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ecma_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x3c>
100010a84:     	cmp	x0, x21
100010a88:     	b.eq	0x100010aec <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ecma_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x9c>
100010a8c:     	mov	x21, x0
100010a90:     	mov	x0, x20
100010a94:     	mov	x1, x21
100010a98:     	mov	x2, x19
100010a9c:     	bl	0x1000114ac <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_assertion<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>
100010aa0:     	cmp	x21, x0
100010aa4:     	b.ne	0x100010a84 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ecma_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x34>
100010aa8:     	ldr	x23, [x20, #56]
100010aac:     	ldr	w25, [x20, #28]
100010ab0:     	mov	x0, x20
100010ab4:     	mov	x1, x21
100010ab8:     	mov	x2, x19
100010abc:     	bl	0x100011794 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_atom<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>
100010ac0:     	cmp	x21, x0
100010ac4:     	b.eq	0x100010aec <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ecma_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x9c>
100010ac8:     	mov	x1, x0
100010acc:     	add	w4, w25, #1
100010ad0:     	ldr	w8, [x20, #28]
100010ad4:     	add	w5, w8, #1
100010ad8:     	mov	x0, x20
100010adc:     	mov	x2, x19
100010ae0:     	mov	x3, x23
100010ae4:     	bl	0x1000119f0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)>
100010ae8:     	b	0x100010a84 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ecma_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x34>
100010aec:     	adrp	x23, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ecma_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x12c>
100010af0:     	add	x23, x23, #1576
100010af4:     	cmp	x21, x22
100010af8:     	b.eq	0x100010b08 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ecma_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xb8>
100010afc:     	cmp	x21, x19
100010b00:     	b.ne	0x100010b34 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ecma_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xe4>
100010b04:     	b	0x100010c64 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ecma_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x214>
100010b08:     	mov	w0, #16
100010b0c:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100010b10:     	ldr	x8, [x20, #56]
100010b14:     	ldr	x9, [x8, #8]
100010b18:     	stp	x23, x9, [x0]
100010b1c:     	str	x0, [x8, #8]
100010b20:     	ldr	x8, [x20, #56]
100010b24:     	ldr	x8, [x8, #8]
100010b28:     	str	x8, [x20, #56]
100010b2c:     	cmp	x21, x19
100010b30:     	b.eq	0x100010c64 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ecma_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x214>
100010b34:     	adrp	x26, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ecma_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x174>
100010b38:     	add	x26, x26, #3040
100010b3c:     	b	0x100010bb8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ecma_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x168>
100010b40:     	cmp	x21, x28
100010b44:     	b.eq	0x100010c3c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ecma_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x1ec>
100010b48:     	mov	w0, #24
100010b4c:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100010b50:     	ldr	x8, [x24, #8]
100010b54:     	ldr	x9, [x27, #8]
100010b58:     	stp	x8, x9, [x0, #8]
100010b5c:     	adrp	x8, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ecma_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x19c>
100010b60:     	add	x8, x8, #2968
100010b64:     	str	x8, [x0]
100010b68:     	str	x0, [x24, #8]
100010b6c:     	str	xzr, [x27, #8]
100010b70:     	mov	w0, #16
100010b74:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100010b78:     	ldr	x8, [x20, #56]
100010b7c:     	ldr	x8, [x8, #8]
100010b80:     	stp	x23, x8, [x0]
100010b84:     	str	x0, [x27, #8]
100010b88:     	ldr	x8, [x20, #56]
100010b8c:     	str	xzr, [x8, #8]
100010b90:     	mov	w0, #16
100010b94:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100010b98:     	ldr	x8, [x27, #8]
100010b9c:     	stp	x26, x8, [x0]
100010ba0:     	ldr	x8, [x20, #56]
100010ba4:     	str	x0, [x8, #8]
100010ba8:     	ldr	x8, [x27, #8]
100010bac:     	str	x8, [x20, #56]
100010bb0:     	cmp	x21, x19
100010bb4:     	b.eq	0x100010c64 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ecma_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x214>
100010bb8:     	ldrb	w8, [x21]
100010bbc:     	cmp	w8, #124
100010bc0:     	b.ne	0x100010c68 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ecma_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x218>
100010bc4:     	ldr	x27, [x20, #56]
100010bc8:     	add	x28, x21, #1
100010bcc:     	mov	x0, x28
100010bd0:     	b	0x100010bdc <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ecma_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x18c>
100010bd4:     	cmp	x0, x21
100010bd8:     	b.eq	0x100010b40 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ecma_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xf0>
100010bdc:     	mov	x21, x0
100010be0:     	mov	x0, x20
100010be4:     	mov	x1, x21
100010be8:     	mov	x2, x19
100010bec:     	bl	0x1000114ac <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_assertion<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>
100010bf0:     	cmp	x21, x0
100010bf4:     	b.ne	0x100010bd4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ecma_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x184>
100010bf8:     	ldr	x22, [x20, #56]
100010bfc:     	ldr	w25, [x20, #28]
100010c00:     	mov	x0, x20
100010c04:     	mov	x1, x21
100010c08:     	mov	x2, x19
100010c0c:     	bl	0x100011794 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_atom<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>
100010c10:     	cmp	x21, x0
100010c14:     	b.eq	0x100010b40 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ecma_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xf0>
100010c18:     	mov	x1, x0
100010c1c:     	add	w4, w25, #1
100010c20:     	ldr	w8, [x20, #28]
100010c24:     	add	w5, w8, #1
100010c28:     	mov	x0, x20
100010c2c:     	mov	x2, x19
100010c30:     	mov	x3, x22
100010c34:     	bl	0x1000119f0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)>
100010c38:     	b	0x100010bd4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ecma_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x184>
100010c3c:     	mov	w0, #16
100010c40:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100010c44:     	ldr	x8, [x20, #56]
100010c48:     	ldr	x9, [x8, #8]
100010c4c:     	stp	x23, x9, [x0]
100010c50:     	str	x0, [x8, #8]
100010c54:     	ldr	x8, [x20, #56]
100010c58:     	ldr	x8, [x8, #8]
100010c5c:     	str	x8, [x20, #56]
100010c60:     	b	0x100010b48 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ecma_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xf8>
100010c64:     	mov	x21, x19
100010c68:     	mov	x0, x21
100010c6c:     	ldp	x29, x30, [sp, #80]
100010c70:     	ldp	x20, x19, [sp, #64]
100010c74:     	ldp	x22, x21, [sp, #48]
100010c78:     	ldp	x24, x23, [sp, #32]
100010c7c:     	ldp	x26, x25, [sp, #16]
100010c80:     	ldp	x28, x27, [sp], #96
100010c84:     	ret

0000000100010c88 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_basic_reg_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>:
100010c88:     	stp	x24, x23, [sp, #-64]!
100010c8c:     	stp	x22, x21, [sp, #16]
100010c90:     	stp	x20, x19, [sp, #32]
100010c94:     	stp	x29, x30, [sp, #48]
100010c98:     	add	x29, sp, #48
100010c9c:     	mov	x21, x1
100010ca0:     	cmp	x1, x2
100010ca4:     	b.eq	0x100010dd8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_basic_reg_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x150>
100010ca8:     	mov	x19, x2
100010cac:     	mov	x20, x0
100010cb0:     	ldrb	w8, [x21]
100010cb4:     	cmp	w8, #94
100010cb8:     	b.ne	0x100010d04 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_basic_reg_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x7c>
100010cbc:     	mov	w0, #24
100010cc0:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100010cc4:     	ldr	w8, [x20, #24]
100010cc8:     	mov	w9, #1520
100010ccc:     	and	w8, w8, w9
100010cd0:     	cmp	w8, #1024
100010cd4:     	cset	w8, eq
100010cd8:     	ldr	x9, [x20, #56]
100010cdc:     	ldr	x10, [x9, #8]
100010ce0:     	adrp	x11, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_basic_reg_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xe8>
100010ce4:     	add	x11, x11, #1744
100010ce8:     	stp	x11, x10, [x0]
100010cec:     	strb	w8, [x0, #16]
100010cf0:     	str	x0, [x9, #8]
100010cf4:     	ldr	x8, [x20, #56]
100010cf8:     	ldr	x8, [x8, #8]
100010cfc:     	str	x8, [x20, #56]
100010d00:     	add	x21, x21, #1
100010d04:     	cmp	x21, x19
100010d08:     	b.eq	0x100010dc0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_basic_reg_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x138>
100010d0c:     	cmp	x21, x19
100010d10:     	b.eq	0x100010dc0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_basic_reg_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x138>
100010d14:     	mov	x22, x21
100010d18:     	ldr	x21, [x20, #56]
100010d1c:     	ldr	w23, [x20, #28]
100010d20:     	mov	x0, x20
100010d24:     	mov	x1, x22
100010d28:     	mov	x2, x19
100010d2c:     	bl	0x100018d98 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_nondupl_RE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>
100010d30:     	cmp	x22, x0
100010d34:     	b.eq	0x100010d64 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_basic_reg_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xdc>
100010d38:     	mov	x1, x0
100010d3c:     	add	w4, w23, #1
100010d40:     	ldr	w8, [x20, #28]
100010d44:     	add	w5, w8, #1
100010d48:     	mov	x0, x20
100010d4c:     	mov	x2, x19
100010d50:     	mov	x3, x21
100010d54:     	bl	0x100018f8c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_RE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)>
100010d58:     	mov	x21, x0
100010d5c:     	cmp	x22, x0
100010d60:     	b.ne	0x100010d0c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_basic_reg_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x84>
100010d64:     	add	x8, x22, #1
100010d68:     	cmp	x8, x19
100010d6c:     	b.ne	0x100010df4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_basic_reg_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x16c>
100010d70:     	ldrb	w8, [x22]
100010d74:     	cmp	w8, #36
100010d78:     	b.ne	0x100010df4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_basic_reg_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x16c>
100010d7c:     	mov	w0, #24
100010d80:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100010d84:     	ldr	w8, [x20, #24]
100010d88:     	mov	w9, #1520
100010d8c:     	and	w8, w8, w9
100010d90:     	cmp	w8, #1024
100010d94:     	cset	w8, eq
100010d98:     	ldr	x9, [x20, #56]
100010d9c:     	ldr	x10, [x9, #8]
100010da0:     	adrp	x11, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_extended_reg_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x38>
100010da4:     	add	x11, x11, #1816
100010da8:     	stp	x11, x10, [x0]
100010dac:     	strb	w8, [x0, #16]
100010db0:     	str	x0, [x9, #8]
100010db4:     	ldr	x8, [x20, #56]
100010db8:     	ldr	x8, [x8, #8]
100010dbc:     	str	x8, [x20, #56]
100010dc0:     	mov	x0, x19
100010dc4:     	ldp	x29, x30, [sp, #48]
100010dc8:     	ldp	x20, x19, [sp, #32]
100010dcc:     	ldp	x22, x21, [sp, #16]
100010dd0:     	ldp	x24, x23, [sp], #64
100010dd4:     	ret
100010dd8:     	mov	x19, x21
100010ddc:     	mov	x0, x19
100010de0:     	ldp	x29, x30, [sp, #48]
100010de4:     	ldp	x20, x19, [sp, #32]
100010de8:     	ldp	x22, x21, [sp, #16]
100010dec:     	ldp	x24, x23, [sp], #64
100010df0:     	ret
100010df4:     	bl	0x100018d4c <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)15>()>

0000000100010df8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_extended_reg_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>:
100010df8:     	stp	x28, x27, [sp, #-96]!
100010dfc:     	stp	x26, x25, [sp, #16]
100010e00:     	stp	x24, x23, [sp, #32]
100010e04:     	stp	x22, x21, [sp, #48]
100010e08:     	stp	x20, x19, [sp, #64]
100010e0c:     	stp	x29, x30, [sp, #80]
100010e10:     	add	x29, sp, #80
100010e14:     	mov	x19, x2
100010e18:     	mov	x22, x1
100010e1c:     	mov	x20, x0
100010e20:     	ldr	x23, [x0, #56]
100010e24:     	bl	0x1000194c0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>
100010e28:     	cmp	x0, x22
100010e2c:     	b.eq	0x100010f50 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_extended_reg_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x158>
100010e30:     	mov	x21, x0
100010e34:     	mov	x0, x20
100010e38:     	mov	x1, x21
100010e3c:     	mov	x2, x19
100010e40:     	bl	0x1000194c0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>
100010e44:     	cmp	x21, x0
100010e48:     	b.ne	0x100010e30 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_extended_reg_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x38>
100010e4c:     	cmp	x21, x22
100010e50:     	b.eq	0x100010f50 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_extended_reg_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x158>
100010e54:     	cmp	x21, x19
100010e58:     	b.eq	0x100010f2c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_extended_reg_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x134>
100010e5c:     	adrp	x24, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_extended_reg_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xf4>
100010e60:     	add	x24, x24, #2968
100010e64:     	adrp	x25, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_extended_reg_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xfc>
100010e68:     	add	x25, x25, #1576
100010e6c:     	adrp	x26, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_extended_reg_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x104>
100010e70:     	add	x26, x26, #3040
100010e74:     	ldrb	w8, [x21]
100010e78:     	cmp	w8, #124
100010e7c:     	b.ne	0x100010f30 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_extended_reg_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x138>
100010e80:     	ldr	x27, [x20, #56]
100010e84:     	add	x22, x21, #1
100010e88:     	mov	x0, x20
100010e8c:     	mov	x1, x22
100010e90:     	mov	x2, x19
100010e94:     	bl	0x1000194c0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>
100010e98:     	cmp	x22, x0
100010e9c:     	b.eq	0x100010f50 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_extended_reg_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x158>
100010ea0:     	mov	x21, x0
100010ea4:     	mov	x0, x20
100010ea8:     	mov	x1, x21
100010eac:     	mov	x2, x19
100010eb0:     	bl	0x1000194c0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>
100010eb4:     	cmp	x21, x0
100010eb8:     	b.ne	0x100010ea0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_extended_reg_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xa8>
100010ebc:     	cmp	x21, x22
100010ec0:     	b.eq	0x100010f50 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_extended_reg_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x158>
100010ec4:     	mov	w0, #24
100010ec8:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100010ecc:     	ldr	x8, [x23, #8]
100010ed0:     	ldr	x9, [x27, #8]
100010ed4:     	stp	x8, x9, [x0, #8]
100010ed8:     	str	x24, [x0]
100010edc:     	str	x0, [x23, #8]
100010ee0:     	str	xzr, [x27, #8]
100010ee4:     	mov	w0, #16
100010ee8:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100010eec:     	ldr	x8, [x20, #56]
100010ef0:     	ldr	x8, [x8, #8]
100010ef4:     	stp	x25, x8, [x0]
100010ef8:     	str	x0, [x27, #8]
100010efc:     	ldr	x8, [x20, #56]
100010f00:     	str	xzr, [x8, #8]
100010f04:     	mov	w0, #16
100010f08:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100010f0c:     	ldr	x8, [x27, #8]
100010f10:     	stp	x26, x8, [x0]
100010f14:     	ldr	x8, [x20, #56]
100010f18:     	str	x0, [x8, #8]
100010f1c:     	ldr	x8, [x27, #8]
100010f20:     	str	x8, [x20, #56]
100010f24:     	cmp	x21, x19
100010f28:     	b.ne	0x100010e74 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_extended_reg_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x7c>
100010f2c:     	mov	x21, x19
100010f30:     	mov	x0, x21
100010f34:     	ldp	x29, x30, [sp, #80]
100010f38:     	ldp	x20, x19, [sp, #64]
100010f3c:     	ldp	x22, x21, [sp, #48]
100010f40:     	ldp	x24, x23, [sp, #32]
100010f44:     	ldp	x26, x25, [sp, #16]
100010f48:     	ldp	x28, x27, [sp], #96
100010f4c:     	ret
100010f50:     	bl	0x100018d4c <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)15>()>

0000000100010f54 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_grep<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>:
100010f54:     	stp	x28, x27, [sp, #-96]!
100010f58:     	stp	x26, x25, [sp, #16]
100010f5c:     	stp	x24, x23, [sp, #32]
100010f60:     	stp	x22, x21, [sp, #48]
100010f64:     	stp	x20, x19, [sp, #64]
100010f68:     	stp	x29, x30, [sp, #80]
100010f6c:     	add	x29, sp, #80
100010f70:     	mov	x19, x2
100010f74:     	mov	x22, x1
100010f78:     	mov	x20, x0
100010f7c:     	ldr	x23, [x0, #56]
100010f80:     	sub	x2, x2, x1
100010f84:     	mov	x0, x1
100010f88:     	mov	w1, #10
100010f8c:     	bl	0x10002f1ac <_vsnprintf+0x10002f1ac>
100010f90:     	cmp	x0, #0
100010f94:     	csel	x21, x19, x0, eq
100010f98:     	adrp	x24, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_grep<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xd4>
100010f9c:     	add	x24, x24, #1576
100010fa0:     	cmp	x21, x22
100010fa4:     	b.ne	0x100010fdc <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_grep<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x88>
100010fa8:     	mov	w0, #16
100010fac:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100010fb0:     	ldr	x8, [x23, #8]
100010fb4:     	stp	x24, x8, [x0]
100010fb8:     	str	x0, [x23, #8]
100010fbc:     	ldr	x8, [x20, #56]
100010fc0:     	ldr	x8, [x8, #8]
100010fc4:     	str	x8, [x20, #56]
100010fc8:     	cmp	x21, x19
100010fcc:     	cinc	x22, x21, ne
100010fd0:     	cmp	x22, x19
100010fd4:     	b.ne	0x100010ffc <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_grep<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xa8>
100010fd8:     	b	0x1000110d8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_grep<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x184>
100010fdc:     	mov	x0, x20
100010fe0:     	mov	x1, x22
100010fe4:     	mov	x2, x21
100010fe8:     	bl	0x100010c88 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_basic_reg_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>
100010fec:     	cmp	x21, x19
100010ff0:     	cinc	x22, x21, ne
100010ff4:     	cmp	x22, x19
100010ff8:     	b.eq	0x1000110d8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_grep<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x184>
100010ffc:     	ldr	x25, [x20, #56]
100011000:     	adrp	x26, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_grep<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x138>
100011004:     	add	x26, x26, #2968
100011008:     	adrp	x27, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_grep<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x140>
10001100c:     	add	x27, x27, #3040
100011010:     	b	0x1000110a4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_grep<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x150>
100011014:     	mov	w0, #16
100011018:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001101c:     	ldr	x8, [x25, #8]
100011020:     	stp	x24, x8, [x0]
100011024:     	str	x0, [x25, #8]
100011028:     	ldr	x8, [x20, #56]
10001102c:     	ldr	x8, [x8, #8]
100011030:     	str	x8, [x20, #56]
100011034:     	mov	w0, #24
100011038:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001103c:     	ldr	x8, [x23, #8]
100011040:     	ldr	x9, [x25, #8]
100011044:     	stp	x8, x9, [x0, #8]
100011048:     	str	x26, [x0]
10001104c:     	str	x0, [x23, #8]
100011050:     	str	xzr, [x25, #8]
100011054:     	mov	w0, #16
100011058:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001105c:     	ldr	x8, [x20, #56]
100011060:     	ldr	x8, [x8, #8]
100011064:     	stp	x24, x8, [x0]
100011068:     	str	x0, [x25, #8]
10001106c:     	ldr	x8, [x20, #56]
100011070:     	str	xzr, [x8, #8]
100011074:     	mov	w0, #16
100011078:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001107c:     	ldr	x8, [x25, #8]
100011080:     	stp	x27, x8, [x0]
100011084:     	ldr	x8, [x20, #56]
100011088:     	str	x0, [x8, #8]
10001108c:     	ldr	x25, [x25, #8]
100011090:     	str	x25, [x20, #56]
100011094:     	cmp	x21, x19
100011098:     	cinc	x22, x21, ne
10001109c:     	cmp	x22, x19
1000110a0:     	b.eq	0x1000110d8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_grep<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x184>
1000110a4:     	sub	x2, x19, x22
1000110a8:     	mov	x0, x22
1000110ac:     	mov	w1, #10
1000110b0:     	bl	0x10002f1ac <_vsnprintf+0x10002f1ac>
1000110b4:     	cmp	x0, #0
1000110b8:     	csel	x21, x19, x0, eq
1000110bc:     	cmp	x21, x22
1000110c0:     	b.eq	0x100011014 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_grep<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xc0>
1000110c4:     	mov	x0, x20
1000110c8:     	mov	x1, x22
1000110cc:     	mov	x2, x21
1000110d0:     	bl	0x100010c88 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_basic_reg_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>
1000110d4:     	b	0x100011034 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_grep<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xe0>
1000110d8:     	mov	x0, x19
1000110dc:     	ldp	x29, x30, [sp, #80]
1000110e0:     	ldp	x20, x19, [sp, #64]
1000110e4:     	ldp	x22, x21, [sp, #48]
1000110e8:     	ldp	x24, x23, [sp, #32]
1000110ec:     	ldp	x26, x25, [sp, #16]
1000110f0:     	ldp	x28, x27, [sp], #96
1000110f4:     	ret

00000001000110f8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_egrep<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>:
1000110f8:     	stp	x28, x27, [sp, #-96]!
1000110fc:     	stp	x26, x25, [sp, #16]
100011100:     	stp	x24, x23, [sp, #32]
100011104:     	stp	x22, x21, [sp, #48]
100011108:     	stp	x20, x19, [sp, #64]
10001110c:     	stp	x29, x30, [sp, #80]
100011110:     	add	x29, sp, #80
100011114:     	mov	x19, x2
100011118:     	mov	x22, x1
10001111c:     	mov	x20, x0
100011120:     	ldr	x23, [x0, #56]
100011124:     	sub	x2, x2, x1
100011128:     	mov	x0, x1
10001112c:     	mov	w1, #10
100011130:     	bl	0x10002f1ac <_vsnprintf+0x10002f1ac>
100011134:     	cmp	x0, #0
100011138:     	csel	x21, x19, x0, eq
10001113c:     	adrp	x24, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_egrep<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xd0>
100011140:     	add	x24, x24, #1576
100011144:     	cmp	x21, x22
100011148:     	b.ne	0x100011180 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_egrep<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x88>
10001114c:     	mov	w0, #16
100011150:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100011154:     	ldr	x8, [x23, #8]
100011158:     	stp	x24, x8, [x0]
10001115c:     	str	x0, [x23, #8]
100011160:     	ldr	x8, [x20, #56]
100011164:     	ldr	x8, [x8, #8]
100011168:     	str	x8, [x20, #56]
10001116c:     	cmp	x21, x19
100011170:     	cinc	x22, x21, ne
100011174:     	cmp	x22, x19
100011178:     	b.ne	0x1000111a0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_egrep<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xa8>
10001117c:     	b	0x10001127c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_egrep<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x184>
100011180:     	mov	x0, x20
100011184:     	mov	x1, x22
100011188:     	mov	x2, x21
10001118c:     	bl	0x100010df8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_extended_reg_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>
100011190:     	cmp	x21, x19
100011194:     	cinc	x22, x21, ne
100011198:     	cmp	x22, x19
10001119c:     	b.eq	0x10001127c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_egrep<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x184>
1000111a0:     	ldr	x25, [x20, #56]
1000111a4:     	adrp	x26, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_egrep<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x138>
1000111a8:     	add	x26, x26, #2968
1000111ac:     	adrp	x27, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_egrep<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x140>
1000111b0:     	add	x27, x27, #3040
1000111b4:     	b	0x100011248 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_egrep<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x150>
1000111b8:     	mov	w0, #16
1000111bc:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
1000111c0:     	ldr	x8, [x25, #8]
1000111c4:     	stp	x24, x8, [x0]
1000111c8:     	str	x0, [x25, #8]
1000111cc:     	ldr	x8, [x20, #56]
1000111d0:     	ldr	x8, [x8, #8]
1000111d4:     	str	x8, [x20, #56]
1000111d8:     	mov	w0, #24
1000111dc:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
1000111e0:     	ldr	x8, [x23, #8]
1000111e4:     	ldr	x9, [x25, #8]
1000111e8:     	stp	x8, x9, [x0, #8]
1000111ec:     	str	x26, [x0]
1000111f0:     	str	x0, [x23, #8]
1000111f4:     	str	xzr, [x25, #8]
1000111f8:     	mov	w0, #16
1000111fc:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100011200:     	ldr	x8, [x20, #56]
100011204:     	ldr	x8, [x8, #8]
100011208:     	stp	x24, x8, [x0]
10001120c:     	str	x0, [x25, #8]
100011210:     	ldr	x8, [x20, #56]
100011214:     	str	xzr, [x8, #8]
100011218:     	mov	w0, #16
10001121c:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100011220:     	ldr	x8, [x25, #8]
100011224:     	stp	x27, x8, [x0]
100011228:     	ldr	x8, [x20, #56]
10001122c:     	str	x0, [x8, #8]
100011230:     	ldr	x25, [x25, #8]
100011234:     	str	x25, [x20, #56]
100011238:     	cmp	x21, x19
10001123c:     	cinc	x22, x21, ne
100011240:     	cmp	x22, x19
100011244:     	b.eq	0x10001127c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_egrep<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x184>
100011248:     	sub	x2, x19, x22
10001124c:     	mov	x0, x22
100011250:     	mov	w1, #10
100011254:     	bl	0x10002f1ac <_vsnprintf+0x10002f1ac>
100011258:     	cmp	x0, #0
10001125c:     	csel	x21, x19, x0, eq
100011260:     	cmp	x21, x22
100011264:     	b.eq	0x1000111b8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_egrep<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xc0>
100011268:     	mov	x0, x20
10001126c:     	mov	x1, x22
100011270:     	mov	x2, x21
100011274:     	bl	0x100010df8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_extended_reg_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>
100011278:     	b	0x1000111d8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_egrep<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xe0>
10001127c:     	mov	x0, x19
100011280:     	ldp	x29, x30, [sp, #80]
100011284:     	ldp	x20, x19, [sp, #64]
100011288:     	ldp	x22, x21, [sp, #48]
10001128c:     	ldp	x24, x23, [sp, #32]
100011290:     	ldp	x26, x25, [sp, #16]
100011294:     	ldp	x28, x27, [sp], #96
100011298:     	ret

000000010001129c <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)14>()>:
10001129c:     	stp	x20, x19, [sp, #-32]!
1000112a0:     	stp	x29, x30, [sp, #16]
1000112a4:     	add	x29, sp, #16
1000112a8:     	mov	w0, #24
1000112ac:     	bl	0x10002f038 <_vsnprintf+0x10002f038>
1000112b0:     	mov	x19, x0
1000112b4:     	mov	w1, #14
1000112b8:     	bl	0x10002ed20 <_vsnprintf+0x10002ed20>
1000112bc:     	adrp	x1, 0x100034000 <std::__1::__shared_ptr_pointer<std::__1::__empty_state<char>*, std::__1::shared_ptr<std::__1::__empty_state<char>>::__shared_ptr_default_delete<std::__1::__empty_state<char>, std::__1::__empty_state<char>>, std::__1::allocator<std::__1::__empty_state<char>>>::__get_deleter(std::type_info const&) const+0x14>
1000112c0:     	ldr	x1, [x1, #656]
1000112c4:     	adrp	x2, 0x100034000 <std::__1::__shared_ptr_pointer<std::__1::__empty_state<char>*, std::__1::shared_ptr<std::__1::__empty_state<char>>::__shared_ptr_default_delete<std::__1::__empty_state<char>, std::__1::__empty_state<char>>, std::__1::allocator<std::__1::__empty_state<char>>>::__get_deleter(std::type_info const&) const+0x1c>
1000112c8:     	ldr	x2, [x2, #104]
1000112cc:     	mov	x0, x19
1000112d0:     	bl	0x10002f0a4 <_vsnprintf+0x10002f0a4>
1000112d4:     	mov	x20, x0
1000112d8:     	mov	x0, x19
1000112dc:     	bl	0x10002f068 <_vsnprintf+0x10002f068>
1000112e0:     	mov	x0, x20
1000112e4:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

00000001000112e8 <std::__1::__end_state<char>::~__end_state()>:
1000112e8:     	ret

00000001000112ec <std::__1::__end_state<char>::~__end_state()>:
1000112ec:     	b	0x10002f014 <_vsnprintf+0x10002f014>

00000001000112f0 <std::__1::__end_state<char>::__exec(std::__1::__state<char>&) const>:
1000112f0:     	mov	w8, #-1000
1000112f4:     	str	w8, [x1]
1000112f8:     	ret

00000001000112fc <std::__1::__node<char>::__exec_split(bool, std::__1::__state<char>&) const>:
1000112fc:     	ret

0000000100011300 <std::__1::__node<char>::__exec(std::__1::__state<char>&) const>:
100011300:     	ret

0000000100011304 <std::__1::__shared_ptr_pointer<std::__1::__empty_state<char>*, std::__1::shared_ptr<std::__1::__empty_state<char>>::__shared_ptr_default_delete<std::__1::__empty_state<char>, std::__1::__empty_state<char>>, std::__1::allocator<std::__1::__empty_state<char>>>::~__shared_ptr_pointer()>:
100011304:     	b	0x10002eef4 <_vsnprintf+0x10002eef4>

0000000100011308 <std::__1::__shared_ptr_pointer<std::__1::__empty_state<char>*, std::__1::shared_ptr<std::__1::__empty_state<char>>::__shared_ptr_default_delete<std::__1::__empty_state<char>, std::__1::__empty_state<char>>, std::__1::allocator<std::__1::__empty_state<char>>>::~__shared_ptr_pointer()>:
100011308:     	stp	x29, x30, [sp, #-16]!
10001130c:     	mov	x29, sp
100011310:     	bl	0x10002eef4 <_vsnprintf+0x10002eef4>
100011314:     	ldp	x29, x30, [sp], #16
100011318:     	b	0x10002f014 <_vsnprintf+0x10002f014>

000000010001131c <std::__1::__shared_ptr_pointer<std::__1::__empty_state<char>*, std::__1::shared_ptr<std::__1::__empty_state<char>>::__shared_ptr_default_delete<std::__1::__empty_state<char>, std::__1::__empty_state<char>>, std::__1::allocator<std::__1::__empty_state<char>>>::__on_zero_shared()>:
10001131c:     	ldr	x0, [x0, #24]
100011320:     	cbz	x0, 0x100011330 <std::__1::__shared_ptr_pointer<std::__1::__empty_state<char>*, std::__1::shared_ptr<std::__1::__empty_state<char>>::__shared_ptr_default_delete<std::__1::__empty_state<char>, std::__1::__empty_state<char>>, std::__1::allocator<std::__1::__empty_state<char>>>::__on_zero_shared()+0x14>
100011324:     	ldr	x8, [x0]
100011328:     	ldr	x1, [x8, #8]
10001132c:     	br	x1
100011330:     	ret

0000000100011334 <std::__1::__shared_ptr_pointer<std::__1::__empty_state<char>*, std::__1::shared_ptr<std::__1::__empty_state<char>>::__shared_ptr_default_delete<std::__1::__empty_state<char>, std::__1::__empty_state<char>>, std::__1::allocator<std::__1::__empty_state<char>>>::__get_deleter(std::type_info const&) const>:
100011334:     	stp	x20, x19, [sp, #-32]!
100011338:     	stp	x29, x30, [sp, #16]
10001133c:     	add	x29, sp, #16
100011340:     	mov	x19, x0
100011344:     	ldr	x9, [x1, #8]
100011348:     	adrp	x8, 0x100032000 <std::__1::__empty_state<char>::~__empty_state()+0x34>
10001134c:     	add	x8, x8, #3728
100011350:     	cmp	x9, x8
100011354:     	b.ne	0x100011368 <std::__1::__shared_ptr_pointer<std::__1::__empty_state<char>*, std::__1::shared_ptr<std::__1::__empty_state<char>>::__shared_ptr_default_delete<std::__1::__empty_state<char>, std::__1::__empty_state<char>>, std::__1::allocator<std::__1::__empty_state<char>>>::__get_deleter(std::type_info const&) const+0x34>
100011358:     	add	x0, x19, #24
10001135c:     	ldp	x29, x30, [sp, #16]
100011360:     	ldp	x20, x19, [sp], #32
100011364:     	ret
100011368:     	mov	x0, #0
10001136c:     	tbz	x9, #63, 0x10001135c <std::__1::__shared_ptr_pointer<std::__1::__empty_state<char>*, std::__1::shared_ptr<std::__1::__empty_state<char>>::__shared_ptr_default_delete<std::__1::__empty_state<char>, std::__1::__empty_state<char>>, std::__1::allocator<std::__1::__empty_state<char>>>::__get_deleter(std::type_info const&) const+0x28>
100011370:     	tbz	x8, #63, 0x10001135c <std::__1::__shared_ptr_pointer<std::__1::__empty_state<char>*, std::__1::shared_ptr<std::__1::__empty_state<char>>::__shared_ptr_default_delete<std::__1::__empty_state<char>, std::__1::__empty_state<char>>, std::__1::allocator<std::__1::__empty_state<char>>>::__get_deleter(std::type_info const&) const+0x28>
100011374:     	and	x0, x9, #0x7fffffffffffffff
100011378:     	and	x1, x8, #0x7fffffffffffffff
10001137c:     	bl	0x10002f230 <_vsnprintf+0x10002f230>
100011380:     	cbz	w0, 0x100011358 <std::__1::__shared_ptr_pointer<std::__1::__empty_state<char>*, std::__1::shared_ptr<std::__1::__empty_state<char>>::__shared_ptr_default_delete<std::__1::__empty_state<char>, std::__1::__empty_state<char>>, std::__1::allocator<std::__1::__empty_state<char>>>::__get_deleter(std::type_info const&) const+0x24>
100011384:     	mov	x0, #0
100011388:     	ldp	x29, x30, [sp, #16]
10001138c:     	ldp	x20, x19, [sp], #32
100011390:     	ret

0000000100011394 <std::__1::__shared_ptr_pointer<std::__1::__empty_state<char>*, std::__1::shared_ptr<std::__1::__empty_state<char>>::__shared_ptr_default_delete<std::__1::__empty_state<char>, std::__1::__empty_state<char>>, std::__1::allocator<std::__1::__empty_state<char>>>::__on_zero_shared_weak()>:
100011394:     	b	0x10002f014 <_vsnprintf+0x10002f014>

0000000100011398 <std::__1::__empty_state<char>::~__empty_state()>:
100011398:     	stp	x20, x19, [sp, #-32]!
10001139c:     	stp	x29, x30, [sp, #16]
1000113a0:     	add	x29, sp, #16
1000113a4:     	mov	x19, x0
1000113a8:     	adrp	x8, 0x100034000 <std::__1::__owns_one_state<char>::~__owns_one_state()+0x8>
1000113ac:     	add	x8, x8, #1696
1000113b0:     	str	x8, [x0]
1000113b4:     	ldr	x0, [x0, #8]
1000113b8:     	cbz	x0, 0x1000113c8 <std::__1::__empty_state<char>::~__empty_state()+0x30>
1000113bc:     	ldr	x8, [x0]
1000113c0:     	ldr	x8, [x8, #8]
1000113c4:     	blr	x8
1000113c8:     	mov	x0, x19
1000113cc:     	ldp	x29, x30, [sp, #16]
1000113d0:     	ldp	x20, x19, [sp], #32
1000113d4:     	ret

00000001000113d8 <std::__1::__empty_state<char>::~__empty_state()>:
1000113d8:     	stp	x20, x19, [sp, #-32]!
1000113dc:     	stp	x29, x30, [sp, #16]
1000113e0:     	add	x29, sp, #16
1000113e4:     	mov	x19, x0
1000113e8:     	adrp	x8, 0x100034000 <std::__1::__owns_one_state<char>::~__owns_one_state()+0x8>
1000113ec:     	add	x8, x8, #1696
1000113f0:     	str	x8, [x0]
1000113f4:     	ldr	x0, [x0, #8]
1000113f8:     	cbz	x0, 0x100011408 <std::__1::__empty_state<char>::~__empty_state()+0x30>
1000113fc:     	ldr	x8, [x0]
100011400:     	ldr	x8, [x8, #8]
100011404:     	blr	x8
100011408:     	mov	x0, x19
10001140c:     	ldp	x29, x30, [sp, #16]
100011410:     	ldp	x20, x19, [sp], #32
100011414:     	b	0x10002f014 <_vsnprintf+0x10002f014>

0000000100011418 <std::__1::__empty_state<char>::__exec(std::__1::__state<char>&) const>:
100011418:     	mov	w8, #-994
10001141c:     	str	w8, [x1]
100011420:     	ldr	x8, [x0, #8]
100011424:     	str	x8, [x1, #80]
100011428:     	ret

000000010001142c <std::__1::__owns_one_state<char>::~__owns_one_state()>:
10001142c:     	stp	x20, x19, [sp, #-32]!
100011430:     	stp	x29, x30, [sp, #16]
100011434:     	add	x29, sp, #16
100011438:     	mov	x19, x0
10001143c:     	adrp	x8, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_assertion<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x1c>
100011440:     	add	x8, x8, #1696
100011444:     	str	x8, [x0]
100011448:     	ldr	x0, [x0, #8]
10001144c:     	cbz	x0, 0x10001145c <std::__1::__owns_one_state<char>::~__owns_one_state()+0x30>
100011450:     	ldr	x8, [x0]
100011454:     	ldr	x8, [x8, #8]
100011458:     	blr	x8
10001145c:     	mov	x0, x19
100011460:     	ldp	x29, x30, [sp, #16]
100011464:     	ldp	x20, x19, [sp], #32
100011468:     	ret

000000010001146c <std::__1::__owns_one_state<char>::~__owns_one_state()>:
10001146c:     	stp	x20, x19, [sp, #-32]!
100011470:     	stp	x29, x30, [sp, #16]
100011474:     	add	x29, sp, #16
100011478:     	mov	x19, x0
10001147c:     	adrp	x8, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_assertion<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x5c>
100011480:     	add	x8, x8, #1696
100011484:     	str	x8, [x0]
100011488:     	ldr	x0, [x0, #8]
10001148c:     	cbz	x0, 0x10001149c <std::__1::__owns_one_state<char>::~__owns_one_state()+0x30>
100011490:     	ldr	x8, [x0]
100011494:     	ldr	x8, [x8, #8]
100011498:     	blr	x8
10001149c:     	mov	x0, x19
1000114a0:     	ldp	x29, x30, [sp, #16]
1000114a4:     	ldp	x20, x19, [sp], #32
1000114a8:     	b	0x10002f014 <_vsnprintf+0x10002f014>

00000001000114ac <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_assertion<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>:
1000114ac:     	sub	sp, sp, #112
1000114b0:     	stp	x22, x21, [sp, #64]
1000114b4:     	stp	x20, x19, [sp, #80]
1000114b8:     	stp	x29, x30, [sp, #96]
1000114bc:     	add	x29, sp, #96
1000114c0:     	mov	x20, x1
1000114c4:     	cmp	x1, x2
1000114c8:     	b.eq	0x100011614 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_assertion<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x168>
1000114cc:     	mov	x21, x2
1000114d0:     	mov	x19, x0
1000114d4:     	ldrsb	w8, [x20]
1000114d8:     	cmp	w8, #91
1000114dc:     	b.gt	0x10001158c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_assertion<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xe0>
1000114e0:     	cmp	w8, #36
1000114e4:     	b.eq	0x1000115cc <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_assertion<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x120>
1000114e8:     	cmp	w8, #40
1000114ec:     	b.ne	0x100011614 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_assertion<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x168>
1000114f0:     	add	x8, x20, #1
1000114f4:     	cmp	x8, x21
1000114f8:     	b.eq	0x100011614 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_assertion<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x168>
1000114fc:     	ldrb	w8, [x20, #1]
100011500:     	cmp	w8, #63
100011504:     	b.ne	0x100011614 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_assertion<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x168>
100011508:     	add	x8, x20, #2
10001150c:     	cmp	x8, x21
100011510:     	b.eq	0x100011614 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_assertion<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x168>
100011514:     	ldrsb	w8, [x20, #2]
100011518:     	cmp	w8, #33
10001151c:     	b.eq	0x1000116ec <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_assertion<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x240>
100011520:     	cmp	w8, #61
100011524:     	b.ne	0x100011614 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_assertion<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x168>
100011528:     	mov	x0, sp
10001152c:     	bl	0x1000106f0 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::basic_regex[abi:ue170006]()>
100011530:     	ldr	w8, [x19, #24]
100011534:     	str	w8, [sp, #24]
100011538:     	add	x1, x20, #3
10001153c:     	mov	x0, sp
100011540:     	mov	x2, x21
100011544:     	bl	0x10001081c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>
100011548:     	mov	x20, x0
10001154c:     	ldr	w22, [sp, #28]
100011550:     	ldr	w3, [x19, #28]
100011554:     	mov	x1, sp
100011558:     	mov	x0, x19
10001155c:     	mov	w2, #0
100011560:     	bl	0x100011dec <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_lookahead(std::__1::basic_regex<char, std::__1::regex_traits<char>> const&, bool, unsigned int)>
100011564:     	ldr	w8, [x19, #28]
100011568:     	add	w8, w8, w22
10001156c:     	str	w8, [x19, #28]
100011570:     	cmp	x20, x21
100011574:     	b.eq	0x100011584 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_assertion<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xd8>
100011578:     	ldrb	w8, [x20]
10001157c:     	cmp	w8, #41
100011580:     	b.eq	0x100011748 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_assertion<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x29c>
100011584:     	bl	0x100011e98 <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)6>()>
100011588:     	b	0x100011770 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_assertion<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x2c4>
10001158c:     	cmp	w8, #92
100011590:     	b.eq	0x10001162c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_assertion<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x180>
100011594:     	cmp	w8, #94
100011598:     	b.ne	0x100011614 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_assertion<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x168>
10001159c:     	mov	w0, #24
1000115a0:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
1000115a4:     	ldr	w8, [x19, #24]
1000115a8:     	mov	w9, #1520
1000115ac:     	and	w8, w8, w9
1000115b0:     	cmp	w8, #1024
1000115b4:     	cset	w8, eq
1000115b8:     	ldr	x9, [x19, #56]
1000115bc:     	ldr	x10, [x9, #8]
1000115c0:     	adrp	x11, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_assertion<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x1a0>
1000115c4:     	add	x11, x11, #1744
1000115c8:     	b	0x1000115f8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_assertion<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x14c>
1000115cc:     	mov	w0, #24
1000115d0:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
1000115d4:     	ldr	w8, [x19, #24]
1000115d8:     	mov	w9, #1520
1000115dc:     	and	w8, w8, w9
1000115e0:     	cmp	w8, #1024
1000115e4:     	cset	w8, eq
1000115e8:     	ldr	x9, [x19, #56]
1000115ec:     	ldr	x10, [x9, #8]
1000115f0:     	adrp	x11, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_assertion<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x1d0>
1000115f4:     	add	x11, x11, #1816
1000115f8:     	stp	x11, x10, [x0]
1000115fc:     	strb	w8, [x0, #16]
100011600:     	str	x0, [x9, #8]
100011604:     	ldr	x8, [x19, #56]
100011608:     	ldr	x8, [x8, #8]
10001160c:     	str	x8, [x19, #56]
100011610:     	add	x20, x20, #1
100011614:     	mov	x0, x20
100011618:     	ldp	x29, x30, [sp, #96]
10001161c:     	ldp	x20, x19, [sp, #80]
100011620:     	ldp	x22, x21, [sp, #64]
100011624:     	add	sp, sp, #112
100011628:     	ret
10001162c:     	add	x8, x20, #1
100011630:     	cmp	x8, x21
100011634:     	b.eq	0x100011614 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_assertion<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x168>
100011638:     	ldrb	w8, [x20, #1]
10001163c:     	cmp	w8, #66
100011640:     	b.eq	0x100011684 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_assertion<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x1d8>
100011644:     	cmp	w8, #98
100011648:     	b.ne	0x100011614 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_assertion<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x168>
10001164c:     	mov	w0, #48
100011650:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100011654:     	mov	x21, x0
100011658:     	ldr	x8, [x19, #56]
10001165c:     	ldr	x8, [x8, #8]
100011660:     	adrp	x9, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_assertion<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x240>
100011664:     	add	x9, x9, #1888
100011668:     	stp	x9, x8, [x0], #16
10001166c:     	mov	x1, x19
100011670:     	bl	0x10002ef6c <_vsnprintf+0x10002ef6c>
100011674:     	ldur	q0, [x19, #8]
100011678:     	stur	q0, [x21, #24]
10001167c:     	strb	wzr, [x21, #40]
100011680:     	b	0x1000116bc <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_assertion<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x210>
100011684:     	mov	w0, #48
100011688:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001168c:     	mov	x21, x0
100011690:     	ldr	x8, [x19, #56]
100011694:     	ldr	x8, [x8, #8]
100011698:     	adrp	x9, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_assertion<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x278>
10001169c:     	add	x9, x9, #1888
1000116a0:     	stp	x9, x8, [x0], #16
1000116a4:     	mov	x1, x19
1000116a8:     	bl	0x10002ef6c <_vsnprintf+0x10002ef6c>
1000116ac:     	ldur	q0, [x19, #8]
1000116b0:     	stur	q0, [x21, #24]
1000116b4:     	mov	w8, #1
1000116b8:     	strb	w8, [x21, #40]
1000116bc:     	ldr	x8, [x19, #56]
1000116c0:     	str	x21, [x8, #8]
1000116c4:     	ldr	x8, [x19, #56]
1000116c8:     	ldr	x8, [x8, #8]
1000116cc:     	str	x8, [x19, #56]
1000116d0:     	add	x20, x20, #2
1000116d4:     	mov	x0, x20
1000116d8:     	ldp	x29, x30, [sp, #96]
1000116dc:     	ldp	x20, x19, [sp, #80]
1000116e0:     	ldp	x22, x21, [sp, #64]
1000116e4:     	add	sp, sp, #112
1000116e8:     	ret
1000116ec:     	mov	x0, sp
1000116f0:     	bl	0x1000106f0 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::basic_regex[abi:ue170006]()>
1000116f4:     	ldr	w8, [x19, #24]
1000116f8:     	str	w8, [sp, #24]
1000116fc:     	add	x1, x20, #3
100011700:     	mov	x0, sp
100011704:     	mov	x2, x21
100011708:     	bl	0x10001081c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>
10001170c:     	mov	x20, x0
100011710:     	ldr	w22, [sp, #28]
100011714:     	ldr	w3, [x19, #28]
100011718:     	mov	x1, sp
10001171c:     	mov	x0, x19
100011720:     	mov	w2, #1
100011724:     	bl	0x100011dec <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_lookahead(std::__1::basic_regex<char, std::__1::regex_traits<char>> const&, bool, unsigned int)>
100011728:     	ldr	w8, [x19, #28]
10001172c:     	add	w8, w8, w22
100011730:     	str	w8, [x19, #28]
100011734:     	cmp	x20, x21
100011738:     	b.eq	0x10001176c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_assertion<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x2c0>
10001173c:     	ldrb	w8, [x20]
100011740:     	cmp	w8, #41
100011744:     	b.ne	0x10001176c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_assertion<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x2c0>
100011748:     	add	x20, x20, #1
10001174c:     	mov	x0, sp
100011750:     	bl	0x10001075c <std::__1::basic_regex<char, std::__1::regex_traits<char>>::~basic_regex()>
100011754:     	mov	x0, x20
100011758:     	ldp	x29, x30, [sp, #96]
10001175c:     	ldp	x20, x19, [sp, #80]
100011760:     	ldp	x22, x21, [sp, #64]
100011764:     	add	sp, sp, #112
100011768:     	ret
10001176c:     	bl	0x100011e98 <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)6>()>
100011770:     	brk	#0x1
100011774:     	b	0x100011780 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_assertion<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x2d4>
100011778:     	b	0x100011780 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_assertion<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x2d4>
10001177c:     	b	0x100011780 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_assertion<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x2d4>
100011780:     	mov	x19, x0
100011784:     	mov	x0, sp
100011788:     	bl	0x10001075c <std::__1::basic_regex<char, std::__1::regex_traits<char>>::~basic_regex()>
10001178c:     	mov	x0, x19
100011790:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100011794 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_atom<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>:
100011794:     	stp	x24, x23, [sp, #-64]!
100011798:     	stp	x22, x21, [sp, #16]
10001179c:     	stp	x20, x19, [sp, #32]
1000117a0:     	stp	x29, x30, [sp, #48]
1000117a4:     	add	x29, sp, #48
1000117a8:     	mov	x21, x1
1000117ac:     	cmp	x1, x2
1000117b0:     	b.eq	0x10001189c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_atom<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x108>
1000117b4:     	mov	x20, x2
1000117b8:     	mov	x19, x0
1000117bc:     	ldrsb	w9, [x21]
1000117c0:     	sub	w8, w9, #40
1000117c4:     	cmp	w8, #52
1000117c8:     	b.hi	0x100011924 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_atom<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x190>
1000117cc:     	adrp	x9, 0x100032000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_atom<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xbc>
1000117d0:     	add	x9, x9, #2854
1000117d4:     	adr	x10, #16
1000117d8:     	ldrb	w11, [x9, x8]
1000117dc:     	add	x10, x10, x11, lsl #2
1000117e0:     	br	x10
1000117e4:     	add	x22, x21, #1
1000117e8:     	cmp	x22, x20
1000117ec:     	b.eq	0x1000119ec <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_atom<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x258>
1000117f0:     	add	x8, x21, #2
1000117f4:     	cmp	x8, x20
1000117f8:     	b.eq	0x1000118dc <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_atom<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x148>
1000117fc:     	ldrb	w9, [x22]
100011800:     	cmp	w9, #63
100011804:     	b.ne	0x1000118dc <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_atom<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x148>
100011808:     	ldrb	w8, [x8]
10001180c:     	cmp	w8, #58
100011810:     	b.ne	0x1000118dc <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_atom<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x148>
100011814:     	ldr	w8, [x19, #36]
100011818:     	add	w8, w8, #1
10001181c:     	str	w8, [x19, #36]
100011820:     	add	x1, x21, #3
100011824:     	mov	x0, x19
100011828:     	mov	x2, x20
10001182c:     	bl	0x100010a50 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ecma_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>
100011830:     	cmp	x0, x20
100011834:     	b.eq	0x1000119ec <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_atom<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x258>
100011838:     	ldrb	w8, [x0]
10001183c:     	cmp	w8, #41
100011840:     	b.ne	0x1000119ec <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_atom<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x258>
100011844:     	ldr	w8, [x19, #36]
100011848:     	sub	w8, w8, #1
10001184c:     	str	w8, [x19, #36]
100011850:     	add	x21, x0, #1
100011854:     	mov	x0, x21
100011858:     	ldp	x29, x30, [sp, #48]
10001185c:     	ldp	x20, x19, [sp, #32]
100011860:     	ldp	x22, x21, [sp, #16]
100011864:     	ldp	x24, x23, [sp], #64
100011868:     	ret
10001186c:     	mov	w0, #16
100011870:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100011874:     	ldr	x8, [x19, #56]
100011878:     	ldr	x9, [x8, #8]
10001187c:     	adrp	x10, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_atom<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x174>
100011880:     	add	x10, x10, #2032
100011884:     	stp	x10, x9, [x0]
100011888:     	str	x0, [x8, #8]
10001188c:     	ldr	x8, [x19, #56]
100011890:     	ldr	x8, [x8, #8]
100011894:     	str	x8, [x19, #56]
100011898:     	add	x21, x21, #1
10001189c:     	mov	x0, x21
1000118a0:     	ldp	x29, x30, [sp, #48]
1000118a4:     	ldp	x20, x19, [sp, #32]
1000118a8:     	ldp	x22, x21, [sp, #16]
1000118ac:     	ldp	x24, x23, [sp], #64
1000118b0:     	ret
1000118b4:     	mov	x0, x19
1000118b8:     	mov	x1, x21
1000118bc:     	mov	x2, x20
1000118c0:     	bl	0x100013448 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_bracket_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>
1000118c4:     	b	0x10001193c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_atom<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x1a8>
1000118c8:     	mov	x0, x19
1000118cc:     	mov	x1, x21
1000118d0:     	mov	x2, x20
1000118d4:     	bl	0x1000132e4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_atom_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>
1000118d8:     	b	0x10001193c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_atom<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x1a8>
1000118dc:     	ldrb	w8, [x19, #24]
1000118e0:     	tbnz	w8, #1, 0x100011950 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_atom<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x1bc>
1000118e4:     	mov	w0, #24
1000118e8:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
1000118ec:     	ldr	w8, [x19, #28]
1000118f0:     	add	w23, w8, #1
1000118f4:     	str	w23, [x19, #28]
1000118f8:     	ldr	x8, [x19, #56]
1000118fc:     	ldr	x9, [x8, #8]
100011900:     	adrp	x10, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_atom<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x1f8>
100011904:     	add	x10, x10, #2608
100011908:     	stp	x10, x9, [x0]
10001190c:     	str	w23, [x0, #16]
100011910:     	str	x0, [x8, #8]
100011914:     	ldr	x8, [x19, #56]
100011918:     	ldr	x8, [x8, #8]
10001191c:     	str	x8, [x19, #56]
100011920:     	b	0x100011954 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_atom<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x1c0>
100011924:     	cmp	w9, #123
100011928:     	b.eq	0x1000119e8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_atom<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x254>
10001192c:     	mov	x0, x19
100011930:     	mov	x1, x21
100011934:     	mov	x2, x20
100011938:     	bl	0x1000135e4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_pattern_character<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>
10001193c:     	ldp	x29, x30, [sp, #48]
100011940:     	ldp	x20, x19, [sp, #32]
100011944:     	ldp	x22, x21, [sp, #16]
100011948:     	ldp	x24, x23, [sp], #64
10001194c:     	ret
100011950:     	ldr	w23, [x19, #28]
100011954:     	ldr	w8, [x19, #36]
100011958:     	add	w8, w8, #1
10001195c:     	str	w8, [x19, #36]
100011960:     	mov	x0, x19
100011964:     	mov	x1, x22
100011968:     	mov	x2, x20
10001196c:     	bl	0x100010a50 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ecma_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>
100011970:     	cmp	x0, x20
100011974:     	b.eq	0x1000119ec <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_atom<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x258>
100011978:     	mov	x21, x0
10001197c:     	ldrb	w8, [x0]
100011980:     	cmp	w8, #41
100011984:     	b.ne	0x1000119ec <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_atom<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x258>
100011988:     	ldrb	w8, [x19, #24]
10001198c:     	tbnz	w8, #1, 0x1000119c0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_atom<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x22c>
100011990:     	mov	w0, #24
100011994:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100011998:     	ldr	x8, [x19, #56]
10001199c:     	ldr	x9, [x8, #8]
1000119a0:     	adrp	x10, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x3c>
1000119a4:     	add	x10, x10, #2680
1000119a8:     	stp	x10, x9, [x0]
1000119ac:     	str	w23, [x0, #16]
1000119b0:     	str	x0, [x8, #8]
1000119b4:     	ldr	x8, [x19, #56]
1000119b8:     	ldr	x8, [x8, #8]
1000119bc:     	str	x8, [x19, #56]
1000119c0:     	ldr	w8, [x19, #36]
1000119c4:     	sub	w8, w8, #1
1000119c8:     	str	w8, [x19, #36]
1000119cc:     	add	x21, x21, #1
1000119d0:     	mov	x0, x21
1000119d4:     	ldp	x29, x30, [sp, #48]
1000119d8:     	ldp	x20, x19, [sp, #32]
1000119dc:     	ldp	x22, x21, [sp, #16]
1000119e0:     	ldp	x24, x23, [sp], #64
1000119e4:     	ret
1000119e8:     	bl	0x100013598 <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)11>()>
1000119ec:     	bl	0x100011e98 <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)6>()>

00000001000119f0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)>:
1000119f0:     	stp	x20, x19, [sp, #-32]!
1000119f4:     	stp	x29, x30, [sp, #16]
1000119f8:     	add	x29, sp, #16
1000119fc:     	cmp	x1, x2
100011a00:     	b.eq	0x100011a5c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x6c>
100011a04:     	ldr	w8, [x0, #24]
100011a08:     	and	w8, w8, #0x1f0
100011a0c:     	ldrsb	w9, [x1]
100011a10:     	cmp	w9, #62
100011a14:     	b.gt	0x100011a70 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x80>
100011a18:     	cmp	w9, #42
100011a1c:     	b.eq	0x100011b70 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x180>
100011a20:     	mov	x19, x1
100011a24:     	cmp	w9, #43
100011a28:     	b.ne	0x100011a60 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x70>
100011a2c:     	add	x19, x1, #1
100011a30:     	cbnz	w8, 0x100011c00 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x210>
100011a34:     	cmp	x19, x2
100011a38:     	b.eq	0x100011c00 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x210>
100011a3c:     	ldrb	w8, [x19]
100011a40:     	cmp	w8, #63
100011a44:     	b.ne	0x100011c00 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x210>
100011a48:     	add	x19, x1, #2
100011a4c:     	mov	w4, w4
100011a50:     	mov	w5, w5
100011a54:     	mov	w1, #1
100011a58:     	b	0x100011b9c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x1ac>
100011a5c:     	mov	x19, x1
100011a60:     	mov	x0, x19
100011a64:     	ldp	x29, x30, [sp, #16]
100011a68:     	ldp	x20, x19, [sp], #32
100011a6c:     	ret
100011a70:     	cmp	w9, #63
100011a74:     	b.eq	0x100011bb8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x1c8>
100011a78:     	mov	x19, x1
100011a7c:     	cmp	w9, #123
100011a80:     	b.ne	0x100011a60 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x70>
100011a84:     	add	x11, x1, #1
100011a88:     	cmp	x11, x2
100011a8c:     	b.eq	0x100011de4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x3f4>
100011a90:     	ldrb	w9, [x11]
100011a94:     	and	w10, w9, #0xf8
100011a98:     	cmp	w10, #48
100011a9c:     	b.eq	0x100011aac <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0xbc>
100011aa0:     	and	w10, w9, #0xfe
100011aa4:     	cmp	w10, #56
100011aa8:     	b.ne	0x100011de4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x3f4>
100011aac:     	sub	w9, w9, #48
100011ab0:     	add	x10, x1, #2
100011ab4:     	cmp	x10, x2
100011ab8:     	b.eq	0x100011b00 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x110>
100011abc:     	mov	w12, #52428
100011ac0:     	movk	w12, #3276, lsl #16
100011ac4:     	mov	w13, #10
100011ac8:     	ldrb	w14, [x10]
100011acc:     	and	w15, w14, #0xf8
100011ad0:     	cmp	w15, #48
100011ad4:     	b.eq	0x100011ae4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0xf4>
100011ad8:     	and	w15, w14, #0xfe
100011adc:     	cmp	w15, #56
100011ae0:     	b.ne	0x100011b04 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x114>
100011ae4:     	cmp	w9, w12
100011ae8:     	b.ge	0x100011de4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x3f4>
100011aec:     	madd	w9, w9, w13, w14
100011af0:     	sub	w9, w9, #48
100011af4:     	add	x10, x10, #1
100011af8:     	cmp	x10, x2
100011afc:     	b.ne	0x100011ac8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0xd8>
100011b00:     	mov	x10, x2
100011b04:     	cmp	x10, x11
100011b08:     	b.eq	0x100011de4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x3f4>
100011b0c:     	cmp	x10, x2
100011b10:     	b.eq	0x100011de8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x3f8>
100011b14:     	ldrsb	w11, [x10]
100011b18:     	cmp	w11, #44
100011b1c:     	b.eq	0x100011c60 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x270>
100011b20:     	cmp	w11, #125
100011b24:     	b.ne	0x100011de4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x3f4>
100011b28:     	add	x19, x10, #1
100011b2c:     	cbnz	w8, 0x100011ca8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x2b8>
100011b30:     	cmp	x19, x2
100011b34:     	b.eq	0x100011ca8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x2b8>
100011b38:     	ldrb	w8, [x19]
100011b3c:     	cmp	w8, #63
100011b40:     	b.ne	0x100011ca8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x2b8>
100011b44:     	sxtw	x1, w9
100011b48:     	add	x19, x10, #2
100011b4c:     	mov	w4, w4
100011b50:     	mov	w5, w5
100011b54:     	mov	x2, x1
100011b58:     	mov	w6, #0
100011b5c:     	bl	0x100018608 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_loop(unsigned long, unsigned long, std::__1::__owns_one_state<char>*, unsigned long, unsigned long, bool)>
100011b60:     	mov	x0, x19
100011b64:     	ldp	x29, x30, [sp, #16]
100011b68:     	ldp	x20, x19, [sp], #32
100011b6c:     	ret
100011b70:     	add	x19, x1, #1
100011b74:     	cmp	w8, #0
100011b78:     	ccmp	x19, x2, #4, eq
100011b7c:     	b.eq	0x100011c10 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x220>
100011b80:     	ldrb	w8, [x19]
100011b84:     	cmp	w8, #63
100011b88:     	b.ne	0x100011c10 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x220>
100011b8c:     	add	x19, x1, #2
100011b90:     	mov	w4, w4
100011b94:     	mov	w5, w5
100011b98:     	mov	x1, #0
100011b9c:     	mov	x2, #-1
100011ba0:     	mov	w6, #0
100011ba4:     	bl	0x100018608 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_loop(unsigned long, unsigned long, std::__1::__owns_one_state<char>*, unsigned long, unsigned long, bool)>
100011ba8:     	mov	x0, x19
100011bac:     	ldp	x29, x30, [sp, #16]
100011bb0:     	ldp	x20, x19, [sp], #32
100011bb4:     	ret
100011bb8:     	add	x19, x1, #1
100011bbc:     	cmp	w8, #0
100011bc0:     	ccmp	x19, x2, #4, eq
100011bc4:     	b.eq	0x100011c38 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x248>
100011bc8:     	ldrb	w8, [x19]
100011bcc:     	cmp	w8, #63
100011bd0:     	b.ne	0x100011c38 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x248>
100011bd4:     	add	x19, x1, #2
100011bd8:     	mov	w4, w4
100011bdc:     	mov	w5, w5
100011be0:     	mov	x1, #0
100011be4:     	mov	w2, #1
100011be8:     	mov	w6, #0
100011bec:     	bl	0x100018608 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_loop(unsigned long, unsigned long, std::__1::__owns_one_state<char>*, unsigned long, unsigned long, bool)>
100011bf0:     	mov	x0, x19
100011bf4:     	ldp	x29, x30, [sp, #16]
100011bf8:     	ldp	x20, x19, [sp], #32
100011bfc:     	ret
100011c00:     	mov	w4, w4
100011c04:     	mov	w5, w5
100011c08:     	mov	w1, #1
100011c0c:     	b	0x100011c1c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x22c>
100011c10:     	mov	w4, w4
100011c14:     	mov	w5, w5
100011c18:     	mov	x1, #0
100011c1c:     	mov	x2, #-1
100011c20:     	mov	w6, #1
100011c24:     	bl	0x100018608 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_loop(unsigned long, unsigned long, std::__1::__owns_one_state<char>*, unsigned long, unsigned long, bool)>
100011c28:     	mov	x0, x19
100011c2c:     	ldp	x29, x30, [sp, #16]
100011c30:     	ldp	x20, x19, [sp], #32
100011c34:     	ret
100011c38:     	mov	w4, w4
100011c3c:     	mov	w5, w5
100011c40:     	mov	x1, #0
100011c44:     	mov	w2, #1
100011c48:     	mov	w6, #1
100011c4c:     	bl	0x100018608 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_loop(unsigned long, unsigned long, std::__1::__owns_one_state<char>*, unsigned long, unsigned long, bool)>
100011c50:     	mov	x0, x19
100011c54:     	ldp	x29, x30, [sp, #16]
100011c58:     	ldp	x20, x19, [sp], #32
100011c5c:     	ret
100011c60:     	add	x12, x10, #1
100011c64:     	cmp	x12, x2
100011c68:     	b.eq	0x100011de4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x3f4>
100011c6c:     	ldrb	w11, [x12]
100011c70:     	cmp	w11, #125
100011c74:     	b.ne	0x100011cd0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x2e0>
100011c78:     	add	x19, x10, #2
100011c7c:     	cbnz	w8, 0x100011dac <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x3bc>
100011c80:     	cmp	x19, x2
100011c84:     	b.eq	0x100011dac <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x3bc>
100011c88:     	ldrb	w8, [x19]
100011c8c:     	cmp	w8, #63
100011c90:     	b.ne	0x100011dac <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x3bc>
100011c94:     	sxtw	x1, w9
100011c98:     	add	x19, x10, #3
100011c9c:     	mov	w4, w4
100011ca0:     	mov	w5, w5
100011ca4:     	b	0x100011b9c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x1ac>
100011ca8:     	sxtw	x1, w9
100011cac:     	mov	w4, w4
100011cb0:     	mov	w5, w5
100011cb4:     	mov	x2, x1
100011cb8:     	mov	w6, #1
100011cbc:     	bl	0x100018608 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_loop(unsigned long, unsigned long, std::__1::__owns_one_state<char>*, unsigned long, unsigned long, bool)>
100011cc0:     	mov	x0, x19
100011cc4:     	ldp	x29, x30, [sp, #16]
100011cc8:     	ldp	x20, x19, [sp], #32
100011ccc:     	ret
100011cd0:     	and	w13, w11, #0xf8
100011cd4:     	cmp	w13, #48
100011cd8:     	b.eq	0x100011ce8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x2f8>
100011cdc:     	and	w13, w11, #0xfe
100011ce0:     	cmp	w13, #56
100011ce4:     	b.ne	0x100011de8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x3f8>
100011ce8:     	sub	w11, w11, #48
100011cec:     	add	x10, x10, #2
100011cf0:     	cmp	x10, x2
100011cf4:     	b.eq	0x100011d3c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x34c>
100011cf8:     	mov	w13, #52428
100011cfc:     	movk	w13, #3276, lsl #16
100011d00:     	mov	w14, #10
100011d04:     	ldrb	w15, [x10]
100011d08:     	and	w16, w15, #0xf8
100011d0c:     	cmp	w16, #48
100011d10:     	b.eq	0x100011d20 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x330>
100011d14:     	and	w16, w15, #0xfe
100011d18:     	cmp	w16, #56
100011d1c:     	b.ne	0x100011d40 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x350>
100011d20:     	cmp	w11, w13
100011d24:     	b.ge	0x100011de4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x3f4>
100011d28:     	madd	w11, w11, w14, w15
100011d2c:     	sub	w11, w11, #48
100011d30:     	add	x10, x10, #1
100011d34:     	cmp	x10, x2
100011d38:     	b.ne	0x100011d04 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x314>
100011d3c:     	mov	x10, x2
100011d40:     	cmp	x10, x12
100011d44:     	b.eq	0x100011de8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x3f8>
100011d48:     	cmp	x10, x2
100011d4c:     	b.eq	0x100011de8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x3f8>
100011d50:     	ldrb	w12, [x10]
100011d54:     	cmp	w12, #125
100011d58:     	b.ne	0x100011de8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x3f8>
100011d5c:     	cmp	w11, w9
100011d60:     	b.lt	0x100011de4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x3f4>
100011d64:     	add	x19, x10, #1
100011d68:     	cbnz	w8, 0x100011dbc <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x3cc>
100011d6c:     	cmp	x19, x2
100011d70:     	b.eq	0x100011dbc <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x3cc>
100011d74:     	ldrb	w8, [x19]
100011d78:     	cmp	w8, #63
100011d7c:     	b.ne	0x100011dbc <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x3cc>
100011d80:     	sxtw	x1, w9
100011d84:     	sxtw	x2, w11
100011d88:     	add	x19, x10, #2
100011d8c:     	mov	w4, w4
100011d90:     	mov	w5, w5
100011d94:     	mov	w6, #0
100011d98:     	bl	0x100018608 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_loop(unsigned long, unsigned long, std::__1::__owns_one_state<char>*, unsigned long, unsigned long, bool)>
100011d9c:     	mov	x0, x19
100011da0:     	ldp	x29, x30, [sp, #16]
100011da4:     	ldp	x20, x19, [sp], #32
100011da8:     	ret
100011dac:     	sxtw	x1, w9
100011db0:     	mov	w4, w4
100011db4:     	mov	w5, w5
100011db8:     	b	0x100011c1c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x22c>
100011dbc:     	sxtw	x1, w9
100011dc0:     	sxtw	x2, w11
100011dc4:     	mov	w4, w4
100011dc8:     	mov	w5, w5
100011dcc:     	mov	w6, #1
100011dd0:     	bl	0x100018608 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_loop(unsigned long, unsigned long, std::__1::__owns_one_state<char>*, unsigned long, unsigned long, bool)>
100011dd4:     	mov	x0, x19
100011dd8:     	ldp	x29, x30, [sp, #16]
100011ddc:     	ldp	x20, x19, [sp], #32
100011de0:     	ret
100011de4:     	bl	0x100018730 <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)8>()>
100011de8:     	bl	0x10001877c <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)7>()>

0000000100011dec <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_lookahead(std::__1::basic_regex<char, std::__1::regex_traits<char>> const&, bool, unsigned int)>:
100011dec:     	stp	x24, x23, [sp, #-64]!
100011df0:     	stp	x22, x21, [sp, #16]
100011df4:     	stp	x20, x19, [sp, #32]
100011df8:     	stp	x29, x30, [sp, #48]
100011dfc:     	add	x29, sp, #48
100011e00:     	mov	x20, x3
100011e04:     	mov	x21, x2
100011e08:     	mov	x22, x1
100011e0c:     	mov	x19, x0
100011e10:     	mov	w0, #88
100011e14:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100011e18:     	mov	x23, x0
100011e1c:     	ldr	x8, [x19, #56]
100011e20:     	ldr	x8, [x8, #8]
100011e24:     	adrp	x9, 0x100034000 <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)6>()+0x18>
100011e28:     	add	x9, x9, #1960
100011e2c:     	stp	x9, x8, [x0], #16
100011e30:     	mov	x1, x22
100011e34:     	bl	0x10002ef6c <_vsnprintf+0x10002ef6c>
100011e38:     	ldur	q0, [x22, #8]
100011e3c:     	stur	q0, [x23, #24]
100011e40:     	ldur	q0, [x22, #24]
100011e44:     	stur	q0, [x23, #40]
100011e48:     	ldp	x9, x8, [x22, #40]
100011e4c:     	stp	x9, x8, [x23, #56]
100011e50:     	cbz	x8, 0x100011e60 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_lookahead(std::__1::basic_regex<char, std::__1::regex_traits<char>> const&, bool, unsigned int)+0x74>
100011e54:     	add	x8, x8, #8
100011e58:     	mov	w9, #1
100011e5c:     	ldadd	x9, x8, [x8]
100011e60:     	ldr	x8, [x22, #56]
100011e64:     	str	x8, [x23, #72]
100011e68:     	str	w20, [x23, #80]
100011e6c:     	strb	w21, [x23, #84]
100011e70:     	ldr	x8, [x19, #56]
100011e74:     	str	x23, [x8, #8]
100011e78:     	ldr	x8, [x19, #56]
100011e7c:     	ldr	x8, [x8, #8]
100011e80:     	str	x8, [x19, #56]
100011e84:     	ldp	x29, x30, [sp, #48]
100011e88:     	ldp	x20, x19, [sp, #32]
100011e8c:     	ldp	x22, x21, [sp, #16]
100011e90:     	ldp	x24, x23, [sp], #64
100011e94:     	ret

0000000100011e98 <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)6>()>:
100011e98:     	stp	x20, x19, [sp, #-32]!
100011e9c:     	stp	x29, x30, [sp, #16]
100011ea0:     	add	x29, sp, #16
100011ea4:     	mov	w0, #24
100011ea8:     	bl	0x10002f038 <_vsnprintf+0x10002f038>
100011eac:     	mov	x19, x0
100011eb0:     	mov	w1, #6
100011eb4:     	bl	0x10002ed20 <_vsnprintf+0x10002ed20>
100011eb8:     	adrp	x1, 0x100034000 <std::__1::__l_anchor_multiline<char>::~__l_anchor_multiline()+0x20>
100011ebc:     	ldr	x1, [x1, #656]
100011ec0:     	adrp	x2, 0x100034000 <std::__1::__l_anchor_multiline<char>::~__l_anchor_multiline()+0x28>
100011ec4:     	ldr	x2, [x2, #104]
100011ec8:     	mov	x0, x19
100011ecc:     	bl	0x10002f0a4 <_vsnprintf+0x10002f0a4>
100011ed0:     	mov	x20, x0
100011ed4:     	mov	x0, x19
100011ed8:     	bl	0x10002f068 <_vsnprintf+0x10002f068>
100011edc:     	mov	x0, x20
100011ee0:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100011ee4 <std::__1::__l_anchor_multiline<char>::~__l_anchor_multiline()>:
100011ee4:     	stp	x20, x19, [sp, #-32]!
100011ee8:     	stp	x29, x30, [sp, #16]
100011eec:     	add	x29, sp, #16
100011ef0:     	mov	x19, x0
100011ef4:     	adrp	x8, 0x100034000 <std::__1::__l_anchor_multiline<char>::__exec(std::__1::__state<char>&) const+0x1c>
100011ef8:     	add	x8, x8, #1696
100011efc:     	str	x8, [x0]
100011f00:     	ldr	x0, [x0, #8]
100011f04:     	cbz	x0, 0x100011f14 <std::__1::__l_anchor_multiline<char>::~__l_anchor_multiline()+0x30>
100011f08:     	ldr	x8, [x0]
100011f0c:     	ldr	x8, [x8, #8]
100011f10:     	blr	x8
100011f14:     	mov	x0, x19
100011f18:     	ldp	x29, x30, [sp, #16]
100011f1c:     	ldp	x20, x19, [sp], #32
100011f20:     	ret

0000000100011f24 <std::__1::__l_anchor_multiline<char>::~__l_anchor_multiline()>:
100011f24:     	stp	x20, x19, [sp, #-32]!
100011f28:     	stp	x29, x30, [sp, #16]
100011f2c:     	add	x29, sp, #16
100011f30:     	mov	x19, x0
100011f34:     	adrp	x8, 0x100034000 <std::__1::__l_anchor_multiline<char>::__exec(std::__1::__state<char>&) const+0x5c>
100011f38:     	add	x8, x8, #1696
100011f3c:     	str	x8, [x0]
100011f40:     	ldr	x0, [x0, #8]
100011f44:     	cbz	x0, 0x100011f54 <std::__1::__l_anchor_multiline<char>::~__l_anchor_multiline()+0x30>
100011f48:     	ldr	x8, [x0]
100011f4c:     	ldr	x8, [x8, #8]
100011f50:     	blr	x8
100011f54:     	mov	x0, x19
100011f58:     	ldp	x29, x30, [sp, #16]
100011f5c:     	ldp	x20, x19, [sp], #32
100011f60:     	b	0x10002f014 <_vsnprintf+0x10002f014>

0000000100011f64 <std::__1::__l_anchor_multiline<char>::__exec(std::__1::__state<char>&) const>:
100011f64:     	ldrb	w8, [x1, #92]
100011f68:     	cbz	w8, 0x100011f84 <std::__1::__l_anchor_multiline<char>::__exec(std::__1::__state<char>&) const+0x20>
100011f6c:     	ldp	x9, x8, [x1, #8]
100011f70:     	cmp	x8, x9
100011f74:     	b.ne	0x100011fb4 <std::__1::__l_anchor_multiline<char>::__exec(std::__1::__state<char>&) const+0x50>
100011f78:     	ldrb	w8, [x1, #88]
100011f7c:     	tbz	w8, #0, 0x100011fa0 <std::__1::__l_anchor_multiline<char>::__exec(std::__1::__state<char>&) const+0x3c>
100011f80:     	b	0x100011fb4 <std::__1::__l_anchor_multiline<char>::__exec(std::__1::__state<char>&) const+0x50>
100011f84:     	ldrb	w8, [x0, #16]
100011f88:     	cbz	w8, 0x100011fb4 <std::__1::__l_anchor_multiline<char>::__exec(std::__1::__state<char>&) const+0x50>
100011f8c:     	ldr	x8, [x1, #16]
100011f90:     	ldurb	w8, [x8, #-1]
100011f94:     	cmp	w8, #13
100011f98:     	ccmp	w8, #10, #4, ne
100011f9c:     	b.ne	0x100011fb4 <std::__1::__l_anchor_multiline<char>::__exec(std::__1::__state<char>&) const+0x50>
100011fa0:     	mov	w8, #-994
100011fa4:     	str	w8, [x1]
100011fa8:     	ldr	x8, [x0, #8]
100011fac:     	str	x8, [x1, #80]
100011fb0:     	ret
100011fb4:     	mov	w9, #-993
100011fb8:     	str	w9, [x1]
100011fbc:     	str	xzr, [x1, #80]
100011fc0:     	ret

0000000100011fc4 <std::__1::__r_anchor_multiline<char>::~__r_anchor_multiline()>:
100011fc4:     	stp	x20, x19, [sp, #-32]!
100011fc8:     	stp	x29, x30, [sp, #16]
100011fcc:     	add	x29, sp, #16
100011fd0:     	mov	x19, x0
100011fd4:     	adrp	x8, 0x100034000 <std::__1::__r_anchor_multiline<char>::__exec(std::__1::__state<char>&) const+0x1c>
100011fd8:     	add	x8, x8, #1696
100011fdc:     	str	x8, [x0]
100011fe0:     	ldr	x0, [x0, #8]
100011fe4:     	cbz	x0, 0x100011ff4 <std::__1::__r_anchor_multiline<char>::~__r_anchor_multiline()+0x30>
100011fe8:     	ldr	x8, [x0]
100011fec:     	ldr	x8, [x8, #8]
100011ff0:     	blr	x8
100011ff4:     	mov	x0, x19
100011ff8:     	ldp	x29, x30, [sp, #16]
100011ffc:     	ldp	x20, x19, [sp], #32
100012000:     	ret

0000000100012004 <std::__1::__r_anchor_multiline<char>::~__r_anchor_multiline()>:
100012004:     	stp	x20, x19, [sp, #-32]!
100012008:     	stp	x29, x30, [sp, #16]
10001200c:     	add	x29, sp, #16
100012010:     	mov	x19, x0
100012014:     	adrp	x8, 0x100034000 <std::__1::__word_boundary<char, std::__1::regex_traits<char>>::~__word_boundary()+0x8>
100012018:     	add	x8, x8, #1696
10001201c:     	str	x8, [x0]
100012020:     	ldr	x0, [x0, #8]
100012024:     	cbz	x0, 0x100012034 <std::__1::__r_anchor_multiline<char>::~__r_anchor_multiline()+0x30>
100012028:     	ldr	x8, [x0]
10001202c:     	ldr	x8, [x8, #8]
100012030:     	blr	x8
100012034:     	mov	x0, x19
100012038:     	ldp	x29, x30, [sp, #16]
10001203c:     	ldp	x20, x19, [sp], #32
100012040:     	b	0x10002f014 <_vsnprintf+0x10002f014>

0000000100012044 <std::__1::__r_anchor_multiline<char>::__exec(std::__1::__state<char>&) const>:
100012044:     	ldp	x8, x9, [x1, #16]
100012048:     	cmp	x8, x9
10001204c:     	b.ne	0x100012058 <std::__1::__r_anchor_multiline<char>::__exec(std::__1::__state<char>&) const+0x14>
100012050:     	ldrb	w9, [x1, #88]
100012054:     	tbz	w9, #1, 0x100012070 <std::__1::__r_anchor_multiline<char>::__exec(std::__1::__state<char>&) const+0x2c>
100012058:     	ldrb	w9, [x0, #16]
10001205c:     	cbz	w9, 0x100012084 <std::__1::__r_anchor_multiline<char>::__exec(std::__1::__state<char>&) const+0x40>
100012060:     	ldrb	w8, [x8]
100012064:     	cmp	w8, #13
100012068:     	ccmp	w8, #10, #4, ne
10001206c:     	b.ne	0x100012084 <std::__1::__r_anchor_multiline<char>::__exec(std::__1::__state<char>&) const+0x40>
100012070:     	mov	w8, #-994
100012074:     	str	w8, [x1]
100012078:     	ldr	x8, [x0, #8]
10001207c:     	str	x8, [x1, #80]
100012080:     	ret
100012084:     	mov	w9, #-993
100012088:     	str	w9, [x1]
10001208c:     	str	xzr, [x1, #80]
100012090:     	ret

0000000100012094 <std::__1::__word_boundary<char, std::__1::regex_traits<char>>::~__word_boundary()>:
100012094:     	stp	x20, x19, [sp, #-32]!
100012098:     	stp	x29, x30, [sp, #16]
10001209c:     	add	x29, sp, #16
1000120a0:     	mov	x19, x0
1000120a4:     	adrp	x8, 0x100034000 <std::__1::__word_boundary<char, std::__1::regex_traits<char>>::~__word_boundary()+0x48>
1000120a8:     	add	x8, x8, #1888
1000120ac:     	str	x8, [x0], #16
1000120b0:     	bl	0x10002ef84 <_vsnprintf+0x10002ef84>
1000120b4:     	adrp	x8, 0x100034000 <std::__1::__word_boundary<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x8>
1000120b8:     	add	x8, x8, #1696
1000120bc:     	str	x8, [x19]
1000120c0:     	ldr	x0, [x19, #8]
1000120c4:     	cbz	x0, 0x1000120d4 <std::__1::__word_boundary<char, std::__1::regex_traits<char>>::~__word_boundary()+0x40>
1000120c8:     	ldr	x8, [x0]
1000120cc:     	ldr	x8, [x8, #8]
1000120d0:     	blr	x8
1000120d4:     	mov	x0, x19
1000120d8:     	ldp	x29, x30, [sp, #16]
1000120dc:     	ldp	x20, x19, [sp], #32
1000120e0:     	ret

00000001000120e4 <std::__1::__word_boundary<char, std::__1::regex_traits<char>>::~__word_boundary()>:
1000120e4:     	stp	x20, x19, [sp, #-32]!
1000120e8:     	stp	x29, x30, [sp, #16]
1000120ec:     	add	x29, sp, #16
1000120f0:     	mov	x19, x0
1000120f4:     	adrp	x8, 0x100034000 <std::__1::__word_boundary<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x48>
1000120f8:     	add	x8, x8, #1888
1000120fc:     	str	x8, [x0], #16
100012100:     	bl	0x10002ef84 <_vsnprintf+0x10002ef84>
100012104:     	adrp	x8, 0x100034000 <std::__1::__word_boundary<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x58>
100012108:     	add	x8, x8, #1696
10001210c:     	str	x8, [x19]
100012110:     	ldr	x0, [x19, #8]
100012114:     	cbz	x0, 0x100012124 <std::__1::__word_boundary<char, std::__1::regex_traits<char>>::~__word_boundary()+0x40>
100012118:     	ldr	x8, [x0]
10001211c:     	ldr	x8, [x8, #8]
100012120:     	blr	x8
100012124:     	mov	x0, x19
100012128:     	ldp	x29, x30, [sp, #16]
10001212c:     	ldp	x20, x19, [sp], #32
100012130:     	b	0x10002f014 <_vsnprintf+0x10002f014>

0000000100012134 <std::__1::__word_boundary<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const>:
100012134:     	ldr	x8, [x1, #8]
100012138:     	ldr	x10, [x1, #24]
10001213c:     	cmp	x8, x10
100012140:     	b.eq	0x1000121f4 <std::__1::__word_boundary<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0xc0>
100012144:     	ldr	x9, [x1, #16]
100012148:     	cmp	x9, x10
10001214c:     	b.eq	0x1000121b0 <std::__1::__word_boundary<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x7c>
100012150:     	cmp	x9, x8
100012154:     	b.ne	0x100012174 <std::__1::__word_boundary<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x40>
100012158:     	ldr	w10, [x1, #88]
10001215c:     	tbnz	w10, #7, 0x100012174 <std::__1::__word_boundary<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x40>
100012160:     	tbnz	w10, #2, 0x1000121f4 <std::__1::__word_boundary<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0xc0>
100012164:     	ldrb	w8, [x8]
100012168:     	cmp	x8, #95
10001216c:     	b.eq	0x1000121e0 <std::__1::__word_boundary<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0xac>
100012170:     	b	0x1000121c4 <std::__1::__word_boundary<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x90>
100012174:     	ldurb	w10, [x9, #-1]
100012178:     	ldrb	w8, [x9]
10001217c:     	cmp	x10, #95
100012180:     	b.eq	0x1000121a0 <std::__1::__word_boundary<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x6c>
100012184:     	tbnz	w10, #7, 0x100012214 <std::__1::__word_boundary<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0xe0>
100012188:     	ldr	x9, [x0, #24]
10001218c:     	ldr	x9, [x9, #16]
100012190:     	ldr	w9, [x9, x10, lsl #2]
100012194:     	mov	w10, #1280
100012198:     	tst	w9, w10
10001219c:     	b.eq	0x100012214 <std::__1::__word_boundary<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0xe0>
1000121a0:     	mov	w9, #1
1000121a4:     	cmp	w8, #95
1000121a8:     	b.eq	0x10001223c <std::__1::__word_boundary<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x108>
1000121ac:     	b	0x100012220 <std::__1::__word_boundary<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0xec>
1000121b0:     	ldrb	w8, [x1, #88]
1000121b4:     	tbnz	w8, #3, 0x1000121f4 <std::__1::__word_boundary<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0xc0>
1000121b8:     	ldurb	w8, [x10, #-1]
1000121bc:     	cmp	x8, #95
1000121c0:     	b.eq	0x1000121e0 <std::__1::__word_boundary<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0xac>
1000121c4:     	tbnz	w8, #7, 0x1000121f4 <std::__1::__word_boundary<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0xc0>
1000121c8:     	ldr	x9, [x0, #24]
1000121cc:     	ldr	x9, [x9, #16]
1000121d0:     	ldr	w8, [x9, x8, lsl #2]
1000121d4:     	mov	w9, #1280
1000121d8:     	tst	w8, w9
1000121dc:     	b.eq	0x1000121f4 <std::__1::__word_boundary<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0xc0>
1000121e0:     	mov	w8, #1
1000121e4:     	ldrb	w9, [x0, #40]
1000121e8:     	cmp	w9, w8
1000121ec:     	b.eq	0x100012204 <std::__1::__word_boundary<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0xd0>
1000121f0:     	b	0x100012270 <std::__1::__word_boundary<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x13c>
1000121f4:     	mov	w8, #0
1000121f8:     	ldrb	w9, [x0, #40]
1000121fc:     	cmp	w9, w8
100012200:     	b.ne	0x100012270 <std::__1::__word_boundary<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x13c>
100012204:     	mov	w9, #-993
100012208:     	str	w9, [x1]
10001220c:     	str	xzr, [x1, #80]
100012210:     	ret
100012214:     	mov	w9, #0
100012218:     	cmp	w8, #95
10001221c:     	b.eq	0x10001223c <std::__1::__word_boundary<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x108>
100012220:     	tbnz	w8, #7, 0x100012258 <std::__1::__word_boundary<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x124>
100012224:     	ldr	x10, [x0, #24]
100012228:     	ldr	x10, [x10, #16]
10001222c:     	ldr	w8, [x10, x8, lsl #2]
100012230:     	mov	w10, #1280
100012234:     	tst	w8, w10
100012238:     	b.eq	0x100012258 <std::__1::__word_boundary<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x124>
10001223c:     	mov	w8, #1
100012240:     	cmp	w9, w8
100012244:     	cset	w8, ne
100012248:     	ldrb	w9, [x0, #40]
10001224c:     	cmp	w9, w8
100012250:     	b.eq	0x100012204 <std::__1::__word_boundary<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0xd0>
100012254:     	b	0x100012270 <std::__1::__word_boundary<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x13c>
100012258:     	mov	w8, #0
10001225c:     	cmp	w9, w8
100012260:     	cset	w8, ne
100012264:     	ldrb	w9, [x0, #40]
100012268:     	cmp	w9, w8
10001226c:     	b.eq	0x100012204 <std::__1::__word_boundary<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0xd0>
100012270:     	mov	w8, #-994
100012274:     	str	w8, [x1]
100012278:     	ldr	x8, [x0, #8]
10001227c:     	str	x8, [x1, #80]
100012280:     	ret

0000000100012284 <std::__1::__lookahead<char, std::__1::regex_traits<char>>::~__lookahead()>:
100012284:     	stp	x22, x21, [sp, #-48]!
100012288:     	stp	x20, x19, [sp, #16]
10001228c:     	stp	x29, x30, [sp, #32]
100012290:     	add	x29, sp, #32
100012294:     	mov	x19, x0
100012298:     	adrp	x8, 0x100034000 <std::__1::__lookahead<char, std::__1::regex_traits<char>>::~__lookahead()+0xc>
10001229c:     	add	x8, x8, #1960
1000122a0:     	str	x8, [x0]
1000122a4:     	add	x20, x0, #16
1000122a8:     	ldr	x21, [x0, #64]
1000122ac:     	cbz	x21, 0x1000122d8 <std::__1::__lookahead<char, std::__1::regex_traits<char>>::~__lookahead()+0x54>
1000122b0:     	add	x8, x21, #8
1000122b4:     	mov	x9, #-1
1000122b8:     	ldaddal	x9, x8, [x8]
1000122bc:     	cbnz	x8, 0x1000122d8 <std::__1::__lookahead<char, std::__1::regex_traits<char>>::~__lookahead()+0x54>
1000122c0:     	ldr	x8, [x21]
1000122c4:     	ldr	x8, [x8, #16]
1000122c8:     	mov	x0, x21
1000122cc:     	blr	x8
1000122d0:     	mov	x0, x21
1000122d4:     	bl	0x10002eee8 <_vsnprintf+0x10002eee8>
1000122d8:     	mov	x0, x20
1000122dc:     	bl	0x10002ef84 <_vsnprintf+0x10002ef84>
1000122e0:     	adrp	x8, 0x100034000 <std::__1::__lookahead<char, std::__1::regex_traits<char>>::~__lookahead()+0x54>
1000122e4:     	add	x8, x8, #1696
1000122e8:     	str	x8, [x19]
1000122ec:     	ldr	x0, [x19, #8]
1000122f0:     	cbz	x0, 0x100012300 <std::__1::__lookahead<char, std::__1::regex_traits<char>>::~__lookahead()+0x7c>
1000122f4:     	ldr	x8, [x0]
1000122f8:     	ldr	x8, [x8, #8]
1000122fc:     	blr	x8
100012300:     	mov	x0, x19
100012304:     	ldp	x29, x30, [sp, #32]
100012308:     	ldp	x20, x19, [sp, #16]
10001230c:     	ldp	x22, x21, [sp], #48
100012310:     	ret

0000000100012314 <std::__1::__lookahead<char, std::__1::regex_traits<char>>::~__lookahead()>:
100012314:     	stp	x22, x21, [sp, #-48]!
100012318:     	stp	x20, x19, [sp, #16]
10001231c:     	stp	x29, x30, [sp, #32]
100012320:     	add	x29, sp, #32
100012324:     	mov	x19, x0
100012328:     	adrp	x8, 0x100034000 <std::__1::__lookahead<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0xc>
10001232c:     	add	x8, x8, #1960
100012330:     	str	x8, [x0]
100012334:     	add	x20, x0, #16
100012338:     	ldr	x21, [x0, #64]
10001233c:     	cbz	x21, 0x100012368 <std::__1::__lookahead<char, std::__1::regex_traits<char>>::~__lookahead()+0x54>
100012340:     	add	x8, x21, #8
100012344:     	mov	x9, #-1
100012348:     	ldaddal	x9, x8, [x8]
10001234c:     	cbnz	x8, 0x100012368 <std::__1::__lookahead<char, std::__1::regex_traits<char>>::~__lookahead()+0x54>
100012350:     	ldr	x8, [x21]
100012354:     	ldr	x8, [x8, #16]
100012358:     	mov	x0, x21
10001235c:     	blr	x8
100012360:     	mov	x0, x21
100012364:     	bl	0x10002eee8 <_vsnprintf+0x10002eee8>
100012368:     	mov	x0, x20
10001236c:     	bl	0x10002ef84 <_vsnprintf+0x10002ef84>
100012370:     	adrp	x8, 0x100034000 <std::__1::__lookahead<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x54>
100012374:     	add	x8, x8, #1696
100012378:     	str	x8, [x19]
10001237c:     	ldr	x0, [x19, #8]
100012380:     	cbz	x0, 0x100012390 <std::__1::__lookahead<char, std::__1::regex_traits<char>>::~__lookahead()+0x7c>
100012384:     	ldr	x8, [x0]
100012388:     	ldr	x8, [x8, #8]
10001238c:     	blr	x8
100012390:     	mov	x0, x19
100012394:     	ldp	x29, x30, [sp, #32]
100012398:     	ldp	x20, x19, [sp, #16]
10001239c:     	ldp	x22, x21, [sp], #48
1000123a0:     	b	0x10002f014 <_vsnprintf+0x10002f014>

00000001000123a4 <std::__1::__lookahead<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const>:
1000123a4:     	sub	sp, sp, #160
1000123a8:     	stp	x22, x21, [sp, #112]
1000123ac:     	stp	x20, x19, [sp, #128]
1000123b0:     	stp	x29, x30, [sp, #144]
1000123b4:     	add	x29, sp, #144
1000123b8:     	mov	x19, x1
1000123bc:     	mov	x20, x0
1000123c0:     	stp	xzr, xzr, [sp, #48]
1000123c4:     	strb	wzr, [sp, #64]
1000123c8:     	stp	xzr, xzr, [sp, #72]
1000123cc:     	strb	wzr, [sp, #88]
1000123d0:     	strb	wzr, [sp, #96]
1000123d4:     	str	xzr, [sp, #104]
1000123d8:     	stp	xzr, xzr, [sp]
1000123dc:     	ldr	w8, [x0, #44]
1000123e0:     	add	w1, w8, #1
1000123e4:     	ldp	x21, x8, [x19, #16]
1000123e8:     	mov	x9, sp
1000123ec:     	add	x2, x9, #24
1000123f0:     	stp	xzr, x8, [sp, #16]
1000123f4:     	str	x8, [sp, #32]
1000123f8:     	strb	wzr, [sp, #40]
1000123fc:     	mov	x0, sp
100012400:     	bl	0x10001298c <std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::assign(unsigned long, std::__1::sub_match<char const*> const&)>
100012404:     	add	x0, x20, #16
100012408:     	stp	x21, x21, [sp, #48]
10001240c:     	strb	wzr, [sp, #64]
100012410:     	ldp	x8, x9, [sp, #24]
100012414:     	stp	x8, x9, [sp, #72]
100012418:     	ldrb	w8, [sp, #40]
10001241c:     	strb	w8, [sp, #88]
100012420:     	str	x21, [sp, #104]
100012424:     	mov	w8, #1
100012428:     	strb	w8, [sp, #96]
10001242c:     	ldr	w8, [x19, #88]
100012430:     	and	w8, w8, #0xfff
100012434:     	orr	w4, w8, #0x40
100012438:     	ldrb	w8, [x19, #92]
10001243c:     	cmp	w8, #0
100012440:     	ldp	x8, x1, [x19, #8]
100012444:     	ccmp	x1, x8, #0, ne
100012448:     	cset	w5, eq
10001244c:     	ldr	x2, [x19, #24]
100012450:     	mov	x3, sp
100012454:     	bl	0x100012530 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const>
100012458:     	ldrb	w8, [x20, #84]
10001245c:     	cmp	w8, w0
100012460:     	b.ne	0x100012478 <std::__1::__lookahead<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0xd4>
100012464:     	mov	w8, #-993
100012468:     	str	w8, [x19]
10001246c:     	str	xzr, [x19, #80]
100012470:     	ldr	x0, [sp]
100012474:     	b	0x1000124f0 <std::__1::__lookahead<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x14c>
100012478:     	mov	w8, #-994
10001247c:     	str	w8, [x19]
100012480:     	ldr	x8, [x20, #8]
100012484:     	str	x8, [x19, #80]
100012488:     	ldp	x0, x8, [sp]
10001248c:     	sub	x8, x8, x0
100012490:     	asr	x8, x8, #3
100012494:     	mov	x9, #-6148914691236517206
100012498:     	movk	x9, #43691
10001249c:     	mul	x8, x8, x9
1000124a0:     	cmp	x8, #2
1000124a4:     	b.lo	0x1000124f0 <std::__1::__lookahead<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x14c>
1000124a8:     	ldr	w9, [x20, #80]
1000124ac:     	ldr	x10, [x19, #32]
1000124b0:     	mov	w11, #1
1000124b4:     	mov	w12, #24
1000124b8:     	madd	x13, x11, x12, x0
1000124bc:     	add	w14, w11, w9
1000124c0:     	sub	w14, w14, #1
1000124c4:     	umaddl	x14, w14, w12, x10
1000124c8:     	ldr	x15, [x13]
1000124cc:     	str	x15, [x14]
1000124d0:     	ldr	x15, [x13, #8]
1000124d4:     	str	x15, [x14, #8]
1000124d8:     	ldrb	w13, [x13, #16]
1000124dc:     	strb	w13, [x14, #16]
1000124e0:     	add	w11, w11, #1
1000124e4:     	cmp	x8, x11
1000124e8:     	b.hi	0x1000124b8 <std::__1::__lookahead<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x114>
1000124ec:     	b	0x1000124f4 <std::__1::__lookahead<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x150>
1000124f0:     	cbz	x0, 0x1000124fc <std::__1::__lookahead<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x158>
1000124f4:     	str	x0, [sp, #8]
1000124f8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000124fc:     	ldp	x29, x30, [sp, #144]
100012500:     	ldp	x20, x19, [sp, #128]
100012504:     	ldp	x22, x21, [sp, #112]
100012508:     	add	sp, sp, #160
10001250c:     	ret
100012510:     	b	0x100012514 <std::__1::__lookahead<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x170>
100012514:     	mov	x19, x0
100012518:     	ldr	x0, [sp]
10001251c:     	cbz	x0, 0x100012528 <std::__1::__lookahead<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x184>
100012520:     	str	x0, [sp, #8]
100012524:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100012528:     	mov	x0, x19
10001252c:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100012530 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const>:
100012530:     	sub	sp, sp, #272
100012534:     	stp	x28, x27, [sp, #176]
100012538:     	stp	x26, x25, [sp, #192]
10001253c:     	stp	x24, x23, [sp, #208]
100012540:     	stp	x22, x21, [sp, #224]
100012544:     	stp	x20, x19, [sp, #240]
100012548:     	stp	x29, x30, [sp, #256]
10001254c:     	add	x29, sp, #256
100012550:     	stp	xzr, xzr, [x29, #-112]
100012554:     	stur	xzr, [x29, #-96]
100012558:     	ldr	x19, [x0, #40]
10001255c:     	cbz	x19, 0x100012614 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0xe4>
100012560:     	mov	x23, x5
100012564:     	mov	x21, x4
100012568:     	mov	x25, x3
10001256c:     	mov	x26, x2
100012570:     	mov	x20, x1
100012574:     	mov	x24, x0
100012578:     	stp	x2, x2, [sp, #120]
10001257c:     	strb	wzr, [sp, #136]
100012580:     	str	wzr, [sp, #24]
100012584:     	movi.2d	v0, #0000000000000000
100012588:     	stp	q0, q0, [sp, #32]
10001258c:     	stp	q0, q0, [sp, #64]
100012590:     	stur	q0, [sp, #96]
100012594:     	str	wzr, [sp, #112]
100012598:     	sub	x0, x29, #112
10001259c:     	add	x1, sp, #24
1000125a0:     	bl	0x100012c98 <void std::__1::vector<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__push_back_slow_path<std::__1::__state<char>>(std::__1::__state<char>&&)>
1000125a4:     	ldr	x0, [sp, #80]
1000125a8:     	cbz	x0, 0x1000125b4 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x84>
1000125ac:     	str	x0, [sp, #88]
1000125b0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000125b4:     	ldr	x0, [sp, #56]
1000125b8:     	cbz	x0, 0x1000125c4 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x94>
1000125bc:     	str	x0, [sp, #64]
1000125c0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000125c4:     	ldur	x22, [x29, #-104]
1000125c8:     	stur	wzr, [x22, #-96]
1000125cc:     	stp	x20, x20, [x22, #-88]
1000125d0:     	stur	x26, [x22, #-72]
1000125d4:     	mov	x0, x22
1000125d8:     	ldr	x9, [x0, #-64]!
1000125dc:     	ldr	w8, [x24, #28]
1000125e0:     	ldur	x10, [x22, #-56]
1000125e4:     	sub	x10, x10, x9
1000125e8:     	asr	x10, x10, #3
1000125ec:     	mov	x11, #-6148914691236517206
1000125f0:     	movk	x11, #43691
1000125f4:     	mul	x10, x10, x11
1000125f8:     	cmp	x10, x8
1000125fc:     	b.hs	0x100012628 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0xf8>
100012600:     	sub	x1, x8, x10
100012604:     	add	x2, sp, #120
100012608:     	bl	0x100012e90 <std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::__append(unsigned long, std::__1::sub_match<char const*> const&)>
10001260c:     	ldur	x22, [x29, #-104]
100012610:     	b	0x100012638 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x108>
100012614:     	mov	x23, #0
100012618:     	cmp	x19, #0
10001261c:     	cset	w19, ne
100012620:     	cbnz	x23, 0x100012850 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x320>
100012624:     	b	0x1000128a4 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x374>
100012628:     	b.ls	0x100012638 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x108>
10001262c:     	mov	w10, #24
100012630:     	madd	x8, x8, x10, x9
100012634:     	stur	x8, [x22, #-56]
100012638:     	mov	x0, x22
10001263c:     	ldp	x9, x10, [x0, #-40]!
100012640:     	ldr	w8, [x24, #32]
100012644:     	sub	x10, x10, x9
100012648:     	asr	x10, x10, #4
10001264c:     	cmp	x10, x8
100012650:     	str	x25, [sp, #8]
100012654:     	b.hs	0x100012668 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x138>
100012658:     	sub	x1, x8, x10
10001265c:     	bl	0x100013028 <std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__append(unsigned long)>
100012660:     	ldur	x22, [x29, #-104]
100012664:     	b	0x100012674 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x144>
100012668:     	b.ls	0x100012674 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x144>
10001266c:     	add	x8, x9, x8, lsl #4
100012670:     	stur	x8, [x22, #-32]
100012674:     	str	x19, [sp]
100012678:     	stur	x19, [x22, #-16]
10001267c:     	stur	w21, [x22, #-8]
100012680:     	str	x26, [sp, #16]
100012684:     	sub	w24, w26, w20
100012688:     	add	x8, sp, #24
10001268c:     	sturb	w23, [x22, #-4]
100012690:     	add	x26, x8, #80
100012694:     	add	x27, x8, #32
100012698:     	add	x28, x8, #56
10001269c:     	mov	w19, #1
1000126a0:     	adrp	x25, 0x100032000 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x1f0>
1000126a4:     	add	x25, x25, #2907
1000126a8:     	b	0x1000126c4 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x194>
1000126ac:     	sub	x8, x22, #96
1000126b0:     	stur	x8, [x29, #-104]
1000126b4:     	ldp	x23, x22, [x29, #-112]
1000126b8:     	add	w19, w19, #1
1000126bc:     	cmp	x23, x22
1000126c0:     	b.eq	0x100012848 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x318>
1000126c4:     	tst	w19, #0xfff
1000126c8:     	b.ne	0x1000126d8 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x1a8>
1000126cc:     	lsr	w8, w19, #12
1000126d0:     	cmp	w8, w24
1000126d4:     	b.ge	0x100012944 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x414>
1000126d8:     	sub	x23, x22, #96
1000126dc:     	ldur	x0, [x22, #-16]
1000126e0:     	cbz	x0, 0x1000126f4 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x1c4>
1000126e4:     	ldr	x8, [x0]
1000126e8:     	ldr	x8, [x8, #16]
1000126ec:     	mov	x1, x23
1000126f0:     	blr	x8
1000126f4:     	ldr	w8, [x23]
1000126f8:     	add	w8, w8, #1000
1000126fc:     	cmp	w8, #9
100012700:     	b.hi	0x10001294c <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x41c>
100012704:     	adr	x9, #-80
100012708:     	ldrb	w10, [x25, x8]
10001270c:     	add	x9, x9, x10, lsl #2
100012710:     	br	x9
100012714:     	ldur	x9, [x22, #-80]
100012718:     	tbz	w21, #5, 0x100012724 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x1f4>
10001271c:     	cmp	x9, x20
100012720:     	b.eq	0x100012734 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x204>
100012724:     	tbz	w21, #12, 0x1000128c8 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x398>
100012728:     	ldr	x8, [sp, #16]
10001272c:     	cmp	x9, x8
100012730:     	b.eq	0x1000128c8 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x398>
100012734:     	ldur	x22, [x29, #-104]
100012738:     	ldur	x0, [x22, #-40]
10001273c:     	cbz	x0, 0x100012748 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x218>
100012740:     	stur	x0, [x22, #-32]
100012744:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100012748:     	ldur	x0, [x22, #-64]
10001274c:     	cbz	x0, 0x1000126ac <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x17c>
100012750:     	stur	x0, [x22, #-56]
100012754:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100012758:     	b	0x1000126ac <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x17c>
10001275c:     	add	x0, sp, #24
100012760:     	mov	x1, x23
100012764:     	bl	0x100013164 <std::__1::__state<char>::__state(std::__1::__state<char> const&)>
100012768:     	ldur	x0, [x22, #-16]
10001276c:     	ldr	x8, [x0]
100012770:     	ldr	x8, [x8, #24]
100012774:     	mov	w1, #1
100012778:     	mov	x2, x23
10001277c:     	blr	x8
100012780:     	ldr	x0, [sp, #104]
100012784:     	ldr	x8, [x0]
100012788:     	ldr	x8, [x8, #24]
10001278c:     	add	x2, sp, #24
100012790:     	mov	w1, #0
100012794:     	blr	x8
100012798:     	ldp	x8, x9, [x29, #-104]
10001279c:     	cmp	x8, x9
1000127a0:     	b.hs	0x100012818 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x2e8>
1000127a4:     	ldur	q0, [sp, #24]
1000127a8:     	ldur	q1, [sp, #40]
1000127ac:     	stp	q0, q1, [x8]
1000127b0:     	stp	xzr, xzr, [x8, #40]
1000127b4:     	str	xzr, [x8, #32]
1000127b8:     	ldr	x9, [sp, #56]
1000127bc:     	str	x9, [x8, #32]
1000127c0:     	ldr	x9, [sp, #64]
1000127c4:     	str	x9, [x8, #40]
1000127c8:     	ldr	x9, [sp, #72]
1000127cc:     	stp	x9, xzr, [x8, #48]
1000127d0:     	stp	xzr, xzr, [x27]
1000127d4:     	str	xzr, [x27, #16]
1000127d8:     	stp	xzr, xzr, [x8, #64]
1000127dc:     	ldr	x9, [sp, #80]
1000127e0:     	str	x9, [x8, #56]
1000127e4:     	ldr	x9, [sp, #88]
1000127e8:     	str	x9, [x8, #64]
1000127ec:     	ldr	x9, [sp, #96]
1000127f0:     	str	x9, [x8, #72]
1000127f4:     	stp	xzr, xzr, [x28]
1000127f8:     	str	xzr, [x28, #16]
1000127fc:     	ldr	x9, [x26]
100012800:     	ldur	x10, [x26, #5]
100012804:     	stur	x10, [x8, #85]
100012808:     	str	x9, [x8, #80]
10001280c:     	add	x8, x8, #96
100012810:     	stur	x8, [x29, #-104]
100012814:     	b	0x100012834 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x304>
100012818:     	sub	x0, x29, #112
10001281c:     	add	x1, sp, #24
100012820:     	bl	0x100012c98 <void std::__1::vector<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__push_back_slow_path<std::__1::__state<char>>(std::__1::__state<char>&&)>
100012824:     	ldr	x0, [sp, #80]
100012828:     	cbz	x0, 0x100012834 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x304>
10001282c:     	str	x0, [sp, #88]
100012830:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100012834:     	ldr	x0, [sp, #56]
100012838:     	cbz	x0, 0x1000126b4 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x184>
10001283c:     	str	x0, [sp, #64]
100012840:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100012844:     	b	0x1000126b4 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x184>
100012848:     	mov	w19, #0
10001284c:     	cbz	x23, 0x1000128a4 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x374>
100012850:     	ldur	x20, [x29, #-104]
100012854:     	mov	x0, x23
100012858:     	cmp	x20, x23
10001285c:     	b.ne	0x100012870 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x340>
100012860:     	b	0x10001289c <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x36c>
100012864:     	mov	x20, x21
100012868:     	cmp	x21, x23
10001286c:     	b.eq	0x100012898 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x368>
100012870:     	ldur	x0, [x20, #-40]
100012874:     	cbz	x0, 0x100012880 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x350>
100012878:     	stur	x0, [x20, #-32]
10001287c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100012880:     	sub	x21, x20, #96
100012884:     	ldur	x0, [x20, #-64]
100012888:     	cbz	x0, 0x100012864 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x334>
10001288c:     	stur	x0, [x20, #-56]
100012890:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100012894:     	b	0x100012864 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x334>
100012898:     	ldur	x0, [x29, #-112]
10001289c:     	stur	x23, [x29, #-104]
1000128a0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000128a4:     	mov	x0, x19
1000128a8:     	ldp	x29, x30, [sp, #256]
1000128ac:     	ldp	x20, x19, [sp, #240]
1000128b0:     	ldp	x22, x21, [sp, #224]
1000128b4:     	ldp	x24, x23, [sp, #208]
1000128b8:     	ldp	x26, x25, [sp, #192]
1000128bc:     	ldp	x28, x27, [sp, #176]
1000128c0:     	add	sp, sp, #272
1000128c4:     	ret
1000128c8:     	ldr	x8, [sp, #8]
1000128cc:     	ldr	x8, [x8]
1000128d0:     	stp	x20, x9, [x8]
1000128d4:     	mov	w9, #1
1000128d8:     	strb	w9, [x8, #16]
1000128dc:     	ldp	x9, x10, [x22, #-64]
1000128e0:     	subs	x11, x10, x9
1000128e4:     	b.eq	0x10001292c <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x3fc>
1000128e8:     	mov	x10, #0
1000128ec:     	asr	x11, x11, #3
1000128f0:     	mov	x12, #-6148914691236517206
1000128f4:     	movk	x12, #43691
1000128f8:     	mul	x11, x11, x12
1000128fc:     	mov	w12, #24
100012900:     	madd	x13, x10, x12, x9
100012904:     	add	w10, w10, #1
100012908:     	umaddl	x14, w10, w12, x8
10001290c:     	ldr	x15, [x13]
100012910:     	str	x15, [x14]
100012914:     	ldr	x15, [x13, #8]
100012918:     	str	x15, [x14, #8]
10001291c:     	ldrb	w13, [x13, #16]
100012920:     	strb	w13, [x14, #16]
100012924:     	cmp	x11, x10
100012928:     	b.hi	0x100012900 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x3d0>
10001292c:     	ldur	x23, [x29, #-112]
100012930:     	ldr	x19, [sp]
100012934:     	cmp	x19, #0
100012938:     	cset	w19, ne
10001293c:     	cbnz	x23, 0x100012850 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x320>
100012940:     	b	0x1000128a4 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x374>
100012944:     	bl	0x100012b7c <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)12>()>
100012948:     	b	0x100012950 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x420>
10001294c:     	bl	0x100012bc8 <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)16>()>
100012950:     	brk	#0x1
100012954:     	b	0x100012978 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x448>
100012958:     	b	0x100012964 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x434>
10001295c:     	b	0x100012978 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x448>
100012960:     	b	0x100012978 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x448>
100012964:     	mov	x19, x0
100012968:     	add	x0, sp, #24
10001296c:     	bl	0x100012b3c <std::__1::__state<char>::~__state()>
100012970:     	b	0x10001297c <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x44c>
100012974:     	b	0x100012978 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x448>
100012978:     	mov	x19, x0
10001297c:     	sub	x0, x29, #112
100012980:     	bl	0x100012c14 <std::__1::vector<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::~vector[abi:ue170006]()>
100012984:     	mov	x0, x19
100012988:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010001298c <std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::assign(unsigned long, std::__1::sub_match<char const*> const&)>:
10001298c:     	stp	x22, x21, [sp, #-48]!
100012990:     	stp	x20, x19, [sp, #16]
100012994:     	stp	x29, x30, [sp, #32]
100012998:     	add	x29, sp, #32
10001299c:     	mov	x20, x2
1000129a0:     	mov	x21, x1
1000129a4:     	mov	x19, x0
1000129a8:     	ldr	x8, [x0, #16]
1000129ac:     	ldr	x0, [x0]
1000129b0:     	sub	x9, x8, x0
1000129b4:     	asr	x9, x9, #3
1000129b8:     	mov	x10, #-6148914691236517206
1000129bc:     	movk	x10, #43691
1000129c0:     	mul	x9, x9, x10
1000129c4:     	cmp	x9, x1
1000129c8:     	b.hs	0x100012a70 <std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::assign(unsigned long, std::__1::sub_match<char const*> const&)+0xe4>
1000129cc:     	cbz	x0, 0x1000129e4 <std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::assign(unsigned long, std::__1::sub_match<char const*> const&)+0x58>
1000129d0:     	str	x0, [x19, #8]
1000129d4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000129d8:     	mov	x8, #0
1000129dc:     	stp	xzr, xzr, [x19]
1000129e0:     	str	xzr, [x19, #16]
1000129e4:     	mov	x9, #-6148914691236517206
1000129e8:     	movk	x9, #2730, lsl #48
1000129ec:     	cmp	x21, x9
1000129f0:     	b.hi	0x100012b20 <std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::assign(unsigned long, std::__1::sub_match<char const*> const&)+0x194>
1000129f4:     	asr	x8, x8, #3
1000129f8:     	mov	x10, #-6148914691236517206
1000129fc:     	movk	x10, #43691
100012a00:     	mul	x8, x8, x10
100012a04:     	lsl	x10, x8, #1
100012a08:     	cmp	x10, x21
100012a0c:     	csel	x10, x10, x21, hi
100012a10:     	mov	x11, #6148914691236517205
100012a14:     	movk	x11, #1365, lsl #48
100012a18:     	cmp	x8, x11
100012a1c:     	csel	x8, x10, x9, lo
100012a20:     	cmp	x8, x9
100012a24:     	b.hi	0x100012b20 <std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::assign(unsigned long, std::__1::sub_match<char const*> const&)+0x194>
100012a28:     	add	x8, x8, x8, lsl #1
100012a2c:     	lsl	x22, x8, #3
100012a30:     	mov	x0, x22
100012a34:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100012a38:     	stp	x0, x0, [x19]
100012a3c:     	add	x8, x0, x22
100012a40:     	str	x8, [x19, #16]
100012a44:     	add	x8, x21, x21, lsl #1
100012a48:     	lsl	x9, x8, #3
100012a4c:     	add	x8, x0, x9
100012a50:     	ldr	q0, [x20]
100012a54:     	str	q0, [x0]
100012a58:     	ldr	x10, [x20, #16]
100012a5c:     	str	x10, [x0, #16]
100012a60:     	add	x0, x0, #24
100012a64:     	subs	x9, x9, #24
100012a68:     	b.ne	0x100012a50 <std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::assign(unsigned long, std::__1::sub_match<char const*> const&)+0xc4>
100012a6c:     	b	0x100012b0c <std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::assign(unsigned long, std::__1::sub_match<char const*> const&)+0x180>
100012a70:     	ldr	x8, [x19, #8]
100012a74:     	sub	x9, x8, x0
100012a78:     	mov	x10, #-6148914691236517206
100012a7c:     	movk	x10, #43691
100012a80:     	movk	x10, #10922, lsl #48
100012a84:     	smulh	x9, x9, x10
100012a88:     	asr	x10, x9, #2
100012a8c:     	add	x9, x10, x9, lsr #63
100012a90:     	cmp	x9, x21
100012a94:     	csel	x10, x9, x21, lo
100012a98:     	cbz	x10, 0x100012abc <std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::assign(unsigned long, std::__1::sub_match<char const*> const&)+0x130>
100012a9c:     	mov	x11, x0
100012aa0:     	ldp	x12, x13, [x20]
100012aa4:     	stp	x12, x13, [x11]
100012aa8:     	ldrb	w12, [x20, #16]
100012aac:     	strb	w12, [x11, #16]
100012ab0:     	add	x11, x11, #24
100012ab4:     	subs	x10, x10, #1
100012ab8:     	b.ne	0x100012aa0 <std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::assign(unsigned long, std::__1::sub_match<char const*> const&)+0x114>
100012abc:     	cmp	x9, x21
100012ac0:     	b.hs	0x100012b04 <std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::assign(unsigned long, std::__1::sub_match<char const*> const&)+0x178>
100012ac4:     	sub	x10, x21, x9
100012ac8:     	mov	w11, #24
100012acc:     	madd	x10, x10, x11, x8
100012ad0:     	mul	x12, x21, x11
100012ad4:     	msub	x9, x9, x11, x12
100012ad8:     	ldr	q0, [x20]
100012adc:     	ldr	x11, [x20, #16]
100012ae0:     	str	x11, [x8, #16]
100012ae4:     	str	q0, [x8], #24
100012ae8:     	subs	x9, x9, #24
100012aec:     	b.ne	0x100012ad8 <std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::assign(unsigned long, std::__1::sub_match<char const*> const&)+0x14c>
100012af0:     	str	x10, [x19, #8]
100012af4:     	ldp	x29, x30, [sp, #32]
100012af8:     	ldp	x20, x19, [sp, #16]
100012afc:     	ldp	x22, x21, [sp], #48
100012b00:     	ret
100012b04:     	mov	w8, #24
100012b08:     	madd	x8, x21, x8, x0
100012b0c:     	str	x8, [x19, #8]
100012b10:     	ldp	x29, x30, [sp, #32]
100012b14:     	ldp	x20, x19, [sp, #16]
100012b18:     	ldp	x22, x21, [sp], #48
100012b1c:     	ret
100012b20:     	mov	x0, x19
100012b24:     	bl	0x100012b28 <std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::__throw_length_error[abi:ue170006]() const>

0000000100012b28 <std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::__throw_length_error[abi:ue170006]() const>:
100012b28:     	stp	x29, x30, [sp, #-16]!
100012b2c:     	mov	x29, sp
100012b30:     	adrp	x0, 0x100031000 <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)12>()+0x30>
100012b34:     	add	x0, x0, #3485
100012b38:     	bl	0x100006a48 <std::__1::__throw_length_error[abi:ue170006](char const*)>

0000000100012b3c <std::__1::__state<char>::~__state()>:
100012b3c:     	stp	x20, x19, [sp, #-32]!
100012b40:     	stp	x29, x30, [sp, #16]
100012b44:     	add	x29, sp, #16
100012b48:     	mov	x19, x0
100012b4c:     	ldr	x0, [x0, #56]
100012b50:     	cbz	x0, 0x100012b5c <std::__1::__state<char>::~__state()+0x20>
100012b54:     	str	x0, [x19, #64]
100012b58:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100012b5c:     	ldr	x0, [x19, #32]
100012b60:     	cbz	x0, 0x100012b6c <std::__1::__state<char>::~__state()+0x30>
100012b64:     	str	x0, [x19, #40]
100012b68:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100012b6c:     	mov	x0, x19
100012b70:     	ldp	x29, x30, [sp, #16]
100012b74:     	ldp	x20, x19, [sp], #32
100012b78:     	ret

0000000100012b7c <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)12>()>:
100012b7c:     	stp	x20, x19, [sp, #-32]!
100012b80:     	stp	x29, x30, [sp, #16]
100012b84:     	add	x29, sp, #16
100012b88:     	mov	w0, #24
100012b8c:     	bl	0x10002f038 <_vsnprintf+0x10002f038>
100012b90:     	mov	x19, x0
100012b94:     	mov	w1, #12
100012b98:     	bl	0x10002ed20 <_vsnprintf+0x10002ed20>
100012b9c:     	adrp	x1, 0x100034000 <std::__1::vector<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::~vector[abi:ue170006]()+0x10>
100012ba0:     	ldr	x1, [x1, #656]
100012ba4:     	adrp	x2, 0x100034000 <std::__1::vector<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::~vector[abi:ue170006]()+0x18>
100012ba8:     	ldr	x2, [x2, #104]
100012bac:     	mov	x0, x19
100012bb0:     	bl	0x10002f0a4 <_vsnprintf+0x10002f0a4>
100012bb4:     	mov	x20, x0
100012bb8:     	mov	x0, x19
100012bbc:     	bl	0x10002f068 <_vsnprintf+0x10002f068>
100012bc0:     	mov	x0, x20
100012bc4:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100012bc8 <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)16>()>:
100012bc8:     	stp	x20, x19, [sp, #-32]!
100012bcc:     	stp	x29, x30, [sp, #16]
100012bd0:     	add	x29, sp, #16
100012bd4:     	mov	w0, #24
100012bd8:     	bl	0x10002f038 <_vsnprintf+0x10002f038>
100012bdc:     	mov	x19, x0
100012be0:     	mov	w1, #16
100012be4:     	bl	0x10002ed20 <_vsnprintf+0x10002ed20>
100012be8:     	adrp	x1, 0x100034000 <std::__1::vector<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::~vector[abi:ue170006]()+0x5c>
100012bec:     	ldr	x1, [x1, #656]
100012bf0:     	adrp	x2, 0x100034000 <std::__1::vector<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::~vector[abi:ue170006]()+0x64>
100012bf4:     	ldr	x2, [x2, #104]
100012bf8:     	mov	x0, x19
100012bfc:     	bl	0x10002f0a4 <_vsnprintf+0x10002f0a4>
100012c00:     	mov	x20, x0
100012c04:     	mov	x0, x19
100012c08:     	bl	0x10002f068 <_vsnprintf+0x10002f068>
100012c0c:     	mov	x0, x20
100012c10:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100012c14 <std::__1::vector<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::~vector[abi:ue170006]()>:
100012c14:     	stp	x22, x21, [sp, #-48]!
100012c18:     	stp	x20, x19, [sp, #16]
100012c1c:     	stp	x29, x30, [sp, #32]
100012c20:     	add	x29, sp, #32
100012c24:     	mov	x19, x0
100012c28:     	ldr	x20, [x0]
100012c2c:     	cbz	x20, 0x100012c84 <std::__1::vector<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::~vector[abi:ue170006]()+0x70>
100012c30:     	ldr	x21, [x19, #8]
100012c34:     	mov	x0, x20
100012c38:     	cmp	x21, x20
100012c3c:     	b.ne	0x100012c50 <std::__1::vector<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::~vector[abi:ue170006]()+0x3c>
100012c40:     	b	0x100012c7c <std::__1::vector<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::~vector[abi:ue170006]()+0x68>
100012c44:     	mov	x21, x22
100012c48:     	cmp	x22, x20
100012c4c:     	b.eq	0x100012c78 <std::__1::vector<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::~vector[abi:ue170006]()+0x64>
100012c50:     	ldur	x0, [x21, #-40]
100012c54:     	cbz	x0, 0x100012c60 <std::__1::vector<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::~vector[abi:ue170006]()+0x4c>
100012c58:     	stur	x0, [x21, #-32]
100012c5c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100012c60:     	sub	x22, x21, #96
100012c64:     	ldur	x0, [x21, #-64]
100012c68:     	cbz	x0, 0x100012c44 <std::__1::vector<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::~vector[abi:ue170006]()+0x30>
100012c6c:     	stur	x0, [x21, #-56]
100012c70:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100012c74:     	b	0x100012c44 <std::__1::vector<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::~vector[abi:ue170006]()+0x30>
100012c78:     	ldr	x0, [x19]
100012c7c:     	str	x20, [x19, #8]
100012c80:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100012c84:     	mov	x0, x19
100012c88:     	ldp	x29, x30, [sp, #32]
100012c8c:     	ldp	x20, x19, [sp, #16]
100012c90:     	ldp	x22, x21, [sp], #48
100012c94:     	ret

0000000100012c98 <void std::__1::vector<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__push_back_slow_path<std::__1::__state<char>>(std::__1::__state<char>&&)>:
100012c98:     	stp	x24, x23, [sp, #-64]!
100012c9c:     	stp	x22, x21, [sp, #16]
100012ca0:     	stp	x20, x19, [sp, #32]
100012ca4:     	stp	x29, x30, [sp, #48]
100012ca8:     	add	x29, sp, #48
100012cac:     	mov	x19, x0
100012cb0:     	mov	x8, #-6148914691236517206
100012cb4:     	movk	x8, #682, lsl #48
100012cb8:     	ldp	x9, x10, [x0]
100012cbc:     	sub	x21, x10, x9
100012cc0:     	asr	x10, x21, #5
100012cc4:     	mov	x11, #-6148914691236517206
100012cc8:     	movk	x11, #43691
100012ccc:     	mul	x22, x10, x11
100012cd0:     	add	x10, x22, #1
100012cd4:     	cmp	x10, x8
100012cd8:     	b.hi	0x100012e70 <void std::__1::vector<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__push_back_slow_path<std::__1::__state<char>>(std::__1::__state<char>&&)+0x1d8>
100012cdc:     	mov	x20, x1
100012ce0:     	ldr	x12, [x19, #16]
100012ce4:     	sub	x9, x12, x9
100012ce8:     	asr	x9, x9, #5
100012cec:     	mul	x9, x9, x11
100012cf0:     	lsl	x11, x9, #1
100012cf4:     	cmp	x11, x10
100012cf8:     	csel	x10, x11, x10, hi
100012cfc:     	mov	x11, #6148914691236517205
100012d00:     	movk	x11, #341, lsl #48
100012d04:     	cmp	x9, x11
100012d08:     	csel	x23, x10, x8, lo
100012d0c:     	cbz	x23, 0x100012d28 <void std::__1::vector<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__push_back_slow_path<std::__1::__state<char>>(std::__1::__state<char>&&)+0x90>
100012d10:     	cmp	x23, x8
100012d14:     	b.hi	0x100012e78 <void std::__1::vector<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__push_back_slow_path<std::__1::__state<char>>(std::__1::__state<char>&&)+0x1e0>
100012d18:     	add	x8, x23, x23, lsl #1
100012d1c:     	lsl	x0, x8, #5
100012d20:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100012d24:     	b	0x100012d2c <void std::__1::vector<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__push_back_slow_path<std::__1::__state<char>>(std::__1::__state<char>&&)+0x94>
100012d28:     	mov	x0, #0
100012d2c:     	mov	w8, #96
100012d30:     	ldp	q0, q1, [x20]
100012d34:     	madd	x11, x22, x8, x0
100012d38:     	stp	q0, q1, [x11]
100012d3c:     	madd	x8, x23, x8, x0
100012d40:     	add	x9, x0, x21
100012d44:     	ldp	q0, q1, [x20, #32]
100012d48:     	stp	q0, q1, [x9, #32]
100012d4c:     	stp	xzr, xzr, [x20, #32]
100012d50:     	ldp	x10, x12, [x20, #64]
100012d54:     	stp	x10, xzr, [x9, #64]
100012d58:     	stp	xzr, xzr, [x20, #64]
100012d5c:     	stp	xzr, xzr, [x20, #48]
100012d60:     	ldr	x10, [x20, #80]
100012d64:     	ldur	x13, [x20, #85]
100012d68:     	stur	x13, [x9, #85]
100012d6c:     	stp	x12, x10, [x9, #72]
100012d70:     	add	x9, x11, #96
100012d74:     	ldp	x10, x20, [x19]
100012d78:     	cmp	x20, x10
100012d7c:     	b.eq	0x100012e50 <void std::__1::vector<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__push_back_slow_path<std::__1::__state<char>>(std::__1::__state<char>&&)+0x1b8>
100012d80:     	ldp	q0, q1, [x20, #-96]
100012d84:     	stp	q0, q1, [x11, #-96]
100012d88:     	stp	xzr, xzr, [x11, #-56]
100012d8c:     	ldp	x12, x13, [x20, #-64]
100012d90:     	stp	x12, x13, [x11, #-64]
100012d94:     	ldur	x12, [x20, #-48]
100012d98:     	stur	x12, [x11, #-48]
100012d9c:     	stp	xzr, xzr, [x20, #-56]
100012da0:     	stur	xzr, [x20, #-64]
100012da4:     	stp	xzr, xzr, [x11, #-32]
100012da8:     	ldp	x12, x13, [x20, #-40]
100012dac:     	stp	x12, x13, [x11, #-40]
100012db0:     	ldur	x12, [x20, #-24]
100012db4:     	stur	x12, [x11, #-24]
100012db8:     	stp	xzr, xzr, [x20, #-32]
100012dbc:     	stur	xzr, [x20, #-40]
100012dc0:     	ldur	x12, [x20, #-16]
100012dc4:     	ldur	x13, [x20, #-11]
100012dc8:     	stur	x13, [x11, #-11]
100012dcc:     	stur	x12, [x11, #-16]
100012dd0:     	sub	x11, x11, #96
100012dd4:     	sub	x12, x20, #96
100012dd8:     	mov	x20, x12
100012ddc:     	cmp	x12, x10
100012de0:     	b.ne	0x100012d80 <void std::__1::vector<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__push_back_slow_path<std::__1::__state<char>>(std::__1::__state<char>&&)+0xe8>
100012de4:     	ldp	x21, x20, [x19]
100012de8:     	stp	x11, x9, [x19]
100012dec:     	str	x8, [x19, #16]
100012df0:     	cmp	x20, x21
100012df4:     	b.ne	0x100012e08 <void std::__1::vector<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__push_back_slow_path<std::__1::__state<char>>(std::__1::__state<char>&&)+0x170>
100012df8:     	b	0x100012e34 <void std::__1::vector<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__push_back_slow_path<std::__1::__state<char>>(std::__1::__state<char>&&)+0x19c>
100012dfc:     	mov	x20, x19
100012e00:     	cmp	x19, x21
100012e04:     	b.eq	0x100012e30 <void std::__1::vector<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__push_back_slow_path<std::__1::__state<char>>(std::__1::__state<char>&&)+0x198>
100012e08:     	ldur	x0, [x20, #-40]
100012e0c:     	cbz	x0, 0x100012e18 <void std::__1::vector<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__push_back_slow_path<std::__1::__state<char>>(std::__1::__state<char>&&)+0x180>
100012e10:     	stur	x0, [x20, #-32]
100012e14:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100012e18:     	sub	x19, x20, #96
100012e1c:     	ldur	x0, [x20, #-64]
100012e20:     	cbz	x0, 0x100012dfc <void std::__1::vector<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__push_back_slow_path<std::__1::__state<char>>(std::__1::__state<char>&&)+0x164>
100012e24:     	stur	x0, [x20, #-56]
100012e28:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100012e2c:     	b	0x100012dfc <void std::__1::vector<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__push_back_slow_path<std::__1::__state<char>>(std::__1::__state<char>&&)+0x164>
100012e30:     	mov	x20, x21
100012e34:     	cbz	x20, 0x100012e5c <void std::__1::vector<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__push_back_slow_path<std::__1::__state<char>>(std::__1::__state<char>&&)+0x1c4>
100012e38:     	mov	x0, x20
100012e3c:     	ldp	x29, x30, [sp, #48]
100012e40:     	ldp	x20, x19, [sp, #32]
100012e44:     	ldp	x22, x21, [sp, #16]
100012e48:     	ldp	x24, x23, [sp], #64
100012e4c:     	b	0x10002f014 <_vsnprintf+0x10002f014>
100012e50:     	stp	x11, x9, [x19]
100012e54:     	str	x8, [x19, #16]
100012e58:     	cbnz	x20, 0x100012e38 <void std::__1::vector<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__push_back_slow_path<std::__1::__state<char>>(std::__1::__state<char>&&)+0x1a0>
100012e5c:     	ldp	x29, x30, [sp, #48]
100012e60:     	ldp	x20, x19, [sp, #32]
100012e64:     	ldp	x22, x21, [sp, #16]
100012e68:     	ldp	x24, x23, [sp], #64
100012e6c:     	ret
100012e70:     	mov	x0, x19
100012e74:     	bl	0x100012e7c <std::__1::vector<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__throw_length_error[abi:ue170006]() const>
100012e78:     	bl	0x100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>

0000000100012e7c <std::__1::vector<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__throw_length_error[abi:ue170006]() const>:
100012e7c:     	stp	x29, x30, [sp, #-16]!
100012e80:     	mov	x29, sp
100012e84:     	adrp	x0, 0x100031000 <std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::__append(unsigned long, std::__1::sub_match<char const*> const&)+0x70>
100012e88:     	add	x0, x0, #3485
100012e8c:     	bl	0x100006a48 <std::__1::__throw_length_error[abi:ue170006](char const*)>

0000000100012e90 <std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::__append(unsigned long, std::__1::sub_match<char const*> const&)>:
100012e90:     	stp	x24, x23, [sp, #-64]!
100012e94:     	stp	x22, x21, [sp, #16]
100012e98:     	stp	x20, x19, [sp, #32]
100012e9c:     	stp	x29, x30, [sp, #48]
100012ea0:     	add	x29, sp, #48
100012ea4:     	mov	x21, x2
100012ea8:     	mov	x22, x1
100012eac:     	mov	x19, x0
100012eb0:     	ldp	x20, x9, [x0, #8]
100012eb4:     	sub	x8, x9, x20
100012eb8:     	asr	x8, x8, #3
100012ebc:     	mov	x10, #-6148914691236517206
100012ec0:     	movk	x10, #43691
100012ec4:     	mul	x8, x8, x10
100012ec8:     	cmp	x8, x1
100012ecc:     	b.hs	0x100012f40 <std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::__append(unsigned long, std::__1::sub_match<char const*> const&)+0xb0>
100012ed0:     	mov	x8, #-6148914691236517206
100012ed4:     	movk	x8, #2730, lsl #48
100012ed8:     	ldr	x11, [x19]
100012edc:     	sub	x12, x20, x11
100012ee0:     	asr	x12, x12, #3
100012ee4:     	mul	x23, x12, x10
100012ee8:     	add	x10, x23, x22
100012eec:     	cmp	x10, x8
100012ef0:     	b.hi	0x10001301c <std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::__append(unsigned long, std::__1::sub_match<char const*> const&)+0x18c>
100012ef4:     	sub	x9, x9, x11
100012ef8:     	asr	x9, x9, #3
100012efc:     	mov	x11, #-6148914691236517206
100012f00:     	movk	x11, #43691
100012f04:     	mul	x9, x9, x11
100012f08:     	lsl	x11, x9, #1
100012f0c:     	cmp	x11, x10
100012f10:     	csel	x10, x11, x10, hi
100012f14:     	mov	x11, #6148914691236517205
100012f18:     	movk	x11, #1365, lsl #48
100012f1c:     	cmp	x9, x11
100012f20:     	csel	x24, x10, x8, lo
100012f24:     	cbz	x24, 0x100012f78 <std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::__append(unsigned long, std::__1::sub_match<char const*> const&)+0xe8>
100012f28:     	cmp	x24, x8
100012f2c:     	b.hi	0x100013024 <std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::__append(unsigned long, std::__1::sub_match<char const*> const&)+0x194>
100012f30:     	add	x8, x24, x24, lsl #1
100012f34:     	lsl	x0, x8, #3
100012f38:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100012f3c:     	b	0x100012f7c <std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::__append(unsigned long, std::__1::sub_match<char const*> const&)+0xec>
100012f40:     	cbz	x22, 0x100012f70 <std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::__append(unsigned long, std::__1::sub_match<char const*> const&)+0xe0>
100012f44:     	mov	w8, #24
100012f48:     	madd	x8, x22, x8, x20
100012f4c:     	add	x9, x22, x22, lsl #1
100012f50:     	lsl	x9, x9, #3
100012f54:     	ldr	q0, [x21]
100012f58:     	ldr	x10, [x21, #16]
100012f5c:     	str	x10, [x20, #16]
100012f60:     	str	q0, [x20], #24
100012f64:     	subs	x9, x9, #24
100012f68:     	b.ne	0x100012f54 <std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::__append(unsigned long, std::__1::sub_match<char const*> const&)+0xc4>
100012f6c:     	mov	x20, x8
100012f70:     	str	x20, [x19, #8]
100012f74:     	b	0x100013008 <std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::__append(unsigned long, std::__1::sub_match<char const*> const&)+0x178>
100012f78:     	mov	x0, #0
100012f7c:     	mov	w8, #24
100012f80:     	madd	x10, x23, x8, x0
100012f84:     	madd	x8, x24, x8, x0
100012f88:     	add	x9, x22, x22, lsl #1
100012f8c:     	lsl	x11, x9, #3
100012f90:     	add	x9, x10, x11
100012f94:     	mov	x12, x10
100012f98:     	ldr	q0, [x21]
100012f9c:     	ldr	x13, [x21, #16]
100012fa0:     	str	x13, [x12, #16]
100012fa4:     	str	q0, [x12], #24
100012fa8:     	subs	x11, x11, #24
100012fac:     	b.ne	0x100012f98 <std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::__append(unsigned long, std::__1::sub_match<char const*> const&)+0x108>
100012fb0:     	ldr	x11, [x19]
100012fb4:     	cmp	x20, x11
100012fb8:     	b.eq	0x100012fe4 <std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::__append(unsigned long, std::__1::sub_match<char const*> const&)+0x154>
100012fbc:     	ldur	q0, [x20, #-24]
100012fc0:     	ldur	x12, [x20, #-8]
100012fc4:     	stur	x12, [x10, #-8]
100012fc8:     	stur	q0, [x10, #-24]
100012fcc:     	sub	x10, x10, #24
100012fd0:     	sub	x12, x20, #24
100012fd4:     	mov	x20, x12
100012fd8:     	cmp	x12, x11
100012fdc:     	b.ne	0x100012fbc <std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::__append(unsigned long, std::__1::sub_match<char const*> const&)+0x12c>
100012fe0:     	ldr	x20, [x19]
100012fe4:     	stp	x10, x9, [x19]
100012fe8:     	str	x8, [x19, #16]
100012fec:     	cbz	x20, 0x100013008 <std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::__append(unsigned long, std::__1::sub_match<char const*> const&)+0x178>
100012ff0:     	mov	x0, x20
100012ff4:     	ldp	x29, x30, [sp, #48]
100012ff8:     	ldp	x20, x19, [sp, #32]
100012ffc:     	ldp	x22, x21, [sp, #16]
100013000:     	ldp	x24, x23, [sp], #64
100013004:     	b	0x10002f014 <_vsnprintf+0x10002f014>
100013008:     	ldp	x29, x30, [sp, #48]
10001300c:     	ldp	x20, x19, [sp, #32]
100013010:     	ldp	x22, x21, [sp, #16]
100013014:     	ldp	x24, x23, [sp], #64
100013018:     	ret
10001301c:     	mov	x0, x19
100013020:     	bl	0x100012b28 <std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::__throw_length_error[abi:ue170006]() const>
100013024:     	bl	0x100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>

0000000100013028 <std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__append(unsigned long)>:
100013028:     	stp	x24, x23, [sp, #-64]!
10001302c:     	stp	x22, x21, [sp, #16]
100013030:     	stp	x20, x19, [sp, #32]
100013034:     	stp	x29, x30, [sp, #48]
100013038:     	add	x29, sp, #48
10001303c:     	mov	x21, x1
100013040:     	mov	x19, x0
100013044:     	ldp	x20, x8, [x0, #8]
100013048:     	sub	x9, x8, x20
10001304c:     	cmp	x1, x9, asr #4
100013050:     	b.ls	0x1000130a4 <std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__append(unsigned long)+0x7c>
100013054:     	ldr	x23, [x19]
100013058:     	sub	x9, x20, x23
10001305c:     	asr	x22, x9, #4
100013060:     	add	x9, x22, x21
100013064:     	lsr	x10, x9, #60
100013068:     	cbnz	x10, 0x100013144 <std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__append(unsigned long)+0x11c>
10001306c:     	mov	x10, #9223372036854775792
100013070:     	sub	x8, x8, x23
100013074:     	asr	x11, x8, #3
100013078:     	cmp	x11, x9
10001307c:     	csel	x9, x11, x9, hi
100013080:     	cmp	x8, x10
100013084:     	mov	x8, #1152921504606846975
100013088:     	csel	x24, x9, x8, lo
10001308c:     	cbz	x24, 0x1000130c4 <std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__append(unsigned long)+0x9c>
100013090:     	lsr	x8, x24, #60
100013094:     	cbnz	x8, 0x10001314c <std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__append(unsigned long)+0x124>
100013098:     	lsl	x0, x24, #4
10001309c:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
1000130a0:     	b	0x1000130c8 <std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__append(unsigned long)+0xa0>
1000130a4:     	cbz	x21, 0x1000130bc <std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__append(unsigned long)+0x94>
1000130a8:     	lsl	x21, x21, #4
1000130ac:     	mov	x0, x20
1000130b0:     	mov	x1, x21
1000130b4:     	bl	0x10002f0f8 <_vsnprintf+0x10002f0f8>
1000130b8:     	add	x20, x20, x21
1000130bc:     	str	x20, [x19, #8]
1000130c0:     	b	0x100013130 <std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__append(unsigned long)+0x108>
1000130c4:     	mov	x0, #0
1000130c8:     	add	x22, x0, x22, lsl #4
1000130cc:     	lsl	x21, x21, #4
1000130d0:     	add	x24, x0, x24, lsl #4
1000130d4:     	mov	x0, x22
1000130d8:     	mov	x1, x21
1000130dc:     	bl	0x10002f0f8 <_vsnprintf+0x10002f0f8>
1000130e0:     	add	x8, x22, x21
1000130e4:     	cmp	x20, x23
1000130e8:     	b.eq	0x10001310c <std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__append(unsigned long)+0xe4>
1000130ec:     	ldur	q0, [x20, #-16]
1000130f0:     	stur	q0, [x22, #-16]
1000130f4:     	sub	x22, x22, #16
1000130f8:     	sub	x9, x20, #16
1000130fc:     	mov	x20, x9
100013100:     	cmp	x9, x23
100013104:     	b.ne	0x1000130ec <std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__append(unsigned long)+0xc4>
100013108:     	ldr	x20, [x19]
10001310c:     	stp	x22, x8, [x19]
100013110:     	str	x24, [x19, #16]
100013114:     	cbz	x20, 0x100013130 <std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__append(unsigned long)+0x108>
100013118:     	mov	x0, x20
10001311c:     	ldp	x29, x30, [sp, #48]
100013120:     	ldp	x20, x19, [sp, #32]
100013124:     	ldp	x22, x21, [sp, #16]
100013128:     	ldp	x24, x23, [sp], #64
10001312c:     	b	0x10002f014 <_vsnprintf+0x10002f014>
100013130:     	ldp	x29, x30, [sp, #48]
100013134:     	ldp	x20, x19, [sp, #32]
100013138:     	ldp	x22, x21, [sp, #16]
10001313c:     	ldp	x24, x23, [sp], #64
100013140:     	ret
100013144:     	mov	x0, x19
100013148:     	bl	0x100013150 <std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__throw_length_error[abi:ue170006]() const>
10001314c:     	bl	0x100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>

0000000100013150 <std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__throw_length_error[abi:ue170006]() const>:
100013150:     	stp	x29, x30, [sp, #-16]!
100013154:     	mov	x29, sp
100013158:     	adrp	x0, 0x100031000 <std::__1::__state<char>::__state(std::__1::__state<char> const&)+0x6c>
10001315c:     	add	x0, x0, #3485
100013160:     	bl	0x100006a48 <std::__1::__throw_length_error[abi:ue170006](char const*)>

0000000100013164 <std::__1::__state<char>::__state(std::__1::__state<char> const&)>:
100013164:     	stp	x26, x25, [sp, #-80]!
100013168:     	stp	x24, x23, [sp, #16]
10001316c:     	stp	x22, x21, [sp, #32]
100013170:     	stp	x20, x19, [sp, #48]
100013174:     	stp	x29, x30, [sp, #64]
100013178:     	add	x29, sp, #64
10001317c:     	mov	x21, x1
100013180:     	mov	x19, x0
100013184:     	ldp	q0, q1, [x1]
100013188:     	mov	x20, x0
10001318c:     	str	xzr, [x20, #32]!
100013190:     	stp	q0, q1, [x0]
100013194:     	stp	xzr, xzr, [x0, #40]
100013198:     	ldp	x22, x8, [x1, #32]
10001319c:     	subs	x23, x8, x22
1000131a0:     	b.eq	0x100013214 <std::__1::__state<char>::__state(std::__1::__state<char> const&)+0xb0>
1000131a4:     	asr	x8, x23, #3
1000131a8:     	mov	x9, #-6148914691236517206
1000131ac:     	movk	x9, #43691
1000131b0:     	mul	x25, x8, x9
1000131b4:     	mov	x8, #-6148914691236517206
1000131b8:     	movk	x8, #43691
1000131bc:     	movk	x8, #2730, lsl #48
1000131c0:     	cmp	x25, x8
1000131c4:     	b.hs	0x100013298 <std::__1::__state<char>::__state(std::__1::__state<char> const&)+0x134>
1000131c8:     	mov	x0, x23
1000131cc:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
1000131d0:     	mov	x24, x0
1000131d4:     	stp	x0, x0, [x19, #32]
1000131d8:     	mov	w8, #24
1000131dc:     	madd	x9, x25, x8, x0
1000131e0:     	str	x9, [x19, #48]
1000131e4:     	sub	x9, x23, #24
1000131e8:     	mov	x10, #-6148914691236517206
1000131ec:     	movk	x10, #43691
1000131f0:     	umulh	x9, x9, x10
1000131f4:     	lsr	x9, x9, #4
1000131f8:     	mov	x10, #24
1000131fc:     	madd	x23, x9, x8, x10
100013200:     	mov	x1, x22
100013204:     	mov	x2, x23
100013208:     	bl	0x10002f1c4 <_vsnprintf+0x10002f1c4>
10001320c:     	add	x8, x24, x23
100013210:     	str	x8, [x19, #40]
100013214:     	mov	x22, x19
100013218:     	str	xzr, [x22, #56]!
10001321c:     	stp	xzr, xzr, [x22, #8]
100013220:     	ldp	x23, x8, [x21, #56]
100013224:     	subs	x24, x8, x23
100013228:     	b.eq	0x10001326c <std::__1::__state<char>::__state(std::__1::__state<char> const&)+0x108>
10001322c:     	tbnz	x24, #63, 0x1000132a4 <std::__1::__state<char>::__state(std::__1::__state<char> const&)+0x140>
100013230:     	mov	x0, x24
100013234:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100013238:     	mov	x25, x0
10001323c:     	asr	x8, x24, #4
100013240:     	stp	x0, x0, [x19, #56]
100013244:     	add	x8, x0, x8, lsl #4
100013248:     	str	x8, [x19, #72]
10001324c:     	sub	x8, x24, #16
100013250:     	and	x8, x8, #0xfffffffffffffff0
100013254:     	add	x20, x8, #16
100013258:     	mov	x1, x23
10001325c:     	mov	x2, x20
100013260:     	bl	0x10002f1c4 <_vsnprintf+0x10002f1c4>
100013264:     	add	x8, x25, x20
100013268:     	str	x8, [x19, #64]
10001326c:     	ldr	x8, [x21, #80]
100013270:     	ldur	x9, [x21, #85]
100013274:     	stur	x9, [x19, #85]
100013278:     	str	x8, [x19, #80]
10001327c:     	mov	x0, x19
100013280:     	ldp	x29, x30, [sp, #64]
100013284:     	ldp	x20, x19, [sp, #48]
100013288:     	ldp	x22, x21, [sp, #32]
10001328c:     	ldp	x24, x23, [sp, #16]
100013290:     	ldp	x26, x25, [sp], #80
100013294:     	ret
100013298:     	mov	x0, x20
10001329c:     	bl	0x100012b28 <std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::__throw_length_error[abi:ue170006]() const>
1000132a0:     	b	0x1000132ac <std::__1::__state<char>::__state(std::__1::__state<char> const&)+0x148>
1000132a4:     	mov	x0, x22
1000132a8:     	bl	0x100013150 <std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__throw_length_error[abi:ue170006]() const>
1000132ac:     	brk	#0x1
1000132b0:     	mov	x21, x0
1000132b4:     	ldr	x0, [x22]
1000132b8:     	cbz	x0, 0x1000132cc <std::__1::__state<char>::__state(std::__1::__state<char> const&)+0x168>
1000132bc:     	str	x0, [x19, #64]
1000132c0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000132c4:     	b	0x1000132cc <std::__1::__state<char>::__state(std::__1::__state<char> const&)+0x168>
1000132c8:     	mov	x21, x0
1000132cc:     	ldr	x0, [x20]
1000132d0:     	cbz	x0, 0x1000132dc <std::__1::__state<char>::__state(std::__1::__state<char> const&)+0x178>
1000132d4:     	str	x0, [x19, #40]
1000132d8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000132dc:     	mov	x0, x21
1000132e0:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

00000001000132e4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_atom_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>:
1000132e4:     	stp	x24, x23, [sp, #-64]!
1000132e8:     	stp	x22, x21, [sp, #16]
1000132ec:     	stp	x20, x19, [sp, #32]
1000132f0:     	stp	x29, x30, [sp, #48]
1000132f4:     	add	x29, sp, #48
1000132f8:     	mov	x19, x1
1000132fc:     	cmp	x1, x2
100013300:     	b.eq	0x100013358 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_atom_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x74>
100013304:     	ldrb	w8, [x19]
100013308:     	mov	x23, x19
10001330c:     	cmp	w8, #92
100013310:     	b.ne	0x100013340 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_atom_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x5c>
100013314:     	mov	x20, x2
100013318:     	add	x22, x19, #1
10001331c:     	cmp	x22, x2
100013320:     	b.eq	0x100013444 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_atom_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x160>
100013324:     	mov	x21, x0
100013328:     	ldrb	w8, [x22]
10001332c:     	subs	w1, w8, #48
100013330:     	b.ne	0x100013374 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_atom_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x90>
100013334:     	mov	x0, x21
100013338:     	bl	0x100013cd4 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_char(char)>
10001333c:     	add	x23, x19, #2
100013340:     	mov	x0, x23
100013344:     	ldp	x29, x30, [sp, #48]
100013348:     	ldp	x20, x19, [sp, #32]
10001334c:     	ldp	x22, x21, [sp, #16]
100013350:     	ldp	x24, x23, [sp], #64
100013354:     	ret
100013358:     	mov	x23, x19
10001335c:     	mov	x0, x23
100013360:     	ldp	x29, x30, [sp, #48]
100013364:     	ldp	x20, x19, [sp, #32]
100013368:     	ldp	x22, x21, [sp, #16]
10001336c:     	ldp	x24, x23, [sp], #64
100013370:     	ret
100013374:     	sub	w8, w8, #49
100013378:     	cmp	w8, #8
10001337c:     	b.hi	0x1000133f0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_atom_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x10c>
100013380:     	add	x23, x19, #2
100013384:     	cmp	x23, x20
100013388:     	b.eq	0x1000133d0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_atom_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xec>
10001338c:     	mov	w8, #39321
100013390:     	movk	w8, #6553, lsl #16
100013394:     	mov	w9, #10
100013398:     	ldrb	w10, [x23]
10001339c:     	sub	w11, w10, #48
1000133a0:     	cmp	w11, #9
1000133a4:     	b.hi	0x1000133c8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_atom_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xe4>
1000133a8:     	cmp	w1, w8
1000133ac:     	b.hs	0x100013440 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_atom_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x15c>
1000133b0:     	add	x23, x23, #1
1000133b4:     	madd	w10, w1, w9, w10
1000133b8:     	sub	w1, w10, #48
1000133bc:     	cmp	x23, x20
1000133c0:     	b.ne	0x100013398 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_atom_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xb4>
1000133c4:     	mov	x23, x20
1000133c8:     	cbnz	w1, 0x1000133d4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_atom_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xf0>
1000133cc:     	b	0x100013440 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_atom_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x15c>
1000133d0:     	mov	x23, x20
1000133d4:     	ldr	w8, [x21, #28]
1000133d8:     	cmp	w1, w8
1000133dc:     	b.hi	0x100013440 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_atom_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x15c>
1000133e0:     	mov	x0, x21
1000133e4:     	bl	0x100013e54 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_back_ref(int)>
1000133e8:     	cmp	x23, x22
1000133ec:     	b.ne	0x100013340 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_atom_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x5c>
1000133f0:     	mov	x0, x21
1000133f4:     	mov	x1, x22
1000133f8:     	mov	x2, x20
1000133fc:     	bl	0x100013720 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_class_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>
100013400:     	mov	x23, x0
100013404:     	cmp	x22, x0
100013408:     	b.ne	0x100013340 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_atom_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x5c>
10001340c:     	mov	x0, x21
100013410:     	mov	x1, x22
100013414:     	mov	x2, x20
100013418:     	mov	x3, #0
10001341c:     	bl	0x100013918 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)>
100013420:     	cmp	x22, x0
100013424:     	csel	x23, x19, x0, eq
100013428:     	mov	x0, x23
10001342c:     	ldp	x29, x30, [sp, #48]
100013430:     	ldp	x20, x19, [sp, #32]
100013434:     	ldp	x22, x21, [sp, #16]
100013438:     	ldp	x24, x23, [sp], #64
10001343c:     	ret
100013440:     	bl	0x100013e08 <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)4>()>
100013444:     	bl	0x1000136d4 <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)3>()>

0000000100013448 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_bracket_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>:
100013448:     	stp	x24, x23, [sp, #-64]!
10001344c:     	stp	x22, x21, [sp, #16]
100013450:     	stp	x20, x19, [sp, #32]
100013454:     	stp	x29, x30, [sp, #48]
100013458:     	add	x29, sp, #48
10001345c:     	cmp	x1, x2
100013460:     	b.eq	0x100013568 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_bracket_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x120>
100013464:     	ldrb	w8, [x1]
100013468:     	cmp	w8, #91
10001346c:     	b.ne	0x100013568 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_bracket_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x120>
100013470:     	mov	x19, x2
100013474:     	add	x8, x1, #1
100013478:     	cmp	x8, x2
10001347c:     	b.eq	0x100013580 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_bracket_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x138>
100013480:     	mov	x20, x0
100013484:     	ldrb	w9, [x1, #1]
100013488:     	cmp	w9, #94
10001348c:     	cset	w23, eq
100013490:     	add	x9, x1, #2
100013494:     	csel	x22, x9, x8, eq
100013498:     	mov	w0, #176
10001349c:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
1000134a0:     	mov	x21, x0
1000134a4:     	ldr	x8, [x20, #56]
1000134a8:     	ldr	x2, [x8, #8]
1000134ac:     	ldr	w8, [x20, #24]
1000134b0:     	and	w4, w8, #0x1
1000134b4:     	ubfx	w5, w8, #3, #1
1000134b8:     	mov	x1, x20
1000134bc:     	mov	x3, x23
1000134c0:     	bl	0x100014aa4 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__bracket_expression[abi:ue170006](std::__1::regex_traits<char> const&, std::__1::__node<char>*, bool, bool, bool)>
1000134c4:     	ldr	x8, [x20, #56]
1000134c8:     	str	x21, [x8, #8]
1000134cc:     	str	x21, [x20, #56]
1000134d0:     	cmp	x22, x19
1000134d4:     	b.eq	0x100013580 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_bracket_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x138>
1000134d8:     	ldrh	w8, [x20, #24]
1000134dc:     	tst	w8, #0x1f0
1000134e0:     	b.eq	0x100013500 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_bracket_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xb8>
1000134e4:     	ldrb	w8, [x22]
1000134e8:     	cmp	w8, #93
1000134ec:     	b.ne	0x100013500 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_bracket_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xb8>
1000134f0:     	mov	x0, x21
1000134f4:     	mov	w1, #93
1000134f8:     	bl	0x100014608 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)>
1000134fc:     	add	x22, x22, #1
100013500:     	cmp	x22, x19
100013504:     	b.eq	0x100013580 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_bracket_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x138>
100013508:     	mov	x23, x22
10001350c:     	mov	x0, x20
100013510:     	mov	x1, x22
100013514:     	mov	x2, x19
100013518:     	mov	x3, x21
10001351c:     	bl	0x100015e08 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)>
100013520:     	mov	x22, x0
100013524:     	cmp	x23, x0
100013528:     	b.ne	0x100013508 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_bracket_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xc0>
10001352c:     	cmp	x23, x19
100013530:     	b.eq	0x100013580 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_bracket_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x138>
100013534:     	ldrb	w8, [x23]
100013538:     	cmp	w8, #45
10001353c:     	b.ne	0x100013550 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_bracket_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x108>
100013540:     	mov	x0, x21
100013544:     	mov	w1, #45
100013548:     	bl	0x100014608 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)>
10001354c:     	add	x23, x23, #1
100013550:     	cmp	x23, x19
100013554:     	b.eq	0x100013580 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_bracket_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x138>
100013558:     	ldrb	w8, [x23]
10001355c:     	cmp	w8, #93
100013560:     	b.ne	0x100013580 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_bracket_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x138>
100013564:     	add	x1, x23, #1
100013568:     	mov	x0, x1
10001356c:     	ldp	x29, x30, [sp, #48]
100013570:     	ldp	x20, x19, [sp, #32]
100013574:     	ldp	x22, x21, [sp, #16]
100013578:     	ldp	x24, x23, [sp], #64
10001357c:     	ret
100013580:     	bl	0x100015dbc <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)5>()>
100013584:     	mov	x19, x0
100013588:     	mov	x0, x21
10001358c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100013590:     	mov	x0, x19
100013594:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100013598 <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)11>()>:
100013598:     	stp	x20, x19, [sp, #-32]!
10001359c:     	stp	x29, x30, [sp, #16]
1000135a0:     	add	x29, sp, #16
1000135a4:     	mov	w0, #24
1000135a8:     	bl	0x10002f038 <_vsnprintf+0x10002f038>
1000135ac:     	mov	x19, x0
1000135b0:     	mov	w1, #11
1000135b4:     	bl	0x10002ed20 <_vsnprintf+0x10002ed20>
1000135b8:     	adrp	x1, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_pattern_character<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x58>
1000135bc:     	ldr	x1, [x1, #656]
1000135c0:     	adrp	x2, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_pattern_character<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x60>
1000135c4:     	ldr	x2, [x2, #104]
1000135c8:     	mov	x0, x19
1000135cc:     	bl	0x10002f0a4 <_vsnprintf+0x10002f0a4>
1000135d0:     	mov	x20, x0
1000135d4:     	mov	x0, x19
1000135d8:     	bl	0x10002f068 <_vsnprintf+0x10002f068>
1000135dc:     	mov	x0, x20
1000135e0:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

00000001000135e4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_pattern_character<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>:
1000135e4:     	stp	x20, x19, [sp, #-32]!
1000135e8:     	stp	x29, x30, [sp, #16]
1000135ec:     	add	x29, sp, #16
1000135f0:     	mov	x19, x1
1000135f4:     	cmp	x1, x2
1000135f8:     	b.eq	0x100013624 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_pattern_character<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x40>
1000135fc:     	ldrsb	w8, [x19]
100013600:     	sub	w9, w8, #36
100013604:     	cmp	w9, #89
100013608:     	b.hi	0x100013634 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_pattern_character<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x50>
10001360c:     	adrp	x10, 0x100032000 <std::__1::__match_any_but_newline<char>::~__match_any_but_newline()+0x34>
100013610:     	add	x10, x10, #2917
100013614:     	adr	x11, #16
100013618:     	ldrb	w12, [x10, x9]
10001361c:     	add	x11, x11, x12, lsl #2
100013620:     	br	x11
100013624:     	mov	x0, x19
100013628:     	ldp	x29, x30, [sp, #16]
10001362c:     	ldp	x20, x19, [sp], #32
100013630:     	ret
100013634:     	and	w8, w8, #0xff
100013638:     	sxtb	w1, w8
10001363c:     	bl	0x100013cd4 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_char(char)>
100013640:     	add	x19, x19, #1
100013644:     	mov	x0, x19
100013648:     	ldp	x29, x30, [sp, #16]
10001364c:     	ldp	x20, x19, [sp], #32
100013650:     	ret

0000000100013654 <std::__1::__match_any_but_newline<char>::~__match_any_but_newline()>:
100013654:     	stp	x20, x19, [sp, #-32]!
100013658:     	stp	x29, x30, [sp, #16]
10001365c:     	add	x29, sp, #16
100013660:     	mov	x19, x0
100013664:     	adrp	x8, 0x100034000 <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)3>()+0x14>
100013668:     	add	x8, x8, #1696
10001366c:     	str	x8, [x0]
100013670:     	ldr	x0, [x0, #8]
100013674:     	cbz	x0, 0x100013684 <std::__1::__match_any_but_newline<char>::~__match_any_but_newline()+0x30>
100013678:     	ldr	x8, [x0]
10001367c:     	ldr	x8, [x8, #8]
100013680:     	blr	x8
100013684:     	mov	x0, x19
100013688:     	ldp	x29, x30, [sp, #16]
10001368c:     	ldp	x20, x19, [sp], #32
100013690:     	ret

0000000100013694 <std::__1::__match_any_but_newline<char>::~__match_any_but_newline()>:
100013694:     	stp	x20, x19, [sp, #-32]!
100013698:     	stp	x29, x30, [sp, #16]
10001369c:     	add	x29, sp, #16
1000136a0:     	mov	x19, x0
1000136a4:     	adrp	x8, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_class_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x8>
1000136a8:     	add	x8, x8, #1696
1000136ac:     	str	x8, [x0]
1000136b0:     	ldr	x0, [x0, #8]
1000136b4:     	cbz	x0, 0x1000136c4 <std::__1::__match_any_but_newline<char>::~__match_any_but_newline()+0x30>
1000136b8:     	ldr	x8, [x0]
1000136bc:     	ldr	x8, [x8, #8]
1000136c0:     	blr	x8
1000136c4:     	mov	x0, x19
1000136c8:     	ldp	x29, x30, [sp, #16]
1000136cc:     	ldp	x20, x19, [sp], #32
1000136d0:     	b	0x10002f014 <_vsnprintf+0x10002f014>

00000001000136d4 <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)3>()>:
1000136d4:     	stp	x20, x19, [sp, #-32]!
1000136d8:     	stp	x29, x30, [sp, #16]
1000136dc:     	add	x29, sp, #16
1000136e0:     	mov	w0, #24
1000136e4:     	bl	0x10002f038 <_vsnprintf+0x10002f038>
1000136e8:     	mov	x19, x0
1000136ec:     	mov	w1, #3
1000136f0:     	bl	0x10002ed20 <_vsnprintf+0x10002ed20>
1000136f4:     	adrp	x1, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_class_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x58>
1000136f8:     	ldr	x1, [x1, #656]
1000136fc:     	adrp	x2, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_class_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x60>
100013700:     	ldr	x2, [x2, #104]
100013704:     	mov	x0, x19
100013708:     	bl	0x10002f0a4 <_vsnprintf+0x10002f0a4>
10001370c:     	mov	x20, x0
100013710:     	mov	x0, x19
100013714:     	bl	0x10002f068 <_vsnprintf+0x10002f068>
100013718:     	mov	x0, x20
10001371c:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100013720 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_class_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>:
100013720:     	stp	x22, x21, [sp, #-48]!
100013724:     	stp	x20, x19, [sp, #16]
100013728:     	stp	x29, x30, [sp, #32]
10001372c:     	add	x29, sp, #32
100013730:     	mov	x19, x1
100013734:     	cmp	x1, x2
100013738:     	b.eq	0x1000138dc <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_class_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x1bc>
10001373c:     	ldrsb	w8, [x19]
100013740:     	sub	w8, w8, #68
100013744:     	cmp	w8, #51
100013748:     	b.hi	0x1000138dc <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_class_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x1bc>
10001374c:     	mov	x21, x0
100013750:     	adrp	x9, 0x100032000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_class_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xac>
100013754:     	add	x9, x9, #3007
100013758:     	adr	x10, #16
10001375c:     	ldrb	w11, [x9, x8]
100013760:     	add	x10, x10, x11, lsl #2
100013764:     	br	x10
100013768:     	mov	w0, #176
10001376c:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100013770:     	mov	x20, x0
100013774:     	ldr	x8, [x21, #56]
100013778:     	ldr	x2, [x8, #8]
10001377c:     	ldr	w8, [x21, #24]
100013780:     	and	w4, w8, #0x1
100013784:     	ubfx	w5, w8, #3, #1
100013788:     	mov	x1, x21
10001378c:     	mov	w3, #1
100013790:     	bl	0x100014aa4 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__bracket_expression[abi:ue170006](std::__1::regex_traits<char> const&, std::__1::__node<char>*, bool, bool, bool)>
100013794:     	b	0x100013824 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_class_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x104>
100013798:     	mov	w0, #176
10001379c:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
1000137a0:     	mov	x20, x0
1000137a4:     	ldr	x8, [x21, #56]
1000137a8:     	ldr	x2, [x8, #8]
1000137ac:     	ldr	w8, [x21, #24]
1000137b0:     	and	w4, w8, #0x1
1000137b4:     	ubfx	w5, w8, #3, #1
1000137b8:     	mov	x1, x21
1000137bc:     	mov	w3, #1
1000137c0:     	bl	0x100014aa4 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__bracket_expression[abi:ue170006](std::__1::regex_traits<char> const&, std::__1::__node<char>*, bool, bool, bool)>
1000137c4:     	b	0x1000138c0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_class_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x1a0>
1000137c8:     	mov	w0, #176
1000137cc:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
1000137d0:     	mov	x20, x0
1000137d4:     	ldr	x8, [x21, #56]
1000137d8:     	ldr	x2, [x8, #8]
1000137dc:     	ldr	w8, [x21, #24]
1000137e0:     	and	w4, w8, #0x1
1000137e4:     	ubfx	w5, w8, #3, #1
1000137e8:     	mov	x1, x21
1000137ec:     	mov	w3, #1
1000137f0:     	bl	0x100014aa4 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__bracket_expression[abi:ue170006](std::__1::regex_traits<char> const&, std::__1::__node<char>*, bool, bool, bool)>
1000137f4:     	b	0x100013868 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_class_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x148>
1000137f8:     	mov	w0, #176
1000137fc:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100013800:     	mov	x20, x0
100013804:     	ldr	x8, [x21, #56]
100013808:     	ldr	x2, [x8, #8]
10001380c:     	ldr	w8, [x21, #24]
100013810:     	and	w4, w8, #0x1
100013814:     	ubfx	w5, w8, #3, #1
100013818:     	mov	x1, x21
10001381c:     	mov	w3, #0
100013820:     	bl	0x100014aa4 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__bracket_expression[abi:ue170006](std::__1::regex_traits<char> const&, std::__1::__node<char>*, bool, bool, bool)>
100013824:     	ldr	x8, [x21, #56]
100013828:     	str	x20, [x8, #8]
10001382c:     	str	x20, [x21, #56]
100013830:     	ldr	w8, [x20, #160]
100013834:     	orr	w8, w8, #0x400
100013838:     	b	0x1000138d4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_class_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x1b4>
10001383c:     	mov	w0, #176
100013840:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100013844:     	mov	x20, x0
100013848:     	ldr	x8, [x21, #56]
10001384c:     	ldr	x2, [x8, #8]
100013850:     	ldr	w8, [x21, #24]
100013854:     	and	w4, w8, #0x1
100013858:     	ubfx	w5, w8, #3, #1
10001385c:     	mov	x1, x21
100013860:     	mov	w3, #0
100013864:     	bl	0x100014aa4 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__bracket_expression[abi:ue170006](std::__1::regex_traits<char> const&, std::__1::__node<char>*, bool, bool, bool)>
100013868:     	ldr	x8, [x21, #56]
10001386c:     	str	x20, [x8, #8]
100013870:     	str	x20, [x21, #56]
100013874:     	ldr	w8, [x20, #160]
100013878:     	mov	w9, #1280
10001387c:     	orr	w8, w8, w9
100013880:     	str	w8, [x20, #160]
100013884:     	mov	x0, x20
100013888:     	mov	w1, #95
10001388c:     	bl	0x100014608 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)>
100013890:     	b	0x1000138d8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_class_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x1b8>
100013894:     	mov	w0, #176
100013898:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001389c:     	mov	x20, x0
1000138a0:     	ldr	x8, [x21, #56]
1000138a4:     	ldr	x2, [x8, #8]
1000138a8:     	ldr	w8, [x21, #24]
1000138ac:     	and	w4, w8, #0x1
1000138b0:     	ubfx	w5, w8, #3, #1
1000138b4:     	mov	x1, x21
1000138b8:     	mov	w3, #0
1000138bc:     	bl	0x100014aa4 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__bracket_expression[abi:ue170006](std::__1::regex_traits<char> const&, std::__1::__node<char>*, bool, bool, bool)>
1000138c0:     	ldr	x8, [x21, #56]
1000138c4:     	str	x20, [x8, #8]
1000138c8:     	str	x20, [x21, #56]
1000138cc:     	ldr	w8, [x20, #160]
1000138d0:     	orr	w8, w8, #0x4000
1000138d4:     	str	w8, [x20, #160]
1000138d8:     	add	x19, x19, #1
1000138dc:     	mov	x0, x19
1000138e0:     	ldp	x29, x30, [sp, #32]
1000138e4:     	ldp	x20, x19, [sp, #16]
1000138e8:     	ldp	x22, x21, [sp], #48
1000138ec:     	ret
1000138f0:     	b	0x100013904 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_class_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x1e4>
1000138f4:     	b	0x100013904 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_class_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x1e4>
1000138f8:     	b	0x100013904 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_class_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x1e4>
1000138fc:     	b	0x100013904 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_class_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x1e4>
100013900:     	b	0x100013904 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_class_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x1e4>
100013904:     	mov	x19, x0
100013908:     	mov	x0, x20
10001390c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100013910:     	mov	x0, x19
100013914:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100013918 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)>:
100013918:     	stp	x20, x19, [sp, #-32]!
10001391c:     	stp	x29, x30, [sp, #16]
100013920:     	add	x29, sp, #16
100013924:     	mov	x19, x1
100013928:     	cmp	x1, x2
10001392c:     	b.eq	0x100013a0c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0xf4>
100013930:     	ldrsb	w8, [x19]
100013934:     	sub	w9, w8, #48
100013938:     	cmp	w9, #72
10001393c:     	b.hi	0x10001397c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x64>
100013940:     	adrp	x10, 0x100032000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0xa4>
100013944:     	add	x10, x10, #3059
100013948:     	adr	x11, #16
10001394c:     	ldrb	w12, [x10, x9]
100013950:     	add	x11, x11, x12, lsl #2
100013954:     	br	x11
100013958:     	cbz	x3, 0x100013c10 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x2f8>
10001395c:     	mov	x0, x3
100013960:     	mov	w1, #0
100013964:     	bl	0x10002ed8c <_vsnprintf+0x10002ed8c>
100013968:     	add	x19, x19, #1
10001396c:     	mov	x0, x19
100013970:     	ldp	x29, x30, [sp, #16]
100013974:     	ldp	x20, x19, [sp], #32
100013978:     	ret
10001397c:     	and	x8, x8, #0xff
100013980:     	cmp	w8, #95
100013984:     	b.eq	0x100013cd0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x3b8>
100013988:     	tbnz	w8, #7, 0x1000139a4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x8c>
10001398c:     	ldr	x9, [x0, #8]
100013990:     	ldr	x9, [x9, #16]
100013994:     	ldr	w9, [x9, x8, lsl #2]
100013998:     	mov	w10, #1280
10001399c:     	tst	w9, w10
1000139a0:     	b.ne	0x100013cd0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x3b8>
1000139a4:     	sxtb	w1, w8
1000139a8:     	cbz	x3, 0x100013c14 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x2fc>
1000139ac:     	mov	x0, x3
1000139b0:     	bl	0x10002ed8c <_vsnprintf+0x10002ed8c>
1000139b4:     	add	x19, x19, #1
1000139b8:     	mov	x0, x19
1000139bc:     	ldp	x29, x30, [sp, #16]
1000139c0:     	ldp	x20, x19, [sp], #32
1000139c4:     	ret
1000139c8:     	add	x8, x19, #1
1000139cc:     	cmp	x8, x2
1000139d0:     	b.eq	0x100013cd0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x3b8>
1000139d4:     	ldrsb	w8, [x8]
1000139d8:     	cmp	w8, #65
1000139dc:     	b.lt	0x100013cd0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x3b8>
1000139e0:     	and	w8, w8, #0xff
1000139e4:     	sub	w9, w8, #97
1000139e8:     	cmp	w8, #91
1000139ec:     	and	w9, w9, #0xff
1000139f0:     	ccmp	w9, #25, #0, hs
1000139f4:     	b.hi	0x100013cd0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x3b8>
1000139f8:     	and	w1, w8, #0x1f
1000139fc:     	cbz	x3, 0x100013cb8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x3a0>
100013a00:     	mov	x0, x3
100013a04:     	bl	0x10002ed8c <_vsnprintf+0x10002ed8c>
100013a08:     	add	x19, x19, #2
100013a0c:     	mov	x0, x19
100013a10:     	ldp	x29, x30, [sp, #16]
100013a14:     	ldp	x20, x19, [sp], #32
100013a18:     	ret
100013a1c:     	cbz	x3, 0x100013c2c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x314>
100013a20:     	mov	x0, x3
100013a24:     	mov	w1, #12
100013a28:     	bl	0x10002ed8c <_vsnprintf+0x10002ed8c>
100013a2c:     	add	x19, x19, #1
100013a30:     	mov	x0, x19
100013a34:     	ldp	x29, x30, [sp, #16]
100013a38:     	ldp	x20, x19, [sp], #32
100013a3c:     	ret
100013a40:     	cbz	x3, 0x100013c48 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x330>
100013a44:     	mov	x0, x3
100013a48:     	mov	w1, #10
100013a4c:     	bl	0x10002ed8c <_vsnprintf+0x10002ed8c>
100013a50:     	add	x19, x19, #1
100013a54:     	mov	x0, x19
100013a58:     	ldp	x29, x30, [sp, #16]
100013a5c:     	ldp	x20, x19, [sp], #32
100013a60:     	ret
100013a64:     	cbz	x3, 0x100013c64 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x34c>
100013a68:     	mov	x0, x3
100013a6c:     	mov	w1, #13
100013a70:     	bl	0x10002ed8c <_vsnprintf+0x10002ed8c>
100013a74:     	add	x19, x19, #1
100013a78:     	mov	x0, x19
100013a7c:     	ldp	x29, x30, [sp, #16]
100013a80:     	ldp	x20, x19, [sp], #32
100013a84:     	ret
100013a88:     	cbz	x3, 0x100013c80 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x368>
100013a8c:     	mov	x0, x3
100013a90:     	mov	w1, #9
100013a94:     	bl	0x10002ed8c <_vsnprintf+0x10002ed8c>
100013a98:     	add	x19, x19, #1
100013a9c:     	mov	x0, x19
100013aa0:     	ldp	x29, x30, [sp, #16]
100013aa4:     	ldp	x20, x19, [sp], #32
100013aa8:     	ret
100013aac:     	add	x8, x19, #1
100013ab0:     	cmp	x8, x2
100013ab4:     	b.eq	0x100013cd0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x3b8>
100013ab8:     	ldrb	w8, [x8]
100013abc:     	and	w9, w8, #0xf8
100013ac0:     	cmp	w9, #48
100013ac4:     	b.eq	0x100013ae4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x1cc>
100013ac8:     	and	w9, w8, #0xfe
100013acc:     	cmp	w9, #56
100013ad0:     	b.eq	0x100013ae4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x1cc>
100013ad4:     	orr	w8, w8, #0x20
100013ad8:     	sub	w8, w8, #97
100013adc:     	cmp	w8, #6
100013ae0:     	b.hs	0x100013cd0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x3b8>
100013ae4:     	add	x19, x19, #2
100013ae8:     	cmp	x19, x2
100013aec:     	b.eq	0x100013cd0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x3b8>
100013af0:     	ldrb	w8, [x19]
100013af4:     	and	w9, w8, #0xf8
100013af8:     	cmp	w9, #48
100013afc:     	b.eq	0x100013b1c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x204>
100013b00:     	and	w9, w8, #0xfe
100013b04:     	cmp	w9, #56
100013b08:     	b.eq	0x100013b1c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x204>
100013b0c:     	orr	w8, w8, #0x20
100013b10:     	sub	w8, w8, #97
100013b14:     	cmp	w8, #6
100013b18:     	b.hs	0x100013cd0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x3b8>
100013b1c:     	add	x8, x19, #1
100013b20:     	cmp	x8, x2
100013b24:     	b.eq	0x100013cd0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x3b8>
100013b28:     	ldrb	w8, [x8]
100013b2c:     	and	w10, w8, #0xf8
100013b30:     	mov	w9, #208
100013b34:     	cmp	w10, #48
100013b38:     	b.eq	0x100013b60 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x248>
100013b3c:     	and	w10, w8, #0xfe
100013b40:     	cmp	w10, #56
100013b44:     	b.eq	0x100013b60 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x248>
100013b48:     	orr	w8, w8, #0x20
100013b4c:     	sub	w9, w8, #97
100013b50:     	and	w9, w9, #0xff
100013b54:     	cmp	w9, #6
100013b58:     	b.hs	0x100013cd0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x3b8>
100013b5c:     	mov	w9, #169
100013b60:     	add	x10, x19, #2
100013b64:     	cmp	x10, x2
100013b68:     	b.eq	0x100013cd0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x3b8>
100013b6c:     	ldrb	w10, [x10]
100013b70:     	and	w12, w10, #0xf8
100013b74:     	mov	w11, #208
100013b78:     	cmp	w12, #48
100013b7c:     	b.eq	0x100013ba4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x28c>
100013b80:     	and	w12, w10, #0xfe
100013b84:     	cmp	w12, #56
100013b88:     	b.eq	0x100013ba4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x28c>
100013b8c:     	orr	w10, w10, #0x20
100013b90:     	sub	w11, w10, #97
100013b94:     	and	w11, w11, #0xff
100013b98:     	cmp	w11, #6
100013b9c:     	b.hs	0x100013cd0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x3b8>
100013ba0:     	mov	w11, #169
100013ba4:     	add	w8, w9, w8
100013ba8:     	add	w9, w11, w10
100013bac:     	add	w8, w9, w8, lsl #4
100013bb0:     	sxtb	w1, w8
100013bb4:     	cbz	x3, 0x100013bf8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x2e0>
100013bb8:     	mov	x0, x3
100013bbc:     	bl	0x10002ed8c <_vsnprintf+0x10002ed8c>
100013bc0:     	add	x19, x19, #3
100013bc4:     	mov	x0, x19
100013bc8:     	ldp	x29, x30, [sp, #16]
100013bcc:     	ldp	x20, x19, [sp], #32
100013bd0:     	ret
100013bd4:     	cbz	x3, 0x100013c9c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x384>
100013bd8:     	mov	x0, x3
100013bdc:     	mov	w1, #11
100013be0:     	bl	0x10002ed8c <_vsnprintf+0x10002ed8c>
100013be4:     	add	x19, x19, #1
100013be8:     	mov	x0, x19
100013bec:     	ldp	x29, x30, [sp, #16]
100013bf0:     	ldp	x20, x19, [sp], #32
100013bf4:     	ret
100013bf8:     	bl	0x100013cd4 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_char(char)>
100013bfc:     	add	x19, x19, #3
100013c00:     	mov	x0, x19
100013c04:     	ldp	x29, x30, [sp, #16]
100013c08:     	ldp	x20, x19, [sp], #32
100013c0c:     	ret
100013c10:     	mov	w1, #0
100013c14:     	bl	0x100013cd4 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_char(char)>
100013c18:     	add	x19, x19, #1
100013c1c:     	mov	x0, x19
100013c20:     	ldp	x29, x30, [sp, #16]
100013c24:     	ldp	x20, x19, [sp], #32
100013c28:     	ret
100013c2c:     	mov	w1, #12
100013c30:     	bl	0x100013cd4 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_char(char)>
100013c34:     	add	x19, x19, #1
100013c38:     	mov	x0, x19
100013c3c:     	ldp	x29, x30, [sp, #16]
100013c40:     	ldp	x20, x19, [sp], #32
100013c44:     	ret
100013c48:     	mov	w1, #10
100013c4c:     	bl	0x100013cd4 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_char(char)>
100013c50:     	add	x19, x19, #1
100013c54:     	mov	x0, x19
100013c58:     	ldp	x29, x30, [sp, #16]
100013c5c:     	ldp	x20, x19, [sp], #32
100013c60:     	ret
100013c64:     	mov	w1, #13
100013c68:     	bl	0x100013cd4 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_char(char)>
100013c6c:     	add	x19, x19, #1
100013c70:     	mov	x0, x19
100013c74:     	ldp	x29, x30, [sp, #16]
100013c78:     	ldp	x20, x19, [sp], #32
100013c7c:     	ret
100013c80:     	mov	w1, #9
100013c84:     	bl	0x100013cd4 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_char(char)>
100013c88:     	add	x19, x19, #1
100013c8c:     	mov	x0, x19
100013c90:     	ldp	x29, x30, [sp, #16]
100013c94:     	ldp	x20, x19, [sp], #32
100013c98:     	ret
100013c9c:     	mov	w1, #11
100013ca0:     	bl	0x100013cd4 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_char(char)>
100013ca4:     	add	x19, x19, #1
100013ca8:     	mov	x0, x19
100013cac:     	ldp	x29, x30, [sp, #16]
100013cb0:     	ldp	x20, x19, [sp], #32
100013cb4:     	ret
100013cb8:     	bl	0x100013cd4 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_char(char)>
100013cbc:     	add	x19, x19, #2
100013cc0:     	mov	x0, x19
100013cc4:     	ldp	x29, x30, [sp, #16]
100013cc8:     	ldp	x20, x19, [sp], #32
100013ccc:     	ret
100013cd0:     	bl	0x1000136d4 <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)3>()>

0000000100013cd4 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_char(char)>:
100013cd4:     	stp	x22, x21, [sp, #-48]!
100013cd8:     	stp	x20, x19, [sp, #16]
100013cdc:     	stp	x29, x30, [sp, #32]
100013ce0:     	add	x29, sp, #32
100013ce4:     	mov	x20, x1
100013ce8:     	mov	x19, x0
100013cec:     	ldr	w8, [x0, #24]
100013cf0:     	tbnz	w8, #0, 0x100013d20 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_char(char)+0x4c>
100013cf4:     	tbnz	w8, #3, 0x100013d74 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_char(char)+0xa0>
100013cf8:     	mov	w0, #24
100013cfc:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100013d00:     	ldr	x8, [x19, #56]
100013d04:     	ldr	x9, [x8, #8]
100013d08:     	adrp	x10, 0x100034000 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_char(char)+0xb8>
100013d0c:     	add	x10, x10, #2248
100013d10:     	stp	x10, x9, [x0]
100013d14:     	strb	w20, [x0, #16]
100013d18:     	str	x0, [x8, #8]
100013d1c:     	b	0x100013db0 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_char(char)+0xdc>
100013d20:     	mov	w0, #48
100013d24:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100013d28:     	mov	x21, x0
100013d2c:     	ldr	x8, [x19, #56]
100013d30:     	ldr	x8, [x8, #8]
100013d34:     	adrp	x9, 0x100034000 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_char(char)+0xe4>
100013d38:     	add	x9, x9, #2104
100013d3c:     	stp	x9, x8, [x0]
100013d40:     	add	x22, x0, #16
100013d44:     	mov	x0, x22
100013d48:     	mov	x1, x19
100013d4c:     	bl	0x10002ef6c <_vsnprintf+0x10002ef6c>
100013d50:     	ldur	q0, [x19, #8]
100013d54:     	stur	q0, [x21, #24]
100013d58:     	ldr	x0, [x19, #8]
100013d5c:     	ldr	x8, [x0]
100013d60:     	ldr	x8, [x8, #40]
100013d64:     	mov	x1, x20
100013d68:     	blr	x8
100013d6c:     	strb	w0, [x21, #40]
100013d70:     	b	0x100013da8 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_char(char)+0xd4>
100013d74:     	mov	w0, #48
100013d78:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100013d7c:     	mov	x21, x0
100013d80:     	ldr	x8, [x19, #56]
100013d84:     	ldr	x8, [x8, #8]
100013d88:     	adrp	x9, 0x100034000 <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)4>()+0x4>
100013d8c:     	add	x9, x9, #2176
100013d90:     	stp	x9, x8, [x0], #16
100013d94:     	mov	x1, x19
100013d98:     	bl	0x10002ef6c <_vsnprintf+0x10002ef6c>
100013d9c:     	ldur	q0, [x19, #8]
100013da0:     	stur	q0, [x21, #24]
100013da4:     	strb	w20, [x21, #40]
100013da8:     	ldr	x8, [x19, #56]
100013dac:     	str	x21, [x8, #8]
100013db0:     	ldr	x8, [x19, #56]
100013db4:     	ldr	x8, [x8, #8]
100013db8:     	str	x8, [x19, #56]
100013dbc:     	ldp	x29, x30, [sp, #32]
100013dc0:     	ldp	x20, x19, [sp, #16]
100013dc4:     	ldp	x22, x21, [sp], #48
100013dc8:     	ret
100013dcc:     	mov	x19, x0
100013dd0:     	mov	x0, x22
100013dd4:     	bl	0x10002ef84 <_vsnprintf+0x10002ef84>
100013dd8:     	adrp	x8, 0x100034000 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_back_ref(int)+0x8>
100013ddc:     	add	x8, x8, #1696
100013de0:     	str	x8, [x21]
100013de4:     	ldr	x0, [x21, #8]
100013de8:     	cbz	x0, 0x100013df8 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_char(char)+0x124>
100013dec:     	ldr	x8, [x0]
100013df0:     	ldr	x8, [x8, #8]
100013df4:     	blr	x8
100013df8:     	mov	x0, x21
100013dfc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100013e00:     	mov	x0, x19
100013e04:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100013e08 <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)4>()>:
100013e08:     	stp	x20, x19, [sp, #-32]!
100013e0c:     	stp	x29, x30, [sp, #16]
100013e10:     	add	x29, sp, #16
100013e14:     	mov	w0, #24
100013e18:     	bl	0x10002f038 <_vsnprintf+0x10002f038>
100013e1c:     	mov	x19, x0
100013e20:     	mov	w1, #4
100013e24:     	bl	0x10002ed20 <_vsnprintf+0x10002ed20>
100013e28:     	adrp	x1, 0x100034000 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_back_ref(int)+0x58>
100013e2c:     	ldr	x1, [x1, #656]
100013e30:     	adrp	x2, 0x100034000 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_back_ref(int)+0x60>
100013e34:     	ldr	x2, [x2, #104]
100013e38:     	mov	x0, x19
100013e3c:     	bl	0x10002f0a4 <_vsnprintf+0x10002f0a4>
100013e40:     	mov	x20, x0
100013e44:     	mov	x0, x19
100013e48:     	bl	0x10002f068 <_vsnprintf+0x10002f068>
100013e4c:     	mov	x0, x20
100013e50:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100013e54 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_back_ref(int)>:
100013e54:     	stp	x22, x21, [sp, #-48]!
100013e58:     	stp	x20, x19, [sp, #16]
100013e5c:     	stp	x29, x30, [sp, #32]
100013e60:     	add	x29, sp, #32
100013e64:     	mov	x20, x1
100013e68:     	mov	x19, x0
100013e6c:     	ldr	w8, [x0, #24]
100013e70:     	tbnz	w8, #0, 0x100013ea0 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_back_ref(int)+0x4c>
100013e74:     	tbnz	w8, #3, 0x100013ec0 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_back_ref(int)+0x6c>
100013e78:     	mov	w0, #24
100013e7c:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100013e80:     	ldr	x8, [x19, #56]
100013e84:     	ldr	x9, [x8, #8]
100013e88:     	adrp	x10, 0x100034000 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_back_ref(int)+0xb8>
100013e8c:     	add	x10, x10, #2464
100013e90:     	stp	x10, x9, [x0]
100013e94:     	str	w20, [x0, #16]
100013e98:     	str	x0, [x8, #8]
100013e9c:     	b	0x100013efc <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_back_ref(int)+0xa8>
100013ea0:     	mov	w0, #48
100013ea4:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100013ea8:     	mov	x21, x0
100013eac:     	ldr	x8, [x19, #56]
100013eb0:     	ldr	x8, [x8, #8]
100013eb4:     	adrp	x9, 0x100034000 <std::__1::__match_char_icase<char, std::__1::regex_traits<char>>::~__match_char_icase()+0x20>
100013eb8:     	add	x9, x9, #2320
100013ebc:     	b	0x100013edc <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_back_ref(int)+0x88>
100013ec0:     	mov	w0, #48
100013ec4:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100013ec8:     	mov	x21, x0
100013ecc:     	ldr	x8, [x19, #56]
100013ed0:     	ldr	x8, [x8, #8]
100013ed4:     	adrp	x9, 0x100034000 <std::__1::__match_char_icase<char, std::__1::regex_traits<char>>::~__match_char_icase()+0x40>
100013ed8:     	add	x9, x9, #2392
100013edc:     	stp	x9, x8, [x0], #16
100013ee0:     	mov	x1, x19
100013ee4:     	bl	0x10002ef6c <_vsnprintf+0x10002ef6c>
100013ee8:     	ldur	q0, [x19, #8]
100013eec:     	stur	q0, [x21, #24]
100013ef0:     	str	w20, [x21, #40]
100013ef4:     	ldr	x8, [x19, #56]
100013ef8:     	str	x21, [x8, #8]
100013efc:     	ldr	x8, [x19, #56]
100013f00:     	ldr	x8, [x8, #8]
100013f04:     	str	x8, [x19, #56]
100013f08:     	ldp	x29, x30, [sp, #32]
100013f0c:     	ldp	x20, x19, [sp, #16]
100013f10:     	ldp	x22, x21, [sp], #48
100013f14:     	ret

0000000100013f18 <std::__1::__match_char_icase<char, std::__1::regex_traits<char>>::~__match_char_icase()>:
100013f18:     	stp	x20, x19, [sp, #-32]!
100013f1c:     	stp	x29, x30, [sp, #16]
100013f20:     	add	x29, sp, #16
100013f24:     	mov	x19, x0
100013f28:     	adrp	x8, 0x100034000 <std::__1::__match_char_icase<char, std::__1::regex_traits<char>>::~__match_char_icase()+0x44>
100013f2c:     	add	x8, x8, #2104
100013f30:     	str	x8, [x0], #16
100013f34:     	bl	0x10002ef84 <_vsnprintf+0x10002ef84>
100013f38:     	adrp	x8, 0x100034000 <std::__1::__match_char_icase<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x4>
100013f3c:     	add	x8, x8, #1696
100013f40:     	str	x8, [x19]
100013f44:     	ldr	x0, [x19, #8]
100013f48:     	cbz	x0, 0x100013f58 <std::__1::__match_char_icase<char, std::__1::regex_traits<char>>::~__match_char_icase()+0x40>
100013f4c:     	ldr	x8, [x0]
100013f50:     	ldr	x8, [x8, #8]
100013f54:     	blr	x8
100013f58:     	mov	x0, x19
100013f5c:     	ldp	x29, x30, [sp, #16]
100013f60:     	ldp	x20, x19, [sp], #32
100013f64:     	ret

0000000100013f68 <std::__1::__match_char_icase<char, std::__1::regex_traits<char>>::~__match_char_icase()>:
100013f68:     	stp	x20, x19, [sp, #-32]!
100013f6c:     	stp	x29, x30, [sp, #16]
100013f70:     	add	x29, sp, #16
100013f74:     	mov	x19, x0
100013f78:     	adrp	x8, 0x100034000 <std::__1::__match_char_icase<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x44>
100013f7c:     	add	x8, x8, #2104
100013f80:     	str	x8, [x0], #16
100013f84:     	bl	0x10002ef84 <_vsnprintf+0x10002ef84>
100013f88:     	adrp	x8, 0x100034000 <std::__1::__match_char_icase<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x54>
100013f8c:     	add	x8, x8, #1696
100013f90:     	str	x8, [x19]
100013f94:     	ldr	x0, [x19, #8]
100013f98:     	cbz	x0, 0x100013fa8 <std::__1::__match_char_icase<char, std::__1::regex_traits<char>>::~__match_char_icase()+0x40>
100013f9c:     	ldr	x8, [x0]
100013fa0:     	ldr	x8, [x8, #8]
100013fa4:     	blr	x8
100013fa8:     	mov	x0, x19
100013fac:     	ldp	x29, x30, [sp, #16]
100013fb0:     	ldp	x20, x19, [sp], #32
100013fb4:     	b	0x10002f014 <_vsnprintf+0x10002f014>

0000000100013fb8 <std::__1::__match_char_icase<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const>:
100013fb8:     	stp	x20, x19, [sp, #-32]!
100013fbc:     	stp	x29, x30, [sp, #16]
100013fc0:     	add	x29, sp, #16
100013fc4:     	mov	x19, x1
100013fc8:     	ldp	x8, x9, [x1, #16]
100013fcc:     	cmp	x8, x9
100013fd0:     	b.eq	0x100014020 <std::__1::__match_char_icase<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x68>
100013fd4:     	mov	x20, x0
100013fd8:     	ldrsb	w1, [x8]
100013fdc:     	ldr	x0, [x0, #24]
100013fe0:     	ldr	x8, [x0]
100013fe4:     	ldr	x8, [x8, #40]
100013fe8:     	blr	x8
100013fec:     	ldrb	w8, [x20, #40]
100013ff0:     	cmp	w8, w0, uxtb
100013ff4:     	b.ne	0x100014020 <std::__1::__match_char_icase<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x68>
100013ff8:     	mov	w8, #-995
100013ffc:     	str	w8, [x19]
100014000:     	ldr	x8, [x19, #16]
100014004:     	add	x8, x8, #1
100014008:     	str	x8, [x19, #16]
10001400c:     	ldr	x8, [x20, #8]
100014010:     	str	x8, [x19, #80]
100014014:     	ldp	x29, x30, [sp, #16]
100014018:     	ldp	x20, x19, [sp], #32
10001401c:     	ret
100014020:     	mov	x8, #0
100014024:     	mov	w9, #-993
100014028:     	str	w9, [x19]
10001402c:     	str	x8, [x19, #80]
100014030:     	ldp	x29, x30, [sp, #16]
100014034:     	ldp	x20, x19, [sp], #32
100014038:     	ret

000000010001403c <std::__1::__match_char_collate<char, std::__1::regex_traits<char>>::~__match_char_collate()>:
10001403c:     	stp	x20, x19, [sp, #-32]!
100014040:     	stp	x29, x30, [sp, #16]
100014044:     	add	x29, sp, #16
100014048:     	mov	x19, x0
10001404c:     	adrp	x8, 0x100034000 <std::__1::__match_char_collate<char, std::__1::regex_traits<char>>::~__match_char_collate()+0x40>
100014050:     	add	x8, x8, #2176
100014054:     	str	x8, [x0], #16
100014058:     	bl	0x10002ef84 <_vsnprintf+0x10002ef84>
10001405c:     	adrp	x8, 0x100034000 <std::__1::__match_char_collate<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const>
100014060:     	add	x8, x8, #1696
100014064:     	str	x8, [x19]
100014068:     	ldr	x0, [x19, #8]
10001406c:     	cbz	x0, 0x10001407c <std::__1::__match_char_collate<char, std::__1::regex_traits<char>>::~__match_char_collate()+0x40>
100014070:     	ldr	x8, [x0]
100014074:     	ldr	x8, [x8, #8]
100014078:     	blr	x8
10001407c:     	mov	x0, x19
100014080:     	ldp	x29, x30, [sp, #16]
100014084:     	ldp	x20, x19, [sp], #32
100014088:     	ret

000000010001408c <std::__1::__match_char_collate<char, std::__1::regex_traits<char>>::~__match_char_collate()>:
10001408c:     	stp	x20, x19, [sp, #-32]!
100014090:     	stp	x29, x30, [sp, #16]
100014094:     	add	x29, sp, #16
100014098:     	mov	x19, x0
10001409c:     	adrp	x8, 0x100034000 <std::__1::__match_char_collate<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x40>
1000140a0:     	add	x8, x8, #2176
1000140a4:     	str	x8, [x0], #16
1000140a8:     	bl	0x10002ef84 <_vsnprintf+0x10002ef84>
1000140ac:     	adrp	x8, 0x100034000 <std::__1::__match_char<char>::~__match_char()+0x8>
1000140b0:     	add	x8, x8, #1696
1000140b4:     	str	x8, [x19]
1000140b8:     	ldr	x0, [x19, #8]
1000140bc:     	cbz	x0, 0x1000140cc <std::__1::__match_char_collate<char, std::__1::regex_traits<char>>::~__match_char_collate()+0x40>
1000140c0:     	ldr	x8, [x0]
1000140c4:     	ldr	x8, [x8, #8]
1000140c8:     	blr	x8
1000140cc:     	mov	x0, x19
1000140d0:     	ldp	x29, x30, [sp, #16]
1000140d4:     	ldp	x20, x19, [sp], #32
1000140d8:     	b	0x10002f014 <_vsnprintf+0x10002f014>

00000001000140dc <std::__1::__match_char_collate<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const>:
1000140dc:     	ldp	x8, x9, [x1, #16]
1000140e0:     	cmp	x8, x9
1000140e4:     	b.eq	0x100014114 <std::__1::__match_char_collate<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x38>
1000140e8:     	ldrb	w9, [x8]
1000140ec:     	ldrb	w10, [x0, #40]
1000140f0:     	cmp	w9, w10
1000140f4:     	b.ne	0x100014114 <std::__1::__match_char_collate<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x38>
1000140f8:     	mov	w9, #-995
1000140fc:     	str	w9, [x1]
100014100:     	add	x8, x8, #1
100014104:     	str	x8, [x1, #16]
100014108:     	ldr	x8, [x0, #8]
10001410c:     	str	x8, [x1, #80]
100014110:     	ret
100014114:     	mov	w9, #-993
100014118:     	str	w9, [x1]
10001411c:     	str	xzr, [x1, #80]
100014120:     	ret

0000000100014124 <std::__1::__match_char<char>::~__match_char()>:
100014124:     	stp	x20, x19, [sp, #-32]!
100014128:     	stp	x29, x30, [sp, #16]
10001412c:     	add	x29, sp, #16
100014130:     	mov	x19, x0
100014134:     	adrp	x8, 0x100034000 <std::__1::__match_char<char>::__exec(std::__1::__state<char>&) const+0x10>
100014138:     	add	x8, x8, #1696
10001413c:     	str	x8, [x0]
100014140:     	ldr	x0, [x0, #8]
100014144:     	cbz	x0, 0x100014154 <std::__1::__match_char<char>::~__match_char()+0x30>
100014148:     	ldr	x8, [x0]
10001414c:     	ldr	x8, [x8, #8]
100014150:     	blr	x8
100014154:     	mov	x0, x19
100014158:     	ldp	x29, x30, [sp, #16]
10001415c:     	ldp	x20, x19, [sp], #32
100014160:     	ret

0000000100014164 <std::__1::__match_char<char>::~__match_char()>:
100014164:     	stp	x20, x19, [sp, #-32]!
100014168:     	stp	x29, x30, [sp, #16]
10001416c:     	add	x29, sp, #16
100014170:     	mov	x19, x0
100014174:     	adrp	x8, 0x100034000 <std::__1::__back_ref_icase<char, std::__1::regex_traits<char>>::~__back_ref_icase()+0x8>
100014178:     	add	x8, x8, #1696
10001417c:     	str	x8, [x0]
100014180:     	ldr	x0, [x0, #8]
100014184:     	cbz	x0, 0x100014194 <std::__1::__match_char<char>::~__match_char()+0x30>
100014188:     	ldr	x8, [x0]
10001418c:     	ldr	x8, [x8, #8]
100014190:     	blr	x8
100014194:     	mov	x0, x19
100014198:     	ldp	x29, x30, [sp, #16]
10001419c:     	ldp	x20, x19, [sp], #32
1000141a0:     	b	0x10002f014 <_vsnprintf+0x10002f014>

00000001000141a4 <std::__1::__match_char<char>::__exec(std::__1::__state<char>&) const>:
1000141a4:     	ldp	x8, x9, [x1, #16]
1000141a8:     	cmp	x8, x9
1000141ac:     	b.eq	0x1000141dc <std::__1::__match_char<char>::__exec(std::__1::__state<char>&) const+0x38>
1000141b0:     	ldrb	w9, [x8]
1000141b4:     	ldrb	w10, [x0, #16]
1000141b8:     	cmp	w9, w10
1000141bc:     	b.ne	0x1000141dc <std::__1::__match_char<char>::__exec(std::__1::__state<char>&) const+0x38>
1000141c0:     	mov	w9, #-995
1000141c4:     	str	w9, [x1]
1000141c8:     	add	x8, x8, #1
1000141cc:     	str	x8, [x1, #16]
1000141d0:     	ldr	x8, [x0, #8]
1000141d4:     	str	x8, [x1, #80]
1000141d8:     	ret
1000141dc:     	mov	w9, #-993
1000141e0:     	str	w9, [x1]
1000141e4:     	str	xzr, [x1, #80]
1000141e8:     	ret

00000001000141ec <std::__1::__back_ref_icase<char, std::__1::regex_traits<char>>::~__back_ref_icase()>:
1000141ec:     	stp	x20, x19, [sp, #-32]!
1000141f0:     	stp	x29, x30, [sp, #16]
1000141f4:     	add	x29, sp, #16
1000141f8:     	mov	x19, x0
1000141fc:     	adrp	x8, 0x100034000 <std::__1::__back_ref_icase<char, std::__1::regex_traits<char>>::~__back_ref_icase()+0x40>
100014200:     	add	x8, x8, #2320
100014204:     	str	x8, [x0], #16
100014208:     	bl	0x10002ef84 <_vsnprintf+0x10002ef84>
10001420c:     	adrp	x8, 0x100034000 <std::__1::__back_ref_icase<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const>
100014210:     	add	x8, x8, #1696
100014214:     	str	x8, [x19]
100014218:     	ldr	x0, [x19, #8]
10001421c:     	cbz	x0, 0x10001422c <std::__1::__back_ref_icase<char, std::__1::regex_traits<char>>::~__back_ref_icase()+0x40>
100014220:     	ldr	x8, [x0]
100014224:     	ldr	x8, [x8, #8]
100014228:     	blr	x8
10001422c:     	mov	x0, x19
100014230:     	ldp	x29, x30, [sp, #16]
100014234:     	ldp	x20, x19, [sp], #32
100014238:     	ret

000000010001423c <std::__1::__back_ref_icase<char, std::__1::regex_traits<char>>::~__back_ref_icase()>:
10001423c:     	stp	x20, x19, [sp, #-32]!
100014240:     	stp	x29, x30, [sp, #16]
100014244:     	add	x29, sp, #16
100014248:     	mov	x19, x0
10001424c:     	adrp	x8, 0x100034000 <std::__1::__back_ref_icase<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x40>
100014250:     	add	x8, x8, #2320
100014254:     	str	x8, [x0], #16
100014258:     	bl	0x10002ef84 <_vsnprintf+0x10002ef84>
10001425c:     	adrp	x8, 0x100034000 <std::__1::__back_ref_icase<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x50>
100014260:     	add	x8, x8, #1696
100014264:     	str	x8, [x19]
100014268:     	ldr	x0, [x19, #8]
10001426c:     	cbz	x0, 0x10001427c <std::__1::__back_ref_icase<char, std::__1::regex_traits<char>>::~__back_ref_icase()+0x40>
100014270:     	ldr	x8, [x0]
100014274:     	ldr	x8, [x8, #8]
100014278:     	blr	x8
10001427c:     	mov	x0, x19
100014280:     	ldp	x29, x30, [sp, #16]
100014284:     	ldp	x20, x19, [sp], #32
100014288:     	b	0x10002f014 <_vsnprintf+0x10002f014>

000000010001428c <std::__1::__back_ref_icase<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const>:
10001428c:     	stp	x24, x23, [sp, #-64]!
100014290:     	stp	x22, x21, [sp, #16]
100014294:     	stp	x20, x19, [sp, #32]
100014298:     	stp	x29, x30, [sp, #48]
10001429c:     	add	x29, sp, #48
1000142a0:     	mov	x19, x1
1000142a4:     	ldr	w8, [x0, #40]
1000142a8:     	sub	w8, w8, #1
1000142ac:     	ldr	x9, [x1, #32]
1000142b0:     	mov	w10, #24
1000142b4:     	umaddl	x23, w8, w10, x9
1000142b8:     	ldrb	w8, [x23, #16]
1000142bc:     	cbz	w8, 0x1000142d8 <std::__1::__back_ref_icase<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x4c>
1000142c0:     	ldp	x9, x8, [x23]
1000142c4:     	sub	x22, x8, x9
1000142c8:     	ldp	x8, x9, [x19, #16]
1000142cc:     	sub	x9, x9, x8
1000142d0:     	cmp	x9, x22
1000142d4:     	b.ge	0x1000142fc <std::__1::__back_ref_icase<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x70>
1000142d8:     	mov	x8, #0
1000142dc:     	mov	w9, #-993
1000142e0:     	str	w9, [x19]
1000142e4:     	str	x8, [x19, #80]
1000142e8:     	ldp	x29, x30, [sp, #48]
1000142ec:     	ldp	x20, x19, [sp, #32]
1000142f0:     	ldp	x22, x21, [sp, #16]
1000142f4:     	ldp	x24, x23, [sp], #64
1000142f8:     	ret
1000142fc:     	mov	x20, x0
100014300:     	cmp	x22, #1
100014304:     	b.lt	0x100014358 <std::__1::__back_ref_icase<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0xcc>
100014308:     	mov	x24, #0
10001430c:     	ldr	x8, [x23]
100014310:     	ldrsb	w1, [x8, x24]
100014314:     	ldr	x0, [x20, #24]
100014318:     	ldr	x8, [x0]
10001431c:     	ldr	x8, [x8, #40]
100014320:     	blr	x8
100014324:     	mov	x21, x0
100014328:     	ldr	x8, [x19, #16]
10001432c:     	ldrsb	w1, [x8, x24]
100014330:     	ldr	x0, [x20, #24]
100014334:     	ldr	x8, [x0]
100014338:     	ldr	x8, [x8, #40]
10001433c:     	blr	x8
100014340:     	cmp	w21, w0
100014344:     	b.ne	0x1000142d8 <std::__1::__back_ref_icase<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x4c>
100014348:     	add	x24, x24, #1
10001434c:     	cmp	x22, x24
100014350:     	b.ne	0x10001430c <std::__1::__back_ref_icase<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x80>
100014354:     	ldr	x8, [x19, #16]
100014358:     	mov	w9, #-994
10001435c:     	str	w9, [x19]
100014360:     	add	x8, x8, x22
100014364:     	str	x8, [x19, #16]
100014368:     	ldr	x8, [x20, #8]
10001436c:     	str	x8, [x19, #80]
100014370:     	ldp	x29, x30, [sp, #48]
100014374:     	ldp	x20, x19, [sp, #32]
100014378:     	ldp	x22, x21, [sp, #16]
10001437c:     	ldp	x24, x23, [sp], #64
100014380:     	ret

0000000100014384 <std::__1::__back_ref_collate<char, std::__1::regex_traits<char>>::~__back_ref_collate()>:
100014384:     	stp	x20, x19, [sp, #-32]!
100014388:     	stp	x29, x30, [sp, #16]
10001438c:     	add	x29, sp, #16
100014390:     	mov	x19, x0
100014394:     	adrp	x8, 0x100034000 <std::__1::__back_ref_collate<char, std::__1::regex_traits<char>>::~__back_ref_collate()+0x40>
100014398:     	add	x8, x8, #2392
10001439c:     	str	x8, [x0], #16
1000143a0:     	bl	0x10002ef84 <_vsnprintf+0x10002ef84>
1000143a4:     	adrp	x8, 0x100034000 <std::__1::__back_ref_collate<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const>
1000143a8:     	add	x8, x8, #1696
1000143ac:     	str	x8, [x19]
1000143b0:     	ldr	x0, [x19, #8]
1000143b4:     	cbz	x0, 0x1000143c4 <std::__1::__back_ref_collate<char, std::__1::regex_traits<char>>::~__back_ref_collate()+0x40>
1000143b8:     	ldr	x8, [x0]
1000143bc:     	ldr	x8, [x8, #8]
1000143c0:     	blr	x8
1000143c4:     	mov	x0, x19
1000143c8:     	ldp	x29, x30, [sp, #16]
1000143cc:     	ldp	x20, x19, [sp], #32
1000143d0:     	ret

00000001000143d4 <std::__1::__back_ref_collate<char, std::__1::regex_traits<char>>::~__back_ref_collate()>:
1000143d4:     	stp	x20, x19, [sp, #-32]!
1000143d8:     	stp	x29, x30, [sp, #16]
1000143dc:     	add	x29, sp, #16
1000143e0:     	mov	x19, x0
1000143e4:     	adrp	x8, 0x100034000 <std::__1::__back_ref_collate<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x40>
1000143e8:     	add	x8, x8, #2392
1000143ec:     	str	x8, [x0], #16
1000143f0:     	bl	0x10002ef84 <_vsnprintf+0x10002ef84>
1000143f4:     	adrp	x8, 0x100034000 <std::__1::__back_ref_collate<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x50>
1000143f8:     	add	x8, x8, #1696
1000143fc:     	str	x8, [x19]
100014400:     	ldr	x0, [x19, #8]
100014404:     	cbz	x0, 0x100014414 <std::__1::__back_ref_collate<char, std::__1::regex_traits<char>>::~__back_ref_collate()+0x40>
100014408:     	ldr	x8, [x0]
10001440c:     	ldr	x8, [x8, #8]
100014410:     	blr	x8
100014414:     	mov	x0, x19
100014418:     	ldp	x29, x30, [sp, #16]
10001441c:     	ldp	x20, x19, [sp], #32
100014420:     	b	0x10002f014 <_vsnprintf+0x10002f014>

0000000100014424 <std::__1::__back_ref_collate<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const>:
100014424:     	ldr	w8, [x0, #40]
100014428:     	sub	w8, w8, #1
10001442c:     	ldr	x9, [x1, #32]
100014430:     	mov	w10, #24
100014434:     	umaddl	x10, w8, w10, x9
100014438:     	ldrb	w10, [x10, #16]
10001443c:     	cbz	w10, 0x100014460 <std::__1::__back_ref_collate<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x3c>
100014440:     	mov	w10, #24
100014444:     	madd	x8, x8, x10, x9
100014448:     	ldp	x10, x9, [x8]
10001444c:     	sub	x8, x9, x10
100014450:     	ldp	x9, x11, [x1, #16]
100014454:     	sub	x11, x11, x9
100014458:     	cmp	x11, x8
10001445c:     	b.ge	0x100014470 <std::__1::__back_ref_collate<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x4c>
100014460:     	mov	w9, #-993
100014464:     	str	w9, [x1]
100014468:     	str	xzr, [x1, #80]
10001446c:     	ret
100014470:     	cmp	x8, #1
100014474:     	b.lt	0x1000144a0 <std::__1::__back_ref_collate<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x7c>
100014478:     	mov	x11, x9
10001447c:     	mov	x12, x8
100014480:     	ldrb	w13, [x10]
100014484:     	ldrb	w14, [x11]
100014488:     	cmp	w13, w14
10001448c:     	b.ne	0x100014460 <std::__1::__back_ref_collate<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x3c>
100014490:     	add	x11, x11, #1
100014494:     	add	x10, x10, #1
100014498:     	subs	x12, x12, #1
10001449c:     	b.ne	0x100014480 <std::__1::__back_ref_collate<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x5c>
1000144a0:     	mov	w10, #-994
1000144a4:     	str	w10, [x1]
1000144a8:     	add	x8, x9, x8
1000144ac:     	str	x8, [x1, #16]
1000144b0:     	ldr	x8, [x0, #8]
1000144b4:     	str	x8, [x1, #80]
1000144b8:     	ret

00000001000144bc <std::__1::__back_ref<char>::~__back_ref()>:
1000144bc:     	stp	x20, x19, [sp, #-32]!
1000144c0:     	stp	x29, x30, [sp, #16]
1000144c4:     	add	x29, sp, #16
1000144c8:     	mov	x19, x0
1000144cc:     	adrp	x8, 0x100034000 <std::__1::__back_ref<char>::__exec(std::__1::__state<char>&) const+0x10>
1000144d0:     	add	x8, x8, #1696
1000144d4:     	str	x8, [x0]
1000144d8:     	ldr	x0, [x0, #8]
1000144dc:     	cbz	x0, 0x1000144ec <std::__1::__back_ref<char>::~__back_ref()+0x30>
1000144e0:     	ldr	x8, [x0]
1000144e4:     	ldr	x8, [x8, #8]
1000144e8:     	blr	x8
1000144ec:     	mov	x0, x19
1000144f0:     	ldp	x29, x30, [sp, #16]
1000144f4:     	ldp	x20, x19, [sp], #32
1000144f8:     	ret

00000001000144fc <std::__1::__back_ref<char>::~__back_ref()>:
1000144fc:     	stp	x20, x19, [sp, #-32]!
100014500:     	stp	x29, x30, [sp, #16]
100014504:     	add	x29, sp, #16
100014508:     	mov	x19, x0
10001450c:     	adrp	x8, 0x100034000 <std::__1::__back_ref<char>::__exec(std::__1::__state<char>&) const+0x50>
100014510:     	add	x8, x8, #1696
100014514:     	str	x8, [x0]
100014518:     	ldr	x0, [x0, #8]
10001451c:     	cbz	x0, 0x10001452c <std::__1::__back_ref<char>::~__back_ref()+0x30>
100014520:     	ldr	x8, [x0]
100014524:     	ldr	x8, [x8, #8]
100014528:     	blr	x8
10001452c:     	mov	x0, x19
100014530:     	ldp	x29, x30, [sp, #16]
100014534:     	ldp	x20, x19, [sp], #32
100014538:     	b	0x10002f014 <_vsnprintf+0x10002f014>

000000010001453c <std::__1::__back_ref<char>::__exec(std::__1::__state<char>&) const>:
10001453c:     	stp	x22, x21, [sp, #-48]!
100014540:     	stp	x20, x19, [sp, #16]
100014544:     	stp	x29, x30, [sp, #32]
100014548:     	add	x29, sp, #32
10001454c:     	ldr	w9, [x0, #16]
100014550:     	ldp	x8, x10, [x1, #32]
100014554:     	sub	x10, x10, x8
100014558:     	asr	x10, x10, #3
10001455c:     	mov	x11, #-6148914691236517206
100014560:     	movk	x11, #43691
100014564:     	mul	x10, x10, x11
100014568:     	cmp	x10, x9
10001456c:     	b.lo	0x100014604 <std::__1::__back_ref<char>::__exec(std::__1::__state<char>&) const+0xc8>
100014570:     	mov	x19, x1
100014574:     	sub	w9, w9, #1
100014578:     	mov	w10, #24
10001457c:     	umaddl	x10, w9, w10, x8
100014580:     	ldrb	w10, [x10, #16]
100014584:     	cbz	w10, 0x1000145bc <std::__1::__back_ref<char>::__exec(std::__1::__state<char>&) const+0x80>
100014588:     	mov	x20, x0
10001458c:     	mov	w10, #24
100014590:     	madd	x8, x9, x10, x8
100014594:     	ldp	x0, x9, [x8]
100014598:     	sub	x21, x9, x0
10001459c:     	ldp	x22, x8, [x19, #16]
1000145a0:     	sub	x8, x8, x22
1000145a4:     	cmp	x8, x21
1000145a8:     	b.lt	0x1000145bc <std::__1::__back_ref<char>::__exec(std::__1::__state<char>&) const+0x80>
1000145ac:     	mov	x1, x22
1000145b0:     	mov	x2, x21
1000145b4:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
1000145b8:     	cbz	w0, 0x1000145dc <std::__1::__back_ref<char>::__exec(std::__1::__state<char>&) const+0xa0>
1000145bc:     	mov	x8, #0
1000145c0:     	mov	w9, #-993
1000145c4:     	str	w9, [x19]
1000145c8:     	str	x8, [x19, #80]
1000145cc:     	ldp	x29, x30, [sp, #32]
1000145d0:     	ldp	x20, x19, [sp, #16]
1000145d4:     	ldp	x22, x21, [sp], #48
1000145d8:     	ret
1000145dc:     	mov	w8, #-994
1000145e0:     	str	w8, [x19]
1000145e4:     	add	x8, x22, x21
1000145e8:     	str	x8, [x19, #16]
1000145ec:     	ldr	x8, [x20, #8]
1000145f0:     	str	x8, [x19, #80]
1000145f4:     	ldp	x29, x30, [sp, #32]
1000145f8:     	ldp	x20, x19, [sp, #16]
1000145fc:     	ldp	x22, x21, [sp], #48
100014600:     	ret
100014604:     	bl	0x100013e08 <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)4>()>

0000000100014608 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)>:
100014608:     	stp	x26, x25, [sp, #-80]!
10001460c:     	stp	x24, x23, [sp, #16]
100014610:     	stp	x22, x21, [sp, #32]
100014614:     	stp	x20, x19, [sp, #48]
100014618:     	stp	x29, x30, [sp, #64]
10001461c:     	add	x29, sp, #64
100014620:     	mov	x22, x1
100014624:     	mov	x19, x0
100014628:     	ldrb	w8, [x0, #169]
10001462c:     	cbz	w8, 0x1000146b0 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0xa8>
100014630:     	ldr	x0, [x19, #24]
100014634:     	ldr	x8, [x0]
100014638:     	ldr	x8, [x8, #40]
10001463c:     	mov	x1, x22
100014640:     	blr	x8
100014644:     	mov	x22, x0
100014648:     	ldp	x21, x8, [x19, #48]
10001464c:     	cmp	x21, x8
100014650:     	b.lo	0x100014728 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x120>
100014654:     	add	x20, x19, #40
100014658:     	ldr	x24, [x20]
10001465c:     	sub	x25, x21, x24
100014660:     	adds	x9, x25, #1
100014664:     	b.mi	0x100014a9c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x494>
100014668:     	mov	x10, #4611686018427387903
10001466c:     	sub	x8, x8, x24
100014670:     	lsl	x11, x8, #1
100014674:     	cmp	x11, x9
100014678:     	csel	x9, x11, x9, hi
10001467c:     	cmp	x8, x10
100014680:     	mov	x8, #9223372036854775807
100014684:     	csel	x23, x9, x8, lo
100014688:     	cbz	x23, 0x100014734 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x12c>
10001468c:     	mov	x0, x23
100014690:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100014694:     	add	x10, x0, x25
100014698:     	add	x8, x0, x23
10001469c:     	mov	x9, x10
1000146a0:     	strb	w22, [x9], #1
1000146a4:     	cmp	x21, x24
1000146a8:     	b.ne	0x100014750 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x148>
1000146ac:     	b	0x1000148e4 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x2dc>
1000146b0:     	ldrb	w9, [x19, #170]
1000146b4:     	add	x20, x19, #40
1000146b8:     	ldp	x21, x8, [x19, #48]
1000146bc:     	cbz	w9, 0x100014720 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x118>
1000146c0:     	cmp	x21, x8
1000146c4:     	b.lo	0x100014728 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x120>
1000146c8:     	ldr	x24, [x20]
1000146cc:     	sub	x25, x21, x24
1000146d0:     	adds	x9, x25, #1
1000146d4:     	b.mi	0x100014a9c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x494>
1000146d8:     	mov	x10, #4611686018427387903
1000146dc:     	sub	x8, x8, x24
1000146e0:     	lsl	x11, x8, #1
1000146e4:     	cmp	x11, x9
1000146e8:     	csel	x9, x11, x9, hi
1000146ec:     	cmp	x8, x10
1000146f0:     	mov	x8, #9223372036854775807
1000146f4:     	csel	x23, x9, x8, lo
1000146f8:     	cbz	x23, 0x1000147d0 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x1c8>
1000146fc:     	mov	x0, x23
100014700:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100014704:     	add	x10, x0, x25
100014708:     	add	x8, x0, x23
10001470c:     	mov	x9, x10
100014710:     	strb	w22, [x9], #1
100014714:     	cmp	x21, x24
100014718:     	b.ne	0x1000147ec <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x1e4>
10001471c:     	b	0x1000148e4 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x2dc>
100014720:     	cmp	x21, x8
100014724:     	b.eq	0x10001477c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x174>
100014728:     	strb	w22, [x21], #1
10001472c:     	str	x21, [x19, #48]
100014730:     	b	0x1000148f4 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x2ec>
100014734:     	mov	x0, #0
100014738:     	add	x10, x0, x25
10001473c:     	add	x8, x0, x23
100014740:     	mov	x9, x10
100014744:     	strb	w22, [x9], #1
100014748:     	cmp	x21, x24
10001474c:     	b.eq	0x1000148e4 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x2dc>
100014750:     	cmp	x25, #8
100014754:     	b.lo	0x100014998 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x390>
100014758:     	add	x11, x0, x21
10001475c:     	sub	x11, x24, x11
100014760:     	add	x11, x11, x21
100014764:     	cmp	x11, #64
100014768:     	b.lo	0x100014998 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x390>
10001476c:     	cmp	x25, #64
100014770:     	b.hs	0x100014818 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x210>
100014774:     	mov	x11, #0
100014778:     	b	0x10001485c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x254>
10001477c:     	ldr	x24, [x20]
100014780:     	sub	x25, x21, x24
100014784:     	adds	x8, x25, #1
100014788:     	b.mi	0x100014a9c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x494>
10001478c:     	lsl	x9, x25, #1
100014790:     	cmp	x9, x8
100014794:     	csel	x8, x9, x8, hi
100014798:     	mov	x9, #4611686018427387903
10001479c:     	mov	x10, #9223372036854775807
1000147a0:     	cmp	x25, x9
1000147a4:     	csel	x23, x8, x10, lo
1000147a8:     	cbz	x23, 0x10001489c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x294>
1000147ac:     	mov	x0, x23
1000147b0:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
1000147b4:     	add	x10, x0, x25
1000147b8:     	add	x8, x0, x23
1000147bc:     	mov	x9, x10
1000147c0:     	strb	w22, [x9], #1
1000147c4:     	cmp	x21, x24
1000147c8:     	b.ne	0x1000148b8 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x2b0>
1000147cc:     	b	0x1000148e4 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x2dc>
1000147d0:     	mov	x0, #0
1000147d4:     	add	x10, x0, x25
1000147d8:     	add	x8, x0, x23
1000147dc:     	mov	x9, x10
1000147e0:     	strb	w22, [x9], #1
1000147e4:     	cmp	x21, x24
1000147e8:     	b.eq	0x1000148e4 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x2dc>
1000147ec:     	cmp	x25, #8
1000147f0:     	b.lo	0x100014a3c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x434>
1000147f4:     	add	x11, x0, x21
1000147f8:     	sub	x11, x24, x11
1000147fc:     	add	x11, x11, x21
100014800:     	cmp	x11, #64
100014804:     	b.lo	0x100014a3c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x434>
100014808:     	cmp	x25, #64
10001480c:     	b.hs	0x10001490c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x304>
100014810:     	mov	x11, #0
100014814:     	b	0x100014950 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x348>
100014818:     	and	x11, x25, #0xffffffffffffffc0
10001481c:     	sub	x12, x21, #32
100014820:     	sub	x13, x12, x24
100014824:     	add	x13, x0, x13
100014828:     	mov	x14, x11
10001482c:     	ldp	q1, q0, [x12]
100014830:     	ldp	q3, q2, [x12, #-32]
100014834:     	stp	q1, q0, [x13]
100014838:     	stp	q3, q2, [x13, #-32]
10001483c:     	sub	x12, x12, #64
100014840:     	sub	x13, x13, #64
100014844:     	sub	x14, x14, #64
100014848:     	cbnz	x14, 0x10001482c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x224>
10001484c:     	cmp	x25, x11
100014850:     	b.eq	0x100014a70 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x468>
100014854:     	tst	x25, #0x38
100014858:     	b.eq	0x100014990 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x388>
10001485c:     	and	x12, x25, #0xfffffffffffffff8
100014860:     	sub	x13, x21, x12
100014864:     	sub	x10, x10, x12
100014868:     	sub	x14, x21, x11
10001486c:     	sub	x14, x14, #8
100014870:     	sub	x15, x14, x24
100014874:     	add	x15, x0, x15
100014878:     	sub	x11, x11, x12
10001487c:     	ldr	d0, [x14], #-8
100014880:     	str	d0, [x15], #-8
100014884:     	adds	x11, x11, #8
100014888:     	b.ne	0x10001487c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x274>
10001488c:     	mov	x21, x13
100014890:     	cmp	x25, x12
100014894:     	b.ne	0x100014998 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x390>
100014898:     	b	0x100014a70 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x468>
10001489c:     	mov	x0, #0
1000148a0:     	add	x10, x0, x25
1000148a4:     	add	x8, x0, x23
1000148a8:     	mov	x9, x10
1000148ac:     	strb	w22, [x9], #1
1000148b0:     	cmp	x21, x24
1000148b4:     	b.eq	0x1000148e4 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x2dc>
1000148b8:     	cmp	x25, #8
1000148bc:     	b.lo	0x100014a5c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x454>
1000148c0:     	add	x11, x0, x21
1000148c4:     	sub	x11, x24, x11
1000148c8:     	add	x11, x11, x21
1000148cc:     	cmp	x11, #64
1000148d0:     	b.lo	0x100014a5c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x454>
1000148d4:     	cmp	x25, #64
1000148d8:     	b.hs	0x1000149b0 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x3a8>
1000148dc:     	mov	x11, #0
1000148e0:     	b	0x1000149f4 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x3ec>
1000148e4:     	mov	x0, x10
1000148e8:     	stp	x10, x9, [x19, #40]
1000148ec:     	str	x8, [x19, #56]
1000148f0:     	cbnz	x21, 0x100014a80 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x478>
1000148f4:     	ldp	x29, x30, [sp, #64]
1000148f8:     	ldp	x20, x19, [sp, #48]
1000148fc:     	ldp	x22, x21, [sp, #32]
100014900:     	ldp	x24, x23, [sp, #16]
100014904:     	ldp	x26, x25, [sp], #80
100014908:     	ret
10001490c:     	and	x11, x25, #0xffffffffffffffc0
100014910:     	sub	x12, x21, #32
100014914:     	sub	x13, x12, x24
100014918:     	add	x13, x0, x13
10001491c:     	mov	x14, x11
100014920:     	ldp	q1, q0, [x12]
100014924:     	ldp	q3, q2, [x12, #-32]
100014928:     	stp	q1, q0, [x13]
10001492c:     	stp	q3, q2, [x13, #-32]
100014930:     	sub	x12, x12, #64
100014934:     	sub	x13, x13, #64
100014938:     	sub	x14, x14, #64
10001493c:     	cbnz	x14, 0x100014920 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x318>
100014940:     	cmp	x25, x11
100014944:     	b.eq	0x100014a70 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x468>
100014948:     	tst	x25, #0x38
10001494c:     	b.eq	0x100014a34 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x42c>
100014950:     	and	x12, x25, #0xfffffffffffffff8
100014954:     	sub	x13, x21, x12
100014958:     	sub	x10, x10, x12
10001495c:     	sub	x14, x21, x11
100014960:     	sub	x14, x14, #8
100014964:     	sub	x15, x14, x24
100014968:     	add	x15, x0, x15
10001496c:     	sub	x11, x11, x12
100014970:     	ldr	d0, [x14], #-8
100014974:     	str	d0, [x15], #-8
100014978:     	adds	x11, x11, #8
10001497c:     	b.ne	0x100014970 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x368>
100014980:     	mov	x21, x13
100014984:     	cmp	x25, x12
100014988:     	b.ne	0x100014a3c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x434>
10001498c:     	b	0x100014a70 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x468>
100014990:     	sub	x10, x10, x11
100014994:     	sub	x21, x21, x11
100014998:     	sub	x10, x10, #1
10001499c:     	ldrb	w11, [x21, #-1]!
1000149a0:     	strb	w11, [x10], #-1
1000149a4:     	cmp	x21, x24
1000149a8:     	b.ne	0x10001499c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x394>
1000149ac:     	b	0x100014a70 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x468>
1000149b0:     	and	x11, x25, #0xffffffffffffffc0
1000149b4:     	sub	x12, x21, #32
1000149b8:     	sub	x13, x12, x24
1000149bc:     	add	x13, x0, x13
1000149c0:     	mov	x14, x11
1000149c4:     	ldp	q1, q0, [x12]
1000149c8:     	ldp	q3, q2, [x12, #-32]
1000149cc:     	stp	q1, q0, [x13]
1000149d0:     	stp	q3, q2, [x13, #-32]
1000149d4:     	sub	x12, x12, #64
1000149d8:     	sub	x13, x13, #64
1000149dc:     	sub	x14, x14, #64
1000149e0:     	cbnz	x14, 0x1000149c4 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x3bc>
1000149e4:     	cmp	x25, x11
1000149e8:     	b.eq	0x100014a70 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x468>
1000149ec:     	tst	x25, #0x38
1000149f0:     	b.eq	0x100014a54 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x44c>
1000149f4:     	and	x12, x25, #0xfffffffffffffff8
1000149f8:     	sub	x13, x21, x12
1000149fc:     	sub	x10, x10, x12
100014a00:     	sub	x14, x21, x11
100014a04:     	sub	x14, x14, #8
100014a08:     	sub	x15, x14, x24
100014a0c:     	add	x15, x0, x15
100014a10:     	sub	x11, x11, x12
100014a14:     	ldr	d0, [x14], #-8
100014a18:     	str	d0, [x15], #-8
100014a1c:     	adds	x11, x11, #8
100014a20:     	b.ne	0x100014a14 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x40c>
100014a24:     	mov	x21, x13
100014a28:     	cmp	x25, x12
100014a2c:     	b.ne	0x100014a5c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x454>
100014a30:     	b	0x100014a70 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x468>
100014a34:     	sub	x10, x10, x11
100014a38:     	sub	x21, x21, x11
100014a3c:     	sub	x10, x10, #1
100014a40:     	ldrb	w11, [x21, #-1]!
100014a44:     	strb	w11, [x10], #-1
100014a48:     	cmp	x21, x24
100014a4c:     	b.ne	0x100014a40 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x438>
100014a50:     	b	0x100014a70 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x468>
100014a54:     	sub	x10, x10, x11
100014a58:     	sub	x21, x21, x11
100014a5c:     	sub	x10, x10, #1
100014a60:     	ldrb	w11, [x21, #-1]!
100014a64:     	strb	w11, [x10], #-1
100014a68:     	cmp	x21, x24
100014a6c:     	b.ne	0x100014a60 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x458>
100014a70:     	ldr	x21, [x20]
100014a74:     	stp	x0, x9, [x19, #40]
100014a78:     	str	x8, [x19, #56]
100014a7c:     	cbz	x21, 0x1000148f4 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)+0x2ec>
100014a80:     	mov	x0, x21
100014a84:     	ldp	x29, x30, [sp, #64]
100014a88:     	ldp	x20, x19, [sp, #48]
100014a8c:     	ldp	x22, x21, [sp, #32]
100014a90:     	ldp	x24, x23, [sp, #16]
100014a94:     	ldp	x26, x25, [sp], #80
100014a98:     	b	0x10002f014 <_vsnprintf+0x10002f014>
100014a9c:     	mov	x0, x20
100014aa0:     	bl	0x100015da8 <std::__1::vector<char, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>

0000000100014aa4 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__bracket_expression[abi:ue170006](std::__1::regex_traits<char> const&, std::__1::__node<char>*, bool, bool, bool)>:
100014aa4:     	sub	sp, sp, #112
100014aa8:     	stp	x26, x25, [sp, #32]
100014aac:     	stp	x24, x23, [sp, #48]
100014ab0:     	stp	x22, x21, [sp, #64]
100014ab4:     	stp	x20, x19, [sp, #80]
100014ab8:     	stp	x29, x30, [sp, #96]
100014abc:     	add	x29, sp, #96
100014ac0:     	mov	x21, x5
100014ac4:     	mov	x23, x4
100014ac8:     	mov	x24, x3
100014acc:     	mov	x22, x1
100014ad0:     	mov	x19, x0
100014ad4:     	adrp	x8, 0x100034000 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__bracket_expression[abi:ue170006](std::__1::regex_traits<char> const&, std::__1::__node<char>*, bool, bool, bool)+0xb0>
100014ad8:     	add	x8, x8, #2536
100014adc:     	stp	x8, x2, [x0]
100014ae0:     	add	x20, x0, #16
100014ae4:     	mov	x0, x20
100014ae8:     	bl	0x10002ef6c <_vsnprintf+0x10002ef6c>
100014aec:     	ldur	q0, [x22, #8]
100014af0:     	movi.2d	v1, #0000000000000000
100014af4:     	mov	x22, x19
100014af8:     	str	q1, [x22, #88]!
100014afc:     	stur	q0, [x22, #-64]
100014b00:     	mov	x25, x22
100014b04:     	str	q1, [x25, #-48]!
100014b08:     	stp	q1, q1, [x22, #-32]
100014b0c:     	stp	q1, q1, [x22, #16]
100014b10:     	stp	q1, q1, [x22, #48]
100014b14:     	strb	w24, [x22, #80]
100014b18:     	strb	w23, [x22, #81]
100014b1c:     	strb	w21, [x22, #82]
100014b20:     	mov	x0, sp
100014b24:     	mov	x1, x20
100014b28:     	bl	0x10002ef6c <_vsnprintf+0x10002ef6c>
100014b2c:     	add	x8, sp, #8
100014b30:     	mov	x0, sp
100014b34:     	bl	0x10002ece4 <_vsnprintf+0x10002ece4>
100014b38:     	ldrsb	w8, [sp, #31]
100014b3c:     	tbnz	w8, #31, 0x100014b58 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__bracket_expression[abi:ue170006](std::__1::regex_traits<char> const&, std::__1::__node<char>*, bool, bool, bool)+0xb4>
100014b40:     	cmp	w8, #1
100014b44:     	b.ne	0x100014b74 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__bracket_expression[abi:ue170006](std::__1::regex_traits<char> const&, std::__1::__node<char>*, bool, bool, bool)+0xd0>
100014b48:     	ldrb	w8, [sp, #8]
100014b4c:     	cmp	w8, #67
100014b50:     	cset	w20, ne
100014b54:     	b	0x100014b84 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__bracket_expression[abi:ue170006](std::__1::regex_traits<char> const&, std::__1::__node<char>*, bool, bool, bool)+0xe0>
100014b58:     	ldp	x0, x8, [sp, #8]
100014b5c:     	cmp	x8, #1
100014b60:     	b.ne	0x100014b7c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__bracket_expression[abi:ue170006](std::__1::regex_traits<char> const&, std::__1::__node<char>*, bool, bool, bool)+0xd8>
100014b64:     	ldrb	w8, [x0]
100014b68:     	cmp	w8, #67
100014b6c:     	cset	w20, ne
100014b70:     	b	0x100014b80 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__bracket_expression[abi:ue170006](std::__1::regex_traits<char> const&, std::__1::__node<char>*, bool, bool, bool)+0xdc>
100014b74:     	mov	w20, #1
100014b78:     	b	0x100014b84 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__bracket_expression[abi:ue170006](std::__1::regex_traits<char> const&, std::__1::__node<char>*, bool, bool, bool)+0xe0>
100014b7c:     	mov	w20, #1
100014b80:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100014b84:     	mov	x0, sp
100014b88:     	bl	0x10002ef84 <_vsnprintf+0x10002ef84>
100014b8c:     	strb	w20, [x19, #171]
100014b90:     	mov	x0, x19
100014b94:     	ldp	x29, x30, [sp, #96]
100014b98:     	ldp	x20, x19, [sp, #80]
100014b9c:     	ldp	x22, x21, [sp, #64]
100014ba0:     	ldp	x24, x23, [sp, #48]
100014ba4:     	ldp	x26, x25, [sp, #32]
100014ba8:     	add	sp, sp, #112
100014bac:     	ret
100014bb0:     	mov	x21, x0
100014bb4:     	add	x23, x19, #136
100014bb8:     	mov	x0, sp
100014bbc:     	bl	0x10002ef84 <_vsnprintf+0x10002ef84>
100014bc0:     	mov	x0, x23
100014bc4:     	bl	0x100006bdc <std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::~vector[abi:ue170006]()>
100014bc8:     	ldr	x0, [x19, #112]
100014bcc:     	cbnz	x0, 0x100014c20 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__bracket_expression[abi:ue170006](std::__1::regex_traits<char> const&, std::__1::__node<char>*, bool, bool, bool)+0x17c>
100014bd0:     	mov	x0, x22
100014bd4:     	bl	0x100014c4c <std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::~vector[abi:ue170006]()>
100014bd8:     	ldr	x0, [x19, #64]
100014bdc:     	cbnz	x0, 0x100014c38 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__bracket_expression[abi:ue170006](std::__1::regex_traits<char> const&, std::__1::__node<char>*, bool, bool, bool)+0x194>
100014be0:     	ldr	x0, [x25]
100014be4:     	cbz	x0, 0x100014bf0 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__bracket_expression[abi:ue170006](std::__1::regex_traits<char> const&, std::__1::__node<char>*, bool, bool, bool)+0x14c>
100014be8:     	str	x0, [x19, #48]
100014bec:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100014bf0:     	mov	x0, x20
100014bf4:     	bl	0x10002ef84 <_vsnprintf+0x10002ef84>
100014bf8:     	adrp	x8, 0x100034000 <std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::~vector[abi:ue170006]()+0x2c>
100014bfc:     	add	x8, x8, #1696
100014c00:     	str	x8, [x19]
100014c04:     	ldr	x0, [x19, #8]
100014c08:     	cbz	x0, 0x100014c18 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__bracket_expression[abi:ue170006](std::__1::regex_traits<char> const&, std::__1::__node<char>*, bool, bool, bool)+0x174>
100014c0c:     	ldr	x8, [x0]
100014c10:     	ldr	x8, [x8, #8]
100014c14:     	blr	x8
100014c18:     	mov	x0, x21
100014c1c:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
100014c20:     	str	x0, [x19, #120]
100014c24:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100014c28:     	mov	x0, x22
100014c2c:     	bl	0x100014c4c <std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::~vector[abi:ue170006]()>
100014c30:     	ldr	x0, [x19, #64]
100014c34:     	cbz	x0, 0x100014be0 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__bracket_expression[abi:ue170006](std::__1::regex_traits<char> const&, std::__1::__node<char>*, bool, bool, bool)+0x13c>
100014c38:     	str	x0, [x19, #72]
100014c3c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100014c40:     	ldr	x0, [x25]
100014c44:     	cbnz	x0, 0x100014be8 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__bracket_expression[abi:ue170006](std::__1::regex_traits<char> const&, std::__1::__node<char>*, bool, bool, bool)+0x144>
100014c48:     	b	0x100014bf0 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__bracket_expression[abi:ue170006](std::__1::regex_traits<char> const&, std::__1::__node<char>*, bool, bool, bool)+0x14c>

0000000100014c4c <std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::~vector[abi:ue170006]()>:
100014c4c:     	stp	x22, x21, [sp, #-48]!
100014c50:     	stp	x20, x19, [sp, #16]
100014c54:     	stp	x29, x30, [sp, #32]
100014c58:     	add	x29, sp, #32
100014c5c:     	mov	x19, x0
100014c60:     	ldr	x20, [x0]
100014c64:     	cbz	x20, 0x100014ccc <std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::~vector[abi:ue170006]()+0x80>
100014c68:     	ldr	x21, [x19, #8]
100014c6c:     	mov	x0, x20
100014c70:     	cmp	x21, x20
100014c74:     	b.ne	0x100014c88 <std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::~vector[abi:ue170006]()+0x3c>
100014c78:     	b	0x100014cc4 <std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::~vector[abi:ue170006]()+0x78>
100014c7c:     	mov	x21, x22
100014c80:     	cmp	x22, x20
100014c84:     	b.eq	0x100014cc0 <std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::~vector[abi:ue170006]()+0x74>
100014c88:     	ldursb	w8, [x21, #-1]
100014c8c:     	tbnz	w8, #31, 0x100014ca0 <std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::~vector[abi:ue170006]()+0x54>
100014c90:     	sub	x22, x21, #48
100014c94:     	ldursb	w8, [x21, #-25]
100014c98:     	tbz	w8, #31, 0x100014c7c <std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::~vector[abi:ue170006]()+0x30>
100014c9c:     	b	0x100014cb4 <std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::~vector[abi:ue170006]()+0x68>
100014ca0:     	ldur	x0, [x21, #-24]
100014ca4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100014ca8:     	sub	x22, x21, #48
100014cac:     	ldursb	w8, [x21, #-25]
100014cb0:     	tbz	w8, #31, 0x100014c7c <std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::~vector[abi:ue170006]()+0x30>
100014cb4:     	ldur	x0, [x21, #-48]
100014cb8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100014cbc:     	b	0x100014c7c <std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::~vector[abi:ue170006]()+0x30>
100014cc0:     	ldr	x0, [x19]
100014cc4:     	str	x20, [x19, #8]
100014cc8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100014ccc:     	mov	x0, x19
100014cd0:     	ldp	x29, x30, [sp, #32]
100014cd4:     	ldp	x20, x19, [sp, #16]
100014cd8:     	ldp	x22, x21, [sp], #48
100014cdc:     	ret

0000000100014ce0 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::~__bracket_expression()>:
100014ce0:     	b	0x10001578c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::~__bracket_expression()>

0000000100014ce4 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::~__bracket_expression()>:
100014ce4:     	stp	x29, x30, [sp, #-16]!
100014ce8:     	mov	x29, sp
100014cec:     	bl	0x10001578c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::~__bracket_expression()>
100014cf0:     	ldp	x29, x30, [sp], #16
100014cf4:     	b	0x10002f014 <_vsnprintf+0x10002f014>

0000000100014cf8 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const>:
100014cf8:     	sub	sp, sp, #192
100014cfc:     	stp	x28, x27, [sp, #96]
100014d00:     	stp	x26, x25, [sp, #112]
100014d04:     	stp	x24, x23, [sp, #128]
100014d08:     	stp	x22, x21, [sp, #144]
100014d0c:     	stp	x20, x19, [sp, #160]
100014d10:     	stp	x29, x30, [sp, #176]
100014d14:     	add	x29, sp, #176
100014d18:     	mov	x19, x1
100014d1c:     	mov	x20, x0
100014d20:     	ldp	x8, x9, [x1, #16]
100014d24:     	cmp	x8, x9
100014d28:     	b.eq	0x100014f3c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x244>
100014d2c:     	ldrb	w10, [x20, #171]
100014d30:     	cbz	w10, 0x100014f54 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x25c>
100014d34:     	add	x10, x8, #1
100014d38:     	cmp	x10, x9
100014d3c:     	b.eq	0x100014f54 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x25c>
100014d40:     	ldrb	w9, [x8]
100014d44:     	strb	w9, [sp, #40]
100014d48:     	ldrb	w21, [x8, #1]
100014d4c:     	strb	w21, [sp, #41]
100014d50:     	ldrb	w8, [x20, #169]
100014d54:     	cbz	w8, 0x100014d88 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x90>
100014d58:     	ldr	x0, [x20, #24]
100014d5c:     	ldr	x8, [x0]
100014d60:     	ldr	x8, [x8, #40]
100014d64:     	sxtb	w1, w9
100014d68:     	blr	x8
100014d6c:     	strb	w0, [sp, #40]
100014d70:     	ldr	x0, [x20, #24]
100014d74:     	ldr	x8, [x0]
100014d78:     	ldr	x8, [x8, #40]
100014d7c:     	sxtb	w1, w21
100014d80:     	blr	x8
100014d84:     	strb	w0, [sp, #41]
100014d88:     	add	x22, x20, #16
100014d8c:     	add	x8, sp, #40
100014d90:     	orr	x23, x8, #0x2
100014d94:     	add	x8, sp, #72
100014d98:     	add	x1, sp, #40
100014d9c:     	mov	x0, x22
100014da0:     	mov	x2, x23
100014da4:     	mov	w3, #0
100014da8:     	bl	0x1000159ec <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<char*>(char*, char*, char) const>
100014dac:     	ldrsb	w8, [sp, #95]
100014db0:     	tbnz	w8, #31, 0x100014f48 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x250>
100014db4:     	cbz	w8, 0x100014f54 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x25c>
100014db8:     	ldp	x11, x8, [x20, #112]
100014dbc:     	subs	x8, x8, x11
100014dc0:     	b.eq	0x100014dfc <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x104>
100014dc4:     	asr	x10, x8, #1
100014dc8:     	ldrb	w8, [sp, #40]
100014dcc:     	ldrb	w9, [sp, #41]
100014dd0:     	cmp	x10, #1
100014dd4:     	csinc	x10, x10, xzr, hi
100014dd8:     	add	x11, x11, #1
100014ddc:     	ldurb	w12, [x11, #-1]
100014de0:     	ldrb	w13, [x11]
100014de4:     	cmp	w8, w12
100014de8:     	ccmp	w9, w13, #0, eq
100014dec:     	b.eq	0x1000155e4 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x8ec>
100014df0:     	add	x11, x11, #2
100014df4:     	subs	x10, x10, #1
100014df8:     	b.ne	0x100014ddc <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0xe4>
100014dfc:     	ldrb	w8, [x20, #170]
100014e00:     	cbz	w8, 0x1000151a4 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x4ac>
100014e04:     	ldp	x8, x9, [x20, #88]
100014e08:     	cmp	x8, x9
100014e0c:     	b.eq	0x1000151a4 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x4ac>
100014e10:     	add	x21, sp, #72
100014e14:     	add	x8, sp, #72
100014e18:     	add	x1, sp, #40
100014e1c:     	mov	x0, x22
100014e20:     	mov	x2, x23
100014e24:     	bl	0x1000158d0 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::transform<char*>(char*, char*) const>
100014e28:     	ldp	x8, x9, [x20, #88]
100014e2c:     	ldrb	w12, [sp, #95]
100014e30:     	subs	x9, x9, x8
100014e34:     	b.eq	0x100015378 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x680>
100014e38:     	stp	x23, x22, [sp, #24]
100014e3c:     	mov	x26, #0
100014e40:     	mov	x10, #-6148914691236517206
100014e44:     	movk	x10, #43691
100014e48:     	movk	x10, #10922, lsl #48
100014e4c:     	smulh	x9, x9, x10
100014e50:     	asr	x10, x9, #3
100014e54:     	add	x27, x10, x9, lsr #63
100014e58:     	sxtb	w9, w12
100014e5c:     	ldp	x11, x10, [sp, #72]
100014e60:     	cmp	w9, #0
100014e64:     	str	x12, [sp, #16]
100014e68:     	csel	x28, x10, x12, lt
100014e6c:     	csel	x23, x11, x21, lt
100014e70:     	cmp	x27, #1
100014e74:     	csinc	x24, x27, xzr, hi
100014e78:     	add	x21, x8, #47
100014e7c:     	mov	w25, #1
100014e80:     	b	0x100014e9c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x1a4>
100014e84:     	add	x26, x26, #1
100014e88:     	cmp	x26, x27
100014e8c:     	cset	w25, lo
100014e90:     	add	x21, x21, #48
100014e94:     	cmp	x24, x26
100014e98:     	b.eq	0x100015364 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x66c>
100014e9c:     	mov	x8, x21
100014ea0:     	ldr	x9, [x8, #-47]!
100014ea4:     	ldrb	w10, [x8, #23]
100014ea8:     	sxtb	w11, w10
100014eac:     	ldr	x12, [x8, #8]
100014eb0:     	cmp	w11, #0
100014eb4:     	csel	x22, x12, x10, lt
100014eb8:     	csel	x1, x9, x8, lt
100014ebc:     	cmp	x22, x28
100014ec0:     	csel	x2, x22, x28, lo
100014ec4:     	mov	x0, x23
100014ec8:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
100014ecc:     	cmp	x28, x22
100014ed0:     	cset	w8, hs
100014ed4:     	cmp	w0, #0
100014ed8:     	cset	w9, ge
100014edc:     	csel	w8, w8, w9, eq
100014ee0:     	cmp	w8, #1
100014ee4:     	b.ne	0x100014e84 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x18c>
100014ee8:     	ldrb	w8, [x21]
100014eec:     	sxtb	w9, w8
100014ef0:     	mov	x10, x21
100014ef4:     	ldr	x11, [x10, #-23]!
100014ef8:     	ldur	x12, [x21, #-15]
100014efc:     	cmp	w9, #0
100014f00:     	csel	x22, x12, x8, lt
100014f04:     	csel	x0, x11, x10, lt
100014f08:     	cmp	x28, x22
100014f0c:     	csel	x2, x28, x22, lo
100014f10:     	mov	x1, x23
100014f14:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
100014f18:     	cmp	x22, x28
100014f1c:     	cset	w8, hs
100014f20:     	cmp	w0, #0
100014f24:     	cset	w9, ge
100014f28:     	csel	w8, w8, w9, eq
100014f2c:     	tbz	w8, #0, 0x100014e84 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x18c>
100014f30:     	mov	w28, #1
100014f34:     	mov	w26, #5
100014f38:     	b	0x10001536c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x674>
100014f3c:     	mov	x24, #0
100014f40:     	ldrb	w28, [x20, #168]
100014f44:     	b	0x1000155f0 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x8f8>
100014f48:     	ldp	x0, x21, [sp, #72]
100014f4c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100014f50:     	cbnz	x21, 0x100014db8 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0xc0>
100014f54:     	mov	w28, #0
100014f58:     	mov	w24, #1
100014f5c:     	ldr	x8, [x19, #16]
100014f60:     	ldrb	w21, [x8]
100014f64:     	strb	w21, [sp, #71]
100014f68:     	ldrb	w8, [x20, #169]
100014f6c:     	cbz	w8, 0x100014f8c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x294>
100014f70:     	ldr	x0, [x20, #24]
100014f74:     	ldr	x8, [x0]
100014f78:     	ldr	x8, [x8, #40]
100014f7c:     	sxtb	w1, w21
100014f80:     	blr	x8
100014f84:     	mov	x21, x0
100014f88:     	strb	w0, [sp, #71]
100014f8c:     	ldp	x8, x9, [x20, #40]
100014f90:     	subs	x9, x9, x8
100014f94:     	b.eq	0x100014fb8 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x2c0>
100014f98:     	cmp	x9, #1
100014f9c:     	csinc	x9, x9, xzr, hi
100014fa0:     	ldrb	w10, [x8]
100014fa4:     	cmp	w10, w21, uxtb
100014fa8:     	b.eq	0x100015024 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x32c>
100014fac:     	add	x8, x8, #1
100014fb0:     	subs	x9, x9, #1
100014fb4:     	b.ne	0x100014fa0 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x2a8>
100014fb8:     	ldr	w8, [x20, #164]
100014fbc:     	cbnz	w8, 0x100014fcc <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x2d4>
100014fc0:     	ldp	x9, x10, [x20, #64]
100014fc4:     	cmp	x9, x10
100014fc8:     	b.eq	0x10001502c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x334>
100014fcc:     	tbnz	w21, #7, 0x100014ff0 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x2f8>
100014fd0:     	ldr	x9, [x20, #24]
100014fd4:     	ldr	x9, [x9, #16]
100014fd8:     	and	x10, x21, #0xff
100014fdc:     	ldr	w9, [x9, x10, lsl #2]
100014fe0:     	tst	w9, w8
100014fe4:     	b.eq	0x100014ff0 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x2f8>
100014fe8:     	mov	w22, #1
100014fec:     	b	0x100015000 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x308>
100014ff0:     	and	w9, w21, #0xff
100014ff4:     	cmp	w9, #95
100014ff8:     	cset	w9, eq
100014ffc:     	and	w22, w9, w8, lsr #7
100015000:     	ldp	x0, x23, [x20, #64]
100015004:     	sub	x2, x23, x0
100015008:     	sxtb	w1, w21
10001500c:     	bl	0x10002f1ac <_vsnprintf+0x10002f1ac>
100015010:     	cmp	x0, #0
100015014:     	csel	x8, x23, x0, eq
100015018:     	tbnz	w22, #0, 0x10001502c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x334>
10001501c:     	cmp	x8, x23
100015020:     	b.ne	0x10001502c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x334>
100015024:     	mov	w28, #1
100015028:     	b	0x1000155f0 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x8f8>
10001502c:     	ldp	x8, x9, [x20, #88]
100015030:     	cmp	x8, x9
100015034:     	b.eq	0x1000151c8 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x4d0>
100015038:     	ldrb	w10, [x20, #170]
10001503c:     	str	w28, [sp, #32]
100015040:     	cbz	w10, 0x1000152dc <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x5e4>
100015044:     	mov	w8, #1
100015048:     	strb	w8, [sp, #95]
10001504c:     	strb	w21, [sp, #72]
100015050:     	add	x8, sp, #72
100015054:     	orr	x2, x8, #0x1
100015058:     	strb	wzr, [sp, #73]
10001505c:     	ldr	x0, [x20, #32]
100015060:     	ldr	x8, [x0]
100015064:     	ldr	x9, [x8, #32]
100015068:     	add	x8, sp, #40
10001506c:     	add	x1, sp, #72
100015070:     	blr	x9
100015074:     	ldrsb	w8, [sp, #95]
100015078:     	tbz	w8, #31, 0x100015084 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x38c>
10001507c:     	ldr	x0, [sp, #72]
100015080:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100015084:     	ldp	x8, x9, [x20, #88]
100015088:     	ldrb	w12, [sp, #63]
10001508c:     	subs	x9, x9, x8
100015090:     	b.eq	0x1000152f8 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x600>
100015094:     	stp	x19, x24, [sp, #16]
100015098:     	mov	x27, #0
10001509c:     	mov	x10, #-6148914691236517206
1000150a0:     	movk	x10, #43691
1000150a4:     	movk	x10, #10922, lsl #48
1000150a8:     	smulh	x9, x9, x10
1000150ac:     	asr	x10, x9, #3
1000150b0:     	add	x28, x10, x9, lsr #63
1000150b4:     	sxtb	w9, w12
1000150b8:     	ldp	x11, x10, [sp, #40]
1000150bc:     	cmp	w9, #0
1000150c0:     	str	x12, [sp, #8]
1000150c4:     	csel	x23, x10, x12, lt
1000150c8:     	add	x9, sp, #40
1000150cc:     	csel	x22, x11, x9, lt
1000150d0:     	cmp	x28, #1
1000150d4:     	csinc	x24, x28, xzr, hi
1000150d8:     	add	x25, x8, #47
1000150dc:     	mov	w26, #1
1000150e0:     	b	0x1000150fc <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x404>
1000150e4:     	add	x27, x27, #1
1000150e8:     	cmp	x27, x28
1000150ec:     	cset	w26, lo
1000150f0:     	add	x25, x25, #48
1000150f4:     	cmp	x24, x27
1000150f8:     	b.eq	0x1000151ac <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x4b4>
1000150fc:     	mov	x8, x25
100015100:     	ldr	x9, [x8, #-47]!
100015104:     	ldrb	w10, [x8, #23]
100015108:     	sxtb	w11, w10
10001510c:     	ldr	x12, [x8, #8]
100015110:     	cmp	w11, #0
100015114:     	csel	x19, x12, x10, lt
100015118:     	csel	x1, x9, x8, lt
10001511c:     	cmp	x19, x23
100015120:     	csel	x2, x19, x23, lo
100015124:     	mov	x0, x22
100015128:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
10001512c:     	cmp	x23, x19
100015130:     	cset	w8, hs
100015134:     	cmp	w0, #0
100015138:     	cset	w9, ge
10001513c:     	csel	w8, w8, w9, eq
100015140:     	cmp	w8, #1
100015144:     	b.ne	0x1000150e4 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x3ec>
100015148:     	ldrb	w8, [x25]
10001514c:     	sxtb	w9, w8
100015150:     	mov	x10, x25
100015154:     	ldr	x11, [x10, #-23]!
100015158:     	ldur	x12, [x25, #-15]
10001515c:     	cmp	w9, #0
100015160:     	csel	x19, x12, x8, lt
100015164:     	csel	x0, x11, x10, lt
100015168:     	cmp	x23, x19
10001516c:     	csel	x2, x23, x19, lo
100015170:     	mov	x1, x22
100015174:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
100015178:     	cmp	x19, x23
10001517c:     	cset	w8, hs
100015180:     	cmp	w0, #0
100015184:     	cset	w9, ge
100015188:     	csel	w8, w8, w9, eq
10001518c:     	tbz	w8, #0, 0x1000150e4 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x3ec>
100015190:     	mov	w28, #1
100015194:     	ldp	x19, x24, [sp, #16]
100015198:     	ldr	x12, [sp, #8]
10001519c:     	tbz	w12, #7, 0x1000151c4 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x4cc>
1000151a0:     	b	0x1000151bc <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x4c4>
1000151a4:     	mov	w28, #0
1000151a8:     	b	0x100015394 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x69c>
1000151ac:     	ldp	x19, x24, [sp, #16]
1000151b0:     	ldr	w28, [sp, #32]
1000151b4:     	ldr	x12, [sp, #8]
1000151b8:     	tbz	w12, #7, 0x1000151c4 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x4cc>
1000151bc:     	ldr	x0, [sp, #40]
1000151c0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000151c4:     	tbnz	w26, #0, 0x1000155f0 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x8f8>
1000151c8:     	ldp	x8, x9, [x20, #136]
1000151cc:     	cmp	x8, x9
1000151d0:     	b.eq	0x100015320 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x628>
1000151d4:     	add	x0, x20, #16
1000151d8:     	add	x8, sp, #71
1000151dc:     	add	x2, x8, #1
1000151e0:     	add	x8, sp, #72
1000151e4:     	add	x1, sp, #71
1000151e8:     	mov	w3, #0
1000151ec:     	bl	0x100015c24 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__transform_primary<char*>(char*, char*, char) const>
1000151f0:     	ldp	x27, x8, [x20, #136]
1000151f4:     	ldrb	w26, [sp, #95]
1000151f8:     	subs	x8, x8, x27
1000151fc:     	b.eq	0x100015308 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x610>
100015200:     	str	x24, [sp, #24]
100015204:     	str	w28, [sp, #32]
100015208:     	mov	x28, #0
10001520c:     	mov	x9, #-6148914691236517206
100015210:     	movk	x9, #43691
100015214:     	movk	x9, #10922, lsl #48
100015218:     	smulh	x8, x8, x9
10001521c:     	asr	x9, x8, #2
100015220:     	add	x21, x9, x8, lsr #63
100015224:     	sxtb	w8, w26
100015228:     	cmp	w8, #0
10001522c:     	ldp	x24, x8, [sp, #72]
100015230:     	csel	x22, x8, x26, lt
100015234:     	cmp	x21, #1
100015238:     	csinc	x23, x21, xzr, hi
10001523c:     	mov	w25, #1
100015240:     	mov	w13, #24
100015244:     	b	0x100015270 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x578>
100015248:     	mov	x0, x24
10001524c:     	mov	x2, x22
100015250:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
100015254:     	mov	w13, #24
100015258:     	cbz	w0, 0x100015700 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0xa08>
10001525c:     	add	x28, x28, #1
100015260:     	cmp	x28, x21
100015264:     	cset	w25, lo
100015268:     	cmp	x28, x23
10001526c:     	b.eq	0x1000156c4 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x9cc>
100015270:     	madd	x8, x28, x13, x27
100015274:     	ldrb	w10, [x8, #23]
100015278:     	sxtb	w9, w10
10001527c:     	ldr	x11, [x8, #8]
100015280:     	cmp	w9, #0
100015284:     	csel	x10, x11, x10, lt
100015288:     	cmp	x22, x10
10001528c:     	b.ne	0x10001525c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x564>
100015290:     	ldr	x10, [x8]
100015294:     	cmp	w9, #0
100015298:     	csel	x1, x10, x8, lt
10001529c:     	tbnz	w26, #7, 0x100015248 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x550>
1000152a0:     	cbz	x22, 0x1000156dc <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x9e4>
1000152a4:     	add	x8, sp, #72
1000152a8:     	mov	x9, x26
1000152ac:     	ldrb	w10, [x8]
1000152b0:     	ldrb	w11, [x1]
1000152b4:     	cmp	w10, w11
1000152b8:     	b.ne	0x10001525c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x564>
1000152bc:     	add	x8, x8, #1
1000152c0:     	add	x1, x1, #1
1000152c4:     	subs	x9, x9, #1
1000152c8:     	b.ne	0x1000152ac <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x5b4>
1000152cc:     	mov	w28, #1
1000152d0:     	ldr	x24, [sp, #24]
1000152d4:     	tbz	w26, #7, 0x100015318 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x620>
1000152d8:     	b	0x100015310 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x618>
1000152dc:     	mov	w10, #1
1000152e0:     	strb	w10, [sp, #63]
1000152e4:     	strb	w21, [sp, #40]
1000152e8:     	strb	wzr, [sp, #41]
1000152ec:     	and	w12, w10, #0xff
1000152f0:     	subs	x9, x9, x8
1000152f4:     	b.ne	0x100015094 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x39c>
1000152f8:     	mov	w26, #0
1000152fc:     	ldr	w28, [sp, #32]
100015300:     	tbz	w12, #7, 0x1000151c4 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x4cc>
100015304:     	b	0x1000151bc <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x4c4>
100015308:     	mov	w25, #0
10001530c:     	tbz	w26, #7, 0x100015318 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x620>
100015310:     	ldr	x0, [sp, #72]
100015314:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100015318:     	tbnz	w25, #0, 0x1000155f0 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x8f8>
10001531c:     	ldrb	w21, [sp, #71]
100015320:     	tbnz	w21, #7, 0x1000155f0 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x8f8>
100015324:     	ldr	w8, [x20, #160]
100015328:     	ldr	x9, [x20, #24]
10001532c:     	ldr	x9, [x9, #16]
100015330:     	mov	x10, x21
100015334:     	and	x10, x21, #0xff
100015338:     	ldr	w9, [x9, x10, lsl #2]
10001533c:     	tst	w9, w8
100015340:     	b.ne	0x100015024 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x32c>
100015344:     	and	w9, w21, #0xff
100015348:     	cmp	w9, #95
10001534c:     	cset	w9, eq
100015350:     	and	w8, w8, #0x80
100015354:     	and	w8, w9, w8, lsr #7
100015358:     	cmp	w8, #1
10001535c:     	b.eq	0x100015024 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x32c>
100015360:     	b	0x1000155f0 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x8f8>
100015364:     	mov	w26, #0
100015368:     	mov	w28, #0
10001536c:     	ldp	x23, x22, [sp, #24]
100015370:     	ldr	x12, [sp, #16]
100015374:     	b	0x100015384 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x68c>
100015378:     	mov	w25, #0
10001537c:     	mov	w26, #0
100015380:     	mov	w28, #0
100015384:     	tbz	w12, #7, 0x100015390 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x698>
100015388:     	ldr	x0, [sp, #72]
10001538c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100015390:     	tbnz	w25, #0, 0x100015514 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x81c>
100015394:     	ldp	x8, x9, [x20, #136]
100015398:     	cmp	x8, x9
10001539c:     	b.eq	0x100015534 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x83c>
1000153a0:     	add	x8, sp, #72
1000153a4:     	add	x1, sp, #40
1000153a8:     	mov	x0, x22
1000153ac:     	mov	x2, x23
1000153b0:     	mov	w3, #0
1000153b4:     	bl	0x100015c24 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__transform_primary<char*>(char*, char*, char) const>
1000153b8:     	ldp	x26, x8, [x20, #136]
1000153bc:     	ldrb	w9, [sp, #95]
1000153c0:     	sxtb	w24, w9
1000153c4:     	subs	x8, x8, x26
1000153c8:     	b.eq	0x100015480 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x788>
1000153cc:     	mov	x9, #-6148914691236517206
1000153d0:     	movk	x9, #43691
1000153d4:     	movk	x9, #10922, lsl #48
1000153d8:     	smulh	x8, x8, x9
1000153dc:     	asr	x9, x8, #2
1000153e0:     	add	x25, x9, x8, lsr #63
1000153e4:     	ldr	x9, [sp, #80]
1000153e8:     	and	x8, x24, #0xff
1000153ec:     	cmp	w24, #0
1000153f0:     	csel	x21, x9, x8, lt
1000153f4:     	tbnz	w24, #31, 0x100015490 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x798>
1000153f8:     	cbz	x21, 0x100015658 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x960>
1000153fc:     	mov	x9, #0
100015400:     	cmp	x25, #1
100015404:     	csinc	x10, x25, xzr, hi
100015408:     	mov	w27, #1
10001540c:     	mov	w11, #24
100015410:     	b	0x100015428 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x730>
100015414:     	add	x9, x9, #1
100015418:     	cmp	x9, x25
10001541c:     	cset	w27, lo
100015420:     	cmp	x9, x10
100015424:     	b.eq	0x10001570c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0xa14>
100015428:     	madd	x12, x9, x11, x26
10001542c:     	ldrb	w14, [x12, #23]
100015430:     	sxtb	w13, w14
100015434:     	ldr	x15, [x12, #8]
100015438:     	cmp	w13, #0
10001543c:     	csel	x14, x15, x14, lt
100015440:     	cmp	x21, x14
100015444:     	b.ne	0x100015414 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x71c>
100015448:     	ldr	x14, [x12]
10001544c:     	cmp	w13, #0
100015450:     	csel	x12, x14, x12, lt
100015454:     	add	x13, sp, #72
100015458:     	mov	x14, x8
10001545c:     	ldrb	w15, [x13]
100015460:     	ldrb	w16, [x12]
100015464:     	cmp	w15, w16
100015468:     	b.ne	0x100015414 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x71c>
10001546c:     	add	x13, x13, #1
100015470:     	add	x12, x12, #1
100015474:     	subs	x14, x14, #1
100015478:     	b.ne	0x10001545c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x764>
10001547c:     	b	0x1000154fc <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x804>
100015480:     	tbz	w24, #31, 0x100015534 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x83c>
100015484:     	ldr	x0, [sp, #72]
100015488:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001548c:     	b	0x100015534 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x83c>
100015490:     	str	w28, [sp, #32]
100015494:     	mov	x23, #0
100015498:     	ldr	x22, [sp, #72]
10001549c:     	cmp	x25, #1
1000154a0:     	csinc	x28, x25, xzr, hi
1000154a4:     	mov	w27, #1
1000154a8:     	b	0x1000154c4 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x7cc>
1000154ac:     	add	x23, x23, #1
1000154b0:     	cmp	x23, x25
1000154b4:     	cset	w27, lo
1000154b8:     	add	x26, x26, #24
1000154bc:     	cmp	x28, x23
1000154c0:     	b.eq	0x100015648 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x950>
1000154c4:     	ldrb	w9, [x26, #23]
1000154c8:     	sxtb	w8, w9
1000154cc:     	ldr	x10, [x26, #8]
1000154d0:     	cmp	w8, #0
1000154d4:     	csel	x9, x10, x9, lt
1000154d8:     	cmp	x21, x9
1000154dc:     	b.ne	0x1000154ac <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x7b4>
1000154e0:     	ldr	x9, [x26]
1000154e4:     	cmp	w8, #0
1000154e8:     	csel	x1, x9, x26, lt
1000154ec:     	mov	x0, x22
1000154f0:     	mov	x2, x21
1000154f4:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
1000154f8:     	cbnz	w0, 0x1000154ac <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x7b4>
1000154fc:     	mov	w28, #1
100015500:     	mov	w26, #5
100015504:     	tbz	w24, #31, 0x100015510 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x818>
100015508:     	ldr	x0, [sp, #72]
10001550c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100015510:     	tbz	w27, #0, 0x100015534 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x83c>
100015514:     	cbnz	w26, 0x1000155ec <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x8f4>
100015518:     	mov	w24, #2
10001551c:     	ldr	x8, [x19, #16]
100015520:     	ldrb	w21, [x8]
100015524:     	strb	w21, [sp, #71]
100015528:     	ldrb	w8, [x20, #169]
10001552c:     	cbnz	w8, 0x100014f70 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x278>
100015530:     	b	0x100014f8c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x294>
100015534:     	ldrsb	w8, [sp, #40]
100015538:     	tbnz	w8, #31, 0x1000155a8 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x8b0>
10001553c:     	and	x10, x8, #0xff
100015540:     	and	w8, w8, #0xff
100015544:     	ldr	w9, [x20, #160]
100015548:     	ldr	x11, [x20, #24]
10001554c:     	ldr	x11, [x11, #16]
100015550:     	ldr	w10, [x11, x10, lsl #2]
100015554:     	tst	w10, w9
100015558:     	b.ne	0x100015568 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x870>
10001555c:     	cmp	w8, #95
100015560:     	b.ne	0x10001558c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x894>
100015564:     	tbz	w9, #7, 0x10001558c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x894>
100015568:     	ldrsb	w12, [sp, #41]
10001556c:     	tbnz	w12, #31, 0x10001558c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x894>
100015570:     	and	x12, x12, #0xff
100015574:     	ldr	w11, [x11, x12, lsl #2]
100015578:     	tst	w11, w9
10001557c:     	b.ne	0x1000155e4 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x8ec>
100015580:     	tbz	w9, #7, 0x10001558c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x894>
100015584:     	cmp	w12, #95
100015588:     	b.eq	0x1000155e4 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x8ec>
10001558c:     	ldr	w9, [x20, #164]
100015590:     	tst	w10, w9
100015594:     	b.ne	0x1000155dc <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x8e4>
100015598:     	cmp	w8, #95
10001559c:     	b.ne	0x1000155ac <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x8b4>
1000155a0:     	tbnz	w9, #7, 0x1000155dc <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x8e4>
1000155a4:     	b	0x1000155ac <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x8b4>
1000155a8:     	ldr	w9, [x20, #164]
1000155ac:     	ldrsb	w8, [sp, #41]
1000155b0:     	tbnz	w8, #31, 0x1000155e4 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x8ec>
1000155b4:     	and	x10, x8, #0xff
1000155b8:     	ldr	x8, [x20, #24]
1000155bc:     	ldr	x8, [x8, #16]
1000155c0:     	ldr	w8, [x8, x10, lsl #2]
1000155c4:     	tst	w8, w9
1000155c8:     	b.ne	0x1000155dc <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x8e4>
1000155cc:     	mov	w8, #1
1000155d0:     	cmp	w10, #95
1000155d4:     	b.ne	0x1000155e8 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x8f0>
1000155d8:     	tbz	w9, #7, 0x1000155e8 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x8f0>
1000155dc:     	mov	x8, x28
1000155e0:     	b	0x1000155e8 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x8f0>
1000155e4:     	mov	w8, #1
1000155e8:     	mov	x28, x8
1000155ec:     	mov	w24, #2
1000155f0:     	ldrb	w8, [x20, #168]
1000155f4:     	cmp	w28, w8
1000155f8:     	b.ne	0x10001560c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x914>
1000155fc:     	mov	x8, #0
100015600:     	mov	w9, #-993
100015604:     	str	w9, [x19]
100015608:     	b	0x100015624 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x92c>
10001560c:     	mov	w8, #-995
100015610:     	str	w8, [x19]
100015614:     	ldr	x8, [x19, #16]
100015618:     	add	x8, x8, x24
10001561c:     	str	x8, [x19, #16]
100015620:     	ldr	x8, [x20, #8]
100015624:     	str	x8, [x19, #80]
100015628:     	ldp	x29, x30, [sp, #176]
10001562c:     	ldp	x20, x19, [sp, #160]
100015630:     	ldp	x22, x21, [sp, #144]
100015634:     	ldp	x24, x23, [sp, #128]
100015638:     	ldp	x26, x25, [sp, #112]
10001563c:     	ldp	x28, x27, [sp, #96]
100015640:     	add	sp, sp, #192
100015644:     	ret
100015648:     	mov	w26, #0
10001564c:     	ldr	w28, [sp, #32]
100015650:     	tbz	w24, #31, 0x100015510 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x818>
100015654:     	b	0x100015508 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x810>
100015658:     	ldrb	w8, [x26, #23]
10001565c:     	sxtb	w9, w8
100015660:     	ldr	x10, [x26, #8]
100015664:     	cmp	w9, #0
100015668:     	csel	x8, x10, x8, lt
10001566c:     	cbz	x8, 0x1000156d4 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x9dc>
100015670:     	cmp	x25, #1
100015674:     	csinc	x9, x25, xzr, hi
100015678:     	add	x10, x26, #47
10001567c:     	mov	w11, #1
100015680:     	mov	x8, x11
100015684:     	cmp	x9, x11
100015688:     	b.eq	0x1000156ec <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x9f4>
10001568c:     	ldrb	w11, [x10]
100015690:     	sxtb	w12, w11
100015694:     	ldur	x13, [x10, #-15]
100015698:     	cmp	w12, #0
10001569c:     	csel	x12, x13, x11, lt
1000156a0:     	add	x10, x10, #24
1000156a4:     	add	x11, x8, #1
1000156a8:     	cbnz	x12, 0x100015680 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x988>
1000156ac:     	mov	w28, #1
1000156b0:     	mov	w26, #5
1000156b4:     	cmp	x8, x25
1000156b8:     	cset	w27, lo
1000156bc:     	tbz	w24, #31, 0x100015510 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x818>
1000156c0:     	b	0x100015508 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x810>
1000156c4:     	ldr	w28, [sp, #32]
1000156c8:     	ldr	x24, [sp, #24]
1000156cc:     	tbz	w26, #7, 0x100015318 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x620>
1000156d0:     	b	0x100015310 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x618>
1000156d4:     	mov	w28, #1
1000156d8:     	b	0x1000155ec <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x8f4>
1000156dc:     	mov	w28, #1
1000156e0:     	ldr	x24, [sp, #24]
1000156e4:     	tbz	w25, #0, 0x10001531c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x624>
1000156e8:     	b	0x1000155f0 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x8f8>
1000156ec:     	mov	w26, #0
1000156f0:     	cmp	x8, x25
1000156f4:     	cset	w27, lo
1000156f8:     	tbz	w24, #31, 0x100015510 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x818>
1000156fc:     	b	0x100015508 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x810>
100015700:     	mov	w28, #1
100015704:     	ldr	x24, [sp, #24]
100015708:     	b	0x100015310 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x618>
10001570c:     	mov	w26, #0
100015710:     	tbz	w24, #31, 0x100015510 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x818>
100015714:     	b	0x100015508 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0x810>
100015718:     	mov	x19, x0
10001571c:     	ldrsb	w8, [sp, #95]
100015720:     	tbz	w8, #31, 0x10001572c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__exec(std::__1::__state<char>&) const+0xa34>
100015724:     	ldr	x0, [sp, #72]
100015728:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001572c:     	mov	x0, x19
100015730:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100015734 <std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>::~pair()>:
100015734:     	stp	x20, x19, [sp, #-32]!
100015738:     	stp	x29, x30, [sp, #16]
10001573c:     	add	x29, sp, #16
100015740:     	mov	x19, x0
100015744:     	ldrsb	w8, [x0, #47]
100015748:     	tbnz	w8, #31, 0x100015764 <std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>::~pair()+0x30>
10001574c:     	ldrsb	w8, [x19, #23]
100015750:     	tbnz	w8, #31, 0x100015774 <std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>::~pair()+0x40>
100015754:     	mov	x0, x19
100015758:     	ldp	x29, x30, [sp, #16]
10001575c:     	ldp	x20, x19, [sp], #32
100015760:     	ret
100015764:     	ldr	x0, [x19, #24]
100015768:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001576c:     	ldrsb	w8, [x19, #23]
100015770:     	tbz	w8, #31, 0x100015754 <std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>::~pair()+0x20>
100015774:     	ldr	x0, [x19]
100015778:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001577c:     	mov	x0, x19
100015780:     	ldp	x29, x30, [sp, #16]
100015784:     	ldp	x20, x19, [sp], #32
100015788:     	ret

000000010001578c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::~__bracket_expression()>:
10001578c:     	stp	x22, x21, [sp, #-48]!
100015790:     	stp	x20, x19, [sp, #16]
100015794:     	stp	x29, x30, [sp, #32]
100015798:     	add	x29, sp, #32
10001579c:     	mov	x19, x0
1000157a0:     	adrp	x8, 0x100034000 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::~__bracket_expression()+0x90>
1000157a4:     	add	x8, x8, #2536
1000157a8:     	str	x8, [x0]
1000157ac:     	ldr	x20, [x0, #136]
1000157b0:     	cbz	x20, 0x1000157f8 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::~__bracket_expression()+0x6c>
1000157b4:     	ldr	x8, [x19, #144]
1000157b8:     	mov	x0, x20
1000157bc:     	cmp	x8, x20
1000157c0:     	b.ne	0x1000157d4 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::~__bracket_expression()+0x48>
1000157c4:     	b	0x1000157f0 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::~__bracket_expression()+0x64>
1000157c8:     	mov	x8, x21
1000157cc:     	cmp	x21, x20
1000157d0:     	b.eq	0x1000157ec <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::~__bracket_expression()+0x60>
1000157d4:     	sub	x21, x8, #24
1000157d8:     	ldursb	w9, [x8, #-1]
1000157dc:     	tbz	w9, #31, 0x1000157c8 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::~__bracket_expression()+0x3c>
1000157e0:     	ldur	x0, [x8, #-24]
1000157e4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000157e8:     	b	0x1000157c8 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::~__bracket_expression()+0x3c>
1000157ec:     	ldr	x0, [x19, #136]
1000157f0:     	str	x20, [x19, #144]
1000157f4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000157f8:     	ldr	x0, [x19, #112]
1000157fc:     	cbz	x0, 0x100015808 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::~__bracket_expression()+0x7c>
100015800:     	str	x0, [x19, #120]
100015804:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100015808:     	ldr	x20, [x19, #88]
10001580c:     	cbz	x20, 0x100015874 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::~__bracket_expression()+0xe8>
100015810:     	ldr	x21, [x19, #96]
100015814:     	mov	x0, x20
100015818:     	cmp	x21, x20
10001581c:     	b.ne	0x100015830 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::~__bracket_expression()+0xa4>
100015820:     	b	0x10001586c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::~__bracket_expression()+0xe0>
100015824:     	mov	x21, x22
100015828:     	cmp	x22, x20
10001582c:     	b.eq	0x100015868 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::~__bracket_expression()+0xdc>
100015830:     	ldursb	w8, [x21, #-1]
100015834:     	tbnz	w8, #31, 0x100015848 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::~__bracket_expression()+0xbc>
100015838:     	sub	x22, x21, #48
10001583c:     	ldursb	w8, [x21, #-25]
100015840:     	tbz	w8, #31, 0x100015824 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::~__bracket_expression()+0x98>
100015844:     	b	0x10001585c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::~__bracket_expression()+0xd0>
100015848:     	ldur	x0, [x21, #-24]
10001584c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100015850:     	sub	x22, x21, #48
100015854:     	ldursb	w8, [x21, #-25]
100015858:     	tbz	w8, #31, 0x100015824 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::~__bracket_expression()+0x98>
10001585c:     	ldur	x0, [x21, #-48]
100015860:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100015864:     	b	0x100015824 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::~__bracket_expression()+0x98>
100015868:     	ldr	x0, [x19, #88]
10001586c:     	str	x20, [x19, #96]
100015870:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100015874:     	ldr	x0, [x19, #64]
100015878:     	cbz	x0, 0x100015884 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::~__bracket_expression()+0xf8>
10001587c:     	str	x0, [x19, #72]
100015880:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100015884:     	ldr	x0, [x19, #40]
100015888:     	cbz	x0, 0x100015894 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::~__bracket_expression()+0x108>
10001588c:     	str	x0, [x19, #48]
100015890:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100015894:     	add	x0, x19, #16
100015898:     	bl	0x10002ef84 <_vsnprintf+0x10002ef84>
10001589c:     	adrp	x8, 0x100034000 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::transform<char*>(char*, char*) const+0x48>
1000158a0:     	add	x8, x8, #1696
1000158a4:     	str	x8, [x19]
1000158a8:     	ldr	x0, [x19, #8]
1000158ac:     	cbz	x0, 0x1000158bc <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::~__bracket_expression()+0x130>
1000158b0:     	ldr	x8, [x0]
1000158b4:     	ldr	x8, [x8, #8]
1000158b8:     	blr	x8
1000158bc:     	mov	x0, x19
1000158c0:     	ldp	x29, x30, [sp, #32]
1000158c4:     	ldp	x20, x19, [sp, #16]
1000158c8:     	ldp	x22, x21, [sp], #48
1000158cc:     	ret

00000001000158d0 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::transform<char*>(char*, char*) const>:
1000158d0:     	sub	sp, sp, #112
1000158d4:     	stp	x26, x25, [sp, #32]
1000158d8:     	stp	x24, x23, [sp, #48]
1000158dc:     	stp	x22, x21, [sp, #64]
1000158e0:     	stp	x20, x19, [sp, #80]
1000158e4:     	stp	x29, x30, [sp, #96]
1000158e8:     	add	x29, sp, #96
1000158ec:     	mov	x19, x8
1000158f0:     	mov	x8, #9223372036854775792
1000158f4:     	sub	x22, x2, x1
1000158f8:     	cmp	x22, x8
1000158fc:     	b.hs	0x1000159c8 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::transform<char*>(char*, char*) const+0xf8>
100015900:     	mov	x23, x2
100015904:     	mov	x21, x1
100015908:     	mov	x20, x0
10001590c:     	cmp	x22, #22
100015910:     	b.hi	0x100015928 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::transform<char*>(char*, char*) const+0x58>
100015914:     	strb	w22, [sp, #31]
100015918:     	add	x24, sp, #8
10001591c:     	cmp	x21, x23
100015920:     	b.ne	0x100015950 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::transform<char*>(char*, char*) const+0x80>
100015924:     	b	0x100015964 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::transform<char*>(char*, char*) const+0x94>
100015928:     	orr	x8, x22, #0xf
10001592c:     	add	x25, x8, #1
100015930:     	mov	x0, x25
100015934:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100015938:     	mov	x24, x0
10001593c:     	orr	x8, x25, #0x8000000000000000
100015940:     	stp	x22, x8, [sp, #16]
100015944:     	str	x0, [sp, #8]
100015948:     	cmp	x21, x23
10001594c:     	b.eq	0x100015964 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::transform<char*>(char*, char*) const+0x94>
100015950:     	mov	x0, x24
100015954:     	mov	x1, x21
100015958:     	mov	x2, x22
10001595c:     	bl	0x10002f1c4 <_vsnprintf+0x10002f1c4>
100015960:     	add	x24, x24, x22
100015964:     	strb	wzr, [x24]
100015968:     	ldr	x0, [x20, #16]
10001596c:     	ldrb	w8, [sp, #31]
100015970:     	sxtb	w9, w8
100015974:     	ldp	x10, x11, [sp, #8]
100015978:     	cmp	w9, #0
10001597c:     	add	x9, sp, #8
100015980:     	csel	x1, x10, x9, lt
100015984:     	csel	x8, x11, x8, lt
100015988:     	add	x2, x1, x8
10001598c:     	ldr	x8, [x0]
100015990:     	ldr	x9, [x8, #32]
100015994:     	mov	x8, x19
100015998:     	blr	x9
10001599c:     	ldrsb	w8, [sp, #31]
1000159a0:     	tbz	w8, #31, 0x1000159ac <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::transform<char*>(char*, char*) const+0xdc>
1000159a4:     	ldr	x0, [sp, #8]
1000159a8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000159ac:     	ldp	x29, x30, [sp, #96]
1000159b0:     	ldp	x20, x19, [sp, #80]
1000159b4:     	ldp	x22, x21, [sp, #64]
1000159b8:     	ldp	x24, x23, [sp, #48]
1000159bc:     	ldp	x26, x25, [sp, #32]
1000159c0:     	add	sp, sp, #112
1000159c4:     	ret
1000159c8:     	add	x0, sp, #8
1000159cc:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
1000159d0:     	mov	x19, x0
1000159d4:     	ldrsb	w8, [sp, #31]
1000159d8:     	tbz	w8, #31, 0x1000159e4 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::transform<char*>(char*, char*) const+0x114>
1000159dc:     	ldr	x0, [sp, #8]
1000159e0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000159e4:     	mov	x0, x19
1000159e8:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

00000001000159ec <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<char*>(char*, char*, char) const>:
1000159ec:     	sub	sp, sp, #128
1000159f0:     	stp	x26, x25, [sp, #48]
1000159f4:     	stp	x24, x23, [sp, #64]
1000159f8:     	stp	x22, x21, [sp, #80]
1000159fc:     	stp	x20, x19, [sp, #96]
100015a00:     	stp	x29, x30, [sp, #112]
100015a04:     	add	x29, sp, #112
100015a08:     	mov	x19, x8
100015a0c:     	mov	x8, #9223372036854775792
100015a10:     	sub	x22, x2, x1
100015a14:     	cmp	x22, x8
100015a18:     	b.hs	0x100015bc8 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<char*>(char*, char*, char) const+0x1dc>
100015a1c:     	mov	x23, x2
100015a20:     	mov	x21, x1
100015a24:     	mov	x20, x0
100015a28:     	cmp	x22, #22
100015a2c:     	b.hi	0x100015a44 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<char*>(char*, char*, char) const+0x58>
100015a30:     	strb	w22, [sp, #47]
100015a34:     	add	x24, sp, #24
100015a38:     	cmp	x21, x23
100015a3c:     	b.ne	0x100015a6c <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<char*>(char*, char*, char) const+0x80>
100015a40:     	b	0x100015a80 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<char*>(char*, char*, char) const+0x94>
100015a44:     	orr	x8, x22, #0xf
100015a48:     	add	x25, x8, #1
100015a4c:     	mov	x0, x25
100015a50:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100015a54:     	mov	x24, x0
100015a58:     	orr	x8, x25, #0x8000000000000000
100015a5c:     	stp	x22, x8, [sp, #32]
100015a60:     	str	x0, [sp, #24]
100015a64:     	cmp	x21, x23
100015a68:     	b.eq	0x100015a80 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<char*>(char*, char*, char) const+0x94>
100015a6c:     	mov	x0, x24
100015a70:     	mov	x1, x21
100015a74:     	mov	x2, x22
100015a78:     	bl	0x10002f1c4 <_vsnprintf+0x10002f1c4>
100015a7c:     	add	x24, x24, x22
100015a80:     	strb	wzr, [x24]
100015a84:     	stp	xzr, xzr, [x19]
100015a88:     	str	xzr, [x19, #16]
100015a8c:     	ldrsb	w8, [sp, #47]
100015a90:     	tbnz	w8, #31, 0x100015aa0 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<char*>(char*, char*, char) const+0xb4>
100015a94:     	cbz	w8, 0x100015b0c <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<char*>(char*, char*, char) const+0x120>
100015a98:     	add	x0, sp, #24
100015a9c:     	b	0x100015aac <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<char*>(char*, char*, char) const+0xc0>
100015aa0:     	ldr	x8, [sp, #32]
100015aa4:     	cbz	x8, 0x100015adc <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<char*>(char*, char*, char) const+0xf0>
100015aa8:     	ldr	x0, [sp, #24]
100015aac:     	mov	x8, sp
100015ab0:     	bl	0x10002ef0c <_vsnprintf+0x10002ef0c>
100015ab4:     	ldr	q0, [sp]
100015ab8:     	str	q0, [x19]
100015abc:     	ldr	x8, [sp, #16]
100015ac0:     	str	x8, [x19, #16]
100015ac4:     	lsr	x8, x8, #56
100015ac8:     	sxtb	w21, w8
100015acc:     	ldr	x9, [x19, #8]
100015ad0:     	cmp	w21, #0
100015ad4:     	csel	x8, x9, x8, lt
100015ad8:     	cbz	x8, 0x100015af0 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<char*>(char*, char*, char) const+0x104>
100015adc:     	ldrsb	w8, [sp, #47]
100015ae0:     	tbz	w8, #31, 0x100015b0c <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<char*>(char*, char*, char) const+0x120>
100015ae4:     	ldr	x0, [sp, #24]
100015ae8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100015aec:     	b	0x100015b0c <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<char*>(char*, char*, char) const+0x120>
100015af0:     	ldrsb	w8, [sp, #47]
100015af4:     	tbnz	w8, #31, 0x100015b28 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<char*>(char*, char*, char) const+0x13c>
100015af8:     	and	x8, x8, #0xff
100015afc:     	cmp	w8, #3
100015b00:     	b.hs	0x100015b0c <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<char*>(char*, char*, char) const+0x120>
100015b04:     	add	x1, sp, #24
100015b08:     	b	0x100015b38 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<char*>(char*, char*, char) const+0x14c>
100015b0c:     	ldp	x29, x30, [sp, #112]
100015b10:     	ldp	x20, x19, [sp, #96]
100015b14:     	ldp	x22, x21, [sp, #80]
100015b18:     	ldp	x24, x23, [sp, #64]
100015b1c:     	ldp	x26, x25, [sp, #48]
100015b20:     	add	sp, sp, #128
100015b24:     	ret
100015b28:     	ldr	x8, [sp, #32]
100015b2c:     	cmp	x8, #3
100015b30:     	b.hs	0x100015adc <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<char*>(char*, char*, char) const+0xf0>
100015b34:     	ldr	x1, [sp, #24]
100015b38:     	ldr	x0, [x20, #16]
100015b3c:     	add	x2, x1, x8
100015b40:     	ldr	x8, [x0]
100015b44:     	ldr	x9, [x8, #32]
100015b48:     	mov	x8, sp
100015b4c:     	blr	x9
100015b50:     	tbz	w21, #31, 0x100015b5c <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<char*>(char*, char*, char) const+0x170>
100015b54:     	ldr	x0, [x19]
100015b58:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100015b5c:     	ldr	q0, [sp]
100015b60:     	str	q0, [x19]
100015b64:     	ldr	x8, [sp, #16]
100015b68:     	str	x8, [x19, #16]
100015b6c:     	ldrsb	w8, [x19, #23]
100015b70:     	tbnz	w8, #31, 0x100015b94 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<char*>(char*, char*, char) const+0x1a8>
100015b74:     	and	w8, w8, #0xff
100015b78:     	cmp	w8, #12
100015b7c:     	b.eq	0x100015ba8 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<char*>(char*, char*, char) const+0x1bc>
100015b80:     	cmp	w8, #1
100015b84:     	b.eq	0x100015ba8 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<char*>(char*, char*, char) const+0x1bc>
100015b88:     	strb	wzr, [x19]
100015b8c:     	strb	wzr, [x19, #23]
100015b90:     	b	0x100015adc <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<char*>(char*, char*, char) const+0xf0>
100015b94:     	ldr	x8, [x19, #8]
100015b98:     	cmp	x8, #1
100015b9c:     	b.eq	0x100015ba8 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<char*>(char*, char*, char) const+0x1bc>
100015ba0:     	cmp	x8, #12
100015ba4:     	b.ne	0x100015bb8 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<char*>(char*, char*, char) const+0x1cc>
100015ba8:     	add	x1, sp, #24
100015bac:     	mov	x0, x19
100015bb0:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
100015bb4:     	b	0x100015adc <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<char*>(char*, char*, char) const+0xf0>
100015bb8:     	ldr	x8, [x19]
100015bbc:     	strb	wzr, [x8]
100015bc0:     	str	xzr, [x19, #8]
100015bc4:     	b	0x100015adc <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<char*>(char*, char*, char) const+0xf0>
100015bc8:     	add	x0, sp, #24
100015bcc:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
100015bd0:     	mov	x20, x0
100015bd4:     	ldrb	w21, [x19, #23]
100015bd8:     	b	0x100015be0 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<char*>(char*, char*, char) const+0x1f4>
100015bdc:     	mov	x20, x0
100015be0:     	tbnz	w21, #7, 0x100015bf4 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<char*>(char*, char*, char) const+0x208>
100015be4:     	ldrsb	w8, [sp, #47]
100015be8:     	tbnz	w8, #31, 0x100015c14 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<char*>(char*, char*, char) const+0x228>
100015bec:     	mov	x0, x20
100015bf0:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
100015bf4:     	ldr	x0, [x19]
100015bf8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100015bfc:     	ldrsb	w8, [sp, #47]
100015c00:     	tbz	w8, #31, 0x100015bec <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<char*>(char*, char*, char) const+0x200>
100015c04:     	b	0x100015c14 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<char*>(char*, char*, char) const+0x228>
100015c08:     	mov	x20, x0
100015c0c:     	ldrsb	w8, [sp, #47]
100015c10:     	tbz	w8, #31, 0x100015bec <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<char*>(char*, char*, char) const+0x200>
100015c14:     	ldr	x0, [sp, #24]
100015c18:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100015c1c:     	mov	x0, x20
100015c20:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100015c24 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__transform_primary<char*>(char*, char*, char) const>:
100015c24:     	sub	sp, sp, #112
100015c28:     	stp	x26, x25, [sp, #32]
100015c2c:     	stp	x24, x23, [sp, #48]
100015c30:     	stp	x22, x21, [sp, #64]
100015c34:     	stp	x20, x19, [sp, #80]
100015c38:     	stp	x29, x30, [sp, #96]
100015c3c:     	add	x29, sp, #96
100015c40:     	mov	x19, x8
100015c44:     	mov	x8, #9223372036854775792
100015c48:     	sub	x22, x2, x1
100015c4c:     	cmp	x22, x8
100015c50:     	b.hs	0x100015d84 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__transform_primary<char*>(char*, char*, char) const+0x160>
100015c54:     	mov	x23, x2
100015c58:     	mov	x21, x1
100015c5c:     	mov	x20, x0
100015c60:     	cmp	x22, #22
100015c64:     	b.hi	0x100015c7c <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__transform_primary<char*>(char*, char*, char) const+0x58>
100015c68:     	strb	w22, [sp, #31]
100015c6c:     	add	x24, sp, #8
100015c70:     	cmp	x21, x23
100015c74:     	b.ne	0x100015ca4 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__transform_primary<char*>(char*, char*, char) const+0x80>
100015c78:     	b	0x100015cb8 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__transform_primary<char*>(char*, char*, char) const+0x94>
100015c7c:     	orr	x8, x22, #0xf
100015c80:     	add	x25, x8, #1
100015c84:     	mov	x0, x25
100015c88:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100015c8c:     	mov	x24, x0
100015c90:     	orr	x8, x25, #0x8000000000000000
100015c94:     	stp	x22, x8, [sp, #16]
100015c98:     	str	x0, [sp, #8]
100015c9c:     	cmp	x21, x23
100015ca0:     	b.eq	0x100015cb8 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__transform_primary<char*>(char*, char*, char) const+0x94>
100015ca4:     	mov	x0, x24
100015ca8:     	mov	x1, x21
100015cac:     	mov	x2, x22
100015cb0:     	bl	0x10002f1c4 <_vsnprintf+0x10002f1c4>
100015cb4:     	add	x24, x24, x22
100015cb8:     	strb	wzr, [x24]
100015cbc:     	ldr	x0, [x20, #16]
100015cc0:     	ldrb	w8, [sp, #31]
100015cc4:     	sxtb	w9, w8
100015cc8:     	ldp	x10, x11, [sp, #8]
100015ccc:     	cmp	w9, #0
100015cd0:     	add	x9, sp, #8
100015cd4:     	csel	x1, x10, x9, lt
100015cd8:     	csel	x8, x11, x8, lt
100015cdc:     	add	x2, x1, x8
100015ce0:     	ldr	x8, [x0]
100015ce4:     	ldr	x9, [x8, #32]
100015ce8:     	mov	x8, x19
100015cec:     	blr	x9
100015cf0:     	ldrb	w9, [x19, #23]
100015cf4:     	sxtb	w8, w9
100015cf8:     	ldr	x10, [x19, #8]
100015cfc:     	cmp	w8, #0
100015d00:     	csel	x9, x10, x9, lt
100015d04:     	cmp	x9, #1
100015d08:     	b.eq	0x100015d40 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__transform_primary<char*>(char*, char*, char) const+0x11c>
100015d0c:     	cmp	x9, #12
100015d10:     	b.ne	0x100015d34 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__transform_primary<char*>(char*, char*, char) const+0x110>
100015d14:     	ldr	x9, [x19]
100015d18:     	cmp	w8, #0
100015d1c:     	csel	x8, x9, x19, lt
100015d20:     	ldrb	w9, [x8, #3]
100015d24:     	strb	w9, [x8, #11]
100015d28:     	ldrsb	w8, [sp, #31]
100015d2c:     	tbz	w8, #31, 0x100015d50 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__transform_primary<char*>(char*, char*, char) const+0x12c>
100015d30:     	b	0x100015d48 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__transform_primary<char*>(char*, char*, char) const+0x124>
100015d34:     	tbnz	w8, #31, 0x100015d6c <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__transform_primary<char*>(char*, char*, char) const+0x148>
100015d38:     	strb	wzr, [x19]
100015d3c:     	strb	wzr, [x19, #23]
100015d40:     	ldrsb	w8, [sp, #31]
100015d44:     	tbz	w8, #31, 0x100015d50 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__transform_primary<char*>(char*, char*, char) const+0x12c>
100015d48:     	ldr	x0, [sp, #8]
100015d4c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100015d50:     	ldp	x29, x30, [sp, #96]
100015d54:     	ldp	x20, x19, [sp, #80]
100015d58:     	ldp	x22, x21, [sp, #64]
100015d5c:     	ldp	x24, x23, [sp, #48]
100015d60:     	ldp	x26, x25, [sp, #32]
100015d64:     	add	sp, sp, #112
100015d68:     	ret
100015d6c:     	ldr	x8, [x19]
100015d70:     	strb	wzr, [x8]
100015d74:     	str	xzr, [x19, #8]
100015d78:     	ldrsb	w8, [sp, #31]
100015d7c:     	tbz	w8, #31, 0x100015d50 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__transform_primary<char*>(char*, char*, char) const+0x12c>
100015d80:     	b	0x100015d48 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__transform_primary<char*>(char*, char*, char) const+0x124>
100015d84:     	add	x0, sp, #8
100015d88:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
100015d8c:     	mov	x19, x0
100015d90:     	ldrsb	w8, [sp, #31]
100015d94:     	tbz	w8, #31, 0x100015da0 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__transform_primary<char*>(char*, char*, char) const+0x17c>
100015d98:     	ldr	x0, [sp, #8]
100015d9c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100015da0:     	mov	x0, x19
100015da4:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100015da8 <std::__1::vector<char, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>:
100015da8:     	stp	x29, x30, [sp, #-16]!
100015dac:     	mov	x29, sp
100015db0:     	adrp	x0, 0x100031000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x18>
100015db4:     	add	x0, x0, #3485
100015db8:     	bl	0x100006a48 <std::__1::__throw_length_error[abi:ue170006](char const*)>

0000000100015dbc <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)5>()>:
100015dbc:     	stp	x20, x19, [sp, #-32]!
100015dc0:     	stp	x29, x30, [sp, #16]
100015dc4:     	add	x29, sp, #16
100015dc8:     	mov	w0, #24
100015dcc:     	bl	0x10002f038 <_vsnprintf+0x10002f038>
100015dd0:     	mov	x19, x0
100015dd4:     	mov	w1, #5
100015dd8:     	bl	0x10002ed20 <_vsnprintf+0x10002ed20>
100015ddc:     	adrp	x1, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x50>
100015de0:     	ldr	x1, [x1, #656]
100015de4:     	adrp	x2, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x58>
100015de8:     	ldr	x2, [x2, #104]
100015dec:     	mov	x0, x19
100015df0:     	bl	0x10002f0a4 <_vsnprintf+0x10002f0a4>
100015df4:     	mov	x20, x0
100015df8:     	mov	x0, x19
100015dfc:     	bl	0x10002f068 <_vsnprintf+0x10002f068>
100015e00:     	mov	x0, x20
100015e04:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100015e08 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)>:
100015e08:     	sub	sp, sp, #176
100015e0c:     	stp	x24, x23, [sp, #112]
100015e10:     	stp	x22, x21, [sp, #128]
100015e14:     	stp	x20, x19, [sp, #144]
100015e18:     	stp	x29, x30, [sp, #160]
100015e1c:     	add	x29, sp, #160
100015e20:     	mov	x20, x1
100015e24:     	cmp	x1, x2
100015e28:     	b.eq	0x100015ff8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x1f0>
100015e2c:     	ldrb	w8, [x20]
100015e30:     	cmp	w8, #93
100015e34:     	b.eq	0x100015ff8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x1f0>
100015e38:     	mov	x19, x3
100015e3c:     	mov	x21, x2
100015e40:     	mov	x22, x0
100015e44:     	add	x8, x20, #1
100015e48:     	stp	xzr, xzr, [x29, #-72]
100015e4c:     	stur	xzr, [x29, #-56]
100015e50:     	cmp	x8, x2
100015e54:     	b.eq	0x100015e98 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x90>
100015e58:     	ldrb	w9, [x20]
100015e5c:     	cmp	w9, #91
100015e60:     	b.ne	0x100015e98 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x90>
100015e64:     	ldrb	w8, [x8]
100015e68:     	cmp	w8, #46
100015e6c:     	b.eq	0x100016018 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x210>
100015e70:     	cmp	w8, #58
100015e74:     	b.eq	0x10001605c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x254>
100015e78:     	cmp	w8, #61
100015e7c:     	b.ne	0x100015e98 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x90>
100015e80:     	add	x1, x20, #2
100015e84:     	mov	x0, x22
100015e88:     	mov	x2, x21
100015e8c:     	mov	x3, x19
100015e90:     	bl	0x100016254 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_equivalence_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)>
100015e94:     	b	0x100016070 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x268>
100015e98:     	ldr	w8, [x22, #24]
100015e9c:     	and	w24, w8, #0x1f0
100015ea0:     	orr	w8, w24, #0x40
100015ea4:     	cmp	w8, #64
100015ea8:     	b.ne	0x100015ed8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0xd0>
100015eac:     	ldrb	w8, [x20]
100015eb0:     	cmp	w8, #92
100015eb4:     	b.ne	0x100015edc <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0xd4>
100015eb8:     	add	x1, x20, #1
100015ebc:     	cbz	w24, 0x100015fa8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x1a0>
100015ec0:     	sub	x3, x29, #72
100015ec4:     	mov	x0, x22
100015ec8:     	mov	x2, x21
100015ecc:     	bl	0x1000167e0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_awk_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)>
100015ed0:     	mov	x23, x0
100015ed4:     	b	0x100015eec <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0xe4>
100015ed8:     	ldrb	w8, [x20]
100015edc:     	sxtb	w1, w8
100015ee0:     	sub	x0, x29, #72
100015ee4:     	bl	0x10002ed8c <_vsnprintf+0x10002ed8c>
100015ee8:     	add	x23, x20, #1
100015eec:     	cmp	x23, x21
100015ef0:     	b.eq	0x100015f00 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0xf8>
100015ef4:     	ldrb	w9, [x23]
100015ef8:     	cmp	w9, #93
100015efc:     	b.ne	0x100015f44 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x13c>
100015f00:     	ldursb	w8, [x29, #-49]
100015f04:     	tbnz	w8, #31, 0x100015f20 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x118>
100015f08:     	and	w9, w8, #0xff
100015f0c:     	cbz	w9, 0x100015fdc <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x1d4>
100015f10:     	sub	x8, x29, #72
100015f14:     	cmp	w9, #1
100015f18:     	b.eq	0x100015f34 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x12c>
100015f1c:     	b	0x100015fcc <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x1c4>
100015f20:     	ldur	x8, [x29, #-64]
100015f24:     	cbz	x8, 0x100015fdc <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x1d4>
100015f28:     	cmp	x8, #1
100015f2c:     	b.ne	0x100015fc8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x1c0>
100015f30:     	ldur	x8, [x29, #-72]
100015f34:     	ldrsb	w1, [x8]
100015f38:     	mov	x0, x19
100015f3c:     	bl	0x100014608 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)>
100015f40:     	b	0x100015fdc <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x1d4>
100015f44:     	add	x8, x23, #1
100015f48:     	cmp	x8, x21
100015f4c:     	b.eq	0x100015f00 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0xf8>
100015f50:     	cmp	w9, #45
100015f54:     	b.ne	0x100015f00 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0xf8>
100015f58:     	ldrb	w9, [x8]
100015f5c:     	cmp	w9, #93
100015f60:     	b.eq	0x100015f00 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0xf8>
100015f64:     	stp	xzr, xzr, [sp, #64]
100015f68:     	str	xzr, [sp, #80]
100015f6c:     	add	x20, x23, #2
100015f70:     	cmp	x20, x21
100015f74:     	b.eq	0x100016084 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x27c>
100015f78:     	ldrb	w9, [x8]
100015f7c:     	cmp	w9, #91
100015f80:     	b.ne	0x100016084 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x27c>
100015f84:     	ldrb	w9, [x20]
100015f88:     	cmp	w9, #46
100015f8c:     	b.ne	0x100016084 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x27c>
100015f90:     	add	x1, x23, #3
100015f94:     	add	x3, sp, #64
100015f98:     	mov	x0, x22
100015f9c:     	mov	x2, x21
100015fa0:     	bl	0x1000165b8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_collating_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&)>
100015fa4:     	b	0x1000160e4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x2dc>
100015fa8:     	sub	x3, x29, #72
100015fac:     	mov	x0, x22
100015fb0:     	mov	x2, x21
100015fb4:     	mov	x4, x19
100015fb8:     	bl	0x1000166a0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_class_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)>
100015fbc:     	mov	x23, x0
100015fc0:     	mov	w24, #0
100015fc4:     	b	0x100015eec <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0xe4>
100015fc8:     	ldur	x8, [x29, #-72]
100015fcc:     	ldrsb	w1, [x8]
100015fd0:     	ldrsb	w2, [x8, #1]
100015fd4:     	mov	x0, x19
100015fd8:     	bl	0x100016f1c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)>
100015fdc:     	mov	w21, #1
100015fe0:     	mov	x20, x23
100015fe4:     	ldursb	w8, [x29, #-49]
100015fe8:     	tbz	w8, #31, 0x100015ff4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x1ec>
100015fec:     	ldur	x0, [x29, #-72]
100015ff0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100015ff4:     	tbz	w21, #0, 0x100015ffc <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x1f4>
100015ff8:     	mov	x19, x20
100015ffc:     	mov	x0, x19
100016000:     	ldp	x29, x30, [sp, #160]
100016004:     	ldp	x20, x19, [sp, #144]
100016008:     	ldp	x22, x21, [sp, #128]
10001600c:     	ldp	x24, x23, [sp, #112]
100016010:     	add	sp, sp, #176
100016014:     	ret
100016018:     	add	x1, x20, #2
10001601c:     	sub	x3, x29, #72
100016020:     	mov	x0, x22
100016024:     	mov	x2, x21
100016028:     	bl	0x1000165b8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_collating_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&)>
10001602c:     	mov	x20, x0
100016030:     	ldurb	w8, [x29, #-49]
100016034:     	sxtb	w9, w8
100016038:     	ldur	x10, [x29, #-64]
10001603c:     	ldr	w11, [x22, #24]
100016040:     	and	w24, w11, #0x1f0
100016044:     	and	x8, x8, #0xff
100016048:     	cmp	w9, #0
10001604c:     	csel	x8, x10, x8, lt
100016050:     	mov	x23, x0
100016054:     	cbnz	x8, 0x100015eec <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0xe4>
100016058:     	b	0x100015ea0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x98>
10001605c:     	add	x1, x20, #2
100016060:     	mov	x0, x22
100016064:     	mov	x2, x21
100016068:     	mov	x3, x19
10001606c:     	bl	0x100016504 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)>
100016070:     	mov	x19, x0
100016074:     	mov	w21, #0
100016078:     	ldursb	w8, [x29, #-49]
10001607c:     	tbz	w8, #31, 0x100015ff4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x1ec>
100016080:     	b	0x100015fec <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x1e4>
100016084:     	orr	w9, w24, #0x40
100016088:     	cmp	w9, #64
10001608c:     	b.ne	0x1000160b8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x2b0>
100016090:     	ldrb	w8, [x8]
100016094:     	cmp	w8, #92
100016098:     	b.ne	0x1000160bc <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x2b4>
10001609c:     	cbz	w24, 0x1000160cc <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x2c4>
1000160a0:     	add	x3, sp, #64
1000160a4:     	mov	x0, x22
1000160a8:     	mov	x1, x20
1000160ac:     	mov	x2, x21
1000160b0:     	bl	0x1000167e0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_awk_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)>
1000160b4:     	b	0x1000160e4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x2dc>
1000160b8:     	ldrb	w8, [x8]
1000160bc:     	sxtb	w1, w8
1000160c0:     	add	x0, sp, #64
1000160c4:     	bl	0x10002ed8c <_vsnprintf+0x10002ed8c>
1000160c8:     	b	0x1000160e8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x2e0>
1000160cc:     	add	x3, sp, #64
1000160d0:     	mov	x0, x22
1000160d4:     	mov	x1, x20
1000160d8:     	mov	x2, x21
1000160dc:     	mov	x4, x19
1000160e0:     	bl	0x1000166a0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_class_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)>
1000160e4:     	mov	x20, x0
1000160e8:     	ldur	q0, [x29, #-72]
1000160ec:     	str	q0, [sp, #32]
1000160f0:     	ldur	x8, [x29, #-56]
1000160f4:     	str	x8, [sp, #48]
1000160f8:     	stp	xzr, xzr, [x29, #-64]
1000160fc:     	stur	xzr, [x29, #-72]
100016100:     	ldr	q0, [sp, #64]
100016104:     	str	q0, [sp]
100016108:     	ldr	x8, [sp, #80]
10001610c:     	str	x8, [sp, #16]
100016110:     	stp	xzr, xzr, [sp, #64]
100016114:     	str	xzr, [sp, #80]
100016118:     	add	x1, sp, #32
10001611c:     	mov	x2, sp
100016120:     	mov	x0, x19
100016124:     	bl	0x100016acc <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)>
100016128:     	ldrsb	w8, [sp, #23]
10001612c:     	tbnz	w8, #31, 0x100016150 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x348>
100016130:     	ldrsb	w8, [sp, #55]
100016134:     	tbnz	w8, #31, 0x100016160 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x358>
100016138:     	ldrsb	w8, [sp, #87]
10001613c:     	tbnz	w8, #31, 0x100016170 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x368>
100016140:     	mov	w21, #1
100016144:     	ldursb	w8, [x29, #-49]
100016148:     	tbz	w8, #31, 0x100015ff4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x1ec>
10001614c:     	b	0x100015fec <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x1e4>
100016150:     	ldr	x0, [sp]
100016154:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100016158:     	ldrsb	w8, [sp, #55]
10001615c:     	tbz	w8, #31, 0x100016138 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x330>
100016160:     	ldr	x0, [sp, #32]
100016164:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100016168:     	ldrsb	w8, [sp, #87]
10001616c:     	tbz	w8, #31, 0x100016140 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x338>
100016170:     	ldr	x0, [sp, #64]
100016174:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100016178:     	mov	w21, #1
10001617c:     	ldursb	w8, [x29, #-49]
100016180:     	tbz	w8, #31, 0x100015ff4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x1ec>
100016184:     	b	0x100015fec <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x1e4>
100016188:     	mov	x19, x0
10001618c:     	ldrsb	w8, [sp, #87]
100016190:     	tbz	w8, #31, 0x1000161c4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x3bc>
100016194:     	b	0x100016200 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x3f8>
100016198:     	mov	x19, x0
10001619c:     	ldrsb	w8, [sp, #87]
1000161a0:     	tbz	w8, #31, 0x1000161c4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x3bc>
1000161a4:     	b	0x100016200 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x3f8>
1000161a8:     	mov	x19, x0
1000161ac:     	ldrsb	w8, [sp, #87]
1000161b0:     	tbz	w8, #31, 0x1000161c4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x3bc>
1000161b4:     	b	0x100016200 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x3f8>
1000161b8:     	mov	x19, x0
1000161bc:     	ldrsb	w8, [sp, #87]
1000161c0:     	tbnz	w8, #31, 0x100016200 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x3f8>
1000161c4:     	ldursb	w8, [x29, #-49]
1000161c8:     	tbz	w8, #31, 0x10001624c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x444>
1000161cc:     	ldur	x0, [x29, #-72]
1000161d0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000161d4:     	mov	x0, x19
1000161d8:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
1000161dc:     	mov	x19, x0
1000161e0:     	ldrsb	w8, [sp, #23]
1000161e4:     	tbz	w8, #31, 0x100016214 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x40c>
1000161e8:     	ldr	x0, [sp]
1000161ec:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000161f0:     	ldrsb	w8, [sp, #55]
1000161f4:     	tbnz	w8, #31, 0x10001621c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x414>
1000161f8:     	ldrsb	w8, [sp, #87]
1000161fc:     	tbz	w8, #31, 0x1000161c4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x3bc>
100016200:     	ldr	x0, [sp, #64]
100016204:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100016208:     	ldursb	w8, [x29, #-49]
10001620c:     	tbz	w8, #31, 0x10001624c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x444>
100016210:     	b	0x1000161cc <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x3c4>
100016214:     	ldrsb	w8, [sp, #55]
100016218:     	tbz	w8, #31, 0x1000161f8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x3f0>
10001621c:     	ldr	x0, [sp, #32]
100016220:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100016224:     	ldrsb	w8, [sp, #87]
100016228:     	tbz	w8, #31, 0x1000161c4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x3bc>
10001622c:     	b	0x100016200 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x3f8>
100016230:     	b	0x100016240 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x438>
100016234:     	b	0x100016240 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x438>
100016238:     	b	0x100016240 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x438>
10001623c:     	b	0x100016240 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x438>
100016240:     	mov	x19, x0
100016244:     	ldursb	w8, [x29, #-49]
100016248:     	tbnz	w8, #31, 0x1000161cc <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_expression_term<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x3c4>
10001624c:     	mov	x0, x19
100016250:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100016254 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_equivalence_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)>:
100016254:     	sub	sp, sp, #112
100016258:     	stp	x24, x23, [sp, #48]
10001625c:     	stp	x22, x21, [sp, #64]
100016260:     	stp	x20, x19, [sp, #80]
100016264:     	stp	x29, x30, [sp, #96]
100016268:     	add	x29, sp, #96
10001626c:     	sub	x8, x2, x1
100016270:     	cmp	x8, #2
100016274:     	b.lt	0x10001647c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_equivalence_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x228>
100016278:     	add	x8, x1, x8
10001627c:     	sub	x8, x8, #1
100016280:     	cmp	x8, x1
100016284:     	b.eq	0x10001647c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_equivalence_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x228>
100016288:     	mov	x20, x3
10001628c:     	mov	x21, x0
100016290:     	sub	x8, x2, #2
100016294:     	mov	x19, x1
100016298:     	mov	x9, x1
10001629c:     	ldrb	w10, [x9], #1
1000162a0:     	cmp	w10, #61
1000162a4:     	b.ne	0x1000162b4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_equivalence_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x60>
1000162a8:     	ldrb	w10, [x9]
1000162ac:     	cmp	w10, #93
1000162b0:     	b.eq	0x1000162d4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_equivalence_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x80>
1000162b4:     	cmp	x1, x8
1000162b8:     	b.eq	0x10001647c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_equivalence_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x228>
1000162bc:     	sub	x8, x8, #1
1000162c0:     	mov	x19, x9
1000162c4:     	ldrb	w10, [x9], #1
1000162c8:     	cmp	w10, #61
1000162cc:     	b.eq	0x1000162a8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_equivalence_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x54>
1000162d0:     	b	0x1000162b4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_equivalence_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x60>
1000162d4:     	cmp	x19, x2
1000162d8:     	b.eq	0x10001647c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_equivalence_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x228>
1000162dc:     	add	x8, sp, #24
1000162e0:     	mov	x0, x21
1000162e4:     	mov	x2, x19
1000162e8:     	mov	w3, #0
1000162ec:     	bl	0x100017358 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, char) const>
1000162f0:     	ldrsb	w8, [sp, #47]
1000162f4:     	tbnz	w8, #31, 0x100016308 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_equivalence_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0xb4>
1000162f8:     	and	x8, x8, #0xff
1000162fc:     	cbz	w8, 0x100016480 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_equivalence_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x22c>
100016300:     	add	x1, sp, #24
100016304:     	b	0x100016314 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_equivalence_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0xc0>
100016308:     	ldr	x8, [sp, #32]
10001630c:     	cbz	x8, 0x100016480 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_equivalence_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x22c>
100016310:     	ldr	x1, [sp, #24]
100016314:     	add	x2, x1, x8
100016318:     	mov	x8, sp
10001631c:     	mov	x0, x21
100016320:     	mov	w3, #0
100016324:     	bl	0x1000175f0 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__transform_primary<std::__1::__wrap_iter<char*>>(std::__1::__wrap_iter<char*>, std::__1::__wrap_iter<char*>, char) const>
100016328:     	ldrb	w9, [sp, #23]
10001632c:     	sxtb	w8, w9
100016330:     	ldr	x24, [sp, #8]
100016334:     	cmp	w8, #0
100016338:     	csel	x9, x24, x9, lt
10001633c:     	cbz	x9, 0x100016364 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_equivalence_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x110>
100016340:     	ldp	x21, x9, [x20, #144]
100016344:     	cmp	x21, x9
100016348:     	b.eq	0x1000163d0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_equivalence_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x17c>
10001634c:     	tbnz	w8, #31, 0x100016404 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_equivalence_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x1b0>
100016350:     	ldr	q0, [sp]
100016354:     	ldr	x8, [sp, #16]
100016358:     	str	x8, [x21, #16]
10001635c:     	str	q0, [x21]
100016360:     	b	0x100016450 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_equivalence_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x1fc>
100016364:     	ldrb	w9, [sp, #47]
100016368:     	sxtb	w8, w9
10001636c:     	ldr	x10, [sp, #32]
100016370:     	cmp	w8, #0
100016374:     	csel	x9, x10, x9, lt
100016378:     	cmp	x9, #2
10001637c:     	b.eq	0x1000163e0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_equivalence_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x18c>
100016380:     	cmp	x9, #1
100016384:     	b.ne	0x100016488 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_equivalence_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x234>
100016388:     	ldr	x9, [sp, #24]
10001638c:     	cmp	w8, #0
100016390:     	add	x8, sp, #24
100016394:     	csel	x8, x9, x8, lt
100016398:     	ldrsb	w1, [x8]
10001639c:     	mov	x0, x20
1000163a0:     	bl	0x100014608 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)>
1000163a4:     	ldrsb	w8, [sp, #23]
1000163a8:     	tbnz	w8, #31, 0x100016460 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_equivalence_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x20c>
1000163ac:     	ldrsb	w8, [sp, #47]
1000163b0:     	tbnz	w8, #31, 0x100016470 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_equivalence_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x21c>
1000163b4:     	add	x0, x19, #2
1000163b8:     	ldp	x29, x30, [sp, #96]
1000163bc:     	ldp	x20, x19, [sp, #80]
1000163c0:     	ldp	x22, x21, [sp, #64]
1000163c4:     	ldp	x24, x23, [sp, #48]
1000163c8:     	add	sp, sp, #112
1000163cc:     	ret
1000163d0:     	add	x0, x20, #136
1000163d4:     	mov	x1, sp
1000163d8:     	bl	0x1000177d4 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__push_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
1000163dc:     	b	0x1000163a4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_equivalence_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x150>
1000163e0:     	ldr	x9, [sp, #24]
1000163e4:     	cmp	w8, #0
1000163e8:     	add	x8, sp, #24
1000163ec:     	csel	x8, x9, x8, lt
1000163f0:     	ldrsb	w1, [x8]
1000163f4:     	ldrsb	w2, [x8, #1]
1000163f8:     	mov	x0, x20
1000163fc:     	bl	0x100016f1c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)>
100016400:     	b	0x1000163a4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_equivalence_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x150>
100016404:     	ldr	x22, [sp]
100016408:     	cmp	x24, #22
10001640c:     	b.hi	0x10001641c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_equivalence_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x1c8>
100016410:     	strb	w24, [x21, #23]
100016414:     	mov	x0, x21
100016418:     	b	0x100016444 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_equivalence_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x1f0>
10001641c:     	mov	x8, #9223372036854775792
100016420:     	cmp	x24, x8
100016424:     	b.hs	0x100016490 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_equivalence_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x23c>
100016428:     	orr	x8, x24, #0xf
10001642c:     	add	x23, x8, #1
100016430:     	mov	x0, x23
100016434:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100016438:     	orr	x8, x23, #0x8000000000000000
10001643c:     	stp	x24, x8, [x21, #8]
100016440:     	str	x0, [x21]
100016444:     	add	x2, x24, #1
100016448:     	mov	x1, x22
10001644c:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
100016450:     	add	x8, x21, #24
100016454:     	str	x8, [x20, #144]
100016458:     	ldrsb	w8, [sp, #23]
10001645c:     	tbz	w8, #31, 0x1000163ac <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_equivalence_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x158>
100016460:     	ldr	x0, [sp]
100016464:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100016468:     	ldrsb	w8, [sp, #47]
10001646c:     	tbz	w8, #31, 0x1000163b4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_equivalence_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x160>
100016470:     	ldr	x0, [sp, #24]
100016474:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100016478:     	b	0x1000163b4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_equivalence_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x160>
10001647c:     	bl	0x100015dbc <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)5>()>
100016480:     	bl	0x10001730c <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)1>()>
100016484:     	b	0x100016498 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_equivalence_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x244>
100016488:     	bl	0x10001730c <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)1>()>
10001648c:     	b	0x100016498 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_equivalence_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x244>
100016490:     	mov	x0, x21
100016494:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
100016498:     	brk	#0x1
10001649c:     	mov	x19, x0
1000164a0:     	str	x21, [x20, #144]
1000164a4:     	b	0x1000164ac <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_equivalence_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x258>
1000164a8:     	mov	x19, x0
1000164ac:     	ldrsb	w8, [sp, #23]
1000164b0:     	tbnz	w8, #31, 0x1000164c4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_equivalence_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x270>
1000164b4:     	ldrsb	w8, [sp, #47]
1000164b8:     	tbnz	w8, #31, 0x1000164f4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_equivalence_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x2a0>
1000164bc:     	mov	x0, x19
1000164c0:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
1000164c4:     	ldr	x0, [sp]
1000164c8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000164cc:     	ldrsb	w8, [sp, #47]
1000164d0:     	tbz	w8, #31, 0x1000164bc <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_equivalence_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x268>
1000164d4:     	b	0x1000164f4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_equivalence_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x2a0>
1000164d8:     	mov	x19, x0
1000164dc:     	ldrsb	w8, [sp, #47]
1000164e0:     	tbz	w8, #31, 0x1000164bc <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_equivalence_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x268>
1000164e4:     	b	0x1000164f4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_equivalence_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x2a0>
1000164e8:     	mov	x19, x0
1000164ec:     	ldrsb	w8, [sp, #47]
1000164f0:     	tbz	w8, #31, 0x1000164bc <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_equivalence_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x268>
1000164f4:     	ldr	x0, [sp, #24]
1000164f8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000164fc:     	mov	x0, x19
100016500:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100016504 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)>:
100016504:     	stp	x20, x19, [sp, #-32]!
100016508:     	stp	x29, x30, [sp, #16]
10001650c:     	add	x29, sp, #16
100016510:     	sub	x8, x2, x1
100016514:     	cmp	x8, #2
100016518:     	b.lt	0x1000165b0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0xac>
10001651c:     	add	x8, x1, x8
100016520:     	sub	x8, x8, #1
100016524:     	cmp	x8, x1
100016528:     	b.eq	0x1000165b0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0xac>
10001652c:     	mov	x19, x3
100016530:     	sub	x8, x2, #2
100016534:     	mov	x20, x1
100016538:     	mov	x9, x1
10001653c:     	ldrb	w10, [x9], #1
100016540:     	cmp	w10, #58
100016544:     	b.ne	0x100016554 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x50>
100016548:     	ldrb	w10, [x9]
10001654c:     	cmp	w10, #93
100016550:     	b.eq	0x100016574 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x70>
100016554:     	cmp	x1, x8
100016558:     	b.eq	0x1000165b0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0xac>
10001655c:     	sub	x8, x8, #1
100016560:     	mov	x20, x9
100016564:     	ldrb	w10, [x9], #1
100016568:     	cmp	w10, #58
10001656c:     	b.eq	0x100016548 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x44>
100016570:     	b	0x100016554 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x50>
100016574:     	cmp	x20, x2
100016578:     	b.eq	0x1000165b0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0xac>
10001657c:     	ldr	w8, [x0, #24]
100016580:     	and	w3, w8, #0x1
100016584:     	mov	x2, x20
100016588:     	mov	w4, #0
10001658c:     	bl	0x100017ac0 <unsigned int std::__1::regex_traits<char>::__lookup_classname<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, bool, char) const>
100016590:     	cbz	w0, 0x1000165b4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_class<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0xb0>
100016594:     	ldr	w8, [x19, #160]
100016598:     	orr	w8, w8, w0
10001659c:     	str	w8, [x19, #160]
1000165a0:     	add	x0, x20, #2
1000165a4:     	ldp	x29, x30, [sp, #16]
1000165a8:     	ldp	x20, x19, [sp], #32
1000165ac:     	ret
1000165b0:     	bl	0x100015dbc <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)5>()>
1000165b4:     	bl	0x100017a74 <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)2>()>

00000001000165b8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_collating_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&)>:
1000165b8:     	sub	sp, sp, #64
1000165bc:     	stp	x20, x19, [sp, #32]
1000165c0:     	stp	x29, x30, [sp, #48]
1000165c4:     	add	x29, sp, #48
1000165c8:     	sub	x8, x2, x1
1000165cc:     	cmp	x8, #2
1000165d0:     	b.lt	0x100016698 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_collating_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&)+0xe0>
1000165d4:     	add	x8, x1, x8
1000165d8:     	sub	x8, x8, #1
1000165dc:     	cmp	x8, x1
1000165e0:     	b.eq	0x100016698 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_collating_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&)+0xe0>
1000165e4:     	mov	x19, x3
1000165e8:     	sub	x8, x2, #2
1000165ec:     	mov	x20, x1
1000165f0:     	mov	x9, x1
1000165f4:     	ldrb	w10, [x9], #1
1000165f8:     	cmp	w10, #46
1000165fc:     	b.ne	0x10001660c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_collating_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&)+0x54>
100016600:     	ldrb	w10, [x9]
100016604:     	cmp	w10, #93
100016608:     	b.eq	0x10001662c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_collating_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&)+0x74>
10001660c:     	cmp	x1, x8
100016610:     	b.eq	0x100016698 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_collating_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&)+0xe0>
100016614:     	sub	x8, x8, #1
100016618:     	mov	x20, x9
10001661c:     	ldrb	w10, [x9], #1
100016620:     	cmp	w10, #46
100016624:     	b.eq	0x100016600 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_collating_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&)+0x48>
100016628:     	b	0x10001660c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_collating_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&)+0x54>
10001662c:     	cmp	x20, x2
100016630:     	b.eq	0x100016698 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_collating_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&)+0xe0>
100016634:     	add	x8, sp, #8
100016638:     	mov	x2, x20
10001663c:     	mov	w3, #0
100016640:     	bl	0x100017358 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, char) const>
100016644:     	ldrsb	w8, [x19, #23]
100016648:     	tbz	w8, #31, 0x100016654 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_collating_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&)+0x9c>
10001664c:     	ldr	x0, [x19]
100016650:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100016654:     	ldur	q0, [sp, #8]
100016658:     	str	q0, [x19]
10001665c:     	ldr	x8, [sp, #24]
100016660:     	str	x8, [x19, #16]
100016664:     	lsr	x8, x8, #56
100016668:     	sxtb	w9, w8
10001666c:     	ldr	x10, [x19, #8]
100016670:     	cmp	w9, #0
100016674:     	csel	x8, x10, x8, lt
100016678:     	sub	x8, x8, #1
10001667c:     	cmp	x8, #2
100016680:     	b.hs	0x10001669c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_collating_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&)+0xe4>
100016684:     	add	x0, x20, #2
100016688:     	ldp	x29, x30, [sp, #48]
10001668c:     	ldp	x20, x19, [sp, #32]
100016690:     	add	sp, sp, #64
100016694:     	ret
100016698:     	bl	0x100015dbc <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)5>()>
10001669c:     	bl	0x10001730c <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)1>()>

00000001000166a0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_class_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)>:
1000166a0:     	stp	x20, x19, [sp, #-32]!
1000166a4:     	stp	x29, x30, [sp, #16]
1000166a8:     	add	x29, sp, #16
1000166ac:     	cmp	x1, x2
1000166b0:     	b.eq	0x1000167dc <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_class_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x13c>
1000166b4:     	mov	x19, x1
1000166b8:     	ldrsb	w8, [x1]
1000166bc:     	sub	w9, w8, #68
1000166c0:     	cmp	w9, #51
1000166c4:     	b.hi	0x1000166ec <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_class_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x4c>
1000166c8:     	adrp	x8, 0x100032000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_class_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x98>
1000166cc:     	add	x8, x8, #3132
1000166d0:     	adr	x10, #16
1000166d4:     	ldrb	w11, [x8, x9]
1000166d8:     	add	x10, x10, x11, lsl #2
1000166dc:     	br	x10
1000166e0:     	ldr	w8, [x4, #164]
1000166e4:     	orr	w8, w8, #0x400
1000166e8:     	b	0x10001671c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_class_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x7c>
1000166ec:     	cbnz	w8, 0x100016700 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_class_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0x60>
1000166f0:     	and	w8, w8, #0xff
1000166f4:     	sxtb	w1, w8
1000166f8:     	mov	x0, x3
1000166fc:     	b	0x100016764 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_class_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&, std::__1::__bracket_expression<char, std::__1::regex_traits<char>>*)+0xc4>
100016700:     	mov	x1, x19
100016704:     	bl	0x100013918 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_character_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)>
100016708:     	ldp	x29, x30, [sp, #16]
10001670c:     	ldp	x20, x19, [sp], #32
100016710:     	ret
100016714:     	ldr	w8, [x4, #164]
100016718:     	orr	w8, w8, #0x4000
10001671c:     	str	w8, [x4, #164]
100016720:     	add	x0, x19, #1
100016724:     	ldp	x29, x30, [sp, #16]
100016728:     	ldp	x20, x19, [sp], #32
10001672c:     	ret
100016730:     	ldr	w8, [x4, #164]
100016734:     	mov	w9, #1280
100016738:     	orr	w8, w8, w9
10001673c:     	str	w8, [x4, #164]
100016740:     	mov	x0, x4
100016744:     	mov	w1, #95
100016748:     	bl	0x100017c44 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)>
10001674c:     	add	x0, x19, #1
100016750:     	ldp	x29, x30, [sp, #16]
100016754:     	ldp	x20, x19, [sp], #32
100016758:     	ret
10001675c:     	mov	x0, x3
100016760:     	mov	w1, #8
100016764:     	bl	0x10002ed8c <_vsnprintf+0x10002ed8c>
100016768:     	add	x0, x19, #1
10001676c:     	ldp	x29, x30, [sp, #16]
100016770:     	ldp	x20, x19, [sp], #32
100016774:     	ret
100016778:     	ldr	w8, [x4, #160]
10001677c:     	orr	w8, w8, #0x400
100016780:     	str	w8, [x4, #160]
100016784:     	add	x0, x19, #1
100016788:     	ldp	x29, x30, [sp, #16]
10001678c:     	ldp	x20, x19, [sp], #32
100016790:     	ret
100016794:     	ldr	w8, [x4, #160]
100016798:     	orr	w8, w8, #0x4000
10001679c:     	str	w8, [x4, #160]
1000167a0:     	add	x0, x19, #1
1000167a4:     	ldp	x29, x30, [sp, #16]
1000167a8:     	ldp	x20, x19, [sp], #32
1000167ac:     	ret
1000167b0:     	ldr	w8, [x4, #160]
1000167b4:     	mov	w9, #1280
1000167b8:     	orr	w8, w8, w9
1000167bc:     	str	w8, [x4, #160]
1000167c0:     	mov	x0, x4
1000167c4:     	mov	w1, #95
1000167c8:     	bl	0x100014608 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_char[abi:ue170006](char)>
1000167cc:     	add	x0, x19, #1
1000167d0:     	ldp	x29, x30, [sp, #16]
1000167d4:     	ldp	x20, x19, [sp], #32
1000167d8:     	ret
1000167dc:     	bl	0x1000136d4 <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)3>()>

00000001000167e0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_awk_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)>:
1000167e0:     	stp	x20, x19, [sp, #-32]!
1000167e4:     	stp	x29, x30, [sp, #16]
1000167e8:     	add	x29, sp, #16
1000167ec:     	cmp	x1, x2
1000167f0:     	b.eq	0x100016ac8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_awk_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x2e8>
1000167f4:     	mov	x19, x1
1000167f8:     	ldrsb	w1, [x1]
1000167fc:     	sub	w8, w1, #34
100016800:     	cmp	w8, #84
100016804:     	b.hi	0x100016858 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_awk_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x78>
100016808:     	adrp	x9, 0x100032000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_awk_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x98>
10001680c:     	add	x9, x9, #3184
100016810:     	adr	x10, #16
100016814:     	ldrb	w11, [x9, x8]
100016818:     	add	x10, x10, x11, lsl #2
10001681c:     	br	x10
100016820:     	cbz	x3, 0x100016840 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_awk_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x60>
100016824:     	mov	x0, x3
100016828:     	bl	0x10002ed8c <_vsnprintf+0x10002ed8c>
10001682c:     	add	x20, x19, #1
100016830:     	mov	x0, x20
100016834:     	ldp	x29, x30, [sp, #16]
100016838:     	ldp	x20, x19, [sp], #32
10001683c:     	ret
100016840:     	bl	0x100013cd4 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_char(char)>
100016844:     	add	x20, x19, #1
100016848:     	mov	x0, x20
10001684c:     	ldp	x29, x30, [sp, #16]
100016850:     	ldp	x20, x19, [sp], #32
100016854:     	ret
100016858:     	and	w8, w1, #0xfffffff8
10001685c:     	cmp	w8, #48
100016860:     	b.ne	0x100016ac8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_awk_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x2e8>
100016864:     	sub	w8, w1, #48
100016868:     	add	x20, x19, #1
10001686c:     	cmp	x20, x2
100016870:     	b.eq	0x1000169c0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_awk_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x1e0>
100016874:     	ldrb	w9, [x20]
100016878:     	and	w10, w9, #0xf8
10001687c:     	cmp	w10, #48
100016880:     	b.ne	0x1000169c4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_awk_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x1e4>
100016884:     	add	w8, w9, w8, lsl #3
100016888:     	sub	w8, w8, #48
10001688c:     	add	x9, x19, #2
100016890:     	cmp	x9, x2
100016894:     	b.eq	0x100016aa8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_awk_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x2c8>
100016898:     	ldrb	w10, [x9]
10001689c:     	and	w11, w10, #0xf8
1000168a0:     	add	x12, x19, #3
1000168a4:     	add	w10, w10, w8, lsl #3
1000168a8:     	sub	w10, w10, #48
1000168ac:     	cmp	w11, #48
1000168b0:     	csel	w8, w8, w10, ne
1000168b4:     	csel	x20, x9, x12, ne
1000168b8:     	sxtb	w1, w8
1000168bc:     	cbnz	x3, 0x1000169cc <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_awk_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x1ec>
1000168c0:     	b	0x100016ab4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_awk_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x2d4>
1000168c4:     	cbz	x3, 0x1000169e4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_awk_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x204>
1000168c8:     	mov	x0, x3
1000168cc:     	mov	w1, #7
1000168d0:     	bl	0x10002ed8c <_vsnprintf+0x10002ed8c>
1000168d4:     	add	x20, x19, #1
1000168d8:     	mov	x0, x20
1000168dc:     	ldp	x29, x30, [sp, #16]
1000168e0:     	ldp	x20, x19, [sp], #32
1000168e4:     	ret
1000168e8:     	cbz	x3, 0x100016a00 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_awk_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x220>
1000168ec:     	mov	x0, x3
1000168f0:     	mov	w1, #8
1000168f4:     	bl	0x10002ed8c <_vsnprintf+0x10002ed8c>
1000168f8:     	add	x20, x19, #1
1000168fc:     	mov	x0, x20
100016900:     	ldp	x29, x30, [sp, #16]
100016904:     	ldp	x20, x19, [sp], #32
100016908:     	ret
10001690c:     	cbz	x3, 0x100016a1c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_awk_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x23c>
100016910:     	mov	x0, x3
100016914:     	mov	w1, #12
100016918:     	bl	0x10002ed8c <_vsnprintf+0x10002ed8c>
10001691c:     	add	x20, x19, #1
100016920:     	mov	x0, x20
100016924:     	ldp	x29, x30, [sp, #16]
100016928:     	ldp	x20, x19, [sp], #32
10001692c:     	ret
100016930:     	cbz	x3, 0x100016a38 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_awk_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x258>
100016934:     	mov	x0, x3
100016938:     	mov	w1, #10
10001693c:     	bl	0x10002ed8c <_vsnprintf+0x10002ed8c>
100016940:     	add	x20, x19, #1
100016944:     	mov	x0, x20
100016948:     	ldp	x29, x30, [sp, #16]
10001694c:     	ldp	x20, x19, [sp], #32
100016950:     	ret
100016954:     	cbz	x3, 0x100016a54 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_awk_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x274>
100016958:     	mov	x0, x3
10001695c:     	mov	w1, #13
100016960:     	bl	0x10002ed8c <_vsnprintf+0x10002ed8c>
100016964:     	add	x20, x19, #1
100016968:     	mov	x0, x20
10001696c:     	ldp	x29, x30, [sp, #16]
100016970:     	ldp	x20, x19, [sp], #32
100016974:     	ret
100016978:     	cbz	x3, 0x100016a70 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_awk_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x290>
10001697c:     	mov	x0, x3
100016980:     	mov	w1, #9
100016984:     	bl	0x10002ed8c <_vsnprintf+0x10002ed8c>
100016988:     	add	x20, x19, #1
10001698c:     	mov	x0, x20
100016990:     	ldp	x29, x30, [sp, #16]
100016994:     	ldp	x20, x19, [sp], #32
100016998:     	ret
10001699c:     	cbz	x3, 0x100016a8c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_awk_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x2ac>
1000169a0:     	mov	x0, x3
1000169a4:     	mov	w1, #11
1000169a8:     	bl	0x10002ed8c <_vsnprintf+0x10002ed8c>
1000169ac:     	add	x20, x19, #1
1000169b0:     	mov	x0, x20
1000169b4:     	ldp	x29, x30, [sp, #16]
1000169b8:     	ldp	x20, x19, [sp], #32
1000169bc:     	ret
1000169c0:     	mov	x20, x2
1000169c4:     	sxtb	w1, w8
1000169c8:     	cbz	x3, 0x100016ab4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_awk_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x2d4>
1000169cc:     	mov	x0, x3
1000169d0:     	bl	0x10002ed8c <_vsnprintf+0x10002ed8c>
1000169d4:     	mov	x0, x20
1000169d8:     	ldp	x29, x30, [sp, #16]
1000169dc:     	ldp	x20, x19, [sp], #32
1000169e0:     	ret
1000169e4:     	mov	w1, #7
1000169e8:     	bl	0x100013cd4 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_char(char)>
1000169ec:     	add	x20, x19, #1
1000169f0:     	mov	x0, x20
1000169f4:     	ldp	x29, x30, [sp, #16]
1000169f8:     	ldp	x20, x19, [sp], #32
1000169fc:     	ret
100016a00:     	mov	w1, #8
100016a04:     	bl	0x100013cd4 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_char(char)>
100016a08:     	add	x20, x19, #1
100016a0c:     	mov	x0, x20
100016a10:     	ldp	x29, x30, [sp, #16]
100016a14:     	ldp	x20, x19, [sp], #32
100016a18:     	ret
100016a1c:     	mov	w1, #12
100016a20:     	bl	0x100013cd4 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_char(char)>
100016a24:     	add	x20, x19, #1
100016a28:     	mov	x0, x20
100016a2c:     	ldp	x29, x30, [sp, #16]
100016a30:     	ldp	x20, x19, [sp], #32
100016a34:     	ret
100016a38:     	mov	w1, #10
100016a3c:     	bl	0x100013cd4 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_char(char)>
100016a40:     	add	x20, x19, #1
100016a44:     	mov	x0, x20
100016a48:     	ldp	x29, x30, [sp, #16]
100016a4c:     	ldp	x20, x19, [sp], #32
100016a50:     	ret
100016a54:     	mov	w1, #13
100016a58:     	bl	0x100013cd4 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_char(char)>
100016a5c:     	add	x20, x19, #1
100016a60:     	mov	x0, x20
100016a64:     	ldp	x29, x30, [sp, #16]
100016a68:     	ldp	x20, x19, [sp], #32
100016a6c:     	ret
100016a70:     	mov	w1, #9
100016a74:     	bl	0x100013cd4 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_char(char)>
100016a78:     	add	x20, x19, #1
100016a7c:     	mov	x0, x20
100016a80:     	ldp	x29, x30, [sp, #16]
100016a84:     	ldp	x20, x19, [sp], #32
100016a88:     	ret
100016a8c:     	mov	w1, #11
100016a90:     	bl	0x100013cd4 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_char(char)>
100016a94:     	add	x20, x19, #1
100016a98:     	mov	x0, x20
100016a9c:     	ldp	x29, x30, [sp, #16]
100016aa0:     	ldp	x20, x19, [sp], #32
100016aa4:     	ret
100016aa8:     	mov	x20, x2
100016aac:     	sxtb	w1, w8
100016ab0:     	cbnz	x3, 0x1000169cc <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_awk_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x1ec>
100016ab4:     	bl	0x100013cd4 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_char(char)>
100016ab8:     	mov	x0, x20
100016abc:     	ldp	x29, x30, [sp, #16]
100016ac0:     	ldp	x20, x19, [sp], #32
100016ac4:     	ret
100016ac8:     	bl	0x1000136d4 <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)3>()>

0000000100016acc <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)>:
100016acc:     	sub	sp, sp, #160
100016ad0:     	stp	x24, x23, [sp, #96]
100016ad4:     	stp	x22, x21, [sp, #112]
100016ad8:     	stp	x20, x19, [sp, #128]
100016adc:     	stp	x29, x30, [sp, #144]
100016ae0:     	add	x29, sp, #144
100016ae4:     	mov	x20, x2
100016ae8:     	mov	x21, x1
100016aec:     	mov	x19, x0
100016af0:     	ldrb	w8, [x0, #170]
100016af4:     	cbz	w8, 0x100016bcc <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x100>
100016af8:     	ldrb	w8, [x19, #169]
100016afc:     	cbz	w8, 0x100016be8 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x11c>
100016b00:     	mov	x23, #0
100016b04:     	add	x22, x21, #23
100016b08:     	b	0x100016b14 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x48>
100016b0c:     	strb	w0, [x8, x23]
100016b10:     	add	x23, x23, #1
100016b14:     	ldrsb	w8, [x22]
100016b18:     	tbnz	w8, #31, 0x100016b30 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x64>
100016b1c:     	and	x9, x8, #0xff
100016b20:     	mov	x8, x21
100016b24:     	cmp	x23, x9
100016b28:     	b.lo	0x100016b40 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x74>
100016b2c:     	b	0x100016b68 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x9c>
100016b30:     	ldr	x8, [x21, #8]
100016b34:     	cmp	x23, x8
100016b38:     	b.hs	0x100016b68 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x9c>
100016b3c:     	ldr	x8, [x21]
100016b40:     	ldrsb	w1, [x8, x23]
100016b44:     	ldr	x0, [x19, #24]
100016b48:     	ldr	x8, [x0]
100016b4c:     	ldr	x8, [x8, #40]
100016b50:     	blr	x8
100016b54:     	ldrsb	w9, [x21, #23]
100016b58:     	mov	x8, x21
100016b5c:     	tbz	w9, #31, 0x100016b0c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x40>
100016b60:     	ldr	x8, [x21]
100016b64:     	b	0x100016b0c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x40>
100016b68:     	mov	x23, #0
100016b6c:     	b	0x100016b78 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xac>
100016b70:     	strb	w0, [x8, x23]
100016b74:     	add	x23, x23, #1
100016b78:     	ldrsb	w8, [x20, #23]
100016b7c:     	tbnz	w8, #31, 0x100016b94 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xc8>
100016b80:     	and	x9, x8, #0xff
100016b84:     	mov	x8, x20
100016b88:     	cmp	x23, x9
100016b8c:     	b.lo	0x100016ba4 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xd8>
100016b90:     	b	0x100016bec <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x120>
100016b94:     	ldr	x8, [x20, #8]
100016b98:     	cmp	x23, x8
100016b9c:     	b.hs	0x100016bec <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x120>
100016ba0:     	ldr	x8, [x20]
100016ba4:     	ldrsb	w1, [x8, x23]
100016ba8:     	ldr	x0, [x19, #24]
100016bac:     	ldr	x8, [x0]
100016bb0:     	ldr	x8, [x8, #40]
100016bb4:     	blr	x8
100016bb8:     	ldrsb	w9, [x20, #23]
100016bbc:     	mov	x8, x20
100016bc0:     	tbz	w9, #31, 0x100016b70 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xa4>
100016bc4:     	ldr	x8, [x20]
100016bc8:     	b	0x100016b70 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0xa4>
100016bcc:     	ldrsb	w9, [x21, #23]
100016bd0:     	and	x8, x9, #0xff
100016bd4:     	tbnz	w9, #31, 0x100016d18 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x24c>
100016bd8:     	mov	x9, x8
100016bdc:     	cmp	x8, #1
100016be0:     	b.eq	0x100016d24 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x258>
100016be4:     	b	0x100016e88 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x3bc>
100016be8:     	add	x22, x21, #23
100016bec:     	ldrsb	w8, [x22]
100016bf0:     	add	x22, x19, #16
100016bf4:     	tbnz	w8, #31, 0x100016c00 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x134>
100016bf8:     	and	x8, x8, #0xff
100016bfc:     	b	0x100016c04 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x138>
100016c00:     	ldp	x21, x8, [x21]
100016c04:     	add	x2, x21, x8
100016c08:     	add	x8, sp, #24
100016c0c:     	mov	x0, x22
100016c10:     	mov	x1, x21
100016c14:     	bl	0x1000180e0 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::transform<std::__1::__wrap_iter<char*>>(std::__1::__wrap_iter<char*>, std::__1::__wrap_iter<char*>) const>
100016c18:     	ldrsb	w8, [x20, #23]
100016c1c:     	tbnz	w8, #31, 0x100016c28 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x15c>
100016c20:     	and	x8, x8, #0xff
100016c24:     	b	0x100016c2c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x160>
100016c28:     	ldp	x20, x8, [x20]
100016c2c:     	add	x2, x20, x8
100016c30:     	mov	x8, sp
100016c34:     	mov	x0, x22
100016c38:     	mov	x1, x20
100016c3c:     	bl	0x1000180e0 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::transform<std::__1::__wrap_iter<char*>>(std::__1::__wrap_iter<char*>, std::__1::__wrap_iter<char*>) const>
100016c40:     	ldur	q0, [sp, #24]
100016c44:     	str	q0, [sp, #48]
100016c48:     	ldr	x8, [sp, #40]
100016c4c:     	str	x8, [sp, #64]
100016c50:     	stp	xzr, xzr, [sp, #32]
100016c54:     	ldr	q0, [sp]
100016c58:     	stur	q0, [sp, #72]
100016c5c:     	ldr	x8, [sp, #16]
100016c60:     	str	x8, [sp, #88]
100016c64:     	stp	xzr, xzr, [sp]
100016c68:     	stp	xzr, xzr, [sp, #16]
100016c6c:     	ldp	x8, x9, [x19, #96]
100016c70:     	cmp	x8, x9
100016c74:     	b.hs	0x100016ce4 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x218>
100016c78:     	add	x9, sp, #48
100016c7c:     	add	x9, x9, #24
100016c80:     	ldr	q0, [sp, #48]
100016c84:     	ldr	x10, [sp, #64]
100016c88:     	str	x10, [x8, #16]
100016c8c:     	str	q0, [x8]
100016c90:     	stp	xzr, xzr, [sp, #56]
100016c94:     	str	xzr, [sp, #48]
100016c98:     	ldr	x10, [x9, #16]
100016c9c:     	ldr	q0, [x9]
100016ca0:     	stur	q0, [x8, #24]
100016ca4:     	str	x10, [x8, #40]
100016ca8:     	stp	xzr, xzr, [x9, #8]
100016cac:     	str	xzr, [x9]
100016cb0:     	add	x8, x8, #48
100016cb4:     	str	x8, [x19, #96]
100016cb8:     	ldrsb	w8, [sp, #71]
100016cbc:     	tbz	w8, #31, 0x100016d00 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x234>
100016cc0:     	ldr	x0, [sp, #48]
100016cc4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100016cc8:     	ldrsb	w8, [sp, #23]
100016ccc:     	tbz	w8, #31, 0x100016d08 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x23c>
100016cd0:     	ldr	x0, [sp]
100016cd4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100016cd8:     	ldrsb	w8, [sp, #47]
100016cdc:     	tbz	w8, #31, 0x100016e64 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x398>
100016ce0:     	b	0x100016d10 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x244>
100016ce4:     	add	x0, x19, #88
100016ce8:     	add	x1, sp, #48
100016cec:     	bl	0x1000182ac <void std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__push_back_slow_path<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>&&)>
100016cf0:     	ldrsb	w8, [sp, #95]
100016cf4:     	tbnz	w8, #31, 0x100016e8c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x3c0>
100016cf8:     	ldrsb	w8, [sp, #71]
100016cfc:     	tbnz	w8, #31, 0x100016cc0 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x1f4>
100016d00:     	ldrsb	w8, [sp, #23]
100016d04:     	tbnz	w8, #31, 0x100016cd0 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x204>
100016d08:     	ldrsb	w8, [sp, #47]
100016d0c:     	tbz	w8, #31, 0x100016e64 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x398>
100016d10:     	ldr	x0, [sp, #24]
100016d14:     	b	0x100016e2c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x360>
100016d18:     	ldr	x9, [x21, #8]
100016d1c:     	cmp	x9, #1
100016d20:     	b.ne	0x100016e88 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x3bc>
100016d24:     	ldrsb	w9, [x20, #23]
100016d28:     	tbnz	w9, #31, 0x100016e7c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x3b0>
100016d2c:     	and	x9, x9, #0xff
100016d30:     	cmp	x9, #1
100016d34:     	b.ne	0x100016e88 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x3bc>
100016d38:     	ldrb	w9, [x19, #169]
100016d3c:     	cbz	w9, 0x100016da4 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x2d8>
100016d40:     	mov	x9, x21
100016d44:     	tbz	w8, #7, 0x100016d4c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x280>
100016d48:     	ldr	x9, [x21]
100016d4c:     	ldrsb	w1, [x9]
100016d50:     	ldr	x0, [x19, #24]
100016d54:     	ldr	x8, [x0]
100016d58:     	ldr	x8, [x8, #40]
100016d5c:     	blr	x8
100016d60:     	ldrsb	w9, [x21, #23]
100016d64:     	mov	x8, x21
100016d68:     	tbnz	w9, #31, 0x100016ea0 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x3d4>
100016d6c:     	strb	w0, [x8]
100016d70:     	ldrsb	w9, [x20, #23]
100016d74:     	mov	x8, x20
100016d78:     	tbnz	w9, #31, 0x100016eb4 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x3e8>
100016d7c:     	ldrsb	w1, [x8]
100016d80:     	ldr	x0, [x19, #24]
100016d84:     	ldr	x8, [x0]
100016d88:     	ldr	x8, [x8, #40]
100016d8c:     	blr	x8
100016d90:     	ldrsb	w9, [x20, #23]
100016d94:     	mov	x8, x20
100016d98:     	tbz	w9, #31, 0x100016da0 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x2d4>
100016d9c:     	ldr	x8, [x20]
100016da0:     	strb	w0, [x8]
100016da4:     	ldr	q0, [x21]
100016da8:     	str	q0, [sp, #48]
100016dac:     	ldr	x8, [x21, #16]
100016db0:     	str	x8, [sp, #64]
100016db4:     	stp	xzr, xzr, [x21, #8]
100016db8:     	str	xzr, [x21]
100016dbc:     	ldr	q0, [x20]
100016dc0:     	stur	q0, [sp, #72]
100016dc4:     	ldr	x8, [x20, #16]
100016dc8:     	str	x8, [sp, #88]
100016dcc:     	stp	xzr, xzr, [x20, #8]
100016dd0:     	str	xzr, [x20]
100016dd4:     	ldp	x8, x9, [x19, #96]
100016dd8:     	cmp	x8, x9
100016ddc:     	b.hs	0x100016e48 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x37c>
100016de0:     	add	x9, sp, #48
100016de4:     	add	x9, x9, #24
100016de8:     	ldr	q0, [sp, #48]
100016dec:     	ldr	x10, [sp, #64]
100016df0:     	str	x10, [x8, #16]
100016df4:     	str	q0, [x8]
100016df8:     	stp	xzr, xzr, [sp, #56]
100016dfc:     	str	xzr, [sp, #48]
100016e00:     	ldr	x10, [x9, #16]
100016e04:     	ldr	q0, [x9]
100016e08:     	stur	q0, [x8, #24]
100016e0c:     	str	x10, [x8, #40]
100016e10:     	stp	xzr, xzr, [x9, #8]
100016e14:     	str	xzr, [x9]
100016e18:     	add	x8, x8, #48
100016e1c:     	str	x8, [x19, #96]
100016e20:     	ldrsb	w8, [sp, #71]
100016e24:     	tbz	w8, #31, 0x100016e64 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x398>
100016e28:     	ldr	x0, [sp, #48]
100016e2c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100016e30:     	ldp	x29, x30, [sp, #144]
100016e34:     	ldp	x20, x19, [sp, #128]
100016e38:     	ldp	x22, x21, [sp, #112]
100016e3c:     	ldp	x24, x23, [sp, #96]
100016e40:     	add	sp, sp, #160
100016e44:     	ret
100016e48:     	add	x0, x19, #88
100016e4c:     	add	x1, sp, #48
100016e50:     	bl	0x1000182ac <void std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__push_back_slow_path<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>&&)>
100016e54:     	ldrsb	w8, [sp, #95]
100016e58:     	tbnz	w8, #31, 0x100016ebc <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x3f0>
100016e5c:     	ldrsb	w8, [sp, #71]
100016e60:     	tbnz	w8, #31, 0x100016e28 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x35c>
100016e64:     	ldp	x29, x30, [sp, #144]
100016e68:     	ldp	x20, x19, [sp, #128]
100016e6c:     	ldp	x22, x21, [sp, #112]
100016e70:     	ldp	x24, x23, [sp, #96]
100016e74:     	add	sp, sp, #160
100016e78:     	ret
100016e7c:     	ldr	x9, [x20, #8]
100016e80:     	cmp	x9, #1
100016e84:     	b.eq	0x100016d38 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x26c>
100016e88:     	bl	0x100018260 <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)9>()>
100016e8c:     	ldr	x0, [sp, #72]
100016e90:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100016e94:     	ldrsb	w8, [sp, #71]
100016e98:     	tbz	w8, #31, 0x100016d00 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x234>
100016e9c:     	b	0x100016cc0 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x1f4>
100016ea0:     	ldr	x8, [x21]
100016ea4:     	strb	w0, [x8]
100016ea8:     	ldrsb	w9, [x20, #23]
100016eac:     	mov	x8, x20
100016eb0:     	tbz	w9, #31, 0x100016d7c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x2b0>
100016eb4:     	ldr	x8, [x20]
100016eb8:     	b	0x100016d7c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x2b0>
100016ebc:     	ldr	x0, [sp, #72]
100016ec0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100016ec4:     	ldrsb	w8, [sp, #71]
100016ec8:     	tbz	w8, #31, 0x100016e64 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x398>
100016ecc:     	b	0x100016e28 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x35c>
100016ed0:     	mov	x19, x0
100016ed4:     	add	x0, sp, #48
100016ed8:     	bl	0x100015734 <std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>::~pair()>
100016edc:     	b	0x100016f14 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x448>
100016ee0:     	mov	x19, x0
100016ee4:     	add	x0, sp, #48
100016ee8:     	bl	0x100015734 <std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>::~pair()>
100016eec:     	ldrsb	w8, [sp, #23]
100016ef0:     	tbz	w8, #31, 0x100016f04 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x438>
100016ef4:     	ldr	x0, [sp]
100016ef8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100016efc:     	b	0x100016f04 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x438>
100016f00:     	mov	x19, x0
100016f04:     	ldrsb	w8, [sp, #47]
100016f08:     	tbz	w8, #31, 0x100016f14 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_range[abi:ue170006](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>)+0x448>
100016f0c:     	ldr	x0, [sp, #24]
100016f10:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100016f14:     	mov	x0, x19
100016f18:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100016f1c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)>:
100016f1c:     	stp	x26, x25, [sp, #-80]!
100016f20:     	stp	x24, x23, [sp, #16]
100016f24:     	stp	x22, x21, [sp, #32]
100016f28:     	stp	x20, x19, [sp, #48]
100016f2c:     	stp	x29, x30, [sp, #64]
100016f30:     	add	x29, sp, #64
100016f34:     	mov	x21, x2
100016f38:     	mov	x22, x1
100016f3c:     	mov	x19, x0
100016f40:     	ldrb	w8, [x0, #169]
100016f44:     	cbz	w8, 0x100016fe8 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)+0xcc>
100016f48:     	ldr	x0, [x19, #24]
100016f4c:     	ldr	x8, [x0]
100016f50:     	ldr	x8, [x8, #40]
100016f54:     	mov	x1, x22
100016f58:     	blr	x8
100016f5c:     	mov	x22, x0
100016f60:     	ldr	x0, [x19, #24]
100016f64:     	ldr	x8, [x0]
100016f68:     	ldr	x8, [x8, #40]
100016f6c:     	mov	x1, x21
100016f70:     	blr	x8
100016f74:     	bfi	w22, w0, #8, #24
100016f78:     	ldp	x21, x8, [x19, #120]
100016f7c:     	cmp	x21, x8
100016f80:     	b.lo	0x100017068 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)+0x14c>
100016f84:     	add	x20, x19, #112
100016f88:     	ldr	x23, [x20]
100016f8c:     	sub	x25, x21, x23
100016f90:     	cmn	x25, #3
100016f94:     	b.le	0x100017300 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)+0x3e4>
100016f98:     	asr	x24, x25, #1
100016f9c:     	add	x9, x24, #1
100016fa0:     	sub	x8, x8, x23
100016fa4:     	cmp	x8, x9
100016fa8:     	csinc	x9, x8, x24, hi
100016fac:     	mov	x10, #9223372036854775806
100016fb0:     	mov	x11, #9223372036854775807
100016fb4:     	cmp	x8, x10
100016fb8:     	csel	x26, x9, x11, lo
100016fbc:     	cbz	x26, 0x100017074 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)+0x158>
100016fc0:     	tbnz	x26, #63, 0x100017308 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)+0x3ec>
100016fc4:     	lsl	x0, x26, #1
100016fc8:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100016fcc:     	add	x9, x0, x24, lsl #1
100016fd0:     	add	x8, x0, x26, lsl #1
100016fd4:     	mov	x10, x9
100016fd8:     	strh	w22, [x10], #2
100016fdc:     	subs	x11, x21, x23
100016fe0:     	b.ne	0x100017090 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)+0x174>
100016fe4:     	b	0x1000172c0 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)+0x3a4>
100016fe8:     	ldrb	w9, [x19, #170]
100016fec:     	add	x20, x19, #112
100016ff0:     	bfi	w22, w21, #8, #24
100016ff4:     	ldp	x21, x8, [x19, #120]
100016ff8:     	cmp	x21, x8
100016ffc:     	cbz	w9, 0x100017064 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)+0x148>
100017000:     	b.lo	0x100017068 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)+0x14c>
100017004:     	ldr	x23, [x20]
100017008:     	sub	x25, x21, x23
10001700c:     	cmn	x25, #3
100017010:     	b.le	0x100017300 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)+0x3e4>
100017014:     	asr	x24, x25, #1
100017018:     	add	x9, x24, #1
10001701c:     	sub	x8, x8, x23
100017020:     	cmp	x8, x9
100017024:     	csinc	x9, x8, x24, hi
100017028:     	mov	x10, #9223372036854775806
10001702c:     	mov	x11, #9223372036854775807
100017030:     	cmp	x8, x10
100017034:     	csel	x26, x9, x11, lo
100017038:     	cbz	x26, 0x100017178 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)+0x25c>
10001703c:     	tbnz	x26, #63, 0x100017308 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)+0x3ec>
100017040:     	lsl	x0, x26, #1
100017044:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100017048:     	add	x9, x0, x24, lsl #1
10001704c:     	add	x8, x0, x26, lsl #1
100017050:     	mov	x10, x9
100017054:     	strh	w22, [x10], #2
100017058:     	subs	x11, x21, x23
10001705c:     	b.ne	0x100017194 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)+0x278>
100017060:     	b	0x1000172c0 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)+0x3a4>
100017064:     	b.hs	0x100017118 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)+0x1fc>
100017068:     	strh	w22, [x21], #2
10001706c:     	str	x21, [x19, #120]
100017070:     	b	0x1000172e8 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)+0x3cc>
100017074:     	mov	x0, #0
100017078:     	add	x9, x0, x24, lsl #1
10001707c:     	add	x8, x0, x26, lsl #1
100017080:     	mov	x10, x9
100017084:     	strh	w22, [x10], #2
100017088:     	subs	x11, x21, x23
10001708c:     	b.eq	0x1000172c0 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)+0x3a4>
100017090:     	sub	x11, x11, #2
100017094:     	cmp	x11, #62
100017098:     	b.lo	0x100017104 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)+0x1e8>
10001709c:     	and	x12, x25, #0xfffffffffffffffe
1000170a0:     	add	x12, x12, x0
1000170a4:     	sub	x12, x21, x12
1000170a8:     	cmp	x12, #64
1000170ac:     	b.lo	0x100017104 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)+0x1e8>
1000170b0:     	lsr	x11, x11, #1
1000170b4:     	add	x11, x11, #1
1000170b8:     	and	x12, x11, #0xffffffffffffffe0
1000170bc:     	lsl	x14, x12, #1
1000170c0:     	sub	x13, x21, x14
1000170c4:     	sub	x9, x9, x14
1000170c8:     	sub	x14, x21, #32
1000170cc:     	add	x15, x0, x24, lsl #1
1000170d0:     	sub	x15, x15, #32
1000170d4:     	mov	x16, x12
1000170d8:     	ldp	q1, q0, [x14]
1000170dc:     	ldp	q3, q2, [x14, #-32]
1000170e0:     	stp	q1, q0, [x15]
1000170e4:     	stp	q3, q2, [x15, #-32]
1000170e8:     	sub	x14, x14, #64
1000170ec:     	sub	x15, x15, #64
1000170f0:     	sub	x16, x16, #32
1000170f4:     	cbnz	x16, 0x1000170d8 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)+0x1bc>
1000170f8:     	mov	x21, x13
1000170fc:     	cmp	x11, x12
100017100:     	b.eq	0x1000172bc <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)+0x3a0>
100017104:     	ldrh	w11, [x21, #-2]!
100017108:     	strh	w11, [x9, #-2]!
10001710c:     	cmp	x21, x23
100017110:     	b.ne	0x100017104 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)+0x1e8>
100017114:     	b	0x1000172bc <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)+0x3a0>
100017118:     	ldr	x23, [x20]
10001711c:     	sub	x25, x21, x23
100017120:     	cmn	x25, #3
100017124:     	b.le	0x100017300 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)+0x3e4>
100017128:     	asr	x24, x25, #1
10001712c:     	add	x9, x24, #1
100017130:     	sub	x8, x8, x23
100017134:     	cmp	x8, x9
100017138:     	csinc	x9, x8, x24, hi
10001713c:     	mov	x10, #9223372036854775806
100017140:     	mov	x11, #9223372036854775807
100017144:     	cmp	x8, x10
100017148:     	csel	x26, x9, x11, lo
10001714c:     	cbz	x26, 0x10001721c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)+0x300>
100017150:     	tbnz	x26, #63, 0x100017308 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)+0x3ec>
100017154:     	lsl	x0, x26, #1
100017158:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001715c:     	add	x9, x0, x24, lsl #1
100017160:     	add	x8, x0, x26, lsl #1
100017164:     	mov	x10, x9
100017168:     	strh	w22, [x10], #2
10001716c:     	subs	x11, x21, x23
100017170:     	b.ne	0x100017238 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)+0x31c>
100017174:     	b	0x1000172c0 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)+0x3a4>
100017178:     	mov	x0, #0
10001717c:     	add	x9, x0, x24, lsl #1
100017180:     	add	x8, x0, x26, lsl #1
100017184:     	mov	x10, x9
100017188:     	strh	w22, [x10], #2
10001718c:     	subs	x11, x21, x23
100017190:     	b.eq	0x1000172c0 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)+0x3a4>
100017194:     	sub	x11, x11, #2
100017198:     	cmp	x11, #62
10001719c:     	b.lo	0x100017208 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)+0x2ec>
1000171a0:     	and	x12, x25, #0xfffffffffffffffe
1000171a4:     	add	x12, x12, x0
1000171a8:     	sub	x12, x21, x12
1000171ac:     	cmp	x12, #64
1000171b0:     	b.lo	0x100017208 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)+0x2ec>
1000171b4:     	lsr	x11, x11, #1
1000171b8:     	add	x11, x11, #1
1000171bc:     	and	x12, x11, #0xffffffffffffffe0
1000171c0:     	lsl	x14, x12, #1
1000171c4:     	sub	x13, x21, x14
1000171c8:     	sub	x9, x9, x14
1000171cc:     	sub	x14, x21, #32
1000171d0:     	add	x15, x0, x24, lsl #1
1000171d4:     	sub	x15, x15, #32
1000171d8:     	mov	x16, x12
1000171dc:     	ldp	q1, q0, [x14]
1000171e0:     	ldp	q3, q2, [x14, #-32]
1000171e4:     	stp	q1, q0, [x15]
1000171e8:     	stp	q3, q2, [x15, #-32]
1000171ec:     	sub	x14, x14, #64
1000171f0:     	sub	x15, x15, #64
1000171f4:     	sub	x16, x16, #32
1000171f8:     	cbnz	x16, 0x1000171dc <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)+0x2c0>
1000171fc:     	mov	x21, x13
100017200:     	cmp	x11, x12
100017204:     	b.eq	0x1000172bc <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)+0x3a0>
100017208:     	ldrh	w11, [x21, #-2]!
10001720c:     	strh	w11, [x9, #-2]!
100017210:     	cmp	x21, x23
100017214:     	b.ne	0x100017208 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)+0x2ec>
100017218:     	b	0x1000172bc <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)+0x3a0>
10001721c:     	mov	x0, #0
100017220:     	add	x9, x0, x24, lsl #1
100017224:     	add	x8, x0, x26, lsl #1
100017228:     	mov	x10, x9
10001722c:     	strh	w22, [x10], #2
100017230:     	subs	x11, x21, x23
100017234:     	b.eq	0x1000172c0 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)+0x3a4>
100017238:     	sub	x11, x11, #2
10001723c:     	cmp	x11, #62
100017240:     	b.lo	0x1000172ac <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)+0x390>
100017244:     	and	x12, x25, #0xfffffffffffffffe
100017248:     	add	x12, x12, x0
10001724c:     	sub	x12, x21, x12
100017250:     	cmp	x12, #64
100017254:     	b.lo	0x1000172ac <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)+0x390>
100017258:     	lsr	x11, x11, #1
10001725c:     	add	x11, x11, #1
100017260:     	and	x12, x11, #0xffffffffffffffe0
100017264:     	lsl	x14, x12, #1
100017268:     	sub	x13, x21, x14
10001726c:     	sub	x9, x9, x14
100017270:     	sub	x14, x21, #32
100017274:     	add	x15, x0, x24, lsl #1
100017278:     	sub	x15, x15, #32
10001727c:     	mov	x16, x12
100017280:     	ldp	q1, q0, [x14]
100017284:     	ldp	q3, q2, [x14, #-32]
100017288:     	stp	q1, q0, [x15]
10001728c:     	stp	q3, q2, [x15, #-32]
100017290:     	sub	x14, x14, #64
100017294:     	sub	x15, x15, #64
100017298:     	sub	x16, x16, #32
10001729c:     	cbnz	x16, 0x100017280 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)+0x364>
1000172a0:     	mov	x21, x13
1000172a4:     	cmp	x11, x12
1000172a8:     	b.eq	0x1000172bc <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)+0x3a0>
1000172ac:     	ldrh	w11, [x21, #-2]!
1000172b0:     	strh	w11, [x9, #-2]!
1000172b4:     	cmp	x21, x23
1000172b8:     	b.ne	0x1000172ac <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)+0x390>
1000172bc:     	ldr	x21, [x20]
1000172c0:     	stp	x9, x10, [x19, #112]
1000172c4:     	str	x8, [x19, #128]
1000172c8:     	cbz	x21, 0x1000172e8 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_digraph[abi:ue170006](char, char)+0x3cc>
1000172cc:     	mov	x0, x21
1000172d0:     	ldp	x29, x30, [sp, #64]
1000172d4:     	ldp	x20, x19, [sp, #48]
1000172d8:     	ldp	x22, x21, [sp, #32]
1000172dc:     	ldp	x24, x23, [sp, #16]
1000172e0:     	ldp	x26, x25, [sp], #80
1000172e4:     	b	0x10002f014 <_vsnprintf+0x10002f014>
1000172e8:     	ldp	x29, x30, [sp, #64]
1000172ec:     	ldp	x20, x19, [sp, #48]
1000172f0:     	ldp	x22, x21, [sp, #32]
1000172f4:     	ldp	x24, x23, [sp, #16]
1000172f8:     	ldp	x26, x25, [sp], #80
1000172fc:     	ret
100017300:     	mov	x0, x20
100017304:     	bl	0x10001848c <std::__1::vector<std::__1::pair<char, char>, std::__1::allocator<std::__1::pair<char, char>>>::__throw_length_error[abi:ue170006]() const>
100017308:     	bl	0x100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>

000000010001730c <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)1>()>:
10001730c:     	stp	x20, x19, [sp, #-32]!
100017310:     	stp	x29, x30, [sp, #16]
100017314:     	add	x29, sp, #16
100017318:     	mov	w0, #24
10001731c:     	bl	0x10002f038 <_vsnprintf+0x10002f038>
100017320:     	mov	x19, x0
100017324:     	mov	w1, #1
100017328:     	bl	0x10002ed20 <_vsnprintf+0x10002ed20>
10001732c:     	adrp	x1, 0x100034000 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, char) const+0x48>
100017330:     	ldr	x1, [x1, #656]
100017334:     	adrp	x2, 0x100034000 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, char) const+0x50>
100017338:     	ldr	x2, [x2, #104]
10001733c:     	mov	x0, x19
100017340:     	bl	0x10002f0a4 <_vsnprintf+0x10002f0a4>
100017344:     	mov	x20, x0
100017348:     	mov	x0, x19
10001734c:     	bl	0x10002f068 <_vsnprintf+0x10002f068>
100017350:     	mov	x0, x20
100017354:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100017358 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, char) const>:
100017358:     	sub	sp, sp, #112
10001735c:     	stp	x24, x23, [sp, #48]
100017360:     	stp	x22, x21, [sp, #64]
100017364:     	stp	x20, x19, [sp, #80]
100017368:     	stp	x29, x30, [sp, #96]
10001736c:     	add	x29, sp, #96
100017370:     	mov	x19, x8
100017374:     	mov	x8, #9223372036854775792
100017378:     	sub	x24, x2, x1
10001737c:     	cmp	x24, x8
100017380:     	b.hs	0x100017594 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, char) const+0x23c>
100017384:     	mov	x21, x2
100017388:     	mov	x22, x1
10001738c:     	mov	x20, x0
100017390:     	cmp	x24, #22
100017394:     	b.hi	0x1000173f8 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, char) const+0xa0>
100017398:     	strb	w24, [sp, #47]
10001739c:     	add	x0, sp, #24
1000173a0:     	cmp	x22, x21
1000173a4:     	b.eq	0x10001741c <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, char) const+0xc4>
1000173a8:     	cmp	x24, #64
1000173ac:     	b.lo	0x100017424 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, char) const+0xcc>
1000173b0:     	sub	x8, x0, x22
1000173b4:     	cmp	x8, #64
1000173b8:     	b.lo	0x100017424 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, char) const+0xcc>
1000173bc:     	and	x10, x24, #0xffffffffffffffc0
1000173c0:     	add	x8, x0, x10
1000173c4:     	add	x9, x22, x10
1000173c8:     	add	x11, x0, #32
1000173cc:     	add	x12, x22, #32
1000173d0:     	mov	x13, x10
1000173d4:     	ldp	q0, q1, [x12, #-32]
1000173d8:     	ldp	q2, q3, [x12], #64
1000173dc:     	stp	q0, q1, [x11, #-32]
1000173e0:     	stp	q2, q3, [x11], #64
1000173e4:     	subs	x13, x13, #64
1000173e8:     	b.ne	0x1000173d4 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, char) const+0x7c>
1000173ec:     	cmp	x24, x10
1000173f0:     	b.ne	0x10001742c <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, char) const+0xd4>
1000173f4:     	b	0x10001743c <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, char) const+0xe4>
1000173f8:     	orr	x8, x24, #0xf
1000173fc:     	add	x23, x8, #1
100017400:     	mov	x0, x23
100017404:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100017408:     	orr	x8, x23, #0x8000000000000000
10001740c:     	stp	x24, x8, [sp, #32]
100017410:     	str	x0, [sp, #24]
100017414:     	cmp	x22, x21
100017418:     	b.ne	0x1000173a8 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, char) const+0x50>
10001741c:     	mov	x8, x0
100017420:     	b	0x10001743c <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, char) const+0xe4>
100017424:     	mov	x8, x0
100017428:     	mov	x9, x22
10001742c:     	ldrb	w10, [x9], #1
100017430:     	strb	w10, [x8], #1
100017434:     	cmp	x9, x21
100017438:     	b.ne	0x10001742c <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, char) const+0xd4>
10001743c:     	strb	wzr, [x8]
100017440:     	stp	xzr, xzr, [x19]
100017444:     	str	xzr, [x19, #16]
100017448:     	ldrsb	w8, [sp, #47]
10001744c:     	tbnz	w8, #31, 0x10001745c <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, char) const+0x104>
100017450:     	cbz	w8, 0x1000174a0 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, char) const+0x148>
100017454:     	add	x0, sp, #24
100017458:     	b	0x100017468 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, char) const+0x110>
10001745c:     	ldr	x8, [sp, #32]
100017460:     	cbz	x8, 0x100017498 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, char) const+0x140>
100017464:     	ldr	x0, [sp, #24]
100017468:     	mov	x8, sp
10001746c:     	bl	0x10002ef0c <_vsnprintf+0x10002ef0c>
100017470:     	ldr	q0, [sp]
100017474:     	str	q0, [x19]
100017478:     	ldr	x8, [sp, #16]
10001747c:     	str	x8, [x19, #16]
100017480:     	lsr	x8, x8, #56
100017484:     	sxtb	w21, w8
100017488:     	ldr	x9, [x19, #8]
10001748c:     	cmp	w21, #0
100017490:     	csel	x8, x9, x8, lt
100017494:     	cbz	x8, 0x1000174d8 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, char) const+0x180>
100017498:     	ldrsb	w8, [sp, #47]
10001749c:     	tbnz	w8, #31, 0x1000174b8 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, char) const+0x160>
1000174a0:     	ldp	x29, x30, [sp, #96]
1000174a4:     	ldp	x20, x19, [sp, #80]
1000174a8:     	ldp	x22, x21, [sp, #64]
1000174ac:     	ldp	x24, x23, [sp, #48]
1000174b0:     	add	sp, sp, #112
1000174b4:     	ret
1000174b8:     	ldr	x0, [sp, #24]
1000174bc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000174c0:     	ldp	x29, x30, [sp, #96]
1000174c4:     	ldp	x20, x19, [sp, #80]
1000174c8:     	ldp	x22, x21, [sp, #64]
1000174cc:     	ldp	x24, x23, [sp, #48]
1000174d0:     	add	sp, sp, #112
1000174d4:     	ret
1000174d8:     	ldrsb	w8, [sp, #47]
1000174dc:     	tbnz	w8, #31, 0x1000174f4 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, char) const+0x19c>
1000174e0:     	and	x8, x8, #0xff
1000174e4:     	cmp	w8, #3
1000174e8:     	b.hs	0x1000174a0 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, char) const+0x148>
1000174ec:     	add	x1, sp, #24
1000174f0:     	b	0x100017504 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, char) const+0x1ac>
1000174f4:     	ldr	x8, [sp, #32]
1000174f8:     	cmp	x8, #3
1000174fc:     	b.hs	0x100017498 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, char) const+0x140>
100017500:     	ldr	x1, [sp, #24]
100017504:     	ldr	x0, [x20, #16]
100017508:     	add	x2, x1, x8
10001750c:     	ldr	x8, [x0]
100017510:     	ldr	x9, [x8, #32]
100017514:     	mov	x8, sp
100017518:     	blr	x9
10001751c:     	tbz	w21, #31, 0x100017528 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, char) const+0x1d0>
100017520:     	ldr	x0, [x19]
100017524:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100017528:     	ldr	q0, [sp]
10001752c:     	str	q0, [x19]
100017530:     	ldr	x8, [sp, #16]
100017534:     	str	x8, [x19, #16]
100017538:     	ldrsb	w8, [x19, #23]
10001753c:     	tbnz	w8, #31, 0x100017560 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, char) const+0x208>
100017540:     	and	w8, w8, #0xff
100017544:     	cmp	w8, #12
100017548:     	b.eq	0x100017574 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, char) const+0x21c>
10001754c:     	cmp	w8, #1
100017550:     	b.eq	0x100017574 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, char) const+0x21c>
100017554:     	strb	wzr, [x19]
100017558:     	strb	wzr, [x19, #23]
10001755c:     	b	0x100017498 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, char) const+0x140>
100017560:     	ldr	x8, [x19, #8]
100017564:     	cmp	x8, #1
100017568:     	b.eq	0x100017574 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, char) const+0x21c>
10001756c:     	cmp	x8, #12
100017570:     	b.ne	0x100017584 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, char) const+0x22c>
100017574:     	add	x1, sp, #24
100017578:     	mov	x0, x19
10001757c:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
100017580:     	b	0x100017498 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, char) const+0x140>
100017584:     	ldr	x8, [x19]
100017588:     	strb	wzr, [x8]
10001758c:     	str	xzr, [x19, #8]
100017590:     	b	0x100017498 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, char) const+0x140>
100017594:     	add	x0, sp, #24
100017598:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
10001759c:     	mov	x20, x0
1000175a0:     	ldrb	w21, [x19, #23]
1000175a4:     	b	0x1000175ac <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, char) const+0x254>
1000175a8:     	mov	x20, x0
1000175ac:     	tbnz	w21, #7, 0x1000175c0 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, char) const+0x268>
1000175b0:     	ldrsb	w8, [sp, #47]
1000175b4:     	tbnz	w8, #31, 0x1000175e0 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, char) const+0x288>
1000175b8:     	mov	x0, x20
1000175bc:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
1000175c0:     	ldr	x0, [x19]
1000175c4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000175c8:     	ldrsb	w8, [sp, #47]
1000175cc:     	tbz	w8, #31, 0x1000175b8 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, char) const+0x260>
1000175d0:     	b	0x1000175e0 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, char) const+0x288>
1000175d4:     	mov	x20, x0
1000175d8:     	ldrsb	w8, [sp, #47]
1000175dc:     	tbz	w8, #31, 0x1000175b8 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__lookup_collatename<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, char) const+0x260>
1000175e0:     	ldr	x0, [sp, #24]
1000175e4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000175e8:     	mov	x0, x20
1000175ec:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

00000001000175f0 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__transform_primary<std::__1::__wrap_iter<char*>>(std::__1::__wrap_iter<char*>, std::__1::__wrap_iter<char*>, char) const>:
1000175f0:     	sub	sp, sp, #96
1000175f4:     	stp	x24, x23, [sp, #32]
1000175f8:     	stp	x22, x21, [sp, #48]
1000175fc:     	stp	x20, x19, [sp, #64]
100017600:     	stp	x29, x30, [sp, #80]
100017604:     	add	x29, sp, #80
100017608:     	mov	x19, x8
10001760c:     	mov	x8, #9223372036854775792
100017610:     	sub	x24, x2, x1
100017614:     	cmp	x24, x8
100017618:     	b.hs	0x1000177b0 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__transform_primary<std::__1::__wrap_iter<char*>>(std::__1::__wrap_iter<char*>, std::__1::__wrap_iter<char*>, char) const+0x1c0>
10001761c:     	mov	x21, x2
100017620:     	mov	x22, x1
100017624:     	mov	x20, x0
100017628:     	cmp	x24, #22
10001762c:     	b.hi	0x100017690 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__transform_primary<std::__1::__wrap_iter<char*>>(std::__1::__wrap_iter<char*>, std::__1::__wrap_iter<char*>, char) const+0xa0>
100017630:     	strb	w24, [sp, #31]
100017634:     	add	x0, sp, #8
100017638:     	cmp	x22, x21
10001763c:     	b.eq	0x1000176b4 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__transform_primary<std::__1::__wrap_iter<char*>>(std::__1::__wrap_iter<char*>, std::__1::__wrap_iter<char*>, char) const+0xc4>
100017640:     	cmp	x24, #64
100017644:     	b.lo	0x1000176bc <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__transform_primary<std::__1::__wrap_iter<char*>>(std::__1::__wrap_iter<char*>, std::__1::__wrap_iter<char*>, char) const+0xcc>
100017648:     	sub	x8, x0, x22
10001764c:     	cmp	x8, #64
100017650:     	b.lo	0x1000176bc <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__transform_primary<std::__1::__wrap_iter<char*>>(std::__1::__wrap_iter<char*>, std::__1::__wrap_iter<char*>, char) const+0xcc>
100017654:     	and	x10, x24, #0xffffffffffffffc0
100017658:     	add	x8, x0, x10
10001765c:     	add	x9, x22, x10
100017660:     	add	x11, x0, #32
100017664:     	add	x12, x22, #32
100017668:     	mov	x13, x10
10001766c:     	ldp	q0, q1, [x12, #-32]
100017670:     	ldp	q2, q3, [x12], #64
100017674:     	stp	q0, q1, [x11, #-32]
100017678:     	stp	q2, q3, [x11], #64
10001767c:     	subs	x13, x13, #64
100017680:     	b.ne	0x10001766c <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__transform_primary<std::__1::__wrap_iter<char*>>(std::__1::__wrap_iter<char*>, std::__1::__wrap_iter<char*>, char) const+0x7c>
100017684:     	cmp	x24, x10
100017688:     	b.ne	0x1000176c4 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__transform_primary<std::__1::__wrap_iter<char*>>(std::__1::__wrap_iter<char*>, std::__1::__wrap_iter<char*>, char) const+0xd4>
10001768c:     	b	0x1000176d4 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__transform_primary<std::__1::__wrap_iter<char*>>(std::__1::__wrap_iter<char*>, std::__1::__wrap_iter<char*>, char) const+0xe4>
100017690:     	orr	x8, x24, #0xf
100017694:     	add	x23, x8, #1
100017698:     	mov	x0, x23
10001769c:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
1000176a0:     	orr	x8, x23, #0x8000000000000000
1000176a4:     	stp	x24, x8, [sp, #16]
1000176a8:     	str	x0, [sp, #8]
1000176ac:     	cmp	x22, x21
1000176b0:     	b.ne	0x100017640 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__transform_primary<std::__1::__wrap_iter<char*>>(std::__1::__wrap_iter<char*>, std::__1::__wrap_iter<char*>, char) const+0x50>
1000176b4:     	mov	x8, x0
1000176b8:     	b	0x1000176d4 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__transform_primary<std::__1::__wrap_iter<char*>>(std::__1::__wrap_iter<char*>, std::__1::__wrap_iter<char*>, char) const+0xe4>
1000176bc:     	mov	x8, x0
1000176c0:     	mov	x9, x22
1000176c4:     	ldrb	w10, [x9], #1
1000176c8:     	strb	w10, [x8], #1
1000176cc:     	cmp	x9, x21
1000176d0:     	b.ne	0x1000176c4 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__transform_primary<std::__1::__wrap_iter<char*>>(std::__1::__wrap_iter<char*>, std::__1::__wrap_iter<char*>, char) const+0xd4>
1000176d4:     	strb	wzr, [x8]
1000176d8:     	ldr	x0, [x20, #16]
1000176dc:     	ldrb	w8, [sp, #31]
1000176e0:     	sxtb	w9, w8
1000176e4:     	ldp	x10, x11, [sp, #8]
1000176e8:     	cmp	w9, #0
1000176ec:     	add	x9, sp, #8
1000176f0:     	csel	x1, x10, x9, lt
1000176f4:     	csel	x8, x11, x8, lt
1000176f8:     	add	x2, x1, x8
1000176fc:     	ldr	x8, [x0]
100017700:     	ldr	x9, [x8, #32]
100017704:     	mov	x8, x19
100017708:     	blr	x9
10001770c:     	ldrb	w9, [x19, #23]
100017710:     	sxtb	w8, w9
100017714:     	ldr	x10, [x19, #8]
100017718:     	cmp	w8, #0
10001771c:     	csel	x9, x10, x9, lt
100017720:     	cmp	x9, #1
100017724:     	b.eq	0x10001775c <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__transform_primary<std::__1::__wrap_iter<char*>>(std::__1::__wrap_iter<char*>, std::__1::__wrap_iter<char*>, char) const+0x16c>
100017728:     	cmp	x9, #12
10001772c:     	b.ne	0x100017750 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__transform_primary<std::__1::__wrap_iter<char*>>(std::__1::__wrap_iter<char*>, std::__1::__wrap_iter<char*>, char) const+0x160>
100017730:     	ldr	x9, [x19]
100017734:     	cmp	w8, #0
100017738:     	csel	x8, x9, x19, lt
10001773c:     	ldrb	w9, [x8, #3]
100017740:     	strb	w9, [x8, #11]
100017744:     	ldrsb	w8, [sp, #31]
100017748:     	tbz	w8, #31, 0x100017764 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__transform_primary<std::__1::__wrap_iter<char*>>(std::__1::__wrap_iter<char*>, std::__1::__wrap_iter<char*>, char) const+0x174>
10001774c:     	b	0x100017790 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__transform_primary<std::__1::__wrap_iter<char*>>(std::__1::__wrap_iter<char*>, std::__1::__wrap_iter<char*>, char) const+0x1a0>
100017750:     	tbnz	w8, #31, 0x10001777c <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__transform_primary<std::__1::__wrap_iter<char*>>(std::__1::__wrap_iter<char*>, std::__1::__wrap_iter<char*>, char) const+0x18c>
100017754:     	strb	wzr, [x19]
100017758:     	strb	wzr, [x19, #23]
10001775c:     	ldrsb	w8, [sp, #31]
100017760:     	tbnz	w8, #31, 0x100017790 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__transform_primary<std::__1::__wrap_iter<char*>>(std::__1::__wrap_iter<char*>, std::__1::__wrap_iter<char*>, char) const+0x1a0>
100017764:     	ldp	x29, x30, [sp, #80]
100017768:     	ldp	x20, x19, [sp, #64]
10001776c:     	ldp	x22, x21, [sp, #48]
100017770:     	ldp	x24, x23, [sp, #32]
100017774:     	add	sp, sp, #96
100017778:     	ret
10001777c:     	ldr	x8, [x19]
100017780:     	strb	wzr, [x8]
100017784:     	str	xzr, [x19, #8]
100017788:     	ldrsb	w8, [sp, #31]
10001778c:     	tbz	w8, #31, 0x100017764 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__transform_primary<std::__1::__wrap_iter<char*>>(std::__1::__wrap_iter<char*>, std::__1::__wrap_iter<char*>, char) const+0x174>
100017790:     	ldr	x0, [sp, #8]
100017794:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100017798:     	ldp	x29, x30, [sp, #80]
10001779c:     	ldp	x20, x19, [sp, #64]
1000177a0:     	ldp	x22, x21, [sp, #48]
1000177a4:     	ldp	x24, x23, [sp, #32]
1000177a8:     	add	sp, sp, #96
1000177ac:     	ret
1000177b0:     	add	x0, sp, #8
1000177b4:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
1000177b8:     	mov	x19, x0
1000177bc:     	ldrsb	w8, [sp, #31]
1000177c0:     	tbz	w8, #31, 0x1000177cc <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::__transform_primary<std::__1::__wrap_iter<char*>>(std::__1::__wrap_iter<char*>, std::__1::__wrap_iter<char*>, char) const+0x1dc>
1000177c4:     	ldr	x0, [sp, #8]
1000177c8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000177cc:     	mov	x0, x19
1000177d0:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

00000001000177d4 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__push_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>:
1000177d4:     	sub	sp, sp, #128
1000177d8:     	stp	x26, x25, [sp, #48]
1000177dc:     	stp	x24, x23, [sp, #64]
1000177e0:     	stp	x22, x21, [sp, #80]
1000177e4:     	stp	x20, x19, [sp, #96]
1000177e8:     	stp	x29, x30, [sp, #112]
1000177ec:     	add	x29, sp, #112
1000177f0:     	mov	x20, x0
1000177f4:     	mov	x8, #-6148914691236517206
1000177f8:     	movk	x8, #2730, lsl #48
1000177fc:     	ldp	x24, x19, [x0]
100017800:     	sub	x9, x19, x24
100017804:     	asr	x9, x9, #3
100017808:     	mov	x10, #-6148914691236517206
10001780c:     	movk	x10, #43691
100017810:     	mul	x21, x9, x10
100017814:     	add	x9, x21, #1
100017818:     	cmp	x9, x8
10001781c:     	b.hi	0x1000179d0 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__push_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x1fc>
100017820:     	mov	x22, x1
100017824:     	add	x11, x20, #16
100017828:     	ldr	x12, [x11]
10001782c:     	sub	x12, x12, x24
100017830:     	asr	x12, x12, #3
100017834:     	mul	x10, x12, x10
100017838:     	lsl	x12, x10, #1
10001783c:     	cmp	x12, x9
100017840:     	csel	x9, x12, x9, hi
100017844:     	mov	x12, #6148914691236517205
100017848:     	movk	x12, #1365, lsl #48
10001784c:     	cmp	x10, x12
100017850:     	csel	x23, x9, x8, lo
100017854:     	str	x11, [sp, #40]
100017858:     	cbz	x23, 0x100017874 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__push_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xa0>
10001785c:     	cmp	x23, x8
100017860:     	b.hi	0x1000179d8 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__push_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x204>
100017864:     	add	x8, x23, x23, lsl #1
100017868:     	lsl	x0, x8, #3
10001786c:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100017870:     	b	0x100017878 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__push_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xa4>
100017874:     	mov	x0, #0
100017878:     	mov	w8, #24
10001787c:     	madd	x21, x21, x8, x0
100017880:     	stp	x0, x21, [sp, #8]
100017884:     	madd	x25, x23, x8, x0
100017888:     	stp	x21, x25, [sp, #24]
10001788c:     	ldrsb	w8, [x22, #23]
100017890:     	tbnz	w8, #31, 0x1000178b4 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__push_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xe0>
100017894:     	ldr	q0, [x22]
100017898:     	str	q0, [x21]
10001789c:     	ldr	x8, [x22, #16]
1000178a0:     	str	x8, [x21, #16]
1000178a4:     	add	x8, x21, #24
1000178a8:     	cmp	x19, x24
1000178ac:     	b.ne	0x10001790c <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__push_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x138>
1000178b0:     	b	0x100017970 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__push_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x19c>
1000178b4:     	ldp	x23, x26, [x22]
1000178b8:     	cmp	x26, #22
1000178bc:     	b.hi	0x1000178cc <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__push_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xf8>
1000178c0:     	strb	w26, [x21, #23]
1000178c4:     	mov	x0, x21
1000178c8:     	b	0x1000178f4 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__push_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x120>
1000178cc:     	mov	x8, #9223372036854775792
1000178d0:     	cmp	x26, x8
1000178d4:     	b.hs	0x1000179dc <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__push_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x208>
1000178d8:     	orr	x8, x26, #0xf
1000178dc:     	add	x22, x8, #1
1000178e0:     	mov	x0, x22
1000178e4:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
1000178e8:     	orr	x8, x22, #0x8000000000000000
1000178ec:     	stp	x26, x8, [x21, #8]
1000178f0:     	str	x0, [x21]
1000178f4:     	add	x2, x26, #1
1000178f8:     	mov	x1, x23
1000178fc:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
100017900:     	add	x8, x21, #24
100017904:     	cmp	x19, x24
100017908:     	b.eq	0x100017970 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__push_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x19c>
10001790c:     	ldur	q0, [x19, #-24]
100017910:     	ldur	x9, [x19, #-8]
100017914:     	stur	x9, [x21, #-8]
100017918:     	stur	q0, [x21, #-24]
10001791c:     	sub	x21, x21, #24
100017920:     	stp	xzr, xzr, [x19, #-16]
100017924:     	stur	xzr, [x19, #-24]
100017928:     	sub	x9, x19, #24
10001792c:     	mov	x19, x9
100017930:     	cmp	x9, x24
100017934:     	b.ne	0x10001790c <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__push_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x138>
100017938:     	ldp	x22, x19, [x20]
10001793c:     	stp	x21, x8, [x20]
100017940:     	str	x25, [x20, #16]
100017944:     	cmp	x19, x22
100017948:     	b.ne	0x100017994 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__push_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x1c0>
10001794c:     	cbz	x19, 0x1000179b4 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__push_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x1e0>
100017950:     	mov	x0, x19
100017954:     	ldp	x29, x30, [sp, #112]
100017958:     	ldp	x20, x19, [sp, #96]
10001795c:     	ldp	x22, x21, [sp, #80]
100017960:     	ldp	x24, x23, [sp, #64]
100017964:     	ldp	x26, x25, [sp, #48]
100017968:     	add	sp, sp, #128
10001796c:     	b	0x10002f014 <_vsnprintf+0x10002f014>
100017970:     	mov	x22, x19
100017974:     	stp	x21, x8, [x20]
100017978:     	str	x25, [x20, #16]
10001797c:     	cmp	x19, x19
100017980:     	b.ne	0x100017994 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__push_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x1c0>
100017984:     	b	0x10001794c <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__push_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x178>
100017988:     	mov	x19, x20
10001798c:     	cmp	x20, x22
100017990:     	b.eq	0x1000179ac <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__push_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x1d8>
100017994:     	sub	x20, x19, #24
100017998:     	ldursb	w8, [x19, #-1]
10001799c:     	tbz	w8, #31, 0x100017988 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__push_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x1b4>
1000179a0:     	ldur	x0, [x19, #-24]
1000179a4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000179a8:     	b	0x100017988 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__push_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x1b4>
1000179ac:     	mov	x19, x22
1000179b0:     	cbnz	x22, 0x100017950 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__push_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x17c>
1000179b4:     	ldp	x29, x30, [sp, #112]
1000179b8:     	ldp	x20, x19, [sp, #96]
1000179bc:     	ldp	x22, x21, [sp, #80]
1000179c0:     	ldp	x24, x23, [sp, #64]
1000179c4:     	ldp	x26, x25, [sp, #48]
1000179c8:     	add	sp, sp, #128
1000179cc:     	ret
1000179d0:     	mov	x0, x20
1000179d4:     	bl	0x100017a60 <std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__throw_length_error[abi:ue170006]() const>
1000179d8:     	bl	0x100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>
1000179dc:     	mov	x0, x21
1000179e0:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
1000179e4:     	brk	#0x1
1000179e8:     	mov	x19, x0
1000179ec:     	add	x0, sp, #8
1000179f0:     	bl	0x1000179fc <std::__1::__split_buffer<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>&>::~__split_buffer()>
1000179f4:     	mov	x0, x19
1000179f8:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

00000001000179fc <std::__1::__split_buffer<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>&>::~__split_buffer()>:
1000179fc:     	stp	x20, x19, [sp, #-32]!
100017a00:     	stp	x29, x30, [sp, #16]
100017a04:     	add	x29, sp, #16
100017a08:     	mov	x19, x0
100017a0c:     	ldp	x20, x9, [x0, #8]
100017a10:     	cmp	x9, x20
100017a14:     	b.ne	0x100017a40 <std::__1::__split_buffer<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>&>::~__split_buffer()+0x44>
100017a18:     	ldr	x0, [x19]
100017a1c:     	cbz	x0, 0x100017a24 <std::__1::__split_buffer<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>&>::~__split_buffer()+0x28>
100017a20:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100017a24:     	mov	x0, x19
100017a28:     	ldp	x29, x30, [sp, #16]
100017a2c:     	ldp	x20, x19, [sp], #32
100017a30:     	ret
100017a34:     	mov	x9, x8
100017a38:     	cmp	x8, x20
100017a3c:     	b.eq	0x100017a18 <std::__1::__split_buffer<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>&>::~__split_buffer()+0x1c>
100017a40:     	sub	x8, x9, #24
100017a44:     	str	x8, [x19, #16]
100017a48:     	ldursb	w9, [x9, #-1]
100017a4c:     	tbz	w9, #31, 0x100017a34 <std::__1::__split_buffer<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>&>::~__split_buffer()+0x38>
100017a50:     	ldr	x0, [x8]
100017a54:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100017a58:     	ldr	x8, [x19, #16]
100017a5c:     	b	0x100017a34 <std::__1::__split_buffer<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>&>::~__split_buffer()+0x38>

0000000100017a60 <std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__throw_length_error[abi:ue170006]() const>:
100017a60:     	stp	x29, x30, [sp, #-16]!
100017a64:     	mov	x29, sp
100017a68:     	adrp	x0, 0x100031000 <unsigned int std::__1::regex_traits<char>::__lookup_classname<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, bool, char) const+0x10>
100017a6c:     	add	x0, x0, #3485
100017a70:     	bl	0x100006a48 <std::__1::__throw_length_error[abi:ue170006](char const*)>

0000000100017a74 <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)2>()>:
100017a74:     	stp	x20, x19, [sp, #-32]!
100017a78:     	stp	x29, x30, [sp, #16]
100017a7c:     	add	x29, sp, #16
100017a80:     	mov	w0, #24
100017a84:     	bl	0x10002f038 <_vsnprintf+0x10002f038>
100017a88:     	mov	x19, x0
100017a8c:     	mov	w1, #2
100017a90:     	bl	0x10002ed20 <_vsnprintf+0x10002ed20>
100017a94:     	adrp	x1, 0x100034000 <unsigned int std::__1::regex_traits<char>::__lookup_classname<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, bool, char) const+0x48>
100017a98:     	ldr	x1, [x1, #656]
100017a9c:     	adrp	x2, 0x100034000 <unsigned int std::__1::regex_traits<char>::__lookup_classname<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, bool, char) const+0x50>
100017aa0:     	ldr	x2, [x2, #104]
100017aa4:     	mov	x0, x19
100017aa8:     	bl	0x10002f0a4 <_vsnprintf+0x10002f0a4>
100017aac:     	mov	x20, x0
100017ab0:     	mov	x0, x19
100017ab4:     	bl	0x10002f068 <_vsnprintf+0x10002f068>
100017ab8:     	mov	x0, x20
100017abc:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100017ac0 <unsigned int std::__1::regex_traits<char>::__lookup_classname<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, bool, char) const>:
100017ac0:     	sub	sp, sp, #96
100017ac4:     	stp	x24, x23, [sp, #32]
100017ac8:     	stp	x22, x21, [sp, #48]
100017acc:     	stp	x20, x19, [sp, #64]
100017ad0:     	stp	x29, x30, [sp, #80]
100017ad4:     	add	x29, sp, #80
100017ad8:     	mov	x8, #9223372036854775792
100017adc:     	sub	x24, x2, x1
100017ae0:     	cmp	x24, x8
100017ae4:     	b.hs	0x100017c20 <unsigned int std::__1::regex_traits<char>::__lookup_classname<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, bool, char) const+0x160>
100017ae8:     	mov	x19, x3
100017aec:     	mov	x21, x2
100017af0:     	mov	x22, x1
100017af4:     	mov	x20, x0
100017af8:     	cmp	x24, #22
100017afc:     	b.hi	0x100017b60 <unsigned int std::__1::regex_traits<char>::__lookup_classname<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, bool, char) const+0xa0>
100017b00:     	strb	w24, [sp, #31]
100017b04:     	add	x0, sp, #8
100017b08:     	cmp	x22, x21
100017b0c:     	b.eq	0x100017b84 <unsigned int std::__1::regex_traits<char>::__lookup_classname<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, bool, char) const+0xc4>
100017b10:     	cmp	x24, #64
100017b14:     	b.lo	0x100017b8c <unsigned int std::__1::regex_traits<char>::__lookup_classname<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, bool, char) const+0xcc>
100017b18:     	sub	x8, x0, x22
100017b1c:     	cmp	x8, #64
100017b20:     	b.lo	0x100017b8c <unsigned int std::__1::regex_traits<char>::__lookup_classname<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, bool, char) const+0xcc>
100017b24:     	and	x10, x24, #0xffffffffffffffc0
100017b28:     	add	x8, x0, x10
100017b2c:     	add	x9, x22, x10
100017b30:     	add	x11, x0, #32
100017b34:     	add	x12, x22, #32
100017b38:     	mov	x13, x10
100017b3c:     	ldp	q0, q1, [x12, #-32]
100017b40:     	ldp	q2, q3, [x12], #64
100017b44:     	stp	q0, q1, [x11, #-32]
100017b48:     	stp	q2, q3, [x11], #64
100017b4c:     	subs	x13, x13, #64
100017b50:     	b.ne	0x100017b3c <unsigned int std::__1::regex_traits<char>::__lookup_classname<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, bool, char) const+0x7c>
100017b54:     	cmp	x24, x10
100017b58:     	b.ne	0x100017b94 <unsigned int std::__1::regex_traits<char>::__lookup_classname<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, bool, char) const+0xd4>
100017b5c:     	b	0x100017ba4 <unsigned int std::__1::regex_traits<char>::__lookup_classname<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, bool, char) const+0xe4>
100017b60:     	orr	x8, x24, #0xf
100017b64:     	add	x23, x8, #1
100017b68:     	mov	x0, x23
100017b6c:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100017b70:     	orr	x8, x23, #0x8000000000000000
100017b74:     	stp	x24, x8, [sp, #16]
100017b78:     	str	x0, [sp, #8]
100017b7c:     	cmp	x22, x21
100017b80:     	b.ne	0x100017b10 <unsigned int std::__1::regex_traits<char>::__lookup_classname<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, bool, char) const+0x50>
100017b84:     	mov	x8, x0
100017b88:     	b	0x100017ba4 <unsigned int std::__1::regex_traits<char>::__lookup_classname<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, bool, char) const+0xe4>
100017b8c:     	mov	x8, x0
100017b90:     	mov	x9, x22
100017b94:     	ldrb	w10, [x9], #1
100017b98:     	strb	w10, [x8], #1
100017b9c:     	cmp	x9, x21
100017ba0:     	b.ne	0x100017b94 <unsigned int std::__1::regex_traits<char>::__lookup_classname<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, bool, char) const+0xd4>
100017ba4:     	strb	wzr, [x8]
100017ba8:     	ldr	x0, [x20, #8]
100017bac:     	ldrb	w8, [sp, #31]
100017bb0:     	sxtb	w9, w8
100017bb4:     	ldp	x10, x11, [sp, #8]
100017bb8:     	cmp	w9, #0
100017bbc:     	add	x20, sp, #8
100017bc0:     	csel	x1, x10, x20, lt
100017bc4:     	csel	x8, x11, x8, lt
100017bc8:     	add	x2, x1, x8
100017bcc:     	ldr	x8, [x0]
100017bd0:     	ldr	x8, [x8, #48]
100017bd4:     	blr	x8
100017bd8:     	ldrsb	w8, [sp, #31]
100017bdc:     	ldr	x9, [sp, #8]
100017be0:     	cmp	w8, #0
100017be4:     	csel	x0, x9, x20, lt
100017be8:     	mov	x1, x19
100017bec:     	bl	0x10002ee88 <_vsnprintf+0x10002ee88>
100017bf0:     	mov	x19, x0
100017bf4:     	ldrsb	w8, [sp, #31]
100017bf8:     	tbz	w8, #31, 0x100017c04 <unsigned int std::__1::regex_traits<char>::__lookup_classname<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, bool, char) const+0x144>
100017bfc:     	ldr	x0, [sp, #8]
100017c00:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100017c04:     	mov	x0, x19
100017c08:     	ldp	x29, x30, [sp, #80]
100017c0c:     	ldp	x20, x19, [sp, #64]
100017c10:     	ldp	x22, x21, [sp, #48]
100017c14:     	ldp	x24, x23, [sp, #32]
100017c18:     	add	sp, sp, #96
100017c1c:     	ret
100017c20:     	add	x0, sp, #8
100017c24:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
100017c28:     	mov	x19, x0
100017c2c:     	ldrsb	w8, [sp, #31]
100017c30:     	tbz	w8, #31, 0x100017c3c <unsigned int std::__1::regex_traits<char>::__lookup_classname<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, bool, char) const+0x17c>
100017c34:     	ldr	x0, [sp, #8]
100017c38:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100017c3c:     	mov	x0, x19
100017c40:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100017c44 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)>:
100017c44:     	stp	x26, x25, [sp, #-80]!
100017c48:     	stp	x24, x23, [sp, #16]
100017c4c:     	stp	x22, x21, [sp, #32]
100017c50:     	stp	x20, x19, [sp, #48]
100017c54:     	stp	x29, x30, [sp, #64]
100017c58:     	add	x29, sp, #64
100017c5c:     	mov	x22, x1
100017c60:     	mov	x19, x0
100017c64:     	ldrb	w8, [x0, #169]
100017c68:     	cbz	w8, 0x100017cec <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0xa8>
100017c6c:     	ldr	x0, [x19, #24]
100017c70:     	ldr	x8, [x0]
100017c74:     	ldr	x8, [x8, #40]
100017c78:     	mov	x1, x22
100017c7c:     	blr	x8
100017c80:     	mov	x22, x0
100017c84:     	ldp	x21, x8, [x19, #72]
100017c88:     	cmp	x21, x8
100017c8c:     	b.lo	0x100017d64 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x120>
100017c90:     	add	x20, x19, #64
100017c94:     	ldr	x24, [x20]
100017c98:     	sub	x25, x21, x24
100017c9c:     	adds	x9, x25, #1
100017ca0:     	b.mi	0x1000180d8 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x494>
100017ca4:     	mov	x10, #4611686018427387903
100017ca8:     	sub	x8, x8, x24
100017cac:     	lsl	x11, x8, #1
100017cb0:     	cmp	x11, x9
100017cb4:     	csel	x9, x11, x9, hi
100017cb8:     	cmp	x8, x10
100017cbc:     	mov	x8, #9223372036854775807
100017cc0:     	csel	x23, x9, x8, lo
100017cc4:     	cbz	x23, 0x100017d70 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x12c>
100017cc8:     	mov	x0, x23
100017ccc:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100017cd0:     	add	x10, x0, x25
100017cd4:     	add	x8, x0, x23
100017cd8:     	mov	x9, x10
100017cdc:     	strb	w22, [x9], #1
100017ce0:     	cmp	x21, x24
100017ce4:     	b.ne	0x100017d8c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x148>
100017ce8:     	b	0x100017f20 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x2dc>
100017cec:     	ldrb	w9, [x19, #170]
100017cf0:     	add	x20, x19, #64
100017cf4:     	ldp	x21, x8, [x19, #72]
100017cf8:     	cbz	w9, 0x100017d5c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x118>
100017cfc:     	cmp	x21, x8
100017d00:     	b.lo	0x100017d64 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x120>
100017d04:     	ldr	x24, [x20]
100017d08:     	sub	x25, x21, x24
100017d0c:     	adds	x9, x25, #1
100017d10:     	b.mi	0x1000180d8 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x494>
100017d14:     	mov	x10, #4611686018427387903
100017d18:     	sub	x8, x8, x24
100017d1c:     	lsl	x11, x8, #1
100017d20:     	cmp	x11, x9
100017d24:     	csel	x9, x11, x9, hi
100017d28:     	cmp	x8, x10
100017d2c:     	mov	x8, #9223372036854775807
100017d30:     	csel	x23, x9, x8, lo
100017d34:     	cbz	x23, 0x100017e0c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x1c8>
100017d38:     	mov	x0, x23
100017d3c:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100017d40:     	add	x10, x0, x25
100017d44:     	add	x8, x0, x23
100017d48:     	mov	x9, x10
100017d4c:     	strb	w22, [x9], #1
100017d50:     	cmp	x21, x24
100017d54:     	b.ne	0x100017e28 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x1e4>
100017d58:     	b	0x100017f20 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x2dc>
100017d5c:     	cmp	x21, x8
100017d60:     	b.eq	0x100017db8 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x174>
100017d64:     	strb	w22, [x21], #1
100017d68:     	str	x21, [x19, #72]
100017d6c:     	b	0x100017f30 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x2ec>
100017d70:     	mov	x0, #0
100017d74:     	add	x10, x0, x25
100017d78:     	add	x8, x0, x23
100017d7c:     	mov	x9, x10
100017d80:     	strb	w22, [x9], #1
100017d84:     	cmp	x21, x24
100017d88:     	b.eq	0x100017f20 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x2dc>
100017d8c:     	cmp	x25, #8
100017d90:     	b.lo	0x100017fd4 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x390>
100017d94:     	add	x11, x0, x21
100017d98:     	sub	x11, x24, x11
100017d9c:     	add	x11, x11, x21
100017da0:     	cmp	x11, #64
100017da4:     	b.lo	0x100017fd4 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x390>
100017da8:     	cmp	x25, #64
100017dac:     	b.hs	0x100017e54 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x210>
100017db0:     	mov	x11, #0
100017db4:     	b	0x100017e98 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x254>
100017db8:     	ldr	x24, [x20]
100017dbc:     	sub	x25, x21, x24
100017dc0:     	adds	x8, x25, #1
100017dc4:     	b.mi	0x1000180d8 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x494>
100017dc8:     	lsl	x9, x25, #1
100017dcc:     	cmp	x9, x8
100017dd0:     	csel	x8, x9, x8, hi
100017dd4:     	mov	x9, #4611686018427387903
100017dd8:     	mov	x10, #9223372036854775807
100017ddc:     	cmp	x25, x9
100017de0:     	csel	x23, x8, x10, lo
100017de4:     	cbz	x23, 0x100017ed8 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x294>
100017de8:     	mov	x0, x23
100017dec:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100017df0:     	add	x10, x0, x25
100017df4:     	add	x8, x0, x23
100017df8:     	mov	x9, x10
100017dfc:     	strb	w22, [x9], #1
100017e00:     	cmp	x21, x24
100017e04:     	b.ne	0x100017ef4 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x2b0>
100017e08:     	b	0x100017f20 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x2dc>
100017e0c:     	mov	x0, #0
100017e10:     	add	x10, x0, x25
100017e14:     	add	x8, x0, x23
100017e18:     	mov	x9, x10
100017e1c:     	strb	w22, [x9], #1
100017e20:     	cmp	x21, x24
100017e24:     	b.eq	0x100017f20 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x2dc>
100017e28:     	cmp	x25, #8
100017e2c:     	b.lo	0x100018078 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x434>
100017e30:     	add	x11, x0, x21
100017e34:     	sub	x11, x24, x11
100017e38:     	add	x11, x11, x21
100017e3c:     	cmp	x11, #64
100017e40:     	b.lo	0x100018078 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x434>
100017e44:     	cmp	x25, #64
100017e48:     	b.hs	0x100017f48 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x304>
100017e4c:     	mov	x11, #0
100017e50:     	b	0x100017f8c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x348>
100017e54:     	and	x11, x25, #0xffffffffffffffc0
100017e58:     	sub	x12, x21, #32
100017e5c:     	sub	x13, x12, x24
100017e60:     	add	x13, x0, x13
100017e64:     	mov	x14, x11
100017e68:     	ldp	q1, q0, [x12]
100017e6c:     	ldp	q3, q2, [x12, #-32]
100017e70:     	stp	q1, q0, [x13]
100017e74:     	stp	q3, q2, [x13, #-32]
100017e78:     	sub	x12, x12, #64
100017e7c:     	sub	x13, x13, #64
100017e80:     	sub	x14, x14, #64
100017e84:     	cbnz	x14, 0x100017e68 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x224>
100017e88:     	cmp	x25, x11
100017e8c:     	b.eq	0x1000180ac <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x468>
100017e90:     	tst	x25, #0x38
100017e94:     	b.eq	0x100017fcc <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x388>
100017e98:     	and	x12, x25, #0xfffffffffffffff8
100017e9c:     	sub	x13, x21, x12
100017ea0:     	sub	x10, x10, x12
100017ea4:     	sub	x14, x21, x11
100017ea8:     	sub	x14, x14, #8
100017eac:     	sub	x15, x14, x24
100017eb0:     	add	x15, x0, x15
100017eb4:     	sub	x11, x11, x12
100017eb8:     	ldr	d0, [x14], #-8
100017ebc:     	str	d0, [x15], #-8
100017ec0:     	adds	x11, x11, #8
100017ec4:     	b.ne	0x100017eb8 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x274>
100017ec8:     	mov	x21, x13
100017ecc:     	cmp	x25, x12
100017ed0:     	b.ne	0x100017fd4 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x390>
100017ed4:     	b	0x1000180ac <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x468>
100017ed8:     	mov	x0, #0
100017edc:     	add	x10, x0, x25
100017ee0:     	add	x8, x0, x23
100017ee4:     	mov	x9, x10
100017ee8:     	strb	w22, [x9], #1
100017eec:     	cmp	x21, x24
100017ef0:     	b.eq	0x100017f20 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x2dc>
100017ef4:     	cmp	x25, #8
100017ef8:     	b.lo	0x100018098 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x454>
100017efc:     	add	x11, x0, x21
100017f00:     	sub	x11, x24, x11
100017f04:     	add	x11, x11, x21
100017f08:     	cmp	x11, #64
100017f0c:     	b.lo	0x100018098 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x454>
100017f10:     	cmp	x25, #64
100017f14:     	b.hs	0x100017fec <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x3a8>
100017f18:     	mov	x11, #0
100017f1c:     	b	0x100018030 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x3ec>
100017f20:     	mov	x0, x10
100017f24:     	stp	x10, x9, [x19, #64]
100017f28:     	str	x8, [x19, #80]
100017f2c:     	cbnz	x21, 0x1000180bc <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x478>
100017f30:     	ldp	x29, x30, [sp, #64]
100017f34:     	ldp	x20, x19, [sp, #48]
100017f38:     	ldp	x22, x21, [sp, #32]
100017f3c:     	ldp	x24, x23, [sp, #16]
100017f40:     	ldp	x26, x25, [sp], #80
100017f44:     	ret
100017f48:     	and	x11, x25, #0xffffffffffffffc0
100017f4c:     	sub	x12, x21, #32
100017f50:     	sub	x13, x12, x24
100017f54:     	add	x13, x0, x13
100017f58:     	mov	x14, x11
100017f5c:     	ldp	q1, q0, [x12]
100017f60:     	ldp	q3, q2, [x12, #-32]
100017f64:     	stp	q1, q0, [x13]
100017f68:     	stp	q3, q2, [x13, #-32]
100017f6c:     	sub	x12, x12, #64
100017f70:     	sub	x13, x13, #64
100017f74:     	sub	x14, x14, #64
100017f78:     	cbnz	x14, 0x100017f5c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x318>
100017f7c:     	cmp	x25, x11
100017f80:     	b.eq	0x1000180ac <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x468>
100017f84:     	tst	x25, #0x38
100017f88:     	b.eq	0x100018070 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x42c>
100017f8c:     	and	x12, x25, #0xfffffffffffffff8
100017f90:     	sub	x13, x21, x12
100017f94:     	sub	x10, x10, x12
100017f98:     	sub	x14, x21, x11
100017f9c:     	sub	x14, x14, #8
100017fa0:     	sub	x15, x14, x24
100017fa4:     	add	x15, x0, x15
100017fa8:     	sub	x11, x11, x12
100017fac:     	ldr	d0, [x14], #-8
100017fb0:     	str	d0, [x15], #-8
100017fb4:     	adds	x11, x11, #8
100017fb8:     	b.ne	0x100017fac <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x368>
100017fbc:     	mov	x21, x13
100017fc0:     	cmp	x25, x12
100017fc4:     	b.ne	0x100018078 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x434>
100017fc8:     	b	0x1000180ac <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x468>
100017fcc:     	sub	x10, x10, x11
100017fd0:     	sub	x21, x21, x11
100017fd4:     	sub	x10, x10, #1
100017fd8:     	ldrb	w11, [x21, #-1]!
100017fdc:     	strb	w11, [x10], #-1
100017fe0:     	cmp	x21, x24
100017fe4:     	b.ne	0x100017fd8 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x394>
100017fe8:     	b	0x1000180ac <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x468>
100017fec:     	and	x11, x25, #0xffffffffffffffc0
100017ff0:     	sub	x12, x21, #32
100017ff4:     	sub	x13, x12, x24
100017ff8:     	add	x13, x0, x13
100017ffc:     	mov	x14, x11
100018000:     	ldp	q1, q0, [x12]
100018004:     	ldp	q3, q2, [x12, #-32]
100018008:     	stp	q1, q0, [x13]
10001800c:     	stp	q3, q2, [x13, #-32]
100018010:     	sub	x12, x12, #64
100018014:     	sub	x13, x13, #64
100018018:     	sub	x14, x14, #64
10001801c:     	cbnz	x14, 0x100018000 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x3bc>
100018020:     	cmp	x25, x11
100018024:     	b.eq	0x1000180ac <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x468>
100018028:     	tst	x25, #0x38
10001802c:     	b.eq	0x100018090 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x44c>
100018030:     	and	x12, x25, #0xfffffffffffffff8
100018034:     	sub	x13, x21, x12
100018038:     	sub	x10, x10, x12
10001803c:     	sub	x14, x21, x11
100018040:     	sub	x14, x14, #8
100018044:     	sub	x15, x14, x24
100018048:     	add	x15, x0, x15
10001804c:     	sub	x11, x11, x12
100018050:     	ldr	d0, [x14], #-8
100018054:     	str	d0, [x15], #-8
100018058:     	adds	x11, x11, #8
10001805c:     	b.ne	0x100018050 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x40c>
100018060:     	mov	x21, x13
100018064:     	cmp	x25, x12
100018068:     	b.ne	0x100018098 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x454>
10001806c:     	b	0x1000180ac <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x468>
100018070:     	sub	x10, x10, x11
100018074:     	sub	x21, x21, x11
100018078:     	sub	x10, x10, #1
10001807c:     	ldrb	w11, [x21, #-1]!
100018080:     	strb	w11, [x10], #-1
100018084:     	cmp	x21, x24
100018088:     	b.ne	0x10001807c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x438>
10001808c:     	b	0x1000180ac <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x468>
100018090:     	sub	x10, x10, x11
100018094:     	sub	x21, x21, x11
100018098:     	sub	x10, x10, #1
10001809c:     	ldrb	w11, [x21, #-1]!
1000180a0:     	strb	w11, [x10], #-1
1000180a4:     	cmp	x21, x24
1000180a8:     	b.ne	0x10001809c <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x458>
1000180ac:     	ldr	x21, [x20]
1000180b0:     	stp	x0, x9, [x19, #64]
1000180b4:     	str	x8, [x19, #80]
1000180b8:     	cbz	x21, 0x100017f30 <std::__1::__bracket_expression<char, std::__1::regex_traits<char>>::__add_neg_char[abi:ue170006](char)+0x2ec>
1000180bc:     	mov	x0, x21
1000180c0:     	ldp	x29, x30, [sp, #64]
1000180c4:     	ldp	x20, x19, [sp, #48]
1000180c8:     	ldp	x22, x21, [sp, #32]
1000180cc:     	ldp	x24, x23, [sp, #16]
1000180d0:     	ldp	x26, x25, [sp], #80
1000180d4:     	b	0x10002f014 <_vsnprintf+0x10002f014>
1000180d8:     	mov	x0, x20
1000180dc:     	bl	0x100015da8 <std::__1::vector<char, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>

00000001000180e0 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::transform<std::__1::__wrap_iter<char*>>(std::__1::__wrap_iter<char*>, std::__1::__wrap_iter<char*>) const>:
1000180e0:     	sub	sp, sp, #96
1000180e4:     	stp	x24, x23, [sp, #32]
1000180e8:     	stp	x22, x21, [sp, #48]
1000180ec:     	stp	x20, x19, [sp, #64]
1000180f0:     	stp	x29, x30, [sp, #80]
1000180f4:     	add	x29, sp, #80
1000180f8:     	mov	x19, x8
1000180fc:     	mov	x8, #9223372036854775792
100018100:     	sub	x24, x2, x1
100018104:     	cmp	x24, x8
100018108:     	b.hs	0x10001823c <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::transform<std::__1::__wrap_iter<char*>>(std::__1::__wrap_iter<char*>, std::__1::__wrap_iter<char*>) const+0x15c>
10001810c:     	mov	x21, x2
100018110:     	mov	x22, x1
100018114:     	mov	x20, x0
100018118:     	cmp	x24, #22
10001811c:     	b.hi	0x100018180 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::transform<std::__1::__wrap_iter<char*>>(std::__1::__wrap_iter<char*>, std::__1::__wrap_iter<char*>) const+0xa0>
100018120:     	strb	w24, [sp, #31]
100018124:     	add	x0, sp, #8
100018128:     	cmp	x22, x21
10001812c:     	b.eq	0x1000181a4 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::transform<std::__1::__wrap_iter<char*>>(std::__1::__wrap_iter<char*>, std::__1::__wrap_iter<char*>) const+0xc4>
100018130:     	cmp	x24, #64
100018134:     	b.lo	0x1000181ac <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::transform<std::__1::__wrap_iter<char*>>(std::__1::__wrap_iter<char*>, std::__1::__wrap_iter<char*>) const+0xcc>
100018138:     	sub	x8, x0, x22
10001813c:     	cmp	x8, #64
100018140:     	b.lo	0x1000181ac <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::transform<std::__1::__wrap_iter<char*>>(std::__1::__wrap_iter<char*>, std::__1::__wrap_iter<char*>) const+0xcc>
100018144:     	and	x10, x24, #0xffffffffffffffc0
100018148:     	add	x8, x0, x10
10001814c:     	add	x9, x22, x10
100018150:     	add	x11, x0, #32
100018154:     	add	x12, x22, #32
100018158:     	mov	x13, x10
10001815c:     	ldp	q0, q1, [x12, #-32]
100018160:     	ldp	q2, q3, [x12], #64
100018164:     	stp	q0, q1, [x11, #-32]
100018168:     	stp	q2, q3, [x11], #64
10001816c:     	subs	x13, x13, #64
100018170:     	b.ne	0x10001815c <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::transform<std::__1::__wrap_iter<char*>>(std::__1::__wrap_iter<char*>, std::__1::__wrap_iter<char*>) const+0x7c>
100018174:     	cmp	x24, x10
100018178:     	b.ne	0x1000181b4 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::transform<std::__1::__wrap_iter<char*>>(std::__1::__wrap_iter<char*>, std::__1::__wrap_iter<char*>) const+0xd4>
10001817c:     	b	0x1000181c4 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::transform<std::__1::__wrap_iter<char*>>(std::__1::__wrap_iter<char*>, std::__1::__wrap_iter<char*>) const+0xe4>
100018180:     	orr	x8, x24, #0xf
100018184:     	add	x23, x8, #1
100018188:     	mov	x0, x23
10001818c:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100018190:     	orr	x8, x23, #0x8000000000000000
100018194:     	stp	x24, x8, [sp, #16]
100018198:     	str	x0, [sp, #8]
10001819c:     	cmp	x22, x21
1000181a0:     	b.ne	0x100018130 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::transform<std::__1::__wrap_iter<char*>>(std::__1::__wrap_iter<char*>, std::__1::__wrap_iter<char*>) const+0x50>
1000181a4:     	mov	x8, x0
1000181a8:     	b	0x1000181c4 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::transform<std::__1::__wrap_iter<char*>>(std::__1::__wrap_iter<char*>, std::__1::__wrap_iter<char*>) const+0xe4>
1000181ac:     	mov	x8, x0
1000181b0:     	mov	x9, x22
1000181b4:     	ldrb	w10, [x9], #1
1000181b8:     	strb	w10, [x8], #1
1000181bc:     	cmp	x9, x21
1000181c0:     	b.ne	0x1000181b4 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::transform<std::__1::__wrap_iter<char*>>(std::__1::__wrap_iter<char*>, std::__1::__wrap_iter<char*>) const+0xd4>
1000181c4:     	strb	wzr, [x8]
1000181c8:     	ldr	x0, [x20, #16]
1000181cc:     	ldrb	w8, [sp, #31]
1000181d0:     	sxtb	w9, w8
1000181d4:     	ldp	x10, x11, [sp, #8]
1000181d8:     	cmp	w9, #0
1000181dc:     	add	x9, sp, #8
1000181e0:     	csel	x1, x10, x9, lt
1000181e4:     	csel	x8, x11, x8, lt
1000181e8:     	add	x2, x1, x8
1000181ec:     	ldr	x8, [x0]
1000181f0:     	ldr	x9, [x8, #32]
1000181f4:     	mov	x8, x19
1000181f8:     	blr	x9
1000181fc:     	ldrsb	w8, [sp, #31]
100018200:     	tbnz	w8, #31, 0x10001821c <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::transform<std::__1::__wrap_iter<char*>>(std::__1::__wrap_iter<char*>, std::__1::__wrap_iter<char*>) const+0x13c>
100018204:     	ldp	x29, x30, [sp, #80]
100018208:     	ldp	x20, x19, [sp, #64]
10001820c:     	ldp	x22, x21, [sp, #48]
100018210:     	ldp	x24, x23, [sp, #32]
100018214:     	add	sp, sp, #96
100018218:     	ret
10001821c:     	ldr	x0, [sp, #8]
100018220:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100018224:     	ldp	x29, x30, [sp, #80]
100018228:     	ldp	x20, x19, [sp, #64]
10001822c:     	ldp	x22, x21, [sp, #48]
100018230:     	ldp	x24, x23, [sp, #32]
100018234:     	add	sp, sp, #96
100018238:     	ret
10001823c:     	add	x0, sp, #8
100018240:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
100018244:     	mov	x19, x0
100018248:     	ldrsb	w8, [sp, #31]
10001824c:     	tbz	w8, #31, 0x100018258 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> std::__1::regex_traits<char>::transform<std::__1::__wrap_iter<char*>>(std::__1::__wrap_iter<char*>, std::__1::__wrap_iter<char*>) const+0x178>
100018250:     	ldr	x0, [sp, #8]
100018254:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100018258:     	mov	x0, x19
10001825c:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100018260 <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)9>()>:
100018260:     	stp	x20, x19, [sp, #-32]!
100018264:     	stp	x29, x30, [sp, #16]
100018268:     	add	x29, sp, #16
10001826c:     	mov	w0, #24
100018270:     	bl	0x10002f038 <_vsnprintf+0x10002f038>
100018274:     	mov	x19, x0
100018278:     	mov	w1, #9
10001827c:     	bl	0x10002ed20 <_vsnprintf+0x10002ed20>
100018280:     	adrp	x1, 0x100034000 <void std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__push_back_slow_path<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>&&)+0x44>
100018284:     	ldr	x1, [x1, #656]
100018288:     	adrp	x2, 0x100034000 <void std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__push_back_slow_path<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>&&)+0x4c>
10001828c:     	ldr	x2, [x2, #104]
100018290:     	mov	x0, x19
100018294:     	bl	0x10002f0a4 <_vsnprintf+0x10002f0a4>
100018298:     	mov	x20, x0
10001829c:     	mov	x0, x19
1000182a0:     	bl	0x10002f068 <_vsnprintf+0x10002f068>
1000182a4:     	mov	x0, x20
1000182a8:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

00000001000182ac <void std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__push_back_slow_path<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>&&)>:
1000182ac:     	stp	x24, x23, [sp, #-64]!
1000182b0:     	stp	x22, x21, [sp, #16]
1000182b4:     	stp	x20, x19, [sp, #32]
1000182b8:     	stp	x29, x30, [sp, #48]
1000182bc:     	add	x29, sp, #48
1000182c0:     	mov	x19, x0
1000182c4:     	mov	x8, #6148914691236517205
1000182c8:     	movk	x8, #1365, lsl #48
1000182cc:     	ldp	x9, x10, [x0]
1000182d0:     	sub	x21, x10, x9
1000182d4:     	asr	x10, x21, #4
1000182d8:     	mov	x11, #-6148914691236517206
1000182dc:     	movk	x11, #43691
1000182e0:     	mul	x22, x10, x11
1000182e4:     	add	x10, x22, #1
1000182e8:     	cmp	x10, x8
1000182ec:     	b.hi	0x10001846c <void std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__push_back_slow_path<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>&&)+0x1c0>
1000182f0:     	mov	x20, x1
1000182f4:     	ldr	x12, [x19, #16]
1000182f8:     	sub	x9, x12, x9
1000182fc:     	asr	x9, x9, #4
100018300:     	mul	x9, x9, x11
100018304:     	lsl	x11, x9, #1
100018308:     	cmp	x11, x10
10001830c:     	csel	x10, x11, x10, hi
100018310:     	mov	x11, #-6148914691236517206
100018314:     	movk	x11, #682, lsl #48
100018318:     	cmp	x9, x11
10001831c:     	csel	x23, x10, x8, lo
100018320:     	cbz	x23, 0x10001833c <void std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__push_back_slow_path<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>&&)+0x90>
100018324:     	cmp	x23, x8
100018328:     	b.hi	0x100018474 <void std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__push_back_slow_path<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>&&)+0x1c8>
10001832c:     	add	x8, x23, x23, lsl #1
100018330:     	lsl	x0, x8, #4
100018334:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100018338:     	b	0x100018340 <void std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__push_back_slow_path<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>&&)+0x94>
10001833c:     	mov	x0, #0
100018340:     	mov	w8, #48
100018344:     	ldr	x9, [x20, #16]
100018348:     	madd	x10, x22, x8, x0
10001834c:     	str	x9, [x10, #16]
100018350:     	ldr	q0, [x20]
100018354:     	str	q0, [x10]
100018358:     	madd	x8, x23, x8, x0
10001835c:     	stp	xzr, xzr, [x20]
100018360:     	ldur	q0, [x20, #24]
100018364:     	stp	xzr, xzr, [x20, #16]
100018368:     	add	x9, x0, x21
10001836c:     	stur	q0, [x9, #24]
100018370:     	ldr	x11, [x20, #40]
100018374:     	str	x11, [x9, #40]
100018378:     	stp	xzr, xzr, [x20, #32]
10001837c:     	add	x9, x10, #48
100018380:     	ldp	x11, x20, [x19]
100018384:     	cmp	x20, x11
100018388:     	b.eq	0x10001844c <void std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__push_back_slow_path<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>&&)+0x1a0>
10001838c:     	ldur	q0, [x20, #-48]
100018390:     	ldur	x12, [x20, #-32]
100018394:     	stur	x12, [x10, #-32]
100018398:     	stur	q0, [x10, #-48]
10001839c:     	stp	xzr, xzr, [x20, #-40]
1000183a0:     	stur	xzr, [x20, #-48]
1000183a4:     	ldur	q0, [x20, #-24]
1000183a8:     	ldur	x12, [x20, #-8]
1000183ac:     	stur	x12, [x10, #-8]
1000183b0:     	stur	q0, [x10, #-24]
1000183b4:     	sub	x10, x10, #48
1000183b8:     	stp	xzr, xzr, [x20, #-16]
1000183bc:     	stur	xzr, [x20, #-24]
1000183c0:     	sub	x12, x20, #48
1000183c4:     	mov	x20, x12
1000183c8:     	cmp	x12, x11
1000183cc:     	b.ne	0x10001838c <void std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__push_back_slow_path<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>&&)+0xe0>
1000183d0:     	ldp	x21, x20, [x19]
1000183d4:     	stp	x10, x9, [x19]
1000183d8:     	str	x8, [x19, #16]
1000183dc:     	cmp	x20, x21
1000183e0:     	b.ne	0x1000183f4 <void std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__push_back_slow_path<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>&&)+0x148>
1000183e4:     	b	0x100018430 <void std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__push_back_slow_path<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>&&)+0x184>
1000183e8:     	mov	x20, x19
1000183ec:     	cmp	x19, x21
1000183f0:     	b.eq	0x10001842c <void std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__push_back_slow_path<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>&&)+0x180>
1000183f4:     	ldursb	w8, [x20, #-1]
1000183f8:     	tbnz	w8, #31, 0x10001840c <void std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__push_back_slow_path<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>&&)+0x160>
1000183fc:     	sub	x19, x20, #48
100018400:     	ldursb	w8, [x20, #-25]
100018404:     	tbz	w8, #31, 0x1000183e8 <void std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__push_back_slow_path<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>&&)+0x13c>
100018408:     	b	0x100018420 <void std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__push_back_slow_path<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>&&)+0x174>
10001840c:     	ldur	x0, [x20, #-24]
100018410:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100018414:     	sub	x19, x20, #48
100018418:     	ldursb	w8, [x20, #-25]
10001841c:     	tbz	w8, #31, 0x1000183e8 <void std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__push_back_slow_path<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>&&)+0x13c>
100018420:     	ldur	x0, [x20, #-48]
100018424:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100018428:     	b	0x1000183e8 <void std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__push_back_slow_path<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>&&)+0x13c>
10001842c:     	mov	x20, x21
100018430:     	cbz	x20, 0x100018458 <void std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__push_back_slow_path<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>&&)+0x1ac>
100018434:     	mov	x0, x20
100018438:     	ldp	x29, x30, [sp, #48]
10001843c:     	ldp	x20, x19, [sp, #32]
100018440:     	ldp	x22, x21, [sp, #16]
100018444:     	ldp	x24, x23, [sp], #64
100018448:     	b	0x10002f014 <_vsnprintf+0x10002f014>
10001844c:     	stp	x10, x9, [x19]
100018450:     	str	x8, [x19, #16]
100018454:     	cbnz	x20, 0x100018434 <void std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__push_back_slow_path<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>&&)+0x188>
100018458:     	ldp	x29, x30, [sp, #48]
10001845c:     	ldp	x20, x19, [sp, #32]
100018460:     	ldp	x22, x21, [sp, #16]
100018464:     	ldp	x24, x23, [sp], #64
100018468:     	ret
10001846c:     	mov	x0, x19
100018470:     	bl	0x100018478 <std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__throw_length_error[abi:ue170006]() const>
100018474:     	bl	0x100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>

0000000100018478 <std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__throw_length_error[abi:ue170006]() const>:
100018478:     	stp	x29, x30, [sp, #-16]!
10001847c:     	mov	x29, sp
100018480:     	adrp	x0, 0x100031000 <std::__1::__begin_marked_subexpression<char>::~__begin_marked_subexpression()+0x4>
100018484:     	add	x0, x0, #3485
100018488:     	bl	0x100006a48 <std::__1::__throw_length_error[abi:ue170006](char const*)>

000000010001848c <std::__1::vector<std::__1::pair<char, char>, std::__1::allocator<std::__1::pair<char, char>>>::__throw_length_error[abi:ue170006]() const>:
10001848c:     	stp	x29, x30, [sp, #-16]!
100018490:     	mov	x29, sp
100018494:     	adrp	x0, 0x100031000 <std::__1::__begin_marked_subexpression<char>::~__begin_marked_subexpression()+0x18>
100018498:     	add	x0, x0, #3485
10001849c:     	bl	0x100006a48 <std::__1::__throw_length_error[abi:ue170006](char const*)>

00000001000184a0 <std::__1::__begin_marked_subexpression<char>::~__begin_marked_subexpression()>:
1000184a0:     	stp	x20, x19, [sp, #-32]!
1000184a4:     	stp	x29, x30, [sp, #16]
1000184a8:     	add	x29, sp, #16
1000184ac:     	mov	x19, x0
1000184b0:     	adrp	x8, 0x100034000 <std::__1::__begin_marked_subexpression<char>::__exec(std::__1::__state<char>&) const>
1000184b4:     	add	x8, x8, #1696
1000184b8:     	str	x8, [x0]
1000184bc:     	ldr	x0, [x0, #8]
1000184c0:     	cbz	x0, 0x1000184d0 <std::__1::__begin_marked_subexpression<char>::~__begin_marked_subexpression()+0x30>
1000184c4:     	ldr	x8, [x0]
1000184c8:     	ldr	x8, [x8, #8]
1000184cc:     	blr	x8
1000184d0:     	mov	x0, x19
1000184d4:     	ldp	x29, x30, [sp, #16]
1000184d8:     	ldp	x20, x19, [sp], #32
1000184dc:     	ret

00000001000184e0 <std::__1::__begin_marked_subexpression<char>::~__begin_marked_subexpression()>:
1000184e0:     	stp	x20, x19, [sp, #-32]!
1000184e4:     	stp	x29, x30, [sp, #16]
1000184e8:     	add	x29, sp, #16
1000184ec:     	mov	x19, x0
1000184f0:     	adrp	x8, 0x100034000 <std::__1::__end_marked_subexpression<char>::~__end_marked_subexpression()+0x10>
1000184f4:     	add	x8, x8, #1696
1000184f8:     	str	x8, [x0]
1000184fc:     	ldr	x0, [x0, #8]
100018500:     	cbz	x0, 0x100018510 <std::__1::__begin_marked_subexpression<char>::~__begin_marked_subexpression()+0x30>
100018504:     	ldr	x8, [x0]
100018508:     	ldr	x8, [x8, #8]
10001850c:     	blr	x8
100018510:     	mov	x0, x19
100018514:     	ldp	x29, x30, [sp, #16]
100018518:     	ldp	x20, x19, [sp], #32
10001851c:     	b	0x10002f014 <_vsnprintf+0x10002f014>

0000000100018520 <std::__1::__begin_marked_subexpression<char>::__exec(std::__1::__state<char>&) const>:
100018520:     	mov	w8, #-994
100018524:     	str	w8, [x1]
100018528:     	ldr	x8, [x1, #16]
10001852c:     	ldr	w9, [x0, #16]
100018530:     	sub	w9, w9, #1
100018534:     	ldr	x10, [x1, #32]
100018538:     	mov	w11, #24
10001853c:     	umull	x9, w9, w11
100018540:     	str	x8, [x10, x9]
100018544:     	ldr	x8, [x0, #8]
100018548:     	str	x8, [x1, #80]
10001854c:     	ret

0000000100018550 <std::__1::__end_marked_subexpression<char>::~__end_marked_subexpression()>:
100018550:     	stp	x20, x19, [sp, #-32]!
100018554:     	stp	x29, x30, [sp, #16]
100018558:     	add	x29, sp, #16
10001855c:     	mov	x19, x0
100018560:     	adrp	x8, 0x100034000 <std::__1::__end_marked_subexpression<char>::__exec(std::__1::__state<char>&) const>
100018564:     	add	x8, x8, #1696
100018568:     	str	x8, [x0]
10001856c:     	ldr	x0, [x0, #8]
100018570:     	cbz	x0, 0x100018580 <std::__1::__end_marked_subexpression<char>::~__end_marked_subexpression()+0x30>
100018574:     	ldr	x8, [x0]
100018578:     	ldr	x8, [x8, #8]
10001857c:     	blr	x8
100018580:     	mov	x0, x19
100018584:     	ldp	x29, x30, [sp, #16]
100018588:     	ldp	x20, x19, [sp], #32
10001858c:     	ret

0000000100018590 <std::__1::__end_marked_subexpression<char>::~__end_marked_subexpression()>:
100018590:     	stp	x20, x19, [sp, #-32]!
100018594:     	stp	x29, x30, [sp, #16]
100018598:     	add	x29, sp, #16
10001859c:     	mov	x19, x0
1000185a0:     	adrp	x8, 0x100034000 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_loop(unsigned long, unsigned long, std::__1::__owns_one_state<char>*, unsigned long, unsigned long, bool)+0x8>
1000185a4:     	add	x8, x8, #1696
1000185a8:     	str	x8, [x0]
1000185ac:     	ldr	x0, [x0, #8]
1000185b0:     	cbz	x0, 0x1000185c0 <std::__1::__end_marked_subexpression<char>::~__end_marked_subexpression()+0x30>
1000185b4:     	ldr	x8, [x0]
1000185b8:     	ldr	x8, [x8, #8]
1000185bc:     	blr	x8
1000185c0:     	mov	x0, x19
1000185c4:     	ldp	x29, x30, [sp, #16]
1000185c8:     	ldp	x20, x19, [sp], #32
1000185cc:     	b	0x10002f014 <_vsnprintf+0x10002f014>

00000001000185d0 <std::__1::__end_marked_subexpression<char>::__exec(std::__1::__state<char>&) const>:
1000185d0:     	mov	w8, #-994
1000185d4:     	str	w8, [x1]
1000185d8:     	ldr	x8, [x1, #16]
1000185dc:     	ldr	w9, [x0, #16]
1000185e0:     	sub	w9, w9, #1
1000185e4:     	ldr	x10, [x1, #32]
1000185e8:     	mov	w11, #24
1000185ec:     	umaddl	x9, w9, w11, x10
1000185f0:     	str	x8, [x9, #8]
1000185f4:     	mov	w8, #1
1000185f8:     	strb	w8, [x9, #16]
1000185fc:     	ldr	x8, [x0, #8]
100018600:     	str	x8, [x1, #80]
100018604:     	ret

0000000100018608 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_loop(unsigned long, unsigned long, std::__1::__owns_one_state<char>*, unsigned long, unsigned long, bool)>:
100018608:     	stp	x28, x27, [sp, #-96]!
10001860c:     	stp	x26, x25, [sp, #16]
100018610:     	stp	x24, x23, [sp, #32]
100018614:     	stp	x22, x21, [sp, #48]
100018618:     	stp	x20, x19, [sp, #64]
10001861c:     	stp	x29, x30, [sp, #80]
100018620:     	add	x29, sp, #80
100018624:     	mov	x21, x6
100018628:     	mov	x24, x5
10001862c:     	mov	x25, x4
100018630:     	mov	x19, x3
100018634:     	mov	x26, x2
100018638:     	mov	x27, x1
10001863c:     	mov	x20, x0
100018640:     	mov	w0, #16
100018644:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100018648:     	mov	x22, x0
10001864c:     	ldr	x8, [x20, #56]
100018650:     	ldr	x9, [x8, #8]
100018654:     	adrp	x10, 0x100034000 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_loop(unsigned long, unsigned long, std::__1::__owns_one_state<char>*, unsigned long, unsigned long, bool)+0xbc>
100018658:     	add	x10, x10, #1576
10001865c:     	stp	x10, x9, [x0]
100018660:     	str	xzr, [x8, #8]
100018664:     	mov	w0, #56
100018668:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001866c:     	mov	x23, x0
100018670:     	ldr	w28, [x20, #32]
100018674:     	ldr	x8, [x19, #8]
100018678:     	adrp	x9, 0x100034000 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_loop(unsigned long, unsigned long, std::__1::__owns_one_state<char>*, unsigned long, unsigned long, bool)+0xe0>
10001867c:     	add	x9, x9, #2752
100018680:     	stp	x9, x8, [x0]
100018684:     	stp	x22, x27, [x0, #16]
100018688:     	str	x26, [x0, #32]
10001868c:     	stp	w28, w25, [x0, #40]
100018690:     	str	w24, [x0, #48]
100018694:     	strb	w21, [x0, #52]
100018698:     	str	xzr, [x19, #8]
10001869c:     	mov	w0, #16
1000186a0:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
1000186a4:     	adrp	x8, 0x100034000 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_loop(unsigned long, unsigned long, std::__1::__owns_one_state<char>*, unsigned long, unsigned long, bool)+0x10c>
1000186a8:     	add	x8, x8, #2896
1000186ac:     	stp	x8, x23, [x0]
1000186b0:     	ldr	x8, [x20, #56]
1000186b4:     	str	x0, [x8, #8]
1000186b8:     	ldr	x8, [x23, #16]
1000186bc:     	str	x8, [x20, #56]
1000186c0:     	str	x23, [x19, #8]
1000186c4:     	add	w8, w28, #1
1000186c8:     	str	w8, [x20, #32]
1000186cc:     	ldp	x29, x30, [sp, #80]
1000186d0:     	ldp	x20, x19, [sp, #64]
1000186d4:     	ldp	x22, x21, [sp, #48]
1000186d8:     	ldp	x24, x23, [sp, #32]
1000186dc:     	ldp	x26, x25, [sp, #16]
1000186e0:     	ldp	x28, x27, [sp], #96
1000186e4:     	ret
1000186e8:     	mov	x19, x0
1000186ec:     	mov	x0, x23
1000186f0:     	bl	0x100018828 <std::__1::__loop<char>::~__loop()>
1000186f4:     	mov	x0, x19
1000186f8:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
1000186fc:     	mov	x19, x0
100018700:     	adrp	x8, 0x100034000 <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)8>()+0x40>
100018704:     	add	x8, x8, #1696
100018708:     	str	x8, [x22]
10001870c:     	ldr	x0, [x22, #8]
100018710:     	cbz	x0, 0x100018720 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_loop(unsigned long, unsigned long, std::__1::__owns_one_state<char>*, unsigned long, unsigned long, bool)+0x118>
100018714:     	ldr	x8, [x0]
100018718:     	ldr	x8, [x8, #8]
10001871c:     	blr	x8
100018720:     	mov	x0, x22
100018724:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100018728:     	mov	x0, x19
10001872c:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100018730 <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)8>()>:
100018730:     	stp	x20, x19, [sp, #-32]!
100018734:     	stp	x29, x30, [sp, #16]
100018738:     	add	x29, sp, #16
10001873c:     	mov	w0, #24
100018740:     	bl	0x10002f038 <_vsnprintf+0x10002f038>
100018744:     	mov	x19, x0
100018748:     	mov	w1, #8
10001874c:     	bl	0x10002ed20 <_vsnprintf+0x10002ed20>
100018750:     	adrp	x1, 0x100034000 <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)7>()+0x44>
100018754:     	ldr	x1, [x1, #656]
100018758:     	adrp	x2, 0x100034000 <std::__1::__loop<char>::~__loop()>
10001875c:     	ldr	x2, [x2, #104]
100018760:     	mov	x0, x19
100018764:     	bl	0x10002f0a4 <_vsnprintf+0x10002f0a4>
100018768:     	mov	x20, x0
10001876c:     	mov	x0, x19
100018770:     	bl	0x10002f068 <_vsnprintf+0x10002f068>
100018774:     	mov	x0, x20
100018778:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010001877c <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)7>()>:
10001877c:     	stp	x20, x19, [sp, #-32]!
100018780:     	stp	x29, x30, [sp, #16]
100018784:     	add	x29, sp, #16
100018788:     	mov	w0, #24
10001878c:     	bl	0x10002f038 <_vsnprintf+0x10002f038>
100018790:     	mov	x19, x0
100018794:     	mov	w1, #7
100018798:     	bl	0x10002ed20 <_vsnprintf+0x10002ed20>
10001879c:     	adrp	x1, 0x100034000 <std::__1::__loop<char>::~__loop()+0x44>
1000187a0:     	ldr	x1, [x1, #656]
1000187a4:     	adrp	x2, 0x100034000 <std::__1::__loop<char>::~__loop()+0x4c>
1000187a8:     	ldr	x2, [x2, #104]
1000187ac:     	mov	x0, x19
1000187b0:     	bl	0x10002f0a4 <_vsnprintf+0x10002f0a4>
1000187b4:     	mov	x20, x0
1000187b8:     	mov	x0, x19
1000187bc:     	bl	0x10002f068 <_vsnprintf+0x10002f068>
1000187c0:     	mov	x0, x20
1000187c4:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

00000001000187c8 <std::__1::__loop<char>::~__loop()>:
1000187c8:     	stp	x20, x19, [sp, #-32]!
1000187cc:     	stp	x29, x30, [sp, #16]
1000187d0:     	add	x29, sp, #16
1000187d4:     	mov	x19, x0
1000187d8:     	adrp	x8, 0x100034000 <std::__1::__loop<char>::~__loop()+0x20>
1000187dc:     	add	x8, x8, #2848
1000187e0:     	str	x8, [x0]
1000187e4:     	ldr	x0, [x0, #16]
1000187e8:     	cbz	x0, 0x1000187f8 <std::__1::__loop<char>::~__loop()+0x30>
1000187ec:     	ldr	x8, [x0]
1000187f0:     	ldr	x8, [x8, #8]
1000187f4:     	blr	x8
1000187f8:     	adrp	x8, 0x100034000 <std::__1::__loop<char>::~__loop()+0x40>
1000187fc:     	add	x8, x8, #1696
100018800:     	str	x8, [x19]
100018804:     	ldr	x0, [x19, #8]
100018808:     	cbz	x0, 0x100018818 <std::__1::__loop<char>::~__loop()+0x50>
10001880c:     	ldr	x8, [x0]
100018810:     	ldr	x8, [x8, #8]
100018814:     	blr	x8
100018818:     	mov	x0, x19
10001881c:     	ldp	x29, x30, [sp, #16]
100018820:     	ldp	x20, x19, [sp], #32
100018824:     	ret

0000000100018828 <std::__1::__loop<char>::~__loop()>:
100018828:     	stp	x20, x19, [sp, #-32]!
10001882c:     	stp	x29, x30, [sp, #16]
100018830:     	add	x29, sp, #16
100018834:     	mov	x19, x0
100018838:     	adrp	x8, 0x100034000 <std::__1::__loop<char>::__exec(std::__1::__state<char>&) const+0x20>
10001883c:     	add	x8, x8, #2848
100018840:     	str	x8, [x0]
100018844:     	ldr	x0, [x0, #16]
100018848:     	cbz	x0, 0x100018858 <std::__1::__loop<char>::~__loop()+0x30>
10001884c:     	ldr	x8, [x0]
100018850:     	ldr	x8, [x8, #8]
100018854:     	blr	x8
100018858:     	adrp	x8, 0x100034000 <std::__1::__loop<char>::__exec(std::__1::__state<char>&) const+0x40>
10001885c:     	add	x8, x8, #1696
100018860:     	str	x8, [x19]
100018864:     	ldr	x0, [x19, #8]
100018868:     	cbz	x0, 0x100018878 <std::__1::__loop<char>::~__loop()+0x50>
10001886c:     	ldr	x8, [x0]
100018870:     	ldr	x8, [x8, #8]
100018874:     	blr	x8
100018878:     	mov	x0, x19
10001887c:     	ldp	x29, x30, [sp, #16]
100018880:     	ldp	x20, x19, [sp], #32
100018884:     	b	0x10002f014 <_vsnprintf+0x10002f014>

0000000100018888 <std::__1::__loop<char>::__exec(std::__1::__state<char>&) const>:
100018888:     	ldr	w10, [x1]
10001888c:     	ldr	w8, [x0, #40]
100018890:     	ldr	x9, [x1, #56]
100018894:     	add	x11, x9, x8, lsl #4
100018898:     	cmn	w10, #991
10001889c:     	b.ne	0x100018930 <std::__1::__loop<char>::__exec(std::__1::__state<char>&) const+0xa8>
1000188a0:     	ldr	x10, [x11]
1000188a4:     	add	x10, x10, #1
1000188a8:     	str	x10, [x11]
1000188ac:     	ldp	x11, x13, [x0, #24]
1000188b0:     	cmp	x10, x13
1000188b4:     	cset	w12, lo
1000188b8:     	ccmp	x10, x11, #0, lo
1000188bc:     	b.lo	0x1000188d8 <std::__1::__loop<char>::__exec(std::__1::__state<char>&) const+0x50>
1000188c0:     	add	x12, x9, x8, lsl #4
1000188c4:     	ldr	x12, [x12, #8]
1000188c8:     	ldr	x14, [x1, #16]
1000188cc:     	cmp	x12, x14
1000188d0:     	ccmp	x10, x13, #2, ne
1000188d4:     	cset	w12, lo
1000188d8:     	cmp	w12, #0
1000188dc:     	ccmp	x10, x11, #0, ne
1000188e0:     	b.hs	0x10001898c <std::__1::__loop<char>::__exec(std::__1::__state<char>&) const+0x104>
1000188e4:     	mov	w10, #-994
1000188e8:     	str	w10, [x1]
1000188ec:     	cbz	w12, 0x1000189a0 <std::__1::__loop<char>::__exec(std::__1::__state<char>&) const+0x118>
1000188f0:     	ldr	x10, [x0, #8]
1000188f4:     	str	x10, [x1, #80]
1000188f8:     	ldr	x10, [x1, #16]
1000188fc:     	add	x8, x9, x8, lsl #4
100018900:     	str	x10, [x8, #8]
100018904:     	ldp	w8, w9, [x0, #44]
100018908:     	cmp	w8, w9
10001890c:     	b.eq	0x1000189a8 <std::__1::__loop<char>::__exec(std::__1::__state<char>&) const+0x120>
100018910:     	sub	w9, w9, #1
100018914:     	sub	w14, w8, #1
100018918:     	ldp	x8, x10, [x1, #24]
10001891c:     	sub	x12, x9, x14
100018920:     	cmp	x12, #4
100018924:     	b.hs	0x100018a1c <std::__1::__loop<char>::__exec(std::__1::__state<char>&) const+0x194>
100018928:     	mov	x11, x14
10001892c:     	b	0x100018a68 <std::__1::__loop<char>::__exec(std::__1::__state<char>&) const+0x1e0>
100018930:     	str	xzr, [x11]
100018934:     	ldr	x10, [x0, #32]
100018938:     	cbz	x10, 0x100018998 <std::__1::__loop<char>::__exec(std::__1::__state<char>&) const+0x110>
10001893c:     	ldr	x10, [x0, #24]
100018940:     	cbz	x10, 0x10001898c <std::__1::__loop<char>::__exec(std::__1::__state<char>&) const+0x104>
100018944:     	mov	w10, #-994
100018948:     	str	w10, [x1]
10001894c:     	ldr	x10, [x0, #8]
100018950:     	str	x10, [x1, #80]
100018954:     	ldr	x10, [x1, #16]
100018958:     	add	x8, x9, x8, lsl #4
10001895c:     	str	x10, [x8, #8]
100018960:     	ldp	w8, w9, [x0, #44]
100018964:     	cmp	w8, w9
100018968:     	b.eq	0x1000189a8 <std::__1::__loop<char>::__exec(std::__1::__state<char>&) const+0x120>
10001896c:     	sub	w9, w9, #1
100018970:     	sub	w14, w8, #1
100018974:     	ldp	x8, x10, [x1, #24]
100018978:     	sub	x12, x9, x14
10001897c:     	cmp	x12, #4
100018980:     	b.hs	0x1000189ac <std::__1::__loop<char>::__exec(std::__1::__state<char>&) const+0x124>
100018984:     	mov	x11, x14
100018988:     	b	0x1000189f8 <std::__1::__loop<char>::__exec(std::__1::__state<char>&) const+0x170>
10001898c:     	mov	w8, #-992
100018990:     	str	w8, [x1]
100018994:     	ret
100018998:     	mov	w8, #-994
10001899c:     	str	w8, [x1]
1000189a0:     	ldr	x8, [x0, #16]
1000189a4:     	str	x8, [x1, #80]
1000189a8:     	ret
1000189ac:     	and	x13, x12, #0xfffffffffffffffc
1000189b0:     	add	x11, x13, x14
1000189b4:     	mov	w15, #24
1000189b8:     	madd	x14, x14, x15, x10
1000189bc:     	add	x14, x14, #48
1000189c0:     	mov	x15, x13
1000189c4:     	stp	x8, x8, [x14, #-48]
1000189c8:     	stp	x8, x8, [x14, #-24]
1000189cc:     	stp	x8, x8, [x14]
1000189d0:     	stp	x8, x8, [x14, #24]
1000189d4:     	sturb	wzr, [x14, #-32]
1000189d8:     	sturb	wzr, [x14, #-8]
1000189dc:     	strb	wzr, [x14, #16]
1000189e0:     	strb	wzr, [x14, #40]
1000189e4:     	add	x14, x14, #96
1000189e8:     	subs	x15, x15, #4
1000189ec:     	b.ne	0x1000189c4 <std::__1::__loop<char>::__exec(std::__1::__state<char>&) const+0x13c>
1000189f0:     	cmp	x12, x13
1000189f4:     	b.eq	0x1000189a8 <std::__1::__loop<char>::__exec(std::__1::__state<char>&) const+0x120>
1000189f8:     	mov	w12, #24
1000189fc:     	madd	x10, x11, x12, x10
100018a00:     	add	x10, x10, #16
100018a04:     	sub	x9, x9, x11
100018a08:     	stp	x8, x8, [x10, #-16]
100018a0c:     	strb	wzr, [x10], #24
100018a10:     	subs	x9, x9, #1
100018a14:     	b.ne	0x100018a08 <std::__1::__loop<char>::__exec(std::__1::__state<char>&) const+0x180>
100018a18:     	b	0x1000189a8 <std::__1::__loop<char>::__exec(std::__1::__state<char>&) const+0x120>
100018a1c:     	and	x13, x12, #0xfffffffffffffffc
100018a20:     	add	x11, x13, x14
100018a24:     	mov	w15, #24
100018a28:     	madd	x14, x14, x15, x10
100018a2c:     	add	x14, x14, #48
100018a30:     	mov	x15, x13
100018a34:     	stp	x8, x8, [x14, #-48]
100018a38:     	stp	x8, x8, [x14, #-24]
100018a3c:     	stp	x8, x8, [x14]
100018a40:     	stp	x8, x8, [x14, #24]
100018a44:     	sturb	wzr, [x14, #-32]
100018a48:     	sturb	wzr, [x14, #-8]
100018a4c:     	strb	wzr, [x14, #16]
100018a50:     	strb	wzr, [x14, #40]
100018a54:     	add	x14, x14, #96
100018a58:     	subs	x15, x15, #4
100018a5c:     	b.ne	0x100018a34 <std::__1::__loop<char>::__exec(std::__1::__state<char>&) const+0x1ac>
100018a60:     	cmp	x12, x13
100018a64:     	b.eq	0x1000189a8 <std::__1::__loop<char>::__exec(std::__1::__state<char>&) const+0x120>
100018a68:     	mov	w12, #24
100018a6c:     	madd	x10, x11, x12, x10
100018a70:     	add	x10, x10, #16
100018a74:     	sub	x9, x9, x11
100018a78:     	stp	x8, x8, [x10, #-16]
100018a7c:     	strb	wzr, [x10], #24
100018a80:     	subs	x9, x9, #1
100018a84:     	b.ne	0x100018a78 <std::__1::__loop<char>::__exec(std::__1::__state<char>&) const+0x1f0>
100018a88:     	b	0x1000189a8 <std::__1::__loop<char>::__exec(std::__1::__state<char>&) const+0x120>

0000000100018a8c <std::__1::__loop<char>::__exec_split(bool, std::__1::__state<char>&) const>:
100018a8c:     	mov	w8, #-994
100018a90:     	str	w8, [x2]
100018a94:     	ldrb	w8, [x0, #52]
100018a98:     	cmp	w8, w1
100018a9c:     	b.ne	0x100018aac <std::__1::__loop<char>::__exec_split(bool, std::__1::__state<char>&) const+0x20>
100018aa0:     	ldr	x8, [x0, #16]
100018aa4:     	str	x8, [x2, #80]
100018aa8:     	b	0x100018b60 <std::__1::__loop<char>::__exec_split(bool, std::__1::__state<char>&) const+0xd4>
100018aac:     	ldr	x8, [x0, #8]
100018ab0:     	str	x8, [x2, #80]
100018ab4:     	ldr	x9, [x2, #16]
100018ab8:     	ldr	x10, [x2, #56]
100018abc:     	ldp	w11, w8, [x0, #40]
100018ac0:     	add	x10, x10, x11, lsl #4
100018ac4:     	str	x9, [x10, #8]
100018ac8:     	ldr	w9, [x0, #48]
100018acc:     	cmp	w8, w9
100018ad0:     	b.eq	0x100018b60 <std::__1::__loop<char>::__exec_split(bool, std::__1::__state<char>&) const+0xd4>
100018ad4:     	sub	w9, w9, #1
100018ad8:     	sub	w14, w8, #1
100018adc:     	ldp	x8, x10, [x2, #24]
100018ae0:     	sub	x12, x9, x14
100018ae4:     	cmp	x12, #4
100018ae8:     	b.hs	0x100018af4 <std::__1::__loop<char>::__exec_split(bool, std::__1::__state<char>&) const+0x68>
100018aec:     	mov	x11, x14
100018af0:     	b	0x100018b40 <std::__1::__loop<char>::__exec_split(bool, std::__1::__state<char>&) const+0xb4>
100018af4:     	and	x13, x12, #0xfffffffffffffffc
100018af8:     	add	x11, x13, x14
100018afc:     	mov	w15, #24
100018b00:     	madd	x14, x14, x15, x10
100018b04:     	add	x14, x14, #48
100018b08:     	mov	x15, x13
100018b0c:     	stp	x8, x8, [x14, #-48]
100018b10:     	stp	x8, x8, [x14, #-24]
100018b14:     	stp	x8, x8, [x14]
100018b18:     	stp	x8, x8, [x14, #24]
100018b1c:     	sturb	wzr, [x14, #-32]
100018b20:     	sturb	wzr, [x14, #-8]
100018b24:     	strb	wzr, [x14, #16]
100018b28:     	strb	wzr, [x14, #40]
100018b2c:     	add	x14, x14, #96
100018b30:     	subs	x15, x15, #4
100018b34:     	b.ne	0x100018b0c <std::__1::__loop<char>::__exec_split(bool, std::__1::__state<char>&) const+0x80>
100018b38:     	cmp	x12, x13
100018b3c:     	b.eq	0x100018b60 <std::__1::__loop<char>::__exec_split(bool, std::__1::__state<char>&) const+0xd4>
100018b40:     	mov	w12, #24
100018b44:     	madd	x10, x11, x12, x10
100018b48:     	add	x10, x10, #16
100018b4c:     	sub	x9, x9, x11
100018b50:     	stp	x8, x8, [x10, #-16]
100018b54:     	strb	wzr, [x10], #24
100018b58:     	subs	x9, x9, #1
100018b5c:     	b.ne	0x100018b50 <std::__1::__loop<char>::__exec_split(bool, std::__1::__state<char>&) const+0xc4>
100018b60:     	ret

0000000100018b64 <std::__1::__owns_two_states<char>::~__owns_two_states()>:
100018b64:     	stp	x20, x19, [sp, #-32]!
100018b68:     	stp	x29, x30, [sp, #16]
100018b6c:     	add	x29, sp, #16
100018b70:     	mov	x19, x0
100018b74:     	adrp	x8, 0x100034000 <std::__1::__owns_two_states<char>::~__owns_two_states()+0x20>
100018b78:     	add	x8, x8, #2848
100018b7c:     	str	x8, [x0]
100018b80:     	ldr	x0, [x0, #16]
100018b84:     	cbz	x0, 0x100018b94 <std::__1::__owns_two_states<char>::~__owns_two_states()+0x30>
100018b88:     	ldr	x8, [x0]
100018b8c:     	ldr	x8, [x8, #8]
100018b90:     	blr	x8
100018b94:     	adrp	x8, 0x100034000 <std::__1::__owns_two_states<char>::~__owns_two_states()+0x40>
100018b98:     	add	x8, x8, #1696
100018b9c:     	str	x8, [x19]
100018ba0:     	ldr	x0, [x19, #8]
100018ba4:     	cbz	x0, 0x100018bb4 <std::__1::__owns_two_states<char>::~__owns_two_states()+0x50>
100018ba8:     	ldr	x8, [x0]
100018bac:     	ldr	x8, [x8, #8]
100018bb0:     	blr	x8
100018bb4:     	mov	x0, x19
100018bb8:     	ldp	x29, x30, [sp, #16]
100018bbc:     	ldp	x20, x19, [sp], #32
100018bc0:     	ret

0000000100018bc4 <std::__1::__owns_two_states<char>::~__owns_two_states()>:
100018bc4:     	stp	x20, x19, [sp, #-32]!
100018bc8:     	stp	x29, x30, [sp, #16]
100018bcc:     	add	x29, sp, #16
100018bd0:     	mov	x19, x0
100018bd4:     	adrp	x8, 0x100034000 <std::__1::__alternate<char>::~__alternate()+0x4>
100018bd8:     	add	x8, x8, #2848
100018bdc:     	str	x8, [x0]
100018be0:     	ldr	x0, [x0, #16]
100018be4:     	cbz	x0, 0x100018bf4 <std::__1::__owns_two_states<char>::~__owns_two_states()+0x30>
100018be8:     	ldr	x8, [x0]
100018bec:     	ldr	x8, [x8, #8]
100018bf0:     	blr	x8
100018bf4:     	adrp	x8, 0x100034000 <std::__1::__alternate<char>::~__alternate()+0x24>
100018bf8:     	add	x8, x8, #1696
100018bfc:     	str	x8, [x19]
100018c00:     	ldr	x0, [x19, #8]
100018c04:     	cbz	x0, 0x100018c14 <std::__1::__owns_two_states<char>::~__owns_two_states()+0x50>
100018c08:     	ldr	x8, [x0]
100018c0c:     	ldr	x8, [x8, #8]
100018c10:     	blr	x8
100018c14:     	mov	x0, x19
100018c18:     	ldp	x29, x30, [sp, #16]
100018c1c:     	ldp	x20, x19, [sp], #32
100018c20:     	b	0x10002f014 <_vsnprintf+0x10002f014>

0000000100018c24 <std::__1::__repeat_one_loop<char>::~__repeat_one_loop()>:
100018c24:     	ret

0000000100018c28 <std::__1::__repeat_one_loop<char>::~__repeat_one_loop()>:
100018c28:     	b	0x10002f014 <_vsnprintf+0x10002f014>

0000000100018c2c <std::__1::__repeat_one_loop<char>::__exec(std::__1::__state<char>&) const>:
100018c2c:     	mov	w8, #-991
100018c30:     	str	w8, [x1]
100018c34:     	ldr	x8, [x0, #8]
100018c38:     	str	x8, [x1, #80]
100018c3c:     	ret

0000000100018c40 <std::__1::__alternate<char>::~__alternate()>:
100018c40:     	stp	x20, x19, [sp, #-32]!
100018c44:     	stp	x29, x30, [sp, #16]
100018c48:     	add	x29, sp, #16
100018c4c:     	mov	x19, x0
100018c50:     	adrp	x8, 0x100034000 <std::__1::__alternate<char>::~__alternate()+0x20>
100018c54:     	add	x8, x8, #2848
100018c58:     	str	x8, [x0]
100018c5c:     	ldr	x0, [x0, #16]
100018c60:     	cbz	x0, 0x100018c70 <std::__1::__alternate<char>::~__alternate()+0x30>
100018c64:     	ldr	x8, [x0]
100018c68:     	ldr	x8, [x8, #8]
100018c6c:     	blr	x8
100018c70:     	adrp	x8, 0x100034000 <std::__1::__alternate<char>::~__alternate()+0x40>
100018c74:     	add	x8, x8, #1696
100018c78:     	str	x8, [x19]
100018c7c:     	ldr	x0, [x19, #8]
100018c80:     	cbz	x0, 0x100018c90 <std::__1::__alternate<char>::~__alternate()+0x50>
100018c84:     	ldr	x8, [x0]
100018c88:     	ldr	x8, [x8, #8]
100018c8c:     	blr	x8
100018c90:     	mov	x0, x19
100018c94:     	ldp	x29, x30, [sp, #16]
100018c98:     	ldp	x20, x19, [sp], #32
100018c9c:     	ret

0000000100018ca0 <std::__1::__alternate<char>::~__alternate()>:
100018ca0:     	stp	x20, x19, [sp, #-32]!
100018ca4:     	stp	x29, x30, [sp, #16]
100018ca8:     	add	x29, sp, #16
100018cac:     	mov	x19, x0
100018cb0:     	adrp	x8, 0x100034000 <std::__1::__alternate<char>::__exec_split(bool, std::__1::__state<char>&) const+0x14>
100018cb4:     	add	x8, x8, #2848
100018cb8:     	str	x8, [x0]
100018cbc:     	ldr	x0, [x0, #16]
100018cc0:     	cbz	x0, 0x100018cd0 <std::__1::__alternate<char>::~__alternate()+0x30>
100018cc4:     	ldr	x8, [x0]
100018cc8:     	ldr	x8, [x8, #8]
100018ccc:     	blr	x8
100018cd0:     	adrp	x8, 0x100034000 <std::__1::__empty_non_own_state<char>::__exec(std::__1::__state<char>&) const+0x8>
100018cd4:     	add	x8, x8, #1696
100018cd8:     	str	x8, [x19]
100018cdc:     	ldr	x0, [x19, #8]
100018ce0:     	cbz	x0, 0x100018cf0 <std::__1::__alternate<char>::~__alternate()+0x50>
100018ce4:     	ldr	x8, [x0]
100018ce8:     	ldr	x8, [x8, #8]
100018cec:     	blr	x8
100018cf0:     	mov	x0, x19
100018cf4:     	ldp	x29, x30, [sp, #16]
100018cf8:     	ldp	x20, x19, [sp], #32
100018cfc:     	b	0x10002f014 <_vsnprintf+0x10002f014>

0000000100018d00 <std::__1::__alternate<char>::__exec(std::__1::__state<char>&) const>:
100018d00:     	mov	w8, #-992
100018d04:     	str	w8, [x1]
100018d08:     	ret

0000000100018d0c <std::__1::__alternate<char>::__exec_split(bool, std::__1::__state<char>&) const>:
100018d0c:     	mov	w8, #-994
100018d10:     	str	w8, [x2]
100018d14:     	cmp	w1, #0
100018d18:     	mov	w8, #8
100018d1c:     	mov	w9, #16
100018d20:     	csel	x8, x9, x8, ne
100018d24:     	ldr	x8, [x0, x8]
100018d28:     	str	x8, [x2, #80]
100018d2c:     	ret

0000000100018d30 <std::__1::__empty_non_own_state<char>::~__empty_non_own_state()>:
100018d30:     	ret

0000000100018d34 <std::__1::__empty_non_own_state<char>::~__empty_non_own_state()>:
100018d34:     	b	0x10002f014 <_vsnprintf+0x10002f014>

0000000100018d38 <std::__1::__empty_non_own_state<char>::__exec(std::__1::__state<char>&) const>:
100018d38:     	mov	w8, #-994
100018d3c:     	str	w8, [x1]
100018d40:     	ldr	x8, [x0, #8]
100018d44:     	str	x8, [x1, #80]
100018d48:     	ret

0000000100018d4c <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)15>()>:
100018d4c:     	stp	x20, x19, [sp, #-32]!
100018d50:     	stp	x29, x30, [sp, #16]
100018d54:     	add	x29, sp, #16
100018d58:     	mov	w0, #24
100018d5c:     	bl	0x10002f038 <_vsnprintf+0x10002f038>
100018d60:     	mov	x19, x0
100018d64:     	mov	w1, #15
100018d68:     	bl	0x10002ed20 <_vsnprintf+0x10002ed20>
100018d6c:     	adrp	x1, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_nondupl_RE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x44>
100018d70:     	ldr	x1, [x1, #656]
100018d74:     	adrp	x2, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_nondupl_RE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x4c>
100018d78:     	ldr	x2, [x2, #104]
100018d7c:     	mov	x0, x19
100018d80:     	bl	0x10002f0a4 <_vsnprintf+0x10002f0a4>
100018d84:     	mov	x20, x0
100018d88:     	mov	x0, x19
100018d8c:     	bl	0x10002f068 <_vsnprintf+0x10002f068>
100018d90:     	mov	x0, x20
100018d94:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100018d98 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_nondupl_RE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>:
100018d98:     	stp	x24, x23, [sp, #-64]!
100018d9c:     	stp	x22, x21, [sp, #16]
100018da0:     	stp	x20, x19, [sp, #32]
100018da4:     	stp	x29, x30, [sp, #48]
100018da8:     	add	x29, sp, #48
100018dac:     	mov	x20, x2
100018db0:     	mov	x22, x1
100018db4:     	mov	x19, x0
100018db8:     	bl	0x100019248 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>
100018dbc:     	mov	x21, x0
100018dc0:     	cmp	x22, x0
100018dc4:     	b.eq	0x100018de0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_nondupl_RE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x48>
100018dc8:     	mov	x0, x21
100018dcc:     	ldp	x29, x30, [sp, #48]
100018dd0:     	ldp	x20, x19, [sp, #32]
100018dd4:     	ldp	x22, x21, [sp, #16]
100018dd8:     	ldp	x24, x23, [sp], #64
100018ddc:     	ret
100018de0:     	cmp	x22, x20
100018de4:     	b.eq	0x100018dc8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_nondupl_RE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x30>
100018de8:     	add	x8, x22, #1
100018dec:     	cmp	x8, x20
100018df0:     	b.eq	0x100018dc8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_nondupl_RE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x30>
100018df4:     	ldrb	w9, [x22]
100018df8:     	cmp	w9, #92
100018dfc:     	b.ne	0x100018dc8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_nondupl_RE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x30>
100018e00:     	ldrb	w8, [x8]
100018e04:     	cmp	w8, #40
100018e08:     	b.ne	0x100018e58 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_nondupl_RE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xc0>
100018e0c:     	add	x22, x22, #2
100018e10:     	ldrb	w8, [x19, #24]
100018e14:     	tbnz	w8, #1, 0x100018eb0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_nondupl_RE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x118>
100018e18:     	mov	w0, #24
100018e1c:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100018e20:     	ldr	w8, [x19, #28]
100018e24:     	add	w23, w8, #1
100018e28:     	str	w23, [x19, #28]
100018e2c:     	ldr	x8, [x19, #56]
100018e30:     	ldr	x9, [x8, #8]
100018e34:     	adrp	x10, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_nondupl_RE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x10c>
100018e38:     	add	x10, x10, #2608
100018e3c:     	stp	x10, x9, [x0]
100018e40:     	str	w23, [x0, #16]
100018e44:     	str	x0, [x8, #8]
100018e48:     	ldr	x8, [x19, #56]
100018e4c:     	ldr	x8, [x8, #8]
100018e50:     	str	x8, [x19, #56]
100018e54:     	b	0x100018eb4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_nondupl_RE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x11c>
100018e58:     	and	w9, w8, #0xf8
100018e5c:     	cmp	w9, #48
100018e60:     	b.eq	0x100018e70 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_nondupl_RE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xd8>
100018e64:     	and	w9, w8, #0xfe
100018e68:     	cmp	w9, #56
100018e6c:     	b.ne	0x100018dc8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_nondupl_RE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x30>
100018e70:     	sub	w9, w8, #49
100018e74:     	cmp	w9, #8
100018e78:     	b.hi	0x100018dc8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_nondupl_RE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x30>
100018e7c:     	sub	w1, w8, #48
100018e80:     	ldr	w8, [x19, #28]
100018e84:     	cmp	w1, w8
100018e88:     	b.hi	0x100018f88 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_nondupl_RE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x1f0>
100018e8c:     	mov	x0, x19
100018e90:     	bl	0x100013e54 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_back_ref(int)>
100018e94:     	add	x21, x22, #2
100018e98:     	mov	x0, x21
100018e9c:     	ldp	x29, x30, [sp, #48]
100018ea0:     	ldp	x20, x19, [sp, #32]
100018ea4:     	ldp	x22, x21, [sp, #16]
100018ea8:     	ldp	x24, x23, [sp], #64
100018eac:     	ret
100018eb0:     	ldr	w23, [x19, #28]
100018eb4:     	cmp	x22, x20
100018eb8:     	b.eq	0x100018f84 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_nondupl_RE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x1ec>
100018ebc:     	mov	x21, x22
100018ec0:     	ldr	x22, [x19, #56]
100018ec4:     	ldr	w24, [x19, #28]
100018ec8:     	mov	x0, x19
100018ecc:     	mov	x1, x21
100018ed0:     	mov	x2, x20
100018ed4:     	bl	0x100018d98 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_nondupl_RE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>
100018ed8:     	cmp	x21, x0
100018edc:     	b.eq	0x100018f0c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_nondupl_RE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x174>
100018ee0:     	mov	x1, x0
100018ee4:     	add	w4, w24, #1
100018ee8:     	ldr	w8, [x19, #28]
100018eec:     	add	w5, w8, #1
100018ef0:     	mov	x0, x19
100018ef4:     	mov	x2, x20
100018ef8:     	mov	x3, x22
100018efc:     	bl	0x100018f8c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_RE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)>
100018f00:     	mov	x22, x0
100018f04:     	cmp	x21, x0
100018f08:     	b.ne	0x100018eb4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_nondupl_RE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x11c>
100018f0c:     	add	x8, x21, #1
100018f10:     	cmp	x8, x20
100018f14:     	b.eq	0x100018f84 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_nondupl_RE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x1ec>
100018f18:     	ldrb	w9, [x21]
100018f1c:     	cmp	w9, #92
100018f20:     	b.ne	0x100018f84 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_nondupl_RE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x1ec>
100018f24:     	ldrb	w8, [x8]
100018f28:     	cmp	w8, #41
100018f2c:     	b.ne	0x100018f84 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_nondupl_RE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x1ec>
100018f30:     	add	x21, x21, #2
100018f34:     	ldrb	w8, [x19, #24]
100018f38:     	tbnz	w8, #1, 0x100018dc8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_nondupl_RE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x30>
100018f3c:     	mov	w0, #24
100018f40:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100018f44:     	ldr	x8, [x19, #56]
100018f48:     	ldr	x9, [x8, #8]
100018f4c:     	adrp	x10, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_RE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x30>
100018f50:     	add	x10, x10, #2680
100018f54:     	stp	x10, x9, [x0]
100018f58:     	str	w23, [x0, #16]
100018f5c:     	str	x0, [x8, #8]
100018f60:     	ldr	x8, [x19, #56]
100018f64:     	ldr	x8, [x8, #8]
100018f68:     	str	x8, [x19, #56]
100018f6c:     	mov	x0, x21
100018f70:     	ldp	x29, x30, [sp, #48]
100018f74:     	ldp	x20, x19, [sp, #32]
100018f78:     	ldp	x22, x21, [sp, #16]
100018f7c:     	ldp	x24, x23, [sp], #64
100018f80:     	ret
100018f84:     	bl	0x100011e98 <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)6>()>
100018f88:     	bl	0x100013e08 <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)4>()>

0000000100018f8c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_RE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)>:
100018f8c:     	stp	x20, x19, [sp, #-32]!
100018f90:     	stp	x29, x30, [sp, #16]
100018f94:     	add	x29, sp, #16
100018f98:     	mov	x20, x1
100018f9c:     	cmp	x1, x2
100018fa0:     	b.eq	0x100019104 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_RE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x178>
100018fa4:     	ldrb	w8, [x20]
100018fa8:     	cmp	w8, #42
100018fac:     	b.ne	0x100018fdc <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_RE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x50>
100018fb0:     	mov	w4, w4
100018fb4:     	mov	w5, w5
100018fb8:     	mov	x1, #0
100018fbc:     	mov	x2, #-1
100018fc0:     	mov	w6, #1
100018fc4:     	bl	0x100018608 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_loop(unsigned long, unsigned long, std::__1::__owns_one_state<char>*, unsigned long, unsigned long, bool)>
100018fc8:     	add	x19, x20, #1
100018fcc:     	mov	x0, x19
100018fd0:     	ldp	x29, x30, [sp, #16]
100018fd4:     	ldp	x20, x19, [sp], #32
100018fd8:     	ret
100018fdc:     	mov	x19, x2
100018fe0:     	add	x9, x20, #1
100018fe4:     	cmp	x9, x2
100018fe8:     	b.eq	0x100019104 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_RE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x178>
100018fec:     	cmp	w8, #92
100018ff0:     	b.ne	0x100019104 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_RE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x178>
100018ff4:     	ldrb	w8, [x20, #1]
100018ff8:     	cmp	w8, #123
100018ffc:     	cset	w8, eq
100019000:     	ubfiz	x8, x8, #1, #32
100019004:     	cbz	x8, 0x100019104 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_RE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x178>
100019008:     	add	x9, x20, x8
10001900c:     	cmp	x9, x19
100019010:     	b.eq	0x100019240 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_RE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x2b4>
100019014:     	ldrb	w8, [x9]
100019018:     	and	w10, w8, #0xf8
10001901c:     	cmp	w10, #48
100019020:     	b.eq	0x100019030 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_RE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0xa4>
100019024:     	and	w10, w8, #0xfe
100019028:     	cmp	w10, #56
10001902c:     	b.ne	0x100019240 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_RE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x2b4>
100019030:     	sub	w8, w8, #48
100019034:     	add	x11, x9, #1
100019038:     	cmp	x11, x19
10001903c:     	b.eq	0x100019084 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_RE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0xf8>
100019040:     	mov	w10, #52428
100019044:     	movk	w10, #3276, lsl #16
100019048:     	mov	w12, #10
10001904c:     	ldrb	w13, [x11]
100019050:     	and	w14, w13, #0xf8
100019054:     	cmp	w14, #48
100019058:     	b.eq	0x100019068 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_RE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0xdc>
10001905c:     	and	w14, w13, #0xfe
100019060:     	cmp	w14, #56
100019064:     	b.ne	0x100019088 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_RE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0xfc>
100019068:     	cmp	w8, w10
10001906c:     	b.ge	0x100019240 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_RE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x2b4>
100019070:     	madd	w8, w8, w12, w13
100019074:     	sub	w8, w8, #48
100019078:     	add	x11, x11, #1
10001907c:     	cmp	x11, x19
100019080:     	b.ne	0x10001904c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_RE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0xc0>
100019084:     	mov	x11, x19
100019088:     	cmp	x11, x9
10001908c:     	b.eq	0x100019240 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_RE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x2b4>
100019090:     	cmp	x11, x19
100019094:     	b.eq	0x100019244 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_RE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x2b8>
100019098:     	mov	x9, x11
10001909c:     	ldrb	w10, [x9], #1
1000190a0:     	cmp	w10, #44
1000190a4:     	b.ne	0x100019118 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_RE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x18c>
1000190a8:     	cmp	x9, x19
1000190ac:     	b.eq	0x100019244 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_RE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x2b8>
1000190b0:     	ldrb	w10, [x9]
1000190b4:     	and	w12, w10, #0xf8
1000190b8:     	cmp	w12, #48
1000190bc:     	b.eq	0x100019168 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_RE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x1dc>
1000190c0:     	and	w12, w10, #0xfe
1000190c4:     	cmp	w12, #56
1000190c8:     	b.eq	0x100019168 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_RE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x1dc>
1000190cc:     	mov	w10, #-1
1000190d0:     	cmp	x9, x19
1000190d4:     	b.eq	0x1000191cc <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_RE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x240>
1000190d8:     	add	x11, x9, #1
1000190dc:     	cmp	x11, x19
1000190e0:     	b.eq	0x1000191c4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_RE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x238>
1000190e4:     	ldrb	w11, [x9]
1000190e8:     	cmp	w11, #92
1000190ec:     	b.ne	0x1000191c4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_RE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x238>
1000190f0:     	ldrb	w11, [x9, #1]
1000190f4:     	cmp	w11, #125
1000190f8:     	add	x11, x9, #2
1000190fc:     	csel	x19, x9, x11, ne
100019100:     	b	0x1000191d8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_RE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x24c>
100019104:     	mov	x19, x20
100019108:     	mov	x0, x19
10001910c:     	ldp	x29, x30, [sp, #16]
100019110:     	ldp	x20, x19, [sp], #32
100019114:     	ret
100019118:     	cmp	x9, x19
10001911c:     	b.eq	0x100019244 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_RE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x2b8>
100019120:     	cmp	w10, #92
100019124:     	b.ne	0x100019244 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_RE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x2b8>
100019128:     	ldrb	w9, [x11, #1]
10001912c:     	cmp	w9, #125
100019130:     	cset	w9, eq
100019134:     	ubfiz	x9, x9, #1, #32
100019138:     	cbz	x9, 0x100019244 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_RE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x2b8>
10001913c:     	sxtw	x1, w8
100019140:     	add	x19, x11, x9
100019144:     	mov	w4, w4
100019148:     	mov	w5, w5
10001914c:     	mov	x2, x1
100019150:     	mov	w6, #1
100019154:     	bl	0x100018608 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_loop(unsigned long, unsigned long, std::__1::__owns_one_state<char>*, unsigned long, unsigned long, bool)>
100019158:     	mov	x0, x19
10001915c:     	ldp	x29, x30, [sp, #16]
100019160:     	ldp	x20, x19, [sp], #32
100019164:     	ret
100019168:     	sub	w10, w10, #48
10001916c:     	add	x9, x11, #2
100019170:     	cmp	x9, x19
100019174:     	b.eq	0x1000191bc <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_RE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x230>
100019178:     	mov	w11, #52428
10001917c:     	movk	w11, #3276, lsl #16
100019180:     	mov	w12, #10
100019184:     	ldrb	w13, [x9]
100019188:     	and	w14, w13, #0xf8
10001918c:     	cmp	w14, #48
100019190:     	b.eq	0x1000191a0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_RE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x214>
100019194:     	and	w14, w13, #0xfe
100019198:     	cmp	w14, #56
10001919c:     	b.ne	0x1000190d0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_RE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x144>
1000191a0:     	cmp	w10, w11
1000191a4:     	b.ge	0x100019240 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_RE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x2b4>
1000191a8:     	madd	w10, w10, w12, w13
1000191ac:     	sub	w10, w10, #48
1000191b0:     	add	x9, x9, #1
1000191b4:     	cmp	x9, x19
1000191b8:     	b.ne	0x100019184 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_RE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x1f8>
1000191bc:     	mov	x9, x19
1000191c0:     	b	0x1000191d8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_RE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x24c>
1000191c4:     	mov	x19, x9
1000191c8:     	b	0x1000191d8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_RE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x24c>
1000191cc:     	mov	x1, x9
1000191d0:     	mov	x9, x19
1000191d4:     	mov	x19, x1
1000191d8:     	cmp	x9, x19
1000191dc:     	b.eq	0x100019244 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_RE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x2b8>
1000191e0:     	cmn	w10, #1
1000191e4:     	b.eq	0x100019218 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_RE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x28c>
1000191e8:     	cmp	w10, w8
1000191ec:     	b.lt	0x100019240 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_RE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)+0x2b4>
1000191f0:     	sxtw	x1, w8
1000191f4:     	sxtw	x2, w10
1000191f8:     	mov	w4, w4
1000191fc:     	mov	w5, w5
100019200:     	mov	w6, #1
100019204:     	bl	0x100018608 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_loop(unsigned long, unsigned long, std::__1::__owns_one_state<char>*, unsigned long, unsigned long, bool)>
100019208:     	mov	x0, x19
10001920c:     	ldp	x29, x30, [sp, #16]
100019210:     	ldp	x20, x19, [sp], #32
100019214:     	ret
100019218:     	sxtw	x1, w8
10001921c:     	mov	w4, w4
100019220:     	mov	w5, w5
100019224:     	mov	x2, #-1
100019228:     	mov	w6, #1
10001922c:     	bl	0x100018608 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_loop(unsigned long, unsigned long, std::__1::__owns_one_state<char>*, unsigned long, unsigned long, bool)>
100019230:     	mov	x0, x19
100019234:     	ldp	x29, x30, [sp, #16]
100019238:     	ldp	x20, x19, [sp], #32
10001923c:     	ret
100019240:     	bl	0x100018730 <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)8>()>
100019244:     	bl	0x10001877c <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)7>()>

0000000100019248 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>:
100019248:     	stp	x22, x21, [sp, #-48]!
10001924c:     	stp	x20, x19, [sp, #16]
100019250:     	stp	x29, x30, [sp, #32]
100019254:     	add	x29, sp, #32
100019258:     	mov	x20, x2
10001925c:     	mov	x21, x1
100019260:     	mov	x19, x0
100019264:     	cmp	x1, x2
100019268:     	b.eq	0x100019364 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x11c>
10001926c:     	mov	x22, x21
100019270:     	ldrb	w8, [x22], #1
100019274:     	cmp	x22, x20
100019278:     	b.ne	0x100019284 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x3c>
10001927c:     	cmp	w8, #36
100019280:     	b.eq	0x1000192a4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x5c>
100019284:     	sub	w9, w8, #46
100019288:     	cmp	w9, #46
10001928c:     	mov	w10, #1
100019290:     	lsl	x9, x10, x9
100019294:     	and	x9, x9, #0x7fffffffffff
100019298:     	and	x9, x9, #0xffffe00000000001
10001929c:     	ccmp	x9, #0, #4, ls
1000192a0:     	b.eq	0x100019380 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x138>
1000192a4:     	mov	x0, x21
1000192a8:     	cmp	x22, x20
1000192ac:     	b.eq	0x100019300 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xb8>
1000192b0:     	ldrb	w8, [x21]
1000192b4:     	mov	x0, x21
1000192b8:     	cmp	w8, #92
1000192bc:     	b.ne	0x100019300 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xb8>
1000192c0:     	ldrsb	w8, [x22]
1000192c4:     	sub	w9, w8, #36
1000192c8:     	cmp	w9, #58
1000192cc:     	mov	w10, #1
1000192d0:     	lsl	x9, x10, x9
1000192d4:     	mov	x10, #1089
1000192d8:     	movk	x10, #1408, lsl #48
1000192dc:     	and	x9, x9, x10
1000192e0:     	ccmp	x9, #0, #4, ls
1000192e4:     	mov	x0, x21
1000192e8:     	b.eq	0x100019300 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xb8>
1000192ec:     	and	w8, w8, #0xff
1000192f0:     	sxtb	w1, w8
1000192f4:     	mov	x0, x19
1000192f8:     	bl	0x100013cd4 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_char(char)>
1000192fc:     	add	x0, x21, #2
100019300:     	cmp	x0, x21
100019304:     	b.eq	0x100019318 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xd0>
100019308:     	ldp	x29, x30, [sp, #32]
10001930c:     	ldp	x20, x19, [sp, #16]
100019310:     	ldp	x22, x21, [sp], #48
100019314:     	ret
100019318:     	ldrb	w8, [x21]
10001931c:     	cmp	w8, #46
100019320:     	b.ne	0x100019364 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x11c>
100019324:     	mov	w0, #16
100019328:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001932c:     	ldr	x8, [x19, #56]
100019330:     	ldr	x9, [x8, #8]
100019334:     	adrp	x10, 0x100034000 <std::__1::__match_any<char>::~__match_any()>
100019338:     	add	x10, x10, #3112
10001933c:     	stp	x10, x9, [x0]
100019340:     	str	x0, [x8, #8]
100019344:     	ldr	x8, [x19, #56]
100019348:     	ldr	x8, [x8, #8]
10001934c:     	str	x8, [x19, #56]
100019350:     	mov	x0, x22
100019354:     	ldp	x29, x30, [sp, #32]
100019358:     	ldp	x20, x19, [sp, #16]
10001935c:     	ldp	x22, x21, [sp], #48
100019360:     	ret
100019364:     	mov	x0, x19
100019368:     	mov	x1, x21
10001936c:     	mov	x2, x20
100019370:     	ldp	x29, x30, [sp, #32]
100019374:     	ldp	x20, x19, [sp, #16]
100019378:     	ldp	x22, x21, [sp], #48
10001937c:     	b	0x100013448 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_bracket_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>
100019380:     	sxtb	w1, w8
100019384:     	mov	x0, x19
100019388:     	bl	0x100013cd4 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_char(char)>
10001938c:     	mov	x0, x22
100019390:     	ldp	x29, x30, [sp, #32]
100019394:     	ldp	x20, x19, [sp, #16]
100019398:     	ldp	x22, x21, [sp], #48
10001939c:     	ret

00000001000193a0 <std::__1::__match_any<char>::~__match_any()>:
1000193a0:     	stp	x20, x19, [sp, #-32]!
1000193a4:     	stp	x29, x30, [sp, #16]
1000193a8:     	add	x29, sp, #16
1000193ac:     	mov	x19, x0
1000193b0:     	adrp	x8, 0x100034000 <std::__1::__match_any<char>::~__match_any()+0x3c>
1000193b4:     	add	x8, x8, #1696
1000193b8:     	str	x8, [x0]
1000193bc:     	ldr	x0, [x0, #8]
1000193c0:     	cbz	x0, 0x1000193d0 <std::__1::__match_any<char>::~__match_any()+0x30>
1000193c4:     	ldr	x8, [x0]
1000193c8:     	ldr	x8, [x8, #8]
1000193cc:     	blr	x8
1000193d0:     	mov	x0, x19
1000193d4:     	ldp	x29, x30, [sp, #16]
1000193d8:     	ldp	x20, x19, [sp], #32
1000193dc:     	ret

00000001000193e0 <std::__1::__match_any<char>::~__match_any()>:
1000193e0:     	stp	x20, x19, [sp, #-32]!
1000193e4:     	stp	x29, x30, [sp, #16]
1000193e8:     	add	x29, sp, #16
1000193ec:     	mov	x19, x0
1000193f0:     	adrp	x8, 0x100034000 <std::__1::__match_any<char>::__exec(std::__1::__state<char>&) const+0x3c>
1000193f4:     	add	x8, x8, #1696
1000193f8:     	str	x8, [x0]
1000193fc:     	ldr	x0, [x0, #8]
100019400:     	cbz	x0, 0x100019410 <std::__1::__match_any<char>::~__match_any()+0x30>
100019404:     	ldr	x8, [x0]
100019408:     	ldr	x8, [x8, #8]
10001940c:     	blr	x8
100019410:     	mov	x0, x19
100019414:     	ldp	x29, x30, [sp, #16]
100019418:     	ldp	x20, x19, [sp], #32
10001941c:     	b	0x10002f014 <_vsnprintf+0x10002f014>

0000000100019420 <std::__1::__match_any<char>::__exec(std::__1::__state<char>&) const>:
100019420:     	ldp	x8, x9, [x1, #16]
100019424:     	cmp	x8, x9
100019428:     	b.eq	0x100019450 <std::__1::__match_any<char>::__exec(std::__1::__state<char>&) const+0x30>
10001942c:     	ldrb	w9, [x8]
100019430:     	cbz	w9, 0x100019450 <std::__1::__match_any<char>::__exec(std::__1::__state<char>&) const+0x30>
100019434:     	mov	w9, #-995
100019438:     	str	w9, [x1]
10001943c:     	add	x8, x8, #1
100019440:     	str	x8, [x1, #16]
100019444:     	ldr	x8, [x0, #8]
100019448:     	str	x8, [x1, #80]
10001944c:     	ret
100019450:     	mov	w9, #-993
100019454:     	str	w9, [x1]
100019458:     	str	xzr, [x1, #80]
10001945c:     	ret

0000000100019460 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__test_back_ref(char)>:
100019460:     	stp	x29, x30, [sp, #-16]!
100019464:     	mov	x29, sp
100019468:     	and	w8, w1, #0xf8
10001946c:     	cmp	w8, #48
100019470:     	b.eq	0x100019480 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__test_back_ref(char)+0x20>
100019474:     	and	w8, w1, #0xfe
100019478:     	cmp	w8, #56
10001947c:     	b.ne	0x1000194b0 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__test_back_ref(char)+0x50>
100019480:     	and	w8, w1, #0xff
100019484:     	sub	w9, w8, #49
100019488:     	cmp	w9, #8
10001948c:     	b.hi	0x1000194b0 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__test_back_ref(char)+0x50>
100019490:     	sub	w1, w8, #48
100019494:     	ldr	w8, [x0, #28]
100019498:     	cmp	w1, w8
10001949c:     	b.hi	0x1000194bc <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__test_back_ref(char)+0x5c>
1000194a0:     	bl	0x100013e54 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_back_ref(int)>
1000194a4:     	mov	w0, #1
1000194a8:     	ldp	x29, x30, [sp], #16
1000194ac:     	ret
1000194b0:     	mov	w0, #0
1000194b4:     	ldp	x29, x30, [sp], #16
1000194b8:     	ret
1000194bc:     	bl	0x100013e08 <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)4>()>

00000001000194c0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>:
1000194c0:     	stp	x26, x25, [sp, #-80]!
1000194c4:     	stp	x24, x23, [sp, #16]
1000194c8:     	stp	x22, x21, [sp, #32]
1000194cc:     	stp	x20, x19, [sp, #48]
1000194d0:     	stp	x29, x30, [sp, #64]
1000194d4:     	add	x29, sp, #64
1000194d8:     	mov	x19, x2
1000194dc:     	mov	x22, x1
1000194e0:     	mov	x21, x0
1000194e4:     	ldr	x20, [x0, #56]
1000194e8:     	ldr	w24, [x0, #28]
1000194ec:     	bl	0x10001973c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>
1000194f0:     	mov	x1, x0
1000194f4:     	cmp	x0, x22
1000194f8:     	b.ne	0x100019574 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xb4>
1000194fc:     	mov	x0, x21
100019500:     	mov	x1, x22
100019504:     	mov	x2, x19
100019508:     	bl	0x1000197b4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>
10001950c:     	mov	x1, x0
100019510:     	cmp	x0, x22
100019514:     	b.ne	0x100019574 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xb4>
100019518:     	cmp	x22, x19
10001951c:     	b.eq	0x100019560 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xa0>
100019520:     	ldrb	w8, [x22]
100019524:     	cmp	w8, #46
100019528:     	b.ne	0x100019560 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xa0>
10001952c:     	mov	w0, #16
100019530:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100019534:     	ldr	x8, [x21, #56]
100019538:     	ldr	x9, [x8, #8]
10001953c:     	adrp	x10, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xe8>
100019540:     	add	x10, x10, #3112
100019544:     	stp	x10, x9, [x0]
100019548:     	str	x0, [x8, #8]
10001954c:     	ldr	x8, [x21, #56]
100019550:     	ldr	x8, [x8, #8]
100019554:     	str	x8, [x21, #56]
100019558:     	add	x1, x22, #1
10001955c:     	b	0x100019574 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xb4>
100019560:     	mov	x0, x21
100019564:     	mov	x1, x22
100019568:     	mov	x2, x19
10001956c:     	bl	0x100013448 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_bracket_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>
100019570:     	mov	x1, x0
100019574:     	cmp	x1, x22
100019578:     	b.ne	0x1000196e4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x224>
10001957c:     	cmp	x1, x19
100019580:     	b.eq	0x1000196e4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x224>
100019584:     	ldrsb	w8, [x22]
100019588:     	cmp	w8, #36
10001958c:     	b.eq	0x1000195d0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x110>
100019590:     	cmp	w8, #40
100019594:     	b.eq	0x10001961c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x15c>
100019598:     	cmp	w8, #94
10001959c:     	b.ne	0x10001971c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x25c>
1000195a0:     	mov	w0, #24
1000195a4:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
1000195a8:     	ldr	w8, [x21, #24]
1000195ac:     	mov	w9, #1520
1000195b0:     	and	w8, w8, w9
1000195b4:     	cmp	w8, #1024
1000195b8:     	cset	w8, eq
1000195bc:     	ldr	x9, [x21, #56]
1000195c0:     	ldr	x10, [x9, #8]
1000195c4:     	adrp	x11, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x170>
1000195c8:     	add	x11, x11, #1744
1000195cc:     	b	0x1000195fc <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x13c>
1000195d0:     	mov	w0, #24
1000195d4:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
1000195d8:     	ldr	w8, [x21, #24]
1000195dc:     	mov	w9, #1520
1000195e0:     	and	w8, w8, w9
1000195e4:     	cmp	w8, #1024
1000195e8:     	cset	w8, eq
1000195ec:     	ldr	x9, [x21, #56]
1000195f0:     	ldr	x10, [x9, #8]
1000195f4:     	adrp	x11, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x1a0>
1000195f8:     	add	x11, x11, #1816
1000195fc:     	stp	x11, x10, [x0]
100019600:     	strb	w8, [x0, #16]
100019604:     	str	x0, [x9, #8]
100019608:     	ldr	x8, [x21, #56]
10001960c:     	ldr	x8, [x8, #8]
100019610:     	str	x8, [x21, #56]
100019614:     	add	x1, x22, #1
100019618:     	b	0x1000196ec <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x22c>
10001961c:     	ldrb	w8, [x21, #24]
100019620:     	tbnz	w8, #1, 0x100019664 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x1a4>
100019624:     	mov	w0, #24
100019628:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001962c:     	ldr	w8, [x21, #28]
100019630:     	add	w25, w8, #1
100019634:     	str	w25, [x21, #28]
100019638:     	ldr	x8, [x21, #56]
10001963c:     	ldr	x9, [x8, #8]
100019640:     	adrp	x10, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x1ec>
100019644:     	add	x10, x10, #2608
100019648:     	stp	x10, x9, [x0]
10001964c:     	str	w25, [x0, #16]
100019650:     	str	x0, [x8, #8]
100019654:     	ldr	x8, [x21, #56]
100019658:     	ldr	x8, [x8, #8]
10001965c:     	str	x8, [x21, #56]
100019660:     	b	0x100019668 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x1a8>
100019664:     	ldr	w25, [x21, #28]
100019668:     	ldr	w8, [x21, #36]
10001966c:     	add	w8, w8, #1
100019670:     	str	w8, [x21, #36]
100019674:     	add	x1, x22, #1
100019678:     	mov	x0, x21
10001967c:     	mov	x2, x19
100019680:     	bl	0x100010df8 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_extended_reg_exp<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>
100019684:     	cmp	x0, x19
100019688:     	b.eq	0x100019738 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x278>
10001968c:     	mov	x23, x0
100019690:     	ldrb	w8, [x0]
100019694:     	cmp	w8, #41
100019698:     	b.ne	0x100019738 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x278>
10001969c:     	ldrb	w8, [x21, #24]
1000196a0:     	tbnz	w8, #1, 0x1000196d4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x214>
1000196a4:     	mov	w0, #24
1000196a8:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
1000196ac:     	ldr	x8, [x21, #56]
1000196b0:     	ldr	x9, [x8, #8]
1000196b4:     	adrp	x10, 0x100034000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x260>
1000196b8:     	add	x10, x10, #2680
1000196bc:     	stp	x10, x9, [x0]
1000196c0:     	str	w25, [x0, #16]
1000196c4:     	str	x0, [x8, #8]
1000196c8:     	ldr	x8, [x21, #56]
1000196cc:     	ldr	x8, [x8, #8]
1000196d0:     	str	x8, [x21, #56]
1000196d4:     	ldr	w8, [x21, #36]
1000196d8:     	sub	w8, w8, #1
1000196dc:     	str	w8, [x21, #36]
1000196e0:     	add	x1, x23, #1
1000196e4:     	cmp	x1, x22
1000196e8:     	b.eq	0x10001971c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_expression<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x25c>
1000196ec:     	add	w4, w24, #1
1000196f0:     	ldr	w8, [x21, #28]
1000196f4:     	add	w5, w8, #1
1000196f8:     	mov	x0, x21
1000196fc:     	mov	x2, x19
100019700:     	mov	x3, x20
100019704:     	ldp	x29, x30, [sp, #64]
100019708:     	ldp	x20, x19, [sp, #48]
10001970c:     	ldp	x22, x21, [sp, #32]
100019710:     	ldp	x24, x23, [sp, #16]
100019714:     	ldp	x26, x25, [sp], #80
100019718:     	b	0x1000119f0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::__owns_one_state<char>*, unsigned int, unsigned int)>
10001971c:     	mov	x0, x22
100019720:     	ldp	x29, x30, [sp, #64]
100019724:     	ldp	x20, x19, [sp, #48]
100019728:     	ldp	x22, x21, [sp, #32]
10001972c:     	ldp	x24, x23, [sp, #16]
100019730:     	ldp	x26, x25, [sp], #80
100019734:     	ret
100019738:     	bl	0x100011e98 <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)6>()>

000000010001973c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>:
10001973c:     	stp	x20, x19, [sp, #-32]!
100019740:     	stp	x29, x30, [sp, #16]
100019744:     	add	x29, sp, #16
100019748:     	mov	x19, x1
10001974c:     	cmp	x1, x2
100019750:     	b.eq	0x100019780 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x44>
100019754:     	ldrsb	w9, [x19]
100019758:     	and	w8, w9, #0xff
10001975c:     	sub	w9, w9, #36
100019760:     	cmp	w9, #88
100019764:     	b.hi	0x100019798 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x5c>
100019768:     	adrp	x10, 0x100032000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x18>
10001976c:     	add	x10, x10, #3269
100019770:     	adr	x11, #16
100019774:     	ldrb	w12, [x10, x9]
100019778:     	add	x11, x11, x12, lsl #2
10001977c:     	br	x11
100019780:     	mov	x0, x19
100019784:     	ldp	x29, x30, [sp, #16]
100019788:     	ldp	x20, x19, [sp], #32
10001978c:     	ret
100019790:     	ldr	w9, [x0, #36]
100019794:     	cbnz	w9, 0x100019780 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x44>
100019798:     	sxtb	w1, w8
10001979c:     	bl	0x100013cd4 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_char(char)>
1000197a0:     	add	x19, x19, #1
1000197a4:     	mov	x0, x19
1000197a8:     	ldp	x29, x30, [sp, #16]
1000197ac:     	ldp	x20, x19, [sp], #32
1000197b0:     	ret

00000001000197b4 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)>:
1000197b4:     	stp	x20, x19, [sp, #-32]!
1000197b8:     	stp	x29, x30, [sp, #16]
1000197bc:     	add	x29, sp, #16
1000197c0:     	mov	x19, x1
1000197c4:     	cmp	x1, x2
1000197c8:     	b.eq	0x10001981c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x68>
1000197cc:     	add	x1, x19, #1
1000197d0:     	cmp	x1, x2
1000197d4:     	b.eq	0x10001981c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x68>
1000197d8:     	ldrb	w8, [x19]
1000197dc:     	cmp	w8, #92
1000197e0:     	b.ne	0x10001981c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x68>
1000197e4:     	ldrsb	w9, [x1]
1000197e8:     	and	w8, w9, #0xff
1000197ec:     	sub	w9, w9, #36
1000197f0:     	cmp	w9, #89
1000197f4:     	b.hi	0x10001982c <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x78>
1000197f8:     	adrp	x10, 0x100032000 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0xa8>
1000197fc:     	add	x10, x10, #3358
100019800:     	adr	x11, #16
100019804:     	ldrb	w12, [x10, x9]
100019808:     	add	x11, x11, x12, lsl #2
10001980c:     	br	x11
100019810:     	sxtb	w1, w8
100019814:     	bl	0x100013cd4 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__push_char(char)>
100019818:     	add	x19, x19, #2
10001981c:     	mov	x0, x19
100019820:     	ldp	x29, x30, [sp, #16]
100019824:     	ldp	x20, x19, [sp], #32
100019828:     	ret
10001982c:     	ldr	w9, [x0, #24]
100019830:     	and	w9, w9, #0x1f0
100019834:     	cmp	w9, #64
100019838:     	b.ne	0x100019850 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>)+0x9c>
10001983c:     	mov	x3, #0
100019840:     	bl	0x1000167e0 <std::__1::__wrap_iter<char const*> std::__1::basic_regex<char, std::__1::regex_traits<char>>::__parse_awk_escape<std::__1::__wrap_iter<char const*>>(std::__1::__wrap_iter<char const*>, std::__1::__wrap_iter<char const*>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)>
100019844:     	ldp	x29, x30, [sp, #16]
100019848:     	ldp	x20, x19, [sp], #32
10001984c:     	ret
100019850:     	sxtb	w1, w8
100019854:     	bl	0x100019460 <std::__1::basic_regex<char, std::__1::regex_traits<char>>::__test_back_ref(char)>
100019858:     	cmp	w0, #0
10001985c:     	mov	w8, #2
100019860:     	csel	x8, x8, xzr, ne
100019864:     	add	x19, x19, x8
100019868:     	mov	x0, x19
10001986c:     	ldp	x29, x30, [sp, #16]
100019870:     	ldp	x20, x19, [sp], #32
100019874:     	ret

0000000100019878 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__search<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type) const>:
100019878:     	stp	x26, x25, [sp, #-80]!
10001987c:     	stp	x24, x23, [sp, #16]
100019880:     	stp	x22, x21, [sp, #32]
100019884:     	stp	x20, x19, [sp, #48]
100019888:     	stp	x29, x30, [sp, #64]
10001988c:     	add	x29, sp, #64
100019890:     	mov	x19, x3
100019894:     	mov	x20, x2
100019898:     	mov	x24, x1
10001989c:     	mov	x22, x0
1000198a0:     	mov	w8, #4090
1000198a4:     	and	w8, w4, w8
1000198a8:     	tst	w4, #0x80
1000198ac:     	csel	w23, w4, w8, eq
1000198b0:     	ldr	w8, [x0, #28]
1000198b4:     	mov	x21, x3
1000198b8:     	str	x2, [x21, #24]!
1000198bc:     	add	w1, w8, #1
1000198c0:     	str	x2, [x3, #32]
1000198c4:     	strb	wzr, [x3, #40]
1000198c8:     	mov	x0, x3
1000198cc:     	mov	x2, x21
1000198d0:     	bl	0x10001298c <std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::assign(unsigned long, std::__1::sub_match<char const*> const&)>
1000198d4:     	stp	x24, x24, [x19, #48]
1000198d8:     	strb	wzr, [x19, #64]
1000198dc:     	ldr	x8, [x21]
1000198e0:     	ldr	x9, [x19, #32]
1000198e4:     	stp	x8, x9, [x19, #72]
1000198e8:     	ldrb	w8, [x19, #40]
1000198ec:     	strb	w8, [x19, #88]
1000198f0:     	tbnz	w23, #11, 0x1000198f8 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__search<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type) const+0x80>
1000198f4:     	str	x24, [x19, #104]
1000198f8:     	mov	w8, #1
1000198fc:     	strb	w8, [x19, #96]
100019900:     	ldrh	w8, [x22, #24]
100019904:     	tst	w8, #0x1f0
100019908:     	b.eq	0x10001993c <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__search<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type) const+0xc4>
10001990c:     	ldr	w8, [x22, #28]
100019910:     	cbz	w8, 0x100019964 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__search<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type) const+0xec>
100019914:     	tst	w23, #0x800
100019918:     	cset	w5, eq
10001991c:     	mov	x0, x22
100019920:     	mov	x1, x24
100019924:     	mov	x2, x20
100019928:     	mov	x3, x19
10001992c:     	mov	x4, x23
100019930:     	bl	0x10001a420 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const>
100019934:     	cbnz	w0, 0x100019988 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__search<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type) const+0x110>
100019938:     	b	0x1000199e0 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__search<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type) const+0x168>
10001993c:     	tst	w23, #0x800
100019940:     	cset	w5, eq
100019944:     	mov	x0, x22
100019948:     	mov	x1, x24
10001994c:     	mov	x2, x20
100019950:     	mov	x3, x19
100019954:     	mov	x4, x23
100019958:     	bl	0x100012530 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const>
10001995c:     	tbnz	w0, #0, 0x100019988 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__search<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type) const+0x110>
100019960:     	b	0x1000199e0 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__search<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type) const+0x168>
100019964:     	tst	w23, #0x800
100019968:     	cset	w5, eq
10001996c:     	mov	x0, x22
100019970:     	mov	x1, x24
100019974:     	mov	x2, x20
100019978:     	mov	x3, x19
10001997c:     	mov	x4, x23
100019980:     	bl	0x100019aec <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const>
100019984:     	tbz	w0, #0, 0x1000199e0 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__search<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type) const+0x168>
100019988:     	ldp	x9, x8, [x19]
10001998c:     	cmp	x8, x9
100019990:     	csel	x8, x21, x9, eq
100019994:     	ldr	x9, [x8]
100019998:     	str	x9, [x19, #56]
10001999c:     	ldr	x10, [x19, #48]
1000199a0:     	cmp	x10, x9
1000199a4:     	cset	w9, ne
1000199a8:     	strb	w9, [x19, #64]
1000199ac:     	ldr	x8, [x8, #8]
1000199b0:     	str	x8, [x19, #72]
1000199b4:     	ldr	x9, [x19, #80]
1000199b8:     	cmp	x8, x9
1000199bc:     	cset	w8, ne
1000199c0:     	strb	w8, [x19, #88]
1000199c4:     	mov	w0, #1
1000199c8:     	ldp	x29, x30, [sp, #64]
1000199cc:     	ldp	x20, x19, [sp, #48]
1000199d0:     	ldp	x22, x21, [sp, #32]
1000199d4:     	ldp	x24, x23, [sp, #16]
1000199d8:     	ldp	x26, x25, [sp], #80
1000199dc:     	ret
1000199e0:     	cmp	x24, x20
1000199e4:     	b.eq	0x100019ac8 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__search<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type) const+0x250>
1000199e8:     	tbnz	w23, #6, 0x100019ac8 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__search<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type) const+0x250>
1000199ec:     	add	x24, x24, #1
1000199f0:     	cmp	x24, x20
1000199f4:     	b.eq	0x100019ac8 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__search<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type) const+0x250>
1000199f8:     	orr	w23, w23, #0x80
1000199fc:     	mov	x25, #-6148914691236517206
100019a00:     	movk	x25, #43691
100019a04:     	b	0x100019a50 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__search<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type) const+0x1d8>
100019a08:     	mov	x0, x22
100019a0c:     	mov	x1, x24
100019a10:     	mov	x2, x20
100019a14:     	mov	x3, x19
100019a18:     	mov	x4, x23
100019a1c:     	mov	w5, #0
100019a20:     	bl	0x100012530 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_ecma<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const>
100019a24:     	tbnz	w0, #0, 0x100019988 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__search<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type) const+0x110>
100019a28:     	ldp	x9, x8, [x19]
100019a2c:     	sub	x8, x8, x9
100019a30:     	asr	x8, x8, #3
100019a34:     	mul	x1, x8, x25
100019a38:     	mov	x0, x19
100019a3c:     	mov	x2, x21
100019a40:     	bl	0x10001298c <std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::assign(unsigned long, std::__1::sub_match<char const*> const&)>
100019a44:     	add	x24, x24, #1
100019a48:     	cmp	x24, x20
100019a4c:     	b.eq	0x100019ac8 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__search<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type) const+0x250>
100019a50:     	ldp	x9, x8, [x19]
100019a54:     	sub	x8, x8, x9
100019a58:     	asr	x8, x8, #3
100019a5c:     	mul	x1, x8, x25
100019a60:     	mov	x0, x19
100019a64:     	mov	x2, x21
100019a68:     	bl	0x10001298c <std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::assign(unsigned long, std::__1::sub_match<char const*> const&)>
100019a6c:     	ldrh	w8, [x22, #24]
100019a70:     	tst	w8, #0x1f0
100019a74:     	b.eq	0x100019a08 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__search<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type) const+0x190>
100019a78:     	ldr	w8, [x22, #28]
100019a7c:     	cbz	w8, 0x100019aa4 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__search<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type) const+0x22c>
100019a80:     	mov	x0, x22
100019a84:     	mov	x1, x24
100019a88:     	mov	x2, x20
100019a8c:     	mov	x3, x19
100019a90:     	mov	x4, x23
100019a94:     	mov	w5, #0
100019a98:     	bl	0x10001a420 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const>
100019a9c:     	cbz	w0, 0x100019a28 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__search<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type) const+0x1b0>
100019aa0:     	b	0x100019988 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__search<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type) const+0x110>
100019aa4:     	mov	x0, x22
100019aa8:     	mov	x1, x24
100019aac:     	mov	x2, x20
100019ab0:     	mov	x3, x19
100019ab4:     	mov	x4, x23
100019ab8:     	mov	w5, #0
100019abc:     	bl	0x100019aec <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const>
100019ac0:     	tbz	w0, #0, 0x100019a28 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__search<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type) const+0x1b0>
100019ac4:     	b	0x100019988 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__search<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type) const+0x110>
100019ac8:     	mov	w0, #0
100019acc:     	ldr	x8, [x19]
100019ad0:     	str	x8, [x19, #8]
100019ad4:     	ldp	x29, x30, [sp, #64]
100019ad8:     	ldp	x20, x19, [sp, #48]
100019adc:     	ldp	x22, x21, [sp, #32]
100019ae0:     	ldp	x24, x23, [sp, #16]
100019ae4:     	ldp	x26, x25, [sp], #80
100019ae8:     	ret

0000000100019aec <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const>:
100019aec:     	sub	sp, sp, #320
100019af0:     	stp	x28, x27, [sp, #224]
100019af4:     	stp	x26, x25, [sp, #240]
100019af8:     	stp	x24, x23, [sp, #256]
100019afc:     	stp	x22, x21, [sp, #272]
100019b00:     	stp	x20, x19, [sp, #288]
100019b04:     	stp	x29, x30, [sp, #304]
100019b08:     	add	x29, sp, #304
100019b0c:     	str	w4, [sp, #60]
100019b10:     	movi.2d	v0, #0000000000000000
100019b14:     	stp	q0, q0, [x29, #-128]
100019b18:     	stur	q0, [x29, #-144]
100019b1c:     	ldr	x19, [x0, #40]
100019b20:     	cbz	x19, 0x10001a2fc <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x810>
100019b24:     	mov	x23, x5
100019b28:     	mov	x20, x3
100019b2c:     	mov	x21, x2
100019b30:     	mov	x27, x1
100019b34:     	mov	x24, x0
100019b38:     	str	wzr, [sp, #64]
100019b3c:     	stur	q0, [sp, #72]
100019b40:     	stur	q0, [sp, #88]
100019b44:     	stur	q0, [sp, #104]
100019b48:     	stur	q0, [sp, #120]
100019b4c:     	stur	q0, [sp, #136]
100019b50:     	str	wzr, [sp, #152]
100019b54:     	sub	x0, x29, #144
100019b58:     	bl	0x10001abdc <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()>
100019b5c:     	ldp	x9, x8, [x29, #-112]
100019b60:     	ldur	x10, [x29, #-136]
100019b64:     	add	x8, x8, x9
100019b68:     	lsr	x9, x8, #1
100019b6c:     	mov	x11, #49933
100019b70:     	movk	x11, #3120, lsl #16
100019b74:     	movk	x11, #12483, lsl #32
100019b78:     	movk	x11, #49932, lsl #48
100019b7c:     	umulh	x9, x9, x11
100019b80:     	lsr	x9, x9, #4
100019b84:     	ldr	x10, [x10, x9, lsl #3]
100019b88:     	mov	w11, #42
100019b8c:     	msub	x8, x9, x11, x8
100019b90:     	mov	w9, #96
100019b94:     	madd	x8, x8, x9, x10
100019b98:     	ldp	q0, q1, [sp, #64]
100019b9c:     	stp	q0, q1, [x8]
100019ba0:     	stp	xzr, xzr, [x8, #40]
100019ba4:     	ldr	x9, [sp, #96]
100019ba8:     	str	x9, [x8, #32]
100019bac:     	ldr	x9, [sp, #104]
100019bb0:     	str	x9, [x8, #40]
100019bb4:     	ldr	x9, [sp, #112]
100019bb8:     	str	x9, [x8, #48]
100019bbc:     	stp	xzr, xzr, [sp, #104]
100019bc0:     	str	xzr, [sp, #96]
100019bc4:     	stp	xzr, xzr, [x8, #64]
100019bc8:     	ldr	x9, [sp, #120]
100019bcc:     	str	x9, [x8, #56]
100019bd0:     	ldr	x9, [sp, #128]
100019bd4:     	str	x9, [x8, #64]
100019bd8:     	ldr	x9, [sp, #136]
100019bdc:     	str	x9, [x8, #72]
100019be0:     	stp	xzr, xzr, [sp, #128]
100019be4:     	str	xzr, [sp, #120]
100019be8:     	ldr	x9, [sp, #144]
100019bec:     	ldur	x10, [sp, #149]
100019bf0:     	stur	x10, [x8, #85]
100019bf4:     	str	x9, [x8, #80]
100019bf8:     	ldur	x8, [x29, #-104]
100019bfc:     	add	x8, x8, #1
100019c00:     	stur	x8, [x29, #-104]
100019c04:     	ldr	x0, [sp, #120]
100019c08:     	cbz	x0, 0x100019c10 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x124>
100019c0c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100019c10:     	ldr	x0, [sp, #96]
100019c14:     	cbz	x0, 0x100019c1c <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x130>
100019c18:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100019c1c:     	ldp	x10, x8, [x29, #-112]
100019c20:     	ldur	x9, [x29, #-136]
100019c24:     	add	x10, x8, x10
100019c28:     	sub	x11, x10, #1
100019c2c:     	lsr	x10, x11, #1
100019c30:     	mov	x12, #49933
100019c34:     	movk	x12, #3120, lsl #16
100019c38:     	movk	x12, #12483, lsl #32
100019c3c:     	movk	x12, #49932, lsl #48
100019c40:     	umulh	x10, x10, x12
100019c44:     	lsr	x10, x10, #4
100019c48:     	lsl	x12, x10, #3
100019c4c:     	ldr	x13, [x9, x12]
100019c50:     	mov	w14, #42
100019c54:     	msub	x11, x10, x14, x11
100019c58:     	add	x14, x11, x11, lsl #1
100019c5c:     	lsl	x14, x14, #5
100019c60:     	add	x13, x13, x14
100019c64:     	str	wzr, [x13]
100019c68:     	str	x27, [x13, #8]
100019c6c:     	ldr	x13, [x9, x12]
100019c70:     	add	x13, x13, x14
100019c74:     	str	x27, [x13, #16]
100019c78:     	ldr	x13, [x9, x12]
100019c7c:     	add	x13, x13, x14
100019c80:     	str	x21, [x13, #24]
100019c84:     	ldr	x12, [x9, x12]
100019c88:     	add	x12, x12, x14
100019c8c:     	mov	x0, x12
100019c90:     	ldr	x14, [x0, #56]!
100019c94:     	ldr	w13, [x24, #32]
100019c98:     	ldr	x15, [x12, #64]
100019c9c:     	sub	x15, x15, x14
100019ca0:     	asr	x15, x15, #4
100019ca4:     	cmp	x15, x13
100019ca8:     	str	x20, [sp, #8]
100019cac:     	b.hs	0x100019cf0 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x204>
100019cb0:     	sub	x1, x13, x15
100019cb4:     	bl	0x100013028 <std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__append(unsigned long)>
100019cb8:     	ldp	x10, x8, [x29, #-112]
100019cbc:     	ldur	x9, [x29, #-136]
100019cc0:     	add	x10, x8, x10
100019cc4:     	sub	x11, x10, #1
100019cc8:     	lsr	x10, x11, #1
100019ccc:     	mov	x12, #49933
100019cd0:     	movk	x12, #3120, lsl #16
100019cd4:     	movk	x12, #12483, lsl #32
100019cd8:     	movk	x12, #49932, lsl #48
100019cdc:     	umulh	x10, x10, x12
100019ce0:     	lsr	x10, x10, #4
100019ce4:     	mov	w12, #42
100019ce8:     	msub	x11, x10, x12, x11
100019cec:     	b	0x100019cfc <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x210>
100019cf0:     	b.ls	0x100019cfc <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x210>
100019cf4:     	add	x13, x14, x13, lsl #4
100019cf8:     	str	x13, [x12, #64]
100019cfc:     	str	wzr, [sp, #28]
100019d00:     	mov	w24, #0
100019d04:     	str	x21, [sp, #16]
100019d08:     	sub	x25, x21, x27
100019d0c:     	lsl	x10, x10, #3
100019d10:     	ldr	x12, [x9, x10]
100019d14:     	add	x11, x11, x11, lsl #1
100019d18:     	lsl	x11, x11, #5
100019d1c:     	add	x12, x12, x11
100019d20:     	str	x19, [x12, #80]
100019d24:     	ldr	x9, [x9, x10]
100019d28:     	add	x9, x9, x11
100019d2c:     	ldr	w10, [sp, #60]
100019d30:     	str	w10, [x9, #88]
100019d34:     	strb	w23, [x9, #92]
100019d38:     	add	x9, sp, #64
100019d3c:     	add	x10, x9, #80
100019d40:     	str	x10, [sp, #48]
100019d44:     	add	x10, x9, #32
100019d48:     	stp	xzr, x10, [sp, #32]
100019d4c:     	add	x28, x9, #56
100019d50:     	mov	x20, #49933
100019d54:     	movk	x20, #3120, lsl #16
100019d58:     	movk	x20, #12483, lsl #32
100019d5c:     	movk	x20, #49932, lsl #48
100019d60:     	mov	w22, #42
100019d64:     	mov	w19, #96
100019d68:     	adrp	x21, 0x100032000 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x2e0>
100019d6c:     	add	x21, x21, #3448
100019d70:     	b	0x100019d84 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x298>
100019d74:     	mov	w8, #1
100019d78:     	str	w8, [sp, #28]
100019d7c:     	ldur	x8, [x29, #-104]
100019d80:     	cbz	x8, 0x10001a2d8 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x7ec>
100019d84:     	add	w24, w24, #1
100019d88:     	and	w9, w24, #0xfff
100019d8c:     	lsr	w10, w24, #12
100019d90:     	cmp	w9, #0
100019d94:     	ccmp	w10, w25, #8, eq
100019d98:     	b.ge	0x10001a3d8 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x8ec>
100019d9c:     	ldur	x9, [x29, #-112]
100019da0:     	ldur	x10, [x29, #-136]
100019da4:     	add	x8, x8, x9
100019da8:     	sub	x8, x8, #1
100019dac:     	lsr	x9, x8, #1
100019db0:     	umulh	x9, x9, x20
100019db4:     	lsr	x9, x9, #4
100019db8:     	ldr	x10, [x10, x9, lsl #3]
100019dbc:     	msub	x8, x9, x22, x8
100019dc0:     	madd	x23, x8, x19, x10
100019dc4:     	mov	x26, x23
100019dc8:     	ldr	x0, [x26, #80]!
100019dcc:     	cbz	x0, 0x100019de0 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x2f4>
100019dd0:     	ldr	x8, [x0]
100019dd4:     	ldr	x8, [x8, #16]
100019dd8:     	mov	x1, x23
100019ddc:     	blr	x8
100019de0:     	ldr	w8, [x23]
100019de4:     	add	w8, w8, #1000
100019de8:     	cmp	w8, #9
100019dec:     	b.hi	0x10001a3e0 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x8f4>
100019df0:     	adr	x9, #-116
100019df4:     	ldrh	w10, [x21, x8, lsl #1]
100019df8:     	add	x9, x9, x10, lsl #2
100019dfc:     	br	x9
100019e00:     	ldr	x8, [x23, #16]
100019e04:     	ldr	w9, [sp, #60]
100019e08:     	tbz	w9, #5, 0x100019e14 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x328>
100019e0c:     	cmp	x8, x27
100019e10:     	b.eq	0x100019e28 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x33c>
100019e14:     	ldr	w9, [sp, #60]
100019e18:     	tbz	w9, #12, 0x10001a0dc <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x5f0>
100019e1c:     	ldr	x9, [sp, #16]
100019e20:     	cmp	x8, x9
100019e24:     	b.eq	0x10001a0dc <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x5f0>
100019e28:     	ldp	x9, x8, [x29, #-112]
100019e2c:     	ldur	x10, [x29, #-136]
100019e30:     	add	x8, x8, x9
100019e34:     	sub	x8, x8, #1
100019e38:     	lsr	x9, x8, #1
100019e3c:     	umulh	x9, x9, x20
100019e40:     	lsr	x9, x9, #4
100019e44:     	ldr	x10, [x10, x9, lsl #3]
100019e48:     	msub	x8, x9, x22, x8
100019e4c:     	madd	x23, x8, x19, x10
100019e50:     	ldr	x0, [x23, #56]
100019e54:     	cbz	x0, 0x100019e60 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x374>
100019e58:     	str	x0, [x23, #64]
100019e5c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100019e60:     	ldr	x0, [x23, #32]
100019e64:     	cbz	x0, 0x100019e70 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x384>
100019e68:     	str	x0, [x23, #40]
100019e6c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100019e70:     	ldp	x9, x8, [x29, #-136]
100019e74:     	subs	x9, x8, x9
100019e78:     	asr	x9, x9, #3
100019e7c:     	mov	x10, #-1
100019e80:     	madd	x9, x9, x22, x10
100019e84:     	ldp	x11, x10, [x29, #-112]
100019e88:     	sub	x12, x10, #1
100019e8c:     	stur	x12, [x29, #-104]
100019e90:     	csel	x9, xzr, x9, eq
100019e94:     	add	x10, x10, x11
100019e98:     	sub	x9, x9, x10
100019e9c:     	add	x9, x9, #1
100019ea0:     	cmp	x9, #84
100019ea4:     	b.lo	0x100019d7c <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x290>
100019ea8:     	ldur	x0, [x8, #-8]
100019eac:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100019eb0:     	ldur	x8, [x29, #-128]
100019eb4:     	sub	x8, x8, #8
100019eb8:     	stur	x8, [x29, #-128]
100019ebc:     	b	0x100019d7c <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x290>
100019ec0:     	ldur	x8, [x29, #-112]
100019ec4:     	cbnz	x8, 0x100019ed4 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x3e8>
100019ec8:     	sub	x0, x29, #144
100019ecc:     	bl	0x10001b4b0 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_front_capacity()>
100019ed0:     	ldur	x8, [x29, #-112]
100019ed4:     	lsr	x9, x8, #1
100019ed8:     	umulh	x9, x9, x20
100019edc:     	lsr	x10, x9, #4
100019ee0:     	ldp	x11, x12, [x29, #-136]
100019ee4:     	add	x9, x11, x10, lsl #3
100019ee8:     	ldr	x13, [x9]
100019eec:     	msub	x8, x10, x22, x8
100019ef0:     	madd	x8, x8, x19, x13
100019ef4:     	cmp	x12, x11
100019ef8:     	csel	x8, xzr, x8, eq
100019efc:     	cmp	x8, x13
100019f00:     	b.ne	0x100019f0c <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x420>
100019f04:     	ldur	x8, [x9, #-8]
100019f08:     	add	x8, x8, #4032
100019f0c:     	ldp	q0, q1, [x23]
100019f10:     	stp	q0, q1, [x8, #-96]
100019f14:     	stp	xzr, xzr, [x8, #-56]
100019f18:     	stur	xzr, [x8, #-64]
100019f1c:     	ldr	x9, [x23, #32]
100019f20:     	stur	x9, [x8, #-64]
100019f24:     	ldr	x9, [x23, #40]
100019f28:     	stur	x9, [x8, #-56]
100019f2c:     	ldr	x9, [x23, #48]
100019f30:     	stur	x9, [x8, #-48]
100019f34:     	stp	xzr, xzr, [x23, #40]
100019f38:     	str	xzr, [x23, #32]
100019f3c:     	stp	xzr, xzr, [x8, #-40]
100019f40:     	stur	xzr, [x8, #-24]
100019f44:     	ldr	x9, [x23, #56]
100019f48:     	stur	x9, [x8, #-40]
100019f4c:     	ldr	x9, [x23, #64]
100019f50:     	stur	x9, [x8, #-32]
100019f54:     	ldr	x9, [x23, #72]
100019f58:     	stur	x9, [x8, #-24]
100019f5c:     	stp	xzr, xzr, [x23, #64]
100019f60:     	str	xzr, [x23, #56]
100019f64:     	ldr	x9, [x26]
100019f68:     	ldur	x10, [x26, #5]
100019f6c:     	stur	x10, [x8, #-11]
100019f70:     	stur	x9, [x8, #-16]
100019f74:     	ldp	x8, x10, [x29, #-112]
100019f78:     	ldur	x9, [x29, #-136]
100019f7c:     	sub	x8, x8, #1
100019f80:     	add	x11, x10, #1
100019f84:     	stp	x8, x11, [x29, #-112]
100019f88:     	add	x8, x10, x8
100019f8c:     	lsr	x10, x8, #1
100019f90:     	umulh	x10, x10, x20
100019f94:     	lsr	x10, x10, #4
100019f98:     	ldr	x9, [x9, x10, lsl #3]
100019f9c:     	msub	x8, x10, x22, x8
100019fa0:     	madd	x23, x8, x19, x9
100019fa4:     	ldr	x0, [x23, #56]
100019fa8:     	cbnz	x0, 0x100019e58 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x36c>
100019fac:     	b	0x100019e60 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x374>
100019fb0:     	add	x0, sp, #64
100019fb4:     	mov	x1, x23
100019fb8:     	bl	0x100013164 <std::__1::__state<char>::__state(std::__1::__state<char> const&)>
100019fbc:     	ldr	x0, [x26]
100019fc0:     	ldr	x8, [x0]
100019fc4:     	ldr	x8, [x8, #24]
100019fc8:     	mov	w1, #1
100019fcc:     	mov	x2, x23
100019fd0:     	blr	x8
100019fd4:     	ldr	x0, [sp, #144]
100019fd8:     	ldr	x8, [x0]
100019fdc:     	ldr	x8, [x8, #24]
100019fe0:     	add	x2, sp, #64
100019fe4:     	mov	w1, #0
100019fe8:     	blr	x8
100019fec:     	ldp	x8, x9, [x29, #-136]
100019ff0:     	subs	x9, x9, x8
100019ff4:     	asr	x9, x9, #3
100019ff8:     	mov	x10, #-1
100019ffc:     	madd	x9, x9, x22, x10
10001a000:     	csel	x10, xzr, x9, eq
10001a004:     	ldp	x9, x11, [x29, #-112]
10001a008:     	add	x9, x11, x9
10001a00c:     	cmp	x10, x9
10001a010:     	b.ne	0x10001a028 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x53c>
10001a014:     	sub	x0, x29, #144
10001a018:     	bl	0x10001abdc <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()>
10001a01c:     	ldur	x8, [x29, #-136]
10001a020:     	ldp	x9, x10, [x29, #-112]
10001a024:     	add	x9, x10, x9
10001a028:     	lsr	x10, x9, #1
10001a02c:     	umulh	x10, x10, x20
10001a030:     	lsr	x10, x10, #4
10001a034:     	ldr	x8, [x8, x10, lsl #3]
10001a038:     	msub	x9, x10, x22, x9
10001a03c:     	madd	x8, x9, x19, x8
10001a040:     	ldp	q0, q1, [sp, #64]
10001a044:     	stp	q0, q1, [x8]
10001a048:     	stp	xzr, xzr, [x8, #40]
10001a04c:     	str	xzr, [x8, #32]
10001a050:     	ldr	x9, [sp, #96]
10001a054:     	str	x9, [x8, #32]
10001a058:     	ldr	x9, [sp, #104]
10001a05c:     	str	x9, [x8, #40]
10001a060:     	ldr	x9, [sp, #112]
10001a064:     	str	x9, [x8, #48]
10001a068:     	ldp	x9, x10, [sp, #40]
10001a06c:     	stp	xzr, xzr, [x9, #8]
10001a070:     	str	xzr, [x9]
10001a074:     	stp	xzr, xzr, [x8, #56]
10001a078:     	str	xzr, [x8, #72]
10001a07c:     	ldr	x9, [sp, #120]
10001a080:     	str	x9, [x8, #56]
10001a084:     	ldr	x9, [sp, #128]
10001a088:     	str	x9, [x8, #64]
10001a08c:     	ldr	x9, [sp, #136]
10001a090:     	str	x9, [x8, #72]
10001a094:     	stp	xzr, xzr, [x28, #8]
10001a098:     	str	xzr, [x28]
10001a09c:     	ldr	x9, [x10]
10001a0a0:     	ldur	x10, [x10, #5]
10001a0a4:     	stur	x10, [x8, #85]
10001a0a8:     	str	x9, [x8, #80]
10001a0ac:     	ldur	x8, [x29, #-104]
10001a0b0:     	add	x8, x8, #1
10001a0b4:     	stur	x8, [x29, #-104]
10001a0b8:     	ldr	x0, [sp, #120]
10001a0bc:     	cbz	x0, 0x10001a0c8 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x5dc>
10001a0c0:     	str	x0, [sp, #128]
10001a0c4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001a0c8:     	ldr	x0, [sp, #96]
10001a0cc:     	cbz	x0, 0x100019d7c <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x290>
10001a0d0:     	str	x0, [sp, #104]
10001a0d4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001a0d8:     	b	0x100019d7c <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x290>
10001a0dc:     	ldr	x9, [x23, #8]
10001a0e0:     	sub	x8, x8, x9
10001a0e4:     	ldr	x10, [sp, #32]
10001a0e8:     	cmp	x10, x8
10001a0ec:     	cset	w9, lt
10001a0f0:     	ldr	w11, [sp, #28]
10001a0f4:     	orn	w9, w9, w11
10001a0f8:     	tst	w9, #0x1
10001a0fc:     	csel	x10, x8, x10, ne
10001a100:     	str	x10, [sp, #32]
10001a104:     	cmp	x10, x25
10001a108:     	b.ne	0x10001a1f4 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x708>
10001a10c:     	ldp	x8, x9, [x29, #-136]
10001a110:     	cmp	x9, x8
10001a114:     	b.eq	0x10001a2a8 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x7bc>
10001a118:     	str	x27, [sp, #32]
10001a11c:     	ldp	x10, x11, [x29, #-112]
10001a120:     	lsr	x12, x10, #1
10001a124:     	umulh	x12, x12, x20
10001a128:     	lsr	x12, x12, #4
10001a12c:     	add	x23, x8, x12, lsl #3
10001a130:     	ldr	x13, [x23]
10001a134:     	msub	x12, x12, x22, x10
10001a138:     	madd	x26, x12, x19, x13
10001a13c:     	add	x10, x11, x10
10001a140:     	lsr	x11, x10, #1
10001a144:     	umulh	x11, x11, x20
10001a148:     	lsr	x11, x11, #4
10001a14c:     	ldr	x12, [x8, x11, lsl #3]
10001a150:     	msub	x10, x11, x22, x10
10001a154:     	madd	x27, x10, x19, x12
10001a158:     	cmp	x26, x27
10001a15c:     	b.ne	0x10001a1b8 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x6cc>
10001a160:     	ldr	x27, [sp, #32]
10001a164:     	stur	xzr, [x29, #-104]
10001a168:     	sub	x9, x9, x8
10001a16c:     	cmp	x9, #17
10001a170:     	b.lo	0x10001a194 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x6a8>
10001a174:     	ldr	x0, [x8]
10001a178:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001a17c:     	ldp	x8, x9, [x29, #-136]
10001a180:     	add	x8, x8, #8
10001a184:     	stur	x8, [x29, #-136]
10001a188:     	sub	x9, x9, x8
10001a18c:     	cmp	x9, #16
10001a190:     	b.hi	0x10001a174 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x688>
10001a194:     	lsr	x8, x9, #3
10001a198:     	cmp	x8, #1
10001a19c:     	b.eq	0x10001a2c0 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x7d4>
10001a1a0:     	cmp	x8, #2
10001a1a4:     	b.ne	0x10001a2c8 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x7dc>
10001a1a8:     	mov	w8, #42
10001a1ac:     	b	0x10001a2c4 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x7d8>
10001a1b0:     	cmp	x26, x27
10001a1b4:     	b.eq	0x10001a28c <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x7a0>
10001a1b8:     	ldr	x0, [x26, #56]
10001a1bc:     	cbz	x0, 0x10001a1c8 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x6dc>
10001a1c0:     	str	x0, [x26, #64]
10001a1c4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001a1c8:     	ldr	x0, [x26, #32]
10001a1cc:     	cbz	x0, 0x10001a1d8 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x6ec>
10001a1d0:     	str	x0, [x26, #40]
10001a1d4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001a1d8:     	add	x26, x26, #96
10001a1dc:     	ldr	x8, [x23]
10001a1e0:     	sub	x8, x26, x8
10001a1e4:     	cmp	x8, #4032
10001a1e8:     	b.ne	0x10001a1b0 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x6c4>
10001a1ec:     	ldr	x26, [x23, #8]!
10001a1f0:     	b	0x10001a1b0 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x6c4>
10001a1f4:     	ldp	x9, x8, [x29, #-112]
10001a1f8:     	ldur	x10, [x29, #-136]
10001a1fc:     	add	x8, x8, x9
10001a200:     	sub	x8, x8, #1
10001a204:     	lsr	x9, x8, #1
10001a208:     	umulh	x9, x9, x20
10001a20c:     	lsr	x9, x9, #4
10001a210:     	ldr	x10, [x10, x9, lsl #3]
10001a214:     	msub	x8, x9, x22, x8
10001a218:     	madd	x23, x8, x19, x10
10001a21c:     	ldr	x0, [x23, #56]
10001a220:     	cbz	x0, 0x10001a22c <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x740>
10001a224:     	str	x0, [x23, #64]
10001a228:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001a22c:     	ldr	x0, [x23, #32]
10001a230:     	cbz	x0, 0x10001a23c <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x750>
10001a234:     	str	x0, [x23, #40]
10001a238:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001a23c:     	ldp	x9, x8, [x29, #-136]
10001a240:     	subs	x9, x8, x9
10001a244:     	asr	x9, x9, #3
10001a248:     	mov	x10, #-1
10001a24c:     	madd	x9, x9, x22, x10
10001a250:     	ldp	x11, x10, [x29, #-112]
10001a254:     	sub	x12, x10, #1
10001a258:     	stur	x12, [x29, #-104]
10001a25c:     	csel	x9, xzr, x9, eq
10001a260:     	add	x10, x10, x11
10001a264:     	sub	x9, x9, x10
10001a268:     	add	x9, x9, #1
10001a26c:     	cmp	x9, #84
10001a270:     	b.lo	0x100019d74 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x288>
10001a274:     	ldur	x0, [x8, #-8]
10001a278:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001a27c:     	ldur	x8, [x29, #-128]
10001a280:     	sub	x8, x8, #8
10001a284:     	stur	x8, [x29, #-128]
10001a288:     	b	0x100019d74 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x288>
10001a28c:     	ldp	x8, x9, [x29, #-136]
10001a290:     	ldr	x27, [sp, #32]
10001a294:     	stur	xzr, [x29, #-104]
10001a298:     	sub	x9, x9, x8
10001a29c:     	cmp	x9, #17
10001a2a0:     	b.lo	0x10001a194 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x6a8>
10001a2a4:     	b	0x10001a174 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x688>
10001a2a8:     	mov	x9, x8
10001a2ac:     	stur	xzr, [x29, #-104]
10001a2b0:     	sub	x9, x8, x8
10001a2b4:     	cmp	x9, #17
10001a2b8:     	b.hs	0x10001a174 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x688>
10001a2bc:     	b	0x10001a194 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x6a8>
10001a2c0:     	mov	w8, #21
10001a2c4:     	stur	x8, [x29, #-112]
10001a2c8:     	mov	w8, #1
10001a2cc:     	str	w8, [sp, #28]
10001a2d0:     	str	x25, [sp, #32]
10001a2d4:     	b	0x100019d7c <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x290>
10001a2d8:     	ldr	w8, [sp, #28]
10001a2dc:     	tbz	w8, #0, 0x10001a3bc <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x8d0>
10001a2e0:     	ldr	x8, [sp, #8]
10001a2e4:     	ldr	x8, [x8]
10001a2e8:     	ldr	x9, [sp, #32]
10001a2ec:     	add	x9, x27, x9
10001a2f0:     	stp	x27, x9, [x8]
10001a2f4:     	mov	w19, #1
10001a2f8:     	strb	w19, [x8, #16]
10001a2fc:     	ldp	x20, x21, [x29, #-136]
10001a300:     	stur	xzr, [x29, #-104]
10001a304:     	sub	x8, x21, x20
10001a308:     	cmp	x8, #17
10001a30c:     	b.lo	0x10001a330 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x844>
10001a310:     	ldr	x0, [x20]
10001a314:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001a318:     	ldp	x8, x21, [x29, #-136]
10001a31c:     	add	x20, x8, #8
10001a320:     	stur	x20, [x29, #-136]
10001a324:     	sub	x8, x21, x20
10001a328:     	cmp	x8, #16
10001a32c:     	b.hi	0x10001a310 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x824>
10001a330:     	lsr	x8, x8, #3
10001a334:     	cmp	x8, #1
10001a338:     	b.eq	0x10001a34c <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x860>
10001a33c:     	cmp	x8, #2
10001a340:     	b.ne	0x10001a354 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x868>
10001a344:     	mov	w8, #42
10001a348:     	b	0x10001a350 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x864>
10001a34c:     	mov	w8, #21
10001a350:     	stur	x8, [x29, #-112]
10001a354:     	cmp	x20, x21
10001a358:     	b.eq	0x10001a38c <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x8a0>
10001a35c:     	ldr	x0, [x20], #8
10001a360:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001a364:     	cmp	x20, x21
10001a368:     	b.ne	0x10001a35c <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x870>
10001a36c:     	ldp	x9, x8, [x29, #-136]
10001a370:     	cmp	x8, x9
10001a374:     	b.eq	0x10001a38c <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x8a0>
10001a378:     	sub	x9, x9, x8
10001a37c:     	add	x9, x9, #7
10001a380:     	and	x9, x9, #0xfffffffffffffff8
10001a384:     	add	x8, x8, x9
10001a388:     	stur	x8, [x29, #-128]
10001a38c:     	ldur	x0, [x29, #-144]
10001a390:     	cbz	x0, 0x10001a398 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x8ac>
10001a394:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001a398:     	mov	x0, x19
10001a39c:     	ldp	x29, x30, [sp, #304]
10001a3a0:     	ldp	x20, x19, [sp, #288]
10001a3a4:     	ldp	x22, x21, [sp, #272]
10001a3a8:     	ldp	x24, x23, [sp, #256]
10001a3ac:     	ldp	x26, x25, [sp, #240]
10001a3b0:     	ldp	x28, x27, [sp, #224]
10001a3b4:     	add	sp, sp, #320
10001a3b8:     	ret
10001a3bc:     	mov	w19, #0
10001a3c0:     	ldp	x20, x21, [x29, #-136]
10001a3c4:     	stur	xzr, [x29, #-104]
10001a3c8:     	sub	x8, x21, x20
10001a3cc:     	cmp	x8, #17
10001a3d0:     	b.hs	0x10001a310 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x824>
10001a3d4:     	b	0x10001a330 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x844>
10001a3d8:     	bl	0x100012b7c <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)12>()>
10001a3dc:     	b	0x10001a3e4 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x8f8>
10001a3e0:     	bl	0x100012bc8 <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)16>()>
10001a3e4:     	brk	#0x1
10001a3e8:     	b	0x10001a40c <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x920>
10001a3ec:     	b	0x10001a3f8 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x90c>
10001a3f0:     	b	0x10001a40c <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x920>
10001a3f4:     	b	0x10001a40c <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x920>
10001a3f8:     	mov	x19, x0
10001a3fc:     	add	x0, sp, #64
10001a400:     	bl	0x100012b3c <std::__1::__state<char>::~__state()>
10001a404:     	b	0x10001a410 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x924>
10001a408:     	b	0x10001a40c <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_nosubs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x920>
10001a40c:     	mov	x19, x0
10001a410:     	sub	x0, x29, #144
10001a414:     	bl	0x10001ab68 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::~deque[abi:ue170006]()>
10001a418:     	mov	x0, x19
10001a41c:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010001a420 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const>:
10001a420:     	sub	sp, sp, #432
10001a424:     	stp	x28, x27, [sp, #336]
10001a428:     	stp	x26, x25, [sp, #352]
10001a42c:     	stp	x24, x23, [sp, #368]
10001a430:     	stp	x22, x21, [sp, #384]
10001a434:     	stp	x20, x19, [sp, #400]
10001a438:     	stp	x29, x30, [sp, #416]
10001a43c:     	add	x29, sp, #416
10001a440:     	str	x1, [sp, #64]
10001a444:     	add	x8, sp, #192
10001a448:     	stp	xzr, xzr, [x29, #-120]
10001a44c:     	stur	xzr, [x29, #-104]
10001a450:     	movi.2d	v0, #0000000000000000
10001a454:     	stur	q0, [x8, #8]
10001a458:     	stur	q0, [x8, #24]
10001a45c:     	stur	q0, [x8, #40]
10001a460:     	stur	q0, [x8, #56]
10001a464:     	stur	q0, [x8, #72]
10001a468:     	str	wzr, [sp, #192]
10001a46c:     	str	wzr, [sp, #280]
10001a470:     	ldr	x20, [x0, #40]
10001a474:     	cbz	x20, 0x10001a920 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x500>
10001a478:     	mov	x23, x5
10001a47c:     	mov	x21, x4
10001a480:     	mov	x22, x3
10001a484:     	mov	x25, x2
10001a488:     	mov	x24, x0
10001a48c:     	stp	x2, x2, [sp, #168]
10001a490:     	strb	wzr, [sp, #184]
10001a494:     	str	wzr, [sp, #72]
10001a498:     	stp	q0, q0, [sp, #80]
10001a49c:     	stp	q0, q0, [sp, #112]
10001a4a0:     	stur	q0, [sp, #144]
10001a4a4:     	str	wzr, [sp, #160]
10001a4a8:     	sub	x0, x29, #120
10001a4ac:     	add	x1, sp, #72
10001a4b0:     	bl	0x100012c98 <void std::__1::vector<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__push_back_slow_path<std::__1::__state<char>>(std::__1::__state<char>&&)>
10001a4b4:     	ldr	x0, [sp, #128]
10001a4b8:     	cbz	x0, 0x10001a4c4 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0xa4>
10001a4bc:     	str	x0, [sp, #136]
10001a4c0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001a4c4:     	ldr	x0, [sp, #104]
10001a4c8:     	cbz	x0, 0x10001a4d4 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0xb4>
10001a4cc:     	str	x0, [sp, #112]
10001a4d0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001a4d4:     	ldur	x19, [x29, #-112]
10001a4d8:     	stur	wzr, [x19, #-96]
10001a4dc:     	ldr	x8, [sp, #64]
10001a4e0:     	stp	x8, x8, [x19, #-88]
10001a4e4:     	stur	x25, [x19, #-72]
10001a4e8:     	mov	x0, x19
10001a4ec:     	ldr	x9, [x0, #-64]!
10001a4f0:     	ldr	w8, [x24, #28]
10001a4f4:     	ldur	x10, [x19, #-56]
10001a4f8:     	sub	x10, x10, x9
10001a4fc:     	asr	x10, x10, #3
10001a500:     	mov	x11, #-6148914691236517206
10001a504:     	movk	x11, #43691
10001a508:     	mul	x10, x10, x11
10001a50c:     	cmp	x10, x8
10001a510:     	b.hs	0x10001a528 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x108>
10001a514:     	sub	x1, x8, x10
10001a518:     	add	x2, sp, #168
10001a51c:     	bl	0x100012e90 <std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::__append(unsigned long, std::__1::sub_match<char const*> const&)>
10001a520:     	ldur	x19, [x29, #-112]
10001a524:     	b	0x10001a538 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x118>
10001a528:     	b.ls	0x10001a538 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x118>
10001a52c:     	mov	w10, #24
10001a530:     	madd	x8, x8, x10, x9
10001a534:     	stur	x8, [x19, #-56]
10001a538:     	mov	x0, x19
10001a53c:     	ldp	x9, x10, [x0, #-40]!
10001a540:     	ldr	w8, [x24, #32]
10001a544:     	sub	x10, x10, x9
10001a548:     	asr	x10, x10, #4
10001a54c:     	cmp	x10, x8
10001a550:     	str	x22, [sp, #24]
10001a554:     	b.hs	0x10001a568 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x148>
10001a558:     	sub	x1, x8, x10
10001a55c:     	bl	0x100013028 <std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__append(unsigned long)>
10001a560:     	ldur	x19, [x29, #-112]
10001a564:     	b	0x10001a574 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x154>
10001a568:     	b.ls	0x10001a574 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x154>
10001a56c:     	add	x8, x9, x8, lsl #4
10001a570:     	stur	x8, [x19, #-32]
10001a574:     	mov	x24, #0
10001a578:     	str	wzr, [sp, #60]
10001a57c:     	mov	w27, #0
10001a580:     	ldr	x8, [sp, #64]
10001a584:     	sub	x28, x25, x8
10001a588:     	stur	x20, [x19, #-16]
10001a58c:     	stur	w21, [x19, #-8]
10001a590:     	add	x8, sp, #72
10001a594:     	add	x9, x8, #80
10001a598:     	stp	x25, x9, [sp, #40]
10001a59c:     	sturb	w23, [x19, #-4]
10001a5a0:     	add	x23, x8, #32
10001a5a4:     	add	x20, x8, #56
10001a5a8:     	add	x8, sp, #192
10001a5ac:     	add	x10, x8, #32
10001a5b0:     	add	x9, x8, #56
10001a5b4:     	stp	x9, x10, [sp, #8]
10001a5b8:     	add	x8, x8, #80
10001a5bc:     	str	x8, [sp, #32]
10001a5c0:     	adrp	x26, 0x100032000 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x200>
10001a5c4:     	add	x26, x26, #3468
10001a5c8:     	b	0x10001a5e0 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x1c0>
10001a5cc:     	sub	x8, x19, #96
10001a5d0:     	stur	x8, [x29, #-112]
10001a5d4:     	ldp	x8, x19, [x29, #-120]
10001a5d8:     	cmp	x8, x19
10001a5dc:     	b.eq	0x10001a89c <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x47c>
10001a5e0:     	add	w27, w27, #1
10001a5e4:     	and	w8, w27, #0xfff
10001a5e8:     	lsr	w9, w27, #12
10001a5ec:     	cmp	w8, #0
10001a5f0:     	ccmp	w9, w28, #8, eq
10001a5f4:     	b.ge	0x10001a9c4 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x5a4>
10001a5f8:     	mov	x22, x19
10001a5fc:     	ldr	x0, [x22, #-16]!
10001a600:     	sub	x25, x22, #80
10001a604:     	cbz	x0, 0x10001a618 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x1f8>
10001a608:     	ldr	x8, [x0]
10001a60c:     	ldr	x8, [x8, #16]
10001a610:     	mov	x1, x25
10001a614:     	blr	x8
10001a618:     	ldr	w8, [x25]
10001a61c:     	add	w8, w8, #1000
10001a620:     	cmp	w8, #9
10001a624:     	b.hi	0x10001a9cc <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x5ac>
10001a628:     	adr	x9, #-84
10001a62c:     	ldrb	w10, [x26, x8]
10001a630:     	add	x9, x9, x10, lsl #2
10001a634:     	br	x9
10001a638:     	ldur	x8, [x19, #-80]
10001a63c:     	tbz	w21, #5, 0x10001a64c <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x22c>
10001a640:     	ldr	x9, [sp, #64]
10001a644:     	cmp	x8, x9
10001a648:     	b.eq	0x10001a65c <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x23c>
10001a64c:     	tbz	w21, #12, 0x10001a774 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x354>
10001a650:     	ldr	x9, [sp, #40]
10001a654:     	cmp	x8, x9
10001a658:     	b.eq	0x10001a774 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x354>
10001a65c:     	ldur	x19, [x29, #-112]
10001a660:     	ldur	x0, [x19, #-40]
10001a664:     	cbz	x0, 0x10001a670 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x250>
10001a668:     	stur	x0, [x19, #-32]
10001a66c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001a670:     	ldur	x0, [x19, #-64]
10001a674:     	cbz	x0, 0x10001a5cc <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x1ac>
10001a678:     	stur	x0, [x19, #-56]
10001a67c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001a680:     	b	0x10001a5cc <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x1ac>
10001a684:     	add	x0, sp, #72
10001a688:     	mov	x1, x25
10001a68c:     	bl	0x100013164 <std::__1::__state<char>::__state(std::__1::__state<char> const&)>
10001a690:     	ldr	x0, [x22]
10001a694:     	ldr	x8, [x0]
10001a698:     	ldr	x8, [x8, #24]
10001a69c:     	mov	w1, #1
10001a6a0:     	mov	x2, x25
10001a6a4:     	blr	x8
10001a6a8:     	ldr	x0, [sp, #152]
10001a6ac:     	ldr	x8, [x0]
10001a6b0:     	ldr	x8, [x8, #24]
10001a6b4:     	add	x2, sp, #72
10001a6b8:     	mov	w1, #0
10001a6bc:     	blr	x8
10001a6c0:     	ldp	x8, x9, [x29, #-112]
10001a6c4:     	cmp	x8, x9
10001a6c8:     	b.hs	0x10001a744 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x324>
10001a6cc:     	ldur	q0, [sp, #72]
10001a6d0:     	ldur	q1, [sp, #88]
10001a6d4:     	stp	q0, q1, [x8]
10001a6d8:     	stp	xzr, xzr, [x8, #40]
10001a6dc:     	str	xzr, [x8, #32]
10001a6e0:     	ldr	x9, [sp, #104]
10001a6e4:     	str	x9, [x8, #32]
10001a6e8:     	ldr	x9, [sp, #112]
10001a6ec:     	str	x9, [x8, #40]
10001a6f0:     	ldr	x9, [sp, #120]
10001a6f4:     	stp	x9, xzr, [x8, #48]
10001a6f8:     	stp	xzr, xzr, [x23]
10001a6fc:     	str	xzr, [x23, #16]
10001a700:     	stp	xzr, xzr, [x8, #64]
10001a704:     	ldr	x9, [sp, #128]
10001a708:     	str	x9, [x8, #56]
10001a70c:     	ldr	x9, [sp, #136]
10001a710:     	str	x9, [x8, #64]
10001a714:     	ldr	x9, [sp, #144]
10001a718:     	str	x9, [x8, #72]
10001a71c:     	stp	xzr, xzr, [x20]
10001a720:     	str	xzr, [x20, #16]
10001a724:     	ldr	x10, [sp, #48]
10001a728:     	ldr	x9, [x10]
10001a72c:     	ldur	x10, [x10, #5]
10001a730:     	stur	x10, [x8, #85]
10001a734:     	str	x9, [x8, #80]
10001a738:     	add	x8, x8, #96
10001a73c:     	stur	x8, [x29, #-112]
10001a740:     	b	0x10001a760 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x340>
10001a744:     	sub	x0, x29, #120
10001a748:     	add	x1, sp, #72
10001a74c:     	bl	0x100012c98 <void std::__1::vector<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__push_back_slow_path<std::__1::__state<char>>(std::__1::__state<char>&&)>
10001a750:     	ldr	x0, [sp, #128]
10001a754:     	cbz	x0, 0x10001a760 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x340>
10001a758:     	str	x0, [sp, #136]
10001a75c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001a760:     	ldr	x0, [sp, #104]
10001a764:     	cbz	x0, 0x10001a5d4 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x1b4>
10001a768:     	str	x0, [sp, #112]
10001a76c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001a770:     	b	0x10001a5d4 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x1b4>
10001a774:     	ldur	x9, [x19, #-88]
10001a778:     	mov	x10, x24
10001a77c:     	sub	x24, x8, x9
10001a780:     	ldr	w8, [sp, #60]
10001a784:     	tbz	w8, #0, 0x10001a7f0 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x3d0>
10001a788:     	cmp	x10, x24
10001a78c:     	b.lt	0x10001a7f0 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x3d0>
10001a790:     	ldur	x19, [x29, #-112]
10001a794:     	cmp	x10, x28
10001a798:     	b.ne	0x10001a864 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x444>
10001a79c:     	ldur	x22, [x29, #-120]
10001a7a0:     	cmp	x19, x22
10001a7a4:     	b.ne	0x10001a7c8 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x3a8>
10001a7a8:     	stur	x22, [x29, #-112]
10001a7ac:     	mov	w8, #1
10001a7b0:     	str	w8, [sp, #60]
10001a7b4:     	mov	x24, x28
10001a7b8:     	b	0x10001a5d4 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x1b4>
10001a7bc:     	mov	x19, x24
10001a7c0:     	cmp	x24, x22
10001a7c4:     	b.eq	0x10001a7a8 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x388>
10001a7c8:     	ldur	x0, [x19, #-40]
10001a7cc:     	cbz	x0, 0x10001a7d8 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x3b8>
10001a7d0:     	stur	x0, [x19, #-32]
10001a7d4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001a7d8:     	sub	x24, x19, #96
10001a7dc:     	ldur	x0, [x19, #-64]
10001a7e0:     	cbz	x0, 0x10001a7bc <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x39c>
10001a7e4:     	stur	x0, [x19, #-56]
10001a7e8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001a7ec:     	b	0x10001a7bc <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x39c>
10001a7f0:     	ldp	q0, q1, [x25]
10001a7f4:     	add	x8, sp, #192
10001a7f8:     	str	q1, [x8, #16]
10001a7fc:     	str	q0, [sp, #192]
10001a800:     	add	x8, sp, #192
10001a804:     	cmp	x8, x25
10001a808:     	b.eq	0x10001a840 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x420>
10001a80c:     	ldp	x1, x2, [x19, #-64]
10001a810:     	sub	x8, x2, x1
10001a814:     	asr	x8, x8, #3
10001a818:     	mov	x9, #-6148914691236517206
10001a81c:     	movk	x9, #43691
10001a820:     	mul	x3, x8, x9
10001a824:     	ldr	x0, [sp, #16]
10001a828:     	bl	0x10001ba08 <void std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::__assign_with_size[abi:ue170006]<std::__1::sub_match<char const*>*, std::__1::sub_match<char const*>*>(std::__1::sub_match<char const*>*, std::__1::sub_match<char const*>*, long)>
10001a82c:     	ldp	x1, x2, [x19, #-40]
10001a830:     	sub	x8, x2, x1
10001a834:     	asr	x3, x8, #4
10001a838:     	ldr	x0, [sp, #8]
10001a83c:     	bl	0x10001bbf4 <void std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__assign_with_size[abi:ue170006]<std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*>(std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*, long)>
10001a840:     	ldr	x8, [x22]
10001a844:     	ldur	x9, [x22, #5]
10001a848:     	ldr	x10, [sp, #32]
10001a84c:     	stur	x9, [x10, #5]
10001a850:     	str	x8, [x10]
10001a854:     	mov	x10, x24
10001a858:     	ldur	x19, [x29, #-112]
10001a85c:     	cmp	x24, x28
10001a860:     	b.eq	0x10001a79c <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x37c>
10001a864:     	mov	x24, x10
10001a868:     	ldur	x0, [x19, #-40]
10001a86c:     	cbz	x0, 0x10001a878 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x458>
10001a870:     	stur	x0, [x19, #-32]
10001a874:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001a878:     	ldur	x0, [x19, #-64]
10001a87c:     	cbz	x0, 0x10001a888 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x468>
10001a880:     	stur	x0, [x19, #-56]
10001a884:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001a888:     	sub	x8, x19, #96
10001a88c:     	stur	x8, [x29, #-112]
10001a890:     	mov	w8, #1
10001a894:     	str	w8, [sp, #60]
10001a898:     	b	0x10001a5d4 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x1b4>
10001a89c:     	ldr	w8, [sp, #60]
10001a8a0:     	tbz	w8, #0, 0x10001a920 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x500>
10001a8a4:     	ldr	x8, [sp, #24]
10001a8a8:     	ldr	x8, [x8]
10001a8ac:     	ldr	x10, [sp, #64]
10001a8b0:     	add	x9, x10, x24
10001a8b4:     	stp	x10, x9, [x8]
10001a8b8:     	mov	w9, #1
10001a8bc:     	strb	w9, [x8, #16]
10001a8c0:     	ldp	x9, x10, [sp, #224]
10001a8c4:     	subs	x11, x10, x9
10001a8c8:     	b.eq	0x10001a910 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x4f0>
10001a8cc:     	mov	x10, #0
10001a8d0:     	asr	x11, x11, #3
10001a8d4:     	mov	x12, #-6148914691236517206
10001a8d8:     	movk	x12, #43691
10001a8dc:     	mul	x11, x11, x12
10001a8e0:     	mov	w12, #24
10001a8e4:     	madd	x13, x10, x12, x9
10001a8e8:     	add	w10, w10, #1
10001a8ec:     	umaddl	x14, w10, w12, x8
10001a8f0:     	ldr	x15, [x13]
10001a8f4:     	str	x15, [x14]
10001a8f8:     	ldr	x15, [x13, #8]
10001a8fc:     	str	x15, [x14, #8]
10001a900:     	ldrb	w13, [x13, #16]
10001a904:     	strb	w13, [x14, #16]
10001a908:     	cmp	x11, x10
10001a90c:     	b.hi	0x10001a8e4 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x4c4>
10001a910:     	mov	w19, #1
10001a914:     	ldr	x0, [sp, #248]
10001a918:     	cbnz	x0, 0x10001a92c <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x50c>
10001a91c:     	b	0x10001a934 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x514>
10001a920:     	mov	w19, #0
10001a924:     	ldr	x0, [sp, #248]
10001a928:     	cbz	x0, 0x10001a934 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x514>
10001a92c:     	str	x0, [sp, #256]
10001a930:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001a934:     	ldr	x0, [sp, #224]
10001a938:     	cbz	x0, 0x10001a944 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x524>
10001a93c:     	str	x0, [sp, #232]
10001a940:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001a944:     	ldur	x20, [x29, #-120]
10001a948:     	cbz	x20, 0x10001a9a0 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x580>
10001a94c:     	ldur	x21, [x29, #-112]
10001a950:     	mov	x0, x20
10001a954:     	cmp	x21, x20
10001a958:     	b.ne	0x10001a96c <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x54c>
10001a95c:     	b	0x10001a998 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x578>
10001a960:     	mov	x21, x22
10001a964:     	cmp	x22, x20
10001a968:     	b.eq	0x10001a994 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x574>
10001a96c:     	ldur	x0, [x21, #-40]
10001a970:     	cbz	x0, 0x10001a97c <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x55c>
10001a974:     	stur	x0, [x21, #-32]
10001a978:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001a97c:     	sub	x22, x21, #96
10001a980:     	ldur	x0, [x21, #-64]
10001a984:     	cbz	x0, 0x10001a960 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x540>
10001a988:     	stur	x0, [x21, #-56]
10001a98c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001a990:     	b	0x10001a960 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x540>
10001a994:     	ldur	x0, [x29, #-120]
10001a998:     	stur	x20, [x29, #-112]
10001a99c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001a9a0:     	mov	x0, x19
10001a9a4:     	ldp	x29, x30, [sp, #416]
10001a9a8:     	ldp	x20, x19, [sp, #400]
10001a9ac:     	ldp	x22, x21, [sp, #384]
10001a9b0:     	ldp	x24, x23, [sp, #368]
10001a9b4:     	ldp	x26, x25, [sp, #352]
10001a9b8:     	ldp	x28, x27, [sp, #336]
10001a9bc:     	add	sp, sp, #432
10001a9c0:     	ret
10001a9c4:     	bl	0x100012b7c <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)12>()>
10001a9c8:     	b	0x10001a9d0 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x5b0>
10001a9cc:     	bl	0x100012bc8 <void std::__1::__throw_regex_error[abi:ue170006]<(std::__1::regex_constants::error_type)16>()>
10001a9d0:     	brk	#0x1
10001a9d4:     	b	0x10001a9f8 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x5d8>
10001a9d8:     	b	0x10001a9e4 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x5c4>
10001a9dc:     	b	0x10001a9f8 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x5d8>
10001a9e0:     	b	0x10001a9f8 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x5d8>
10001a9e4:     	mov	x19, x0
10001a9e8:     	add	x0, sp, #72
10001a9ec:     	bl	0x100012b3c <std::__1::__state<char>::~__state()>
10001a9f0:     	b	0x10001a9fc <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x5dc>
10001a9f4:     	b	0x10001a9f8 <bool std::__1::basic_regex<char, std::__1::regex_traits<char>>::__match_at_start_posix_subs<std::__1::allocator<std::__1::sub_match<char const*>>>(char const*, char const*, std::__1::match_results<char const*, std::__1::allocator<std::__1::sub_match<char const*>>>&, std::__1::regex_constants::match_flag_type, bool) const+0x5d8>
10001a9f8:     	mov	x19, x0
10001a9fc:     	add	x0, sp, #192
10001aa00:     	bl	0x100012b3c <std::__1::__state<char>::~__state()>
10001aa04:     	sub	x0, x29, #120
10001aa08:     	bl	0x100012c14 <std::__1::vector<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::~vector[abi:ue170006]()>
10001aa0c:     	mov	x0, x19
10001aa10:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010001aa14 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::clear()>:
10001aa14:     	stp	x24, x23, [sp, #-64]!
10001aa18:     	stp	x22, x21, [sp, #16]
10001aa1c:     	stp	x20, x19, [sp, #32]
10001aa20:     	stp	x29, x30, [sp, #48]
10001aa24:     	add	x29, sp, #48
10001aa28:     	mov	x19, x0
10001aa2c:     	ldp	x8, x9, [x0, #8]
10001aa30:     	cmp	x9, x8
10001aa34:     	b.eq	0x10001ab34 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::clear()+0x120>
10001aa38:     	mov	x20, x19
10001aa3c:     	ldr	x10, [x20, #40]!
10001aa40:     	ldur	x11, [x20, #-8]
10001aa44:     	lsr	x12, x11, #1
10001aa48:     	mov	x13, #49933
10001aa4c:     	movk	x13, #3120, lsl #16
10001aa50:     	movk	x13, #12483, lsl #32
10001aa54:     	movk	x13, #49932, lsl #48
10001aa58:     	umulh	x12, x12, x13
10001aa5c:     	lsr	x12, x12, #4
10001aa60:     	add	x21, x8, x12, lsl #3
10001aa64:     	ldr	x14, [x21]
10001aa68:     	mov	w15, #42
10001aa6c:     	msub	x12, x12, x15, x11
10001aa70:     	mov	w16, #96
10001aa74:     	madd	x22, x12, x16, x14
10001aa78:     	add	x10, x10, x11
10001aa7c:     	lsr	x11, x10, #1
10001aa80:     	umulh	x11, x11, x13
10001aa84:     	lsr	x11, x11, #4
10001aa88:     	ldr	x12, [x8, x11, lsl #3]
10001aa8c:     	msub	x10, x11, x15, x10
10001aa90:     	madd	x23, x10, x16, x12
10001aa94:     	cmp	x22, x23
10001aa98:     	b.ne	0x10001aaa8 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::clear()+0x94>
10001aa9c:     	b	0x10001aae8 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::clear()+0xd4>
10001aaa0:     	cmp	x22, x23
10001aaa4:     	b.eq	0x10001aae4 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::clear()+0xd0>
10001aaa8:     	ldr	x0, [x22, #56]
10001aaac:     	cbz	x0, 0x10001aab8 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::clear()+0xa4>
10001aab0:     	str	x0, [x22, #64]
10001aab4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001aab8:     	ldr	x0, [x22, #32]
10001aabc:     	cbz	x0, 0x10001aac8 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::clear()+0xb4>
10001aac0:     	str	x0, [x22, #40]
10001aac4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001aac8:     	add	x22, x22, #96
10001aacc:     	ldr	x8, [x21]
10001aad0:     	sub	x8, x22, x8
10001aad4:     	cmp	x8, #4032
10001aad8:     	b.ne	0x10001aaa0 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::clear()+0x8c>
10001aadc:     	ldr	x22, [x21, #8]!
10001aae0:     	b	0x10001aaa0 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::clear()+0x8c>
10001aae4:     	ldp	x8, x9, [x19, #8]
10001aae8:     	str	xzr, [x20]
10001aaec:     	sub	x9, x9, x8
10001aaf0:     	cmp	x9, #17
10001aaf4:     	b.lo	0x10001ab18 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::clear()+0x104>
10001aaf8:     	ldr	x0, [x8]
10001aafc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001ab00:     	ldp	x8, x9, [x19, #8]
10001ab04:     	add	x8, x8, #8
10001ab08:     	str	x8, [x19, #8]
10001ab0c:     	sub	x9, x9, x8
10001ab10:     	cmp	x9, #16
10001ab14:     	b.hi	0x10001aaf8 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::clear()+0xe4>
10001ab18:     	lsr	x8, x9, #3
10001ab1c:     	cmp	x8, #1
10001ab20:     	b.eq	0x10001ab4c <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::clear()+0x138>
10001ab24:     	cmp	x8, #2
10001ab28:     	b.ne	0x10001ab54 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::clear()+0x140>
10001ab2c:     	mov	w8, #42
10001ab30:     	b	0x10001ab50 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::clear()+0x13c>
10001ab34:     	add	x20, x19, #40
10001ab38:     	str	xzr, [x20]
10001ab3c:     	sub	x9, x9, x8
10001ab40:     	cmp	x9, #17
10001ab44:     	b.hs	0x10001aaf8 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::clear()+0xe4>
10001ab48:     	b	0x10001ab18 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::clear()+0x104>
10001ab4c:     	mov	w8, #21
10001ab50:     	str	x8, [x19, #32]
10001ab54:     	ldp	x29, x30, [sp, #48]
10001ab58:     	ldp	x20, x19, [sp, #32]
10001ab5c:     	ldp	x22, x21, [sp, #16]
10001ab60:     	ldp	x24, x23, [sp], #64
10001ab64:     	ret

000000010001ab68 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::~deque[abi:ue170006]()>:
10001ab68:     	stp	x22, x21, [sp, #-48]!
10001ab6c:     	stp	x20, x19, [sp, #16]
10001ab70:     	stp	x29, x30, [sp, #32]
10001ab74:     	add	x29, sp, #32
10001ab78:     	mov	x19, x0
10001ab7c:     	bl	0x10001aa14 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::clear()>
10001ab80:     	ldp	x20, x21, [x19, #8]
10001ab84:     	cmp	x20, x21
10001ab88:     	b.eq	0x10001abbc <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::~deque[abi:ue170006]()+0x54>
10001ab8c:     	ldr	x0, [x20], #8
10001ab90:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001ab94:     	cmp	x20, x21
10001ab98:     	b.ne	0x10001ab8c <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::~deque[abi:ue170006]()+0x24>
10001ab9c:     	ldp	x9, x8, [x19, #8]
10001aba0:     	cmp	x8, x9
10001aba4:     	b.eq	0x10001abbc <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::~deque[abi:ue170006]()+0x54>
10001aba8:     	sub	x9, x9, x8
10001abac:     	add	x9, x9, #7
10001abb0:     	and	x9, x9, #0xfffffffffffffff8
10001abb4:     	add	x8, x8, x9
10001abb8:     	str	x8, [x19, #16]
10001abbc:     	ldr	x0, [x19]
10001abc0:     	cbz	x0, 0x10001abc8 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::~deque[abi:ue170006]()+0x60>
10001abc4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001abc8:     	mov	x0, x19
10001abcc:     	ldp	x29, x30, [sp, #32]
10001abd0:     	ldp	x20, x19, [sp, #16]
10001abd4:     	ldp	x22, x21, [sp], #48
10001abd8:     	ret

000000010001abdc <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()>:
10001abdc:     	sub	sp, sp, #112
10001abe0:     	stp	x28, x27, [sp, #16]
10001abe4:     	stp	x26, x25, [sp, #32]
10001abe8:     	stp	x24, x23, [sp, #48]
10001abec:     	stp	x22, x21, [sp, #64]
10001abf0:     	stp	x20, x19, [sp, #80]
10001abf4:     	stp	x29, x30, [sp, #96]
10001abf8:     	add	x29, sp, #96
10001abfc:     	mov	x19, x0
10001ac00:     	ldr	x8, [x0, #32]
10001ac04:     	subs	x8, x8, #42
10001ac08:     	b.lo	0x10001ac84 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0xa8>
10001ac0c:     	str	x8, [x19, #32]
10001ac10:     	ldp	x25, x24, [x19, #8]
10001ac14:     	mov	x20, x25
10001ac18:     	ldr	x23, [x20], #8
10001ac1c:     	str	x20, [x19, #8]
10001ac20:     	ldr	x8, [x19, #24]
10001ac24:     	cmp	x24, x8
10001ac28:     	b.ne	0x10001b09c <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x4c0>
10001ac2c:     	ldr	x21, [x19]
10001ac30:     	subs	x8, x20, x21
10001ac34:     	b.ls	0x10001ad54 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x178>
10001ac38:     	asr	x8, x8, #3
10001ac3c:     	add	x9, x8, #1
10001ac40:     	add	x10, x8, #2
10001ac44:     	cmp	x9, #0
10001ac48:     	csinc	x8, x10, x8, lt
10001ac4c:     	asr	x8, x8, #1
10001ac50:     	neg	x25, x8
10001ac54:     	sub	x21, x20, x8, lsl #3
10001ac58:     	subs	x22, x24, x20
10001ac5c:     	b.eq	0x10001ac74 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x98>
10001ac60:     	mov	x0, x21
10001ac64:     	mov	x1, x20
10001ac68:     	mov	x2, x22
10001ac6c:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
10001ac70:     	ldr	x20, [x19, #8]
10001ac74:     	add	x24, x21, x22
10001ac78:     	add	x8, x20, x25, lsl #3
10001ac7c:     	stp	x8, x24, [x19, #8]
10001ac80:     	b	0x10001b09c <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x4c0>
10001ac84:     	ldp	x24, x8, [x19, #16]
10001ac88:     	ldp	x9, x26, [x19]
10001ac8c:     	sub	x28, x24, x26
10001ac90:     	asr	x27, x28, #3
10001ac94:     	sub	x10, x8, x9
10001ac98:     	cmp	x27, x10, asr #3
10001ac9c:     	b.hs	0x10001acc4 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0xe8>
10001aca0:     	mov	w0, #4032
10001aca4:     	cmp	x8, x24
10001aca8:     	b.eq	0x10001ada8 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x1cc>
10001acac:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001acb0:     	str	x0, [sp, #8]
10001acb4:     	add	x1, sp, #8
10001acb8:     	mov	x0, x19
10001acbc:     	bl	0x10001b184 <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_back(std::__1::__state<char>*&&)>
10001acc0:     	b	0x10001b0ac <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x4d0>
10001acc4:     	asr	x10, x10, #2
10001acc8:     	cmp	x8, x9
10001accc:     	csinc	x22, x10, xzr, ne
10001acd0:     	lsr	x8, x22, #61
10001acd4:     	cbnz	x8, 0x10001b144 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x568>
10001acd8:     	lsl	x23, x22, #3
10001acdc:     	mov	x0, x23
10001ace0:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001ace4:     	mov	x20, x0
10001ace8:     	mov	w0, #4032
10001acec:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001acf0:     	add	x21, x20, x27, lsl #3
10001acf4:     	add	x25, x20, x23
10001acf8:     	cmp	x27, x22
10001acfc:     	b.eq	0x10001ad14 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x138>
10001ad00:     	mov	x23, x21
10001ad04:     	str	x0, [x23], #8
10001ad08:     	cmp	x24, x26
10001ad0c:     	b.ne	0x10001aedc <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x300>
10001ad10:     	b	0x10001ae8c <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x2b0>
10001ad14:     	str	x0, [sp]
10001ad18:     	cmp	x28, #1
10001ad1c:     	b.lt	0x10001ae38 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x25c>
10001ad20:     	add	x8, x27, #1
10001ad24:     	add	x9, x27, #2
10001ad28:     	cmp	x8, #0
10001ad2c:     	csinc	x8, x9, x27, lt
10001ad30:     	lsl	x8, x8, #2
10001ad34:     	and	x8, x8, #0xfffffffffffffff8
10001ad38:     	sub	x21, x21, x8
10001ad3c:     	ldr	x0, [sp]
10001ad40:     	mov	x23, x21
10001ad44:     	str	x0, [x23], #8
10001ad48:     	cmp	x24, x26
10001ad4c:     	b.ne	0x10001aedc <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x300>
10001ad50:     	b	0x10001ae8c <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x2b0>
10001ad54:     	subs	x8, x24, x21
10001ad58:     	asr	x8, x8, #2
10001ad5c:     	csinc	x8, x8, xzr, ne
10001ad60:     	lsr	x9, x8, #61
10001ad64:     	cbnz	x9, 0x10001b144 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x568>
10001ad68:     	lsr	x26, x8, #2
10001ad6c:     	lsl	x22, x8, #3
10001ad70:     	mov	x0, x22
10001ad74:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001ad78:     	add	x8, x0, x26, lsl #3
10001ad7c:     	add	x9, x0, x22
10001ad80:     	subs	x10, x24, x20
10001ad84:     	mov	x24, x8
10001ad88:     	b.eq	0x10001b084 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x4a8>
10001ad8c:     	and	x11, x10, #0xfffffffffffffff8
10001ad90:     	add	x24, x8, x11
10001ad94:     	sub	x11, x10, #8
10001ad98:     	cmp	x11, #56
10001ad9c:     	b.hs	0x10001b018 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x43c>
10001ada0:     	mov	x10, x8
10001ada4:     	b	0x10001b074 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x498>
10001ada8:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001adac:     	str	x0, [sp, #8]
10001adb0:     	add	x1, sp, #8
10001adb4:     	mov	x0, x19
10001adb8:     	bl	0x10001b314 <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_front(std::__1::__state<char>*&&)>
10001adbc:     	ldp	x25, x24, [x19, #8]
10001adc0:     	mov	x20, x25
10001adc4:     	ldr	x23, [x20], #8
10001adc8:     	str	x20, [x19, #8]
10001adcc:     	ldr	x8, [x19, #24]
10001add0:     	cmp	x24, x8
10001add4:     	b.ne	0x10001b09c <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x4c0>
10001add8:     	ldr	x21, [x19]
10001addc:     	subs	x8, x20, x21
10001ade0:     	b.hi	0x10001ac38 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x5c>
10001ade4:     	subs	x8, x24, x21
10001ade8:     	asr	x8, x8, #2
10001adec:     	csinc	x8, x8, xzr, ne
10001adf0:     	lsr	x9, x8, #61
10001adf4:     	cbnz	x9, 0x10001b144 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x568>
10001adf8:     	lsr	x26, x8, #2
10001adfc:     	lsl	x22, x8, #3
10001ae00:     	mov	x0, x22
10001ae04:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001ae08:     	add	x8, x0, x26, lsl #3
10001ae0c:     	add	x9, x0, x22
10001ae10:     	subs	x10, x24, x20
10001ae14:     	mov	x24, x8
10001ae18:     	b.eq	0x10001b084 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x4a8>
10001ae1c:     	and	x11, x10, #0xfffffffffffffff8
10001ae20:     	add	x24, x8, x11
10001ae24:     	sub	x11, x10, #8
10001ae28:     	cmp	x11, #56
10001ae2c:     	b.hs	0x10001b0cc <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x4f0>
10001ae30:     	mov	x10, x8
10001ae34:     	b	0x10001b128 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x54c>
10001ae38:     	asr	x8, x28, #2
10001ae3c:     	cmp	x24, x26
10001ae40:     	csinc	x22, x8, xzr, ne
10001ae44:     	lsr	x8, x22, #61
10001ae48:     	cbnz	x8, 0x10001b148 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x56c>
10001ae4c:     	lsl	x0, x22, #3
10001ae50:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001ae54:     	mov	x23, x0
10001ae58:     	lsl	x8, x22, #1
10001ae5c:     	and	x8, x8, #0xfffffffffffffff8
10001ae60:     	add	x21, x0, x8
10001ae64:     	add	x25, x0, x22, lsl #3
10001ae68:     	mov	x0, x20
10001ae6c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001ae70:     	ldp	x26, x24, [x19, #8]
10001ae74:     	mov	x20, x23
10001ae78:     	ldr	x0, [sp]
10001ae7c:     	mov	x23, x21
10001ae80:     	str	x0, [x23], #8
10001ae84:     	cmp	x24, x26
10001ae88:     	b.ne	0x10001aedc <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x300>
10001ae8c:     	mov	x22, x21
10001ae90:     	ldr	x0, [x19]
10001ae94:     	stp	x20, x22, [x19]
10001ae98:     	stp	x23, x25, [x19, #16]
10001ae9c:     	cbz	x0, 0x10001b0ac <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x4d0>
10001aea0:     	ldp	x29, x30, [sp, #96]
10001aea4:     	ldp	x20, x19, [sp, #80]
10001aea8:     	ldp	x22, x21, [sp, #64]
10001aeac:     	ldp	x24, x23, [sp, #48]
10001aeb0:     	ldp	x26, x25, [sp, #32]
10001aeb4:     	ldp	x28, x27, [sp, #16]
10001aeb8:     	add	sp, sp, #112
10001aebc:     	b	0x10002f014 <_vsnprintf+0x10002f014>
10001aec0:     	mov	x22, x21
10001aec4:     	ldr	x8, [x24, #-8]!
10001aec8:     	str	x8, [x22, #-8]!
10001aecc:     	ldr	x8, [x19, #8]
10001aed0:     	mov	x21, x22
10001aed4:     	cmp	x24, x8
10001aed8:     	b.eq	0x10001ae90 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x2b4>
10001aedc:     	cmp	x21, x20
10001aee0:     	b.ne	0x10001aec0 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x2e4>
10001aee4:     	cmp	x23, x25
10001aee8:     	b.hs	0x10001af38 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x35c>
10001aeec:     	sub	x8, x25, x23
10001aef0:     	asr	x8, x8, #3
10001aef4:     	add	x9, x8, #1
10001aef8:     	add	x10, x8, #2
10001aefc:     	cmp	x9, #0
10001af00:     	csinc	x8, x10, x8, lt
10001af04:     	lsl	x8, x8, #2
10001af08:     	and	x8, x8, #0xfffffffffffffff8
10001af0c:     	add	x8, x23, x8
10001af10:     	subs	x9, x23, x21
10001af14:     	sub	x22, x8, x9
10001af18:     	subs	x2, x23, x21
10001af1c:     	mov	x23, x8
10001af20:     	b.eq	0x10001b010 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x434>
10001af24:     	mov	x0, x22
10001af28:     	mov	x1, x21
10001af2c:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
10001af30:     	mov	x20, x21
10001af34:     	b	0x10001aec4 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x2e8>
10001af38:     	subs	x8, x25, x21
10001af3c:     	asr	x8, x8, #2
10001af40:     	csinc	x25, x8, xzr, ne
10001af44:     	lsr	x8, x25, #61
10001af48:     	cbnz	x8, 0x10001b13c <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x560>
10001af4c:     	lsl	x0, x25, #3
10001af50:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001af54:     	mov	x20, x0
10001af58:     	add	x8, x25, #3
10001af5c:     	lsr	x10, x8, #2
10001af60:     	add	x22, x0, x10, lsl #3
10001af64:     	subs	x8, x23, x21
10001af68:     	mov	x23, x22
10001af6c:     	b.eq	0x10001b000 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x424>
10001af70:     	and	x9, x8, #0xfffffffffffffff8
10001af74:     	add	x23, x22, x9
10001af78:     	sub	x11, x8, #8
10001af7c:     	mov	x8, x22
10001af80:     	mov	x9, x21
10001af84:     	cmp	x11, #56
10001af88:     	b.lo	0x10001aff0 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x414>
10001af8c:     	lsl	x12, x10, #3
10001af90:     	add	x8, x12, x20
10001af94:     	sub	x10, x8, x21
10001af98:     	mov	x8, x22
10001af9c:     	mov	x9, x21
10001afa0:     	cmp	x10, #64
10001afa4:     	b.lo	0x10001aff0 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x414>
10001afa8:     	lsr	x8, x11, #3
10001afac:     	add	x10, x8, #1
10001afb0:     	and	x11, x10, #0x3ffffffffffffff8
10001afb4:     	lsl	x9, x11, #3
10001afb8:     	add	x8, x22, x9
10001afbc:     	add	x9, x21, x9
10001afc0:     	add	x12, x20, x12
10001afc4:     	add	x12, x12, #32
10001afc8:     	add	x13, x21, #32
10001afcc:     	mov	x14, x11
10001afd0:     	ldp	q0, q1, [x13, #-32]
10001afd4:     	ldp	q2, q3, [x13], #64
10001afd8:     	stp	q0, q1, [x12, #-32]
10001afdc:     	stp	q2, q3, [x12], #64
10001afe0:     	subs	x14, x14, #8
10001afe4:     	b.ne	0x10001afd0 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x3f4>
10001afe8:     	cmp	x10, x11
10001afec:     	b.eq	0x10001b000 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x424>
10001aff0:     	ldr	x10, [x9], #8
10001aff4:     	str	x10, [x8], #8
10001aff8:     	cmp	x8, x23
10001affc:     	b.ne	0x10001aff0 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x414>
10001b000:     	add	x25, x20, x25, lsl #3
10001b004:     	mov	x0, x21
10001b008:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001b00c:     	b	0x10001aec4 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x2e8>
10001b010:     	mov	x20, x21
10001b014:     	b	0x10001aec4 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x2e8>
10001b018:     	lsl	x10, x26, #3
10001b01c:     	add	x13, x10, x0
10001b020:     	sub	x12, x13, x20
10001b024:     	mov	x10, x8
10001b028:     	cmp	x12, #64
10001b02c:     	b.lo	0x10001b074 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x498>
10001b030:     	lsr	x10, x11, #3
10001b034:     	add	x11, x10, #1
10001b038:     	and	x12, x11, #0x3ffffffffffffff8
10001b03c:     	lsl	x14, x12, #3
10001b040:     	add	x10, x8, x14
10001b044:     	add	x20, x20, x14
10001b048:     	add	x13, x13, #32
10001b04c:     	add	x14, x25, #40
10001b050:     	mov	x15, x12
10001b054:     	ldp	q0, q1, [x14, #-32]
10001b058:     	ldp	q2, q3, [x14], #64
10001b05c:     	stp	q0, q1, [x13, #-32]
10001b060:     	stp	q2, q3, [x13], #64
10001b064:     	subs	x15, x15, #8
10001b068:     	b.ne	0x10001b054 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x478>
10001b06c:     	cmp	x11, x12
10001b070:     	b.eq	0x10001b084 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x4a8>
10001b074:     	ldr	x11, [x20], #8
10001b078:     	str	x11, [x10], #8
10001b07c:     	cmp	x10, x24
10001b080:     	b.ne	0x10001b074 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x498>
10001b084:     	stp	x0, x8, [x19]
10001b088:     	stp	x24, x9, [x19, #16]
10001b08c:     	cbz	x21, 0x10001b09c <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x4c0>
10001b090:     	mov	x0, x21
10001b094:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001b098:     	ldr	x24, [x19, #16]
10001b09c:     	str	x23, [x24]
10001b0a0:     	ldr	x8, [x19, #16]
10001b0a4:     	add	x8, x8, #8
10001b0a8:     	str	x8, [x19, #16]
10001b0ac:     	ldp	x29, x30, [sp, #96]
10001b0b0:     	ldp	x20, x19, [sp, #80]
10001b0b4:     	ldp	x22, x21, [sp, #64]
10001b0b8:     	ldp	x24, x23, [sp, #48]
10001b0bc:     	ldp	x26, x25, [sp, #32]
10001b0c0:     	ldp	x28, x27, [sp, #16]
10001b0c4:     	add	sp, sp, #112
10001b0c8:     	ret
10001b0cc:     	lsl	x10, x26, #3
10001b0d0:     	add	x13, x10, x0
10001b0d4:     	sub	x12, x13, x20
10001b0d8:     	mov	x10, x8
10001b0dc:     	cmp	x12, #64
10001b0e0:     	b.lo	0x10001b128 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x54c>
10001b0e4:     	lsr	x10, x11, #3
10001b0e8:     	add	x11, x10, #1
10001b0ec:     	and	x12, x11, #0x3ffffffffffffff8
10001b0f0:     	lsl	x14, x12, #3
10001b0f4:     	add	x10, x8, x14
10001b0f8:     	add	x20, x20, x14
10001b0fc:     	add	x13, x13, #32
10001b100:     	add	x14, x25, #40
10001b104:     	mov	x15, x12
10001b108:     	ldp	q0, q1, [x14, #-32]
10001b10c:     	ldp	q2, q3, [x14], #64
10001b110:     	stp	q0, q1, [x13, #-32]
10001b114:     	stp	q2, q3, [x13], #64
10001b118:     	subs	x15, x15, #8
10001b11c:     	b.ne	0x10001b108 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x52c>
10001b120:     	cmp	x11, x12
10001b124:     	b.eq	0x10001b084 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x4a8>
10001b128:     	ldr	x11, [x20], #8
10001b12c:     	str	x11, [x10], #8
10001b130:     	cmp	x10, x24
10001b134:     	b.ne	0x10001b128 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x54c>
10001b138:     	b	0x10001b084 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x4a8>
10001b13c:     	bl	0x100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>
10001b140:     	b	0x10001b14c <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x570>
10001b144:     	bl	0x100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>
10001b148:     	bl	0x100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>
10001b14c:     	brk	#0x1
10001b150:     	mov	x19, x0
10001b154:     	ldr	x0, [sp]
10001b158:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001b15c:     	b	0x10001b174 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x598>
10001b160:     	mov	x19, x0
10001b164:     	b	0x10001b174 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x598>
10001b168:     	b	0x10001b16c <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_back_capacity()+0x590>
10001b16c:     	mov	x19, x0
10001b170:     	mov	x20, x21
10001b174:     	mov	x0, x20
10001b178:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001b17c:     	mov	x0, x19
10001b180:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010001b184 <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_back(std::__1::__state<char>*&&)>:
10001b184:     	stp	x26, x25, [sp, #-80]!
10001b188:     	stp	x24, x23, [sp, #16]
10001b18c:     	stp	x22, x21, [sp, #32]
10001b190:     	stp	x20, x19, [sp, #48]
10001b194:     	stp	x29, x30, [sp, #64]
10001b198:     	add	x29, sp, #64
10001b19c:     	mov	x20, x1
10001b1a0:     	mov	x19, x0
10001b1a4:     	ldp	x24, x8, [x0, #16]
10001b1a8:     	cmp	x24, x8
10001b1ac:     	b.ne	0x10001b2e4 <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_back(std::__1::__state<char>*&&)+0x160>
10001b1b0:     	ldp	x21, x22, [x19]
10001b1b4:     	subs	x8, x22, x21
10001b1b8:     	b.ls	0x10001b208 <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_back(std::__1::__state<char>*&&)+0x84>
10001b1bc:     	asr	x8, x8, #3
10001b1c0:     	add	x9, x8, #1
10001b1c4:     	add	x10, x8, #2
10001b1c8:     	cmp	x9, #0
10001b1cc:     	csinc	x8, x10, x8, lt
10001b1d0:     	asr	x8, x8, #1
10001b1d4:     	neg	x25, x8
10001b1d8:     	sub	x21, x22, x8, lsl #3
10001b1dc:     	subs	x23, x24, x22
10001b1e0:     	b.eq	0x10001b1f8 <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_back(std::__1::__state<char>*&&)+0x74>
10001b1e4:     	mov	x0, x21
10001b1e8:     	mov	x1, x22
10001b1ec:     	mov	x2, x23
10001b1f0:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
10001b1f4:     	ldr	x24, [x19, #8]
10001b1f8:     	add	x8, x24, x25, lsl #3
10001b1fc:     	add	x24, x21, x23
10001b200:     	stp	x8, x24, [x19, #8]
10001b204:     	b	0x10001b2e4 <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_back(std::__1::__state<char>*&&)+0x160>
10001b208:     	subs	x8, x24, x21
10001b20c:     	asr	x8, x8, #2
10001b210:     	csinc	x8, x8, xzr, ne
10001b214:     	lsr	x9, x8, #61
10001b218:     	cbnz	x9, 0x10001b310 <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_back(std::__1::__state<char>*&&)+0x18c>
10001b21c:     	lsr	x25, x8, #2
10001b220:     	lsl	x23, x8, #3
10001b224:     	mov	x0, x23
10001b228:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001b22c:     	add	x8, x0, x25, lsl #3
10001b230:     	add	x9, x0, x23
10001b234:     	subs	x10, x24, x22
10001b238:     	mov	x24, x8
10001b23c:     	b.eq	0x10001b2cc <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_back(std::__1::__state<char>*&&)+0x148>
10001b240:     	and	x11, x10, #0xfffffffffffffff8
10001b244:     	add	x24, x8, x11
10001b248:     	sub	x11, x10, #8
10001b24c:     	cmp	x11, #56
10001b250:     	b.hs	0x10001b25c <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_back(std::__1::__state<char>*&&)+0xd8>
10001b254:     	mov	x10, x8
10001b258:     	b	0x10001b2bc <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_back(std::__1::__state<char>*&&)+0x138>
10001b25c:     	lsl	x10, x25, #3
10001b260:     	add	x14, x10, x0
10001b264:     	sub	x12, x14, x22
10001b268:     	mov	x10, x8
10001b26c:     	cmp	x12, #64
10001b270:     	b.lo	0x10001b2bc <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_back(std::__1::__state<char>*&&)+0x138>
10001b274:     	lsr	x10, x11, #3
10001b278:     	add	x11, x10, #1
10001b27c:     	and	x12, x11, #0x3ffffffffffffff8
10001b280:     	lsl	x13, x12, #3
10001b284:     	add	x10, x8, x13
10001b288:     	add	x13, x22, x13
10001b28c:     	add	x14, x14, #32
10001b290:     	add	x15, x22, #32
10001b294:     	mov	x16, x12
10001b298:     	ldp	q0, q1, [x15, #-32]
10001b29c:     	ldp	q2, q3, [x15], #64
10001b2a0:     	stp	q0, q1, [x14, #-32]
10001b2a4:     	stp	q2, q3, [x14], #64
10001b2a8:     	subs	x16, x16, #8
10001b2ac:     	b.ne	0x10001b298 <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_back(std::__1::__state<char>*&&)+0x114>
10001b2b0:     	mov	x22, x13
10001b2b4:     	cmp	x11, x12
10001b2b8:     	b.eq	0x10001b2cc <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_back(std::__1::__state<char>*&&)+0x148>
10001b2bc:     	ldr	x11, [x22], #8
10001b2c0:     	str	x11, [x10], #8
10001b2c4:     	cmp	x10, x24
10001b2c8:     	b.ne	0x10001b2bc <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_back(std::__1::__state<char>*&&)+0x138>
10001b2cc:     	stp	x0, x8, [x19]
10001b2d0:     	stp	x24, x9, [x19, #16]
10001b2d4:     	cbz	x21, 0x10001b2e4 <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_back(std::__1::__state<char>*&&)+0x160>
10001b2d8:     	mov	x0, x21
10001b2dc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001b2e0:     	ldr	x24, [x19, #16]
10001b2e4:     	ldr	x8, [x20]
10001b2e8:     	str	x8, [x24]
10001b2ec:     	ldr	x8, [x19, #16]
10001b2f0:     	add	x8, x8, #8
10001b2f4:     	str	x8, [x19, #16]
10001b2f8:     	ldp	x29, x30, [sp, #64]
10001b2fc:     	ldp	x20, x19, [sp, #48]
10001b300:     	ldp	x22, x21, [sp, #32]
10001b304:     	ldp	x24, x23, [sp, #16]
10001b308:     	ldp	x26, x25, [sp], #80
10001b30c:     	ret
10001b310:     	bl	0x100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>

000000010001b314 <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_front(std::__1::__state<char>*&&)>:
10001b314:     	stp	x26, x25, [sp, #-80]!
10001b318:     	stp	x24, x23, [sp, #16]
10001b31c:     	stp	x22, x21, [sp, #32]
10001b320:     	stp	x20, x19, [sp, #48]
10001b324:     	stp	x29, x30, [sp, #64]
10001b328:     	add	x29, sp, #64
10001b32c:     	mov	x20, x1
10001b330:     	mov	x19, x0
10001b334:     	ldp	x8, x21, [x0]
10001b338:     	cmp	x21, x8
10001b33c:     	b.eq	0x10001b348 <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_front(std::__1::__state<char>*&&)+0x34>
10001b340:     	mov	x22, x21
10001b344:     	b	0x10001b480 <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_front(std::__1::__state<char>*&&)+0x16c>
10001b348:     	ldp	x24, x8, [x19, #16]
10001b34c:     	cmp	x24, x8
10001b350:     	b.hs	0x10001b3a0 <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_front(std::__1::__state<char>*&&)+0x8c>
10001b354:     	sub	x8, x8, x24
10001b358:     	asr	x8, x8, #3
10001b35c:     	add	x9, x8, #1
10001b360:     	add	x10, x8, #2
10001b364:     	cmp	x9, #0
10001b368:     	csinc	x8, x10, x8, lt
10001b36c:     	asr	x23, x8, #1
10001b370:     	add	x8, x24, x23, lsl #3
10001b374:     	subs	x9, x24, x21
10001b378:     	sub	x22, x8, x9
10001b37c:     	subs	x2, x24, x21
10001b380:     	b.eq	0x10001b394 <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_front(std::__1::__state<char>*&&)+0x80>
10001b384:     	mov	x0, x22
10001b388:     	mov	x1, x21
10001b38c:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
10001b390:     	ldr	x21, [x19, #16]
10001b394:     	add	x8, x21, x23, lsl #3
10001b398:     	stp	x22, x8, [x19, #8]
10001b39c:     	b	0x10001b480 <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_front(std::__1::__state<char>*&&)+0x16c>
10001b3a0:     	subs	x8, x8, x21
10001b3a4:     	asr	x8, x8, #2
10001b3a8:     	csinc	x8, x8, xzr, ne
10001b3ac:     	lsr	x9, x8, #61
10001b3b0:     	cbnz	x9, 0x10001b4ac <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_front(std::__1::__state<char>*&&)+0x198>
10001b3b4:     	add	x9, x8, #3
10001b3b8:     	lsr	x25, x9, #2
10001b3bc:     	lsl	x23, x8, #3
10001b3c0:     	mov	x0, x23
10001b3c4:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001b3c8:     	add	x22, x0, x25, lsl #3
10001b3cc:     	add	x8, x0, x23
10001b3d0:     	mov	x9, x22
10001b3d4:     	subs	x10, x24, x21
10001b3d8:     	b.eq	0x10001b468 <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_front(std::__1::__state<char>*&&)+0x154>
10001b3dc:     	and	x9, x10, #0xfffffffffffffff8
10001b3e0:     	add	x9, x22, x9
10001b3e4:     	sub	x12, x10, #8
10001b3e8:     	mov	x10, x22
10001b3ec:     	mov	x11, x21
10001b3f0:     	cmp	x12, #56
10001b3f4:     	b.lo	0x10001b458 <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_front(std::__1::__state<char>*&&)+0x144>
10001b3f8:     	lsl	x10, x25, #3
10001b3fc:     	add	x14, x10, x0
10001b400:     	sub	x13, x14, x21
10001b404:     	mov	x10, x22
10001b408:     	mov	x11, x21
10001b40c:     	cmp	x13, #64
10001b410:     	b.lo	0x10001b458 <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_front(std::__1::__state<char>*&&)+0x144>
10001b414:     	lsr	x10, x12, #3
10001b418:     	add	x12, x10, #1
10001b41c:     	and	x13, x12, #0x3ffffffffffffff8
10001b420:     	lsl	x11, x13, #3
10001b424:     	add	x10, x22, x11
10001b428:     	add	x11, x21, x11
10001b42c:     	add	x14, x14, #32
10001b430:     	add	x15, x21, #32
10001b434:     	mov	x16, x13
10001b438:     	ldp	q0, q1, [x15, #-32]
10001b43c:     	ldp	q2, q3, [x15], #64
10001b440:     	stp	q0, q1, [x14, #-32]
10001b444:     	stp	q2, q3, [x14], #64
10001b448:     	subs	x16, x16, #8
10001b44c:     	b.ne	0x10001b438 <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_front(std::__1::__state<char>*&&)+0x124>
10001b450:     	cmp	x12, x13
10001b454:     	b.eq	0x10001b468 <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_front(std::__1::__state<char>*&&)+0x154>
10001b458:     	ldr	x12, [x11], #8
10001b45c:     	str	x12, [x10], #8
10001b460:     	cmp	x10, x9
10001b464:     	b.ne	0x10001b458 <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_front(std::__1::__state<char>*&&)+0x144>
10001b468:     	stp	x0, x22, [x19]
10001b46c:     	stp	x9, x8, [x19, #16]
10001b470:     	cbz	x21, 0x10001b480 <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_front(std::__1::__state<char>*&&)+0x16c>
10001b474:     	mov	x0, x21
10001b478:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001b47c:     	ldr	x22, [x19, #8]
10001b480:     	ldr	x8, [x20]
10001b484:     	stur	x8, [x22, #-8]
10001b488:     	ldr	x8, [x19, #8]
10001b48c:     	sub	x8, x8, #8
10001b490:     	str	x8, [x19, #8]
10001b494:     	ldp	x29, x30, [sp, #64]
10001b498:     	ldp	x20, x19, [sp, #48]
10001b49c:     	ldp	x22, x21, [sp, #32]
10001b4a0:     	ldp	x24, x23, [sp, #16]
10001b4a4:     	ldp	x26, x25, [sp], #80
10001b4a8:     	ret
10001b4ac:     	bl	0x100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>

000000010001b4b0 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_front_capacity()>:
10001b4b0:     	sub	sp, sp, #112
10001b4b4:     	stp	x28, x27, [sp, #16]
10001b4b8:     	stp	x26, x25, [sp, #32]
10001b4bc:     	stp	x24, x23, [sp, #48]
10001b4c0:     	stp	x22, x21, [sp, #64]
10001b4c4:     	stp	x20, x19, [sp, #80]
10001b4c8:     	stp	x29, x30, [sp, #96]
10001b4cc:     	add	x29, sp, #96
10001b4d0:     	mov	x19, x0
10001b4d4:     	ldp	x24, x23, [x0, #8]
10001b4d8:     	subs	x8, x23, x24
10001b4dc:     	asr	x8, x8, #3
10001b4e0:     	mov	w9, #42
10001b4e4:     	mov	x10, #-1
10001b4e8:     	madd	x9, x8, x9, x10
10001b4ec:     	cmp	x23, x24
10001b4f0:     	csel	x10, xzr, x9, eq
10001b4f4:     	ldp	x9, x11, [x0, #32]
10001b4f8:     	add	x11, x11, x9
10001b4fc:     	sub	x10, x10, x11
10001b500:     	cmp	x10, #42
10001b504:     	b.lo	0x10001b52c <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_front_capacity()+0x7c>
10001b508:     	add	x8, x9, #42
10001b50c:     	str	x8, [x19, #32]
10001b510:     	ldr	x8, [x23, #-8]!
10001b514:     	str	x8, [sp, #8]
10001b518:     	str	x23, [x19, #16]
10001b51c:     	add	x1, sp, #8
10001b520:     	mov	x0, x19
10001b524:     	bl	0x10001b86c <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_front(std::__1::__state<char>* const&)>
10001b528:     	b	0x10001b804 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_front_capacity()+0x354>
10001b52c:     	ldr	x10, [x19, #24]
10001b530:     	ldr	x9, [x19]
10001b534:     	sub	x11, x10, x9
10001b538:     	cmp	x8, x11, asr #3
10001b53c:     	b.hs	0x10001b578 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_front_capacity()+0xc8>
10001b540:     	mov	w0, #4032
10001b544:     	cmp	x24, x9
10001b548:     	b.eq	0x10001b5c4 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_front_capacity()+0x114>
10001b54c:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001b550:     	str	x0, [sp, #8]
10001b554:     	add	x1, sp, #8
10001b558:     	mov	x0, x19
10001b55c:     	bl	0x10001b314 <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_front(std::__1::__state<char>*&&)>
10001b560:     	ldp	x9, x8, [x19, #8]
10001b564:     	sub	x8, x8, x9
10001b568:     	cmp	x8, #8
10001b56c:     	b.ne	0x10001b604 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_front_capacity()+0x154>
10001b570:     	mov	w8, #21
10001b574:     	b	0x10001b60c <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_front_capacity()+0x15c>
10001b578:     	asr	x8, x11, #2
10001b57c:     	cmp	x10, x9
10001b580:     	csinc	x22, x8, xzr, ne
10001b584:     	lsr	x8, x22, #61
10001b588:     	cbnz	x8, 0x10001b82c <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_front_capacity()+0x37c>
10001b58c:     	lsl	x0, x22, #3
10001b590:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001b594:     	mov	x21, x0
10001b598:     	mov	w0, #4032
10001b59c:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001b5a0:     	mov	x20, x0
10001b5a4:     	cbz	x22, 0x10001b614 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_front_capacity()+0x164>
10001b5a8:     	add	x27, x21, x22, lsl #3
10001b5ac:     	mov	x26, x21
10001b5b0:     	str	x20, [x26], #8
10001b5b4:     	mov	x20, x21
10001b5b8:     	cmp	x24, x23
10001b5bc:     	b.ne	0x10001b6c0 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_front_capacity()+0x210>
10001b5c0:     	b	0x10001b648 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_front_capacity()+0x198>
10001b5c4:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001b5c8:     	str	x0, [sp, #8]
10001b5cc:     	add	x1, sp, #8
10001b5d0:     	mov	x0, x19
10001b5d4:     	bl	0x10001b184 <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_back(std::__1::__state<char>*&&)>
10001b5d8:     	ldr	x8, [x19, #16]
10001b5dc:     	ldr	x9, [x8, #-8]!
10001b5e0:     	str	x9, [sp, #8]
10001b5e4:     	str	x8, [x19, #16]
10001b5e8:     	add	x1, sp, #8
10001b5ec:     	mov	x0, x19
10001b5f0:     	bl	0x10001b86c <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_front(std::__1::__state<char>* const&)>
10001b5f4:     	ldp	x9, x8, [x19, #8]
10001b5f8:     	sub	x8, x8, x9
10001b5fc:     	cmp	x8, #8
10001b600:     	b.eq	0x10001b570 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_front_capacity()+0xc0>
10001b604:     	ldr	x8, [x19, #32]
10001b608:     	add	x8, x8, #42
10001b60c:     	str	x8, [x19, #32]
10001b610:     	b	0x10001b804 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_front_capacity()+0x354>
10001b614:     	mov	w0, #8
10001b618:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001b61c:     	mov	x22, x0
10001b620:     	add	x27, x0, #8
10001b624:     	mov	x0, x21
10001b628:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001b62c:     	ldp	x24, x23, [x19, #8]
10001b630:     	mov	x21, x22
10001b634:     	mov	x26, x21
10001b638:     	str	x20, [x26], #8
10001b63c:     	mov	x20, x21
10001b640:     	cmp	x24, x23
10001b644:     	b.ne	0x10001b6c0 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_front_capacity()+0x210>
10001b648:     	mov	x23, x21
10001b64c:     	mov	x25, x26
10001b650:     	ldr	x0, [x19]
10001b654:     	stp	x20, x23, [x19]
10001b658:     	sub	x8, x25, x23
10001b65c:     	stp	x25, x27, [x19, #16]
10001b660:     	cmp	x8, #8
10001b664:     	b.ne	0x10001b7f4 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_front_capacity()+0x344>
10001b668:     	mov	w8, #21
10001b66c:     	str	x8, [x19, #32]
10001b670:     	cbz	x0, 0x10001b804 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_front_capacity()+0x354>
10001b674:     	ldp	x29, x30, [sp, #96]
10001b678:     	ldp	x20, x19, [sp, #80]
10001b67c:     	ldp	x22, x21, [sp, #64]
10001b680:     	ldp	x24, x23, [sp, #48]
10001b684:     	ldp	x26, x25, [sp, #32]
10001b688:     	ldp	x28, x27, [sp, #16]
10001b68c:     	add	sp, sp, #112
10001b690:     	b	0x10002f014 <_vsnprintf+0x10002f014>
10001b694:     	mov	x23, x21
10001b698:     	mov	x25, x26
10001b69c:     	mov	x26, x27
10001b6a0:     	mov	x27, x26
10001b6a4:     	ldr	x8, [x24], #8
10001b6a8:     	str	x8, [x25], #8
10001b6ac:     	ldr	x8, [x19, #16]
10001b6b0:     	mov	x26, x25
10001b6b4:     	mov	x21, x23
10001b6b8:     	cmp	x24, x8
10001b6bc:     	b.eq	0x10001b650 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_front_capacity()+0x1a0>
10001b6c0:     	cmp	x26, x27
10001b6c4:     	b.ne	0x10001b694 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_front_capacity()+0x1e4>
10001b6c8:     	subs	x8, x21, x20
10001b6cc:     	b.ls	0x10001b71c <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_front_capacity()+0x26c>
10001b6d0:     	asr	x8, x8, #3
10001b6d4:     	add	x9, x8, #1
10001b6d8:     	add	x10, x8, #2
10001b6dc:     	cmp	x9, #0
10001b6e0:     	csinc	x8, x10, x8, lt
10001b6e4:     	asr	x8, x8, #1
10001b6e8:     	neg	x27, x8
10001b6ec:     	sub	x22, x21, x8, lsl #3
10001b6f0:     	mov	x8, x26
10001b6f4:     	subs	x23, x26, x21
10001b6f8:     	b.eq	0x10001b710 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_front_capacity()+0x260>
10001b6fc:     	mov	x0, x22
10001b700:     	mov	x1, x21
10001b704:     	mov	x2, x23
10001b708:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
10001b70c:     	mov	x8, x21
10001b710:     	add	x25, x22, x23
10001b714:     	add	x23, x8, x27, lsl #3
10001b718:     	b	0x10001b6a0 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_front_capacity()+0x1f0>
10001b71c:     	subs	x8, x26, x20
10001b720:     	asr	x8, x8, #2
10001b724:     	csinc	x27, x8, xzr, ne
10001b728:     	lsr	x8, x27, #61
10001b72c:     	cbnz	x8, 0x10001b824 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_front_capacity()+0x374>
10001b730:     	lsl	x0, x27, #3
10001b734:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001b738:     	mov	x22, x0
10001b73c:     	lsr	x8, x27, #2
10001b740:     	add	x23, x0, x8, lsl #3
10001b744:     	mov	x25, x23
10001b748:     	subs	x9, x26, x21
10001b74c:     	b.eq	0x10001b790 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_front_capacity()+0x2e0>
10001b750:     	and	x10, x9, #0xfffffffffffffff8
10001b754:     	add	x25, x23, x10
10001b758:     	sub	x9, x9, #8
10001b75c:     	cmp	x9, #56
10001b760:     	b.lo	0x10001b778 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_front_capacity()+0x2c8>
10001b764:     	lsl	x12, x8, #3
10001b768:     	add	x8, x12, x22
10001b76c:     	sub	x8, x8, x21
10001b770:     	cmp	x8, #64
10001b774:     	b.hs	0x10001b7a8 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_front_capacity()+0x2f8>
10001b778:     	mov	x8, x23
10001b77c:     	mov	x9, x21
10001b780:     	ldr	x10, [x9], #8
10001b784:     	str	x10, [x8], #8
10001b788:     	cmp	x8, x25
10001b78c:     	b.ne	0x10001b780 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_front_capacity()+0x2d0>
10001b790:     	add	x26, x22, x27, lsl #3
10001b794:     	cbz	x20, 0x10001b7a0 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_front_capacity()+0x2f0>
10001b798:     	mov	x0, x20
10001b79c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001b7a0:     	mov	x20, x22
10001b7a4:     	b	0x10001b6a0 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_front_capacity()+0x1f0>
10001b7a8:     	lsr	x8, x9, #3
10001b7ac:     	add	x10, x8, #1
10001b7b0:     	and	x11, x10, #0x3ffffffffffffff8
10001b7b4:     	lsl	x9, x11, #3
10001b7b8:     	add	x8, x23, x9
10001b7bc:     	add	x9, x21, x9
10001b7c0:     	add	x12, x22, x12
10001b7c4:     	add	x12, x12, #32
10001b7c8:     	add	x13, x21, #32
10001b7cc:     	mov	x14, x11
10001b7d0:     	ldp	q0, q1, [x13, #-32]
10001b7d4:     	ldp	q2, q3, [x13], #64
10001b7d8:     	stp	q0, q1, [x12, #-32]
10001b7dc:     	stp	q2, q3, [x12], #64
10001b7e0:     	subs	x14, x14, #8
10001b7e4:     	b.ne	0x10001b7d0 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_front_capacity()+0x320>
10001b7e8:     	cmp	x10, x11
10001b7ec:     	b.ne	0x10001b780 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_front_capacity()+0x2d0>
10001b7f0:     	b	0x10001b790 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_front_capacity()+0x2e0>
10001b7f4:     	ldr	x8, [x19, #32]
10001b7f8:     	add	x8, x8, #42
10001b7fc:     	str	x8, [x19, #32]
10001b800:     	cbnz	x0, 0x10001b674 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_front_capacity()+0x1c4>
10001b804:     	ldp	x29, x30, [sp, #96]
10001b808:     	ldp	x20, x19, [sp, #80]
10001b80c:     	ldp	x22, x21, [sp, #64]
10001b810:     	ldp	x24, x23, [sp, #48]
10001b814:     	ldp	x26, x25, [sp, #32]
10001b818:     	ldp	x28, x27, [sp, #16]
10001b81c:     	add	sp, sp, #112
10001b820:     	ret
10001b824:     	bl	0x100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>
10001b828:     	brk	#0x1
10001b82c:     	bl	0x100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>
10001b830:     	mov	x19, x0
10001b834:     	mov	x0, x20
10001b838:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001b83c:     	mov	x20, x21
10001b840:     	b	0x10001b85c <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_front_capacity()+0x3ac>
10001b844:     	mov	x19, x0
10001b848:     	mov	x20, x21
10001b84c:     	b	0x10001b85c <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_front_capacity()+0x3ac>
10001b850:     	b	0x10001b854 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_front_capacity()+0x3a4>
10001b854:     	mov	x19, x0
10001b858:     	cbz	x20, 0x10001b864 <std::__1::deque<std::__1::__state<char>, std::__1::allocator<std::__1::__state<char>>>::__add_front_capacity()+0x3b4>
10001b85c:     	mov	x0, x20
10001b860:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001b864:     	mov	x0, x19
10001b868:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010001b86c <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_front(std::__1::__state<char>* const&)>:
10001b86c:     	stp	x26, x25, [sp, #-80]!
10001b870:     	stp	x24, x23, [sp, #16]
10001b874:     	stp	x22, x21, [sp, #32]
10001b878:     	stp	x20, x19, [sp, #48]
10001b87c:     	stp	x29, x30, [sp, #64]
10001b880:     	add	x29, sp, #64
10001b884:     	mov	x20, x1
10001b888:     	mov	x19, x0
10001b88c:     	ldp	x8, x21, [x0]
10001b890:     	cmp	x21, x8
10001b894:     	b.eq	0x10001b8a0 <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_front(std::__1::__state<char>* const&)+0x34>
10001b898:     	mov	x22, x21
10001b89c:     	b	0x10001b9d8 <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_front(std::__1::__state<char>* const&)+0x16c>
10001b8a0:     	ldp	x24, x8, [x19, #16]
10001b8a4:     	cmp	x24, x8
10001b8a8:     	b.hs	0x10001b8f8 <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_front(std::__1::__state<char>* const&)+0x8c>
10001b8ac:     	sub	x8, x8, x24
10001b8b0:     	asr	x8, x8, #3
10001b8b4:     	add	x9, x8, #1
10001b8b8:     	add	x10, x8, #2
10001b8bc:     	cmp	x9, #0
10001b8c0:     	csinc	x8, x10, x8, lt
10001b8c4:     	asr	x23, x8, #1
10001b8c8:     	add	x8, x24, x23, lsl #3
10001b8cc:     	subs	x9, x24, x21
10001b8d0:     	sub	x22, x8, x9
10001b8d4:     	subs	x2, x24, x21
10001b8d8:     	b.eq	0x10001b8ec <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_front(std::__1::__state<char>* const&)+0x80>
10001b8dc:     	mov	x0, x22
10001b8e0:     	mov	x1, x21
10001b8e4:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
10001b8e8:     	ldr	x21, [x19, #16]
10001b8ec:     	add	x8, x21, x23, lsl #3
10001b8f0:     	stp	x22, x8, [x19, #8]
10001b8f4:     	b	0x10001b9d8 <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_front(std::__1::__state<char>* const&)+0x16c>
10001b8f8:     	subs	x8, x8, x21
10001b8fc:     	asr	x8, x8, #2
10001b900:     	csinc	x8, x8, xzr, ne
10001b904:     	lsr	x9, x8, #61
10001b908:     	cbnz	x9, 0x10001ba04 <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_front(std::__1::__state<char>* const&)+0x198>
10001b90c:     	add	x9, x8, #3
10001b910:     	lsr	x25, x9, #2
10001b914:     	lsl	x23, x8, #3
10001b918:     	mov	x0, x23
10001b91c:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001b920:     	add	x22, x0, x25, lsl #3
10001b924:     	add	x8, x0, x23
10001b928:     	mov	x9, x22
10001b92c:     	subs	x10, x24, x21
10001b930:     	b.eq	0x10001b9c0 <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_front(std::__1::__state<char>* const&)+0x154>
10001b934:     	and	x9, x10, #0xfffffffffffffff8
10001b938:     	add	x9, x22, x9
10001b93c:     	sub	x12, x10, #8
10001b940:     	mov	x10, x22
10001b944:     	mov	x11, x21
10001b948:     	cmp	x12, #56
10001b94c:     	b.lo	0x10001b9b0 <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_front(std::__1::__state<char>* const&)+0x144>
10001b950:     	lsl	x10, x25, #3
10001b954:     	add	x14, x10, x0
10001b958:     	sub	x13, x14, x21
10001b95c:     	mov	x10, x22
10001b960:     	mov	x11, x21
10001b964:     	cmp	x13, #64
10001b968:     	b.lo	0x10001b9b0 <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_front(std::__1::__state<char>* const&)+0x144>
10001b96c:     	lsr	x10, x12, #3
10001b970:     	add	x12, x10, #1
10001b974:     	and	x13, x12, #0x3ffffffffffffff8
10001b978:     	lsl	x11, x13, #3
10001b97c:     	add	x10, x22, x11
10001b980:     	add	x11, x21, x11
10001b984:     	add	x14, x14, #32
10001b988:     	add	x15, x21, #32
10001b98c:     	mov	x16, x13
10001b990:     	ldp	q0, q1, [x15, #-32]
10001b994:     	ldp	q2, q3, [x15], #64
10001b998:     	stp	q0, q1, [x14, #-32]
10001b99c:     	stp	q2, q3, [x14], #64
10001b9a0:     	subs	x16, x16, #8
10001b9a4:     	b.ne	0x10001b990 <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_front(std::__1::__state<char>* const&)+0x124>
10001b9a8:     	cmp	x12, x13
10001b9ac:     	b.eq	0x10001b9c0 <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_front(std::__1::__state<char>* const&)+0x154>
10001b9b0:     	ldr	x12, [x11], #8
10001b9b4:     	str	x12, [x10], #8
10001b9b8:     	cmp	x10, x9
10001b9bc:     	b.ne	0x10001b9b0 <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_front(std::__1::__state<char>* const&)+0x144>
10001b9c0:     	stp	x0, x22, [x19]
10001b9c4:     	stp	x9, x8, [x19, #16]
10001b9c8:     	cbz	x21, 0x10001b9d8 <std::__1::__split_buffer<std::__1::__state<char>*, std::__1::allocator<std::__1::__state<char>*>>::push_front(std::__1::__state<char>* const&)+0x16c>
10001b9cc:     	mov	x0, x21
10001b9d0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001b9d4:     	ldr	x22, [x19, #8]
10001b9d8:     	ldr	x8, [x20]
10001b9dc:     	stur	x8, [x22, #-8]
10001b9e0:     	ldr	x8, [x19, #8]
10001b9e4:     	sub	x8, x8, #8
10001b9e8:     	str	x8, [x19, #8]
10001b9ec:     	ldp	x29, x30, [sp, #64]
10001b9f0:     	ldp	x20, x19, [sp, #48]
10001b9f4:     	ldp	x22, x21, [sp, #32]
10001b9f8:     	ldp	x24, x23, [sp, #16]
10001b9fc:     	ldp	x26, x25, [sp], #80
10001ba00:     	ret
10001ba04:     	bl	0x100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>

000000010001ba08 <void std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::__assign_with_size[abi:ue170006]<std::__1::sub_match<char const*>*, std::__1::sub_match<char const*>*>(std::__1::sub_match<char const*>*, std::__1::sub_match<char const*>*, long)>:
10001ba08:     	stp	x24, x23, [sp, #-64]!
10001ba0c:     	stp	x22, x21, [sp, #16]
10001ba10:     	stp	x20, x19, [sp, #32]
10001ba14:     	stp	x29, x30, [sp, #48]
10001ba18:     	add	x29, sp, #48
10001ba1c:     	mov	x23, x3
10001ba20:     	mov	x20, x2
10001ba24:     	mov	x21, x1
10001ba28:     	mov	x19, x0
10001ba2c:     	ldr	x8, [x0, #16]
10001ba30:     	ldr	x0, [x0]
10001ba34:     	sub	x9, x8, x0
10001ba38:     	asr	x10, x9, #3
10001ba3c:     	mov	x9, #-6148914691236517206
10001ba40:     	movk	x9, #43691
10001ba44:     	mul	x10, x10, x9
10001ba48:     	cmp	x10, x3
10001ba4c:     	b.hs	0x10001bb24 <void std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::__assign_with_size[abi:ue170006]<std::__1::sub_match<char const*>*, std::__1::sub_match<char const*>*>(std::__1::sub_match<char const*>*, std::__1::sub_match<char const*>*, long)+0x11c>
10001ba50:     	cbz	x0, 0x10001ba68 <void std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::__assign_with_size[abi:ue170006]<std::__1::sub_match<char const*>*, std::__1::sub_match<char const*>*>(std::__1::sub_match<char const*>*, std::__1::sub_match<char const*>*, long)+0x60>
10001ba54:     	str	x0, [x19, #8]
10001ba58:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001ba5c:     	mov	x8, #0
10001ba60:     	stp	xzr, xzr, [x19]
10001ba64:     	str	xzr, [x19, #16]
10001ba68:     	mov	x9, #-6148914691236517206
10001ba6c:     	movk	x9, #2730, lsl #48
10001ba70:     	cmp	x23, x9
10001ba74:     	b.hi	0x10001bbec <void std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::__assign_with_size[abi:ue170006]<std::__1::sub_match<char const*>*, std::__1::sub_match<char const*>*>(std::__1::sub_match<char const*>*, std::__1::sub_match<char const*>*, long)+0x1e4>
10001ba78:     	asr	x8, x8, #3
10001ba7c:     	mov	x10, #-6148914691236517206
10001ba80:     	movk	x10, #43691
10001ba84:     	mul	x8, x8, x10
10001ba88:     	lsl	x10, x8, #1
10001ba8c:     	cmp	x10, x23
10001ba90:     	csel	x10, x10, x23, hi
10001ba94:     	mov	x11, #6148914691236517205
10001ba98:     	movk	x11, #1365, lsl #48
10001ba9c:     	cmp	x8, x11
10001baa0:     	csel	x8, x10, x9, lo
10001baa4:     	cmp	x8, x9
10001baa8:     	b.hi	0x10001bbec <void std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::__assign_with_size[abi:ue170006]<std::__1::sub_match<char const*>*, std::__1::sub_match<char const*>*>(std::__1::sub_match<char const*>*, std::__1::sub_match<char const*>*, long)+0x1e4>
10001baac:     	add	x8, x8, x8, lsl #1
10001bab0:     	lsl	x23, x8, #3
10001bab4:     	mov	x0, x23
10001bab8:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001babc:     	mov	x22, x0
10001bac0:     	str	x0, [x19]
10001bac4:     	mov	x24, x19
10001bac8:     	str	x0, [x24, #8]!
10001bacc:     	add	x8, x0, x23
10001bad0:     	str	x8, [x19, #16]
10001bad4:     	mov	x8, x0
10001bad8:     	cmp	x21, x20
10001badc:     	b.eq	0x10001bb18 <void std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::__assign_with_size[abi:ue170006]<std::__1::sub_match<char const*>*, std::__1::sub_match<char const*>*>(std::__1::sub_match<char const*>*, std::__1::sub_match<char const*>*, long)+0x110>
10001bae0:     	sub	x8, x20, x21
10001bae4:     	sub	x8, x8, #24
10001bae8:     	mov	x9, #-6148914691236517206
10001baec:     	movk	x9, #43691
10001baf0:     	umulh	x8, x8, x9
10001baf4:     	lsr	x8, x8, #4
10001baf8:     	mov	w9, #24
10001bafc:     	mov	x10, #24
10001bb00:     	madd	x19, x8, x9, x10
10001bb04:     	mov	x0, x22
10001bb08:     	mov	x1, x21
10001bb0c:     	mov	x2, x19
10001bb10:     	bl	0x10002f1c4 <_vsnprintf+0x10002f1c4>
10001bb14:     	add	x8, x19, x22
10001bb18:     	sub	x8, x8, x22
10001bb1c:     	mov	x19, x24
10001bb20:     	b	0x10001bbd0 <void std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::__assign_with_size[abi:ue170006]<std::__1::sub_match<char const*>*, std::__1::sub_match<char const*>*>(std::__1::sub_match<char const*>*, std::__1::sub_match<char const*>*, long)+0x1c8>
10001bb24:     	ldr	x22, [x19, #8]!
10001bb28:     	sub	x8, x22, x0
10001bb2c:     	asr	x8, x8, #3
10001bb30:     	mul	x8, x8, x9
10001bb34:     	cmp	x8, x23
10001bb38:     	b.hs	0x10001bb9c <void std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::__assign_with_size[abi:ue170006]<std::__1::sub_match<char const*>*, std::__1::sub_match<char const*>*>(std::__1::sub_match<char const*>*, std::__1::sub_match<char const*>*, long)+0x194>
10001bb3c:     	mov	w9, #24
10001bb40:     	madd	x8, x8, x9, x21
10001bb44:     	cmp	x22, x0
10001bb48:     	b.eq	0x10001bb6c <void std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::__assign_with_size[abi:ue170006]<std::__1::sub_match<char const*>*, std::__1::sub_match<char const*>*>(std::__1::sub_match<char const*>*, std::__1::sub_match<char const*>*, long)+0x164>
10001bb4c:     	ldp	x9, x10, [x21]
10001bb50:     	stp	x9, x10, [x0]
10001bb54:     	ldrb	w9, [x21, #16]
10001bb58:     	strb	w9, [x0, #16]
10001bb5c:     	add	x21, x21, #24
10001bb60:     	add	x0, x0, #24
10001bb64:     	cmp	x21, x8
10001bb68:     	b.ne	0x10001bb4c <void std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::__assign_with_size[abi:ue170006]<std::__1::sub_match<char const*>*, std::__1::sub_match<char const*>*>(std::__1::sub_match<char const*>*, std::__1::sub_match<char const*>*, long)+0x144>
10001bb6c:     	mov	x9, x22
10001bb70:     	cmp	x8, x20
10001bb74:     	b.eq	0x10001bb94 <void std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::__assign_with_size[abi:ue170006]<std::__1::sub_match<char const*>*, std::__1::sub_match<char const*>*>(std::__1::sub_match<char const*>*, std::__1::sub_match<char const*>*, long)+0x18c>
10001bb78:     	ldr	q0, [x8]
10001bb7c:     	ldr	x10, [x8, #16]
10001bb80:     	str	x10, [x9, #16]
10001bb84:     	str	q0, [x9], #24
10001bb88:     	add	x8, x8, #24
10001bb8c:     	cmp	x8, x20
10001bb90:     	b.ne	0x10001bb78 <void std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::__assign_with_size[abi:ue170006]<std::__1::sub_match<char const*>*, std::__1::sub_match<char const*>*>(std::__1::sub_match<char const*>*, std::__1::sub_match<char const*>*, long)+0x170>
10001bb94:     	sub	x8, x9, x22
10001bb98:     	b	0x10001bbd0 <void std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::__assign_with_size[abi:ue170006]<std::__1::sub_match<char const*>*, std::__1::sub_match<char const*>*>(std::__1::sub_match<char const*>*, std::__1::sub_match<char const*>*, long)+0x1c8>
10001bb9c:     	mov	x8, x0
10001bba0:     	cmp	x21, x20
10001bba4:     	b.eq	0x10001bbc8 <void std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::__assign_with_size[abi:ue170006]<std::__1::sub_match<char const*>*, std::__1::sub_match<char const*>*>(std::__1::sub_match<char const*>*, std::__1::sub_match<char const*>*, long)+0x1c0>
10001bba8:     	ldp	x9, x10, [x21]
10001bbac:     	stp	x9, x10, [x8]
10001bbb0:     	ldrb	w9, [x21, #16]
10001bbb4:     	strb	w9, [x8, #16]
10001bbb8:     	add	x8, x8, #24
10001bbbc:     	add	x21, x21, #24
10001bbc0:     	cmp	x21, x20
10001bbc4:     	b.ne	0x10001bba8 <void std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::__assign_with_size[abi:ue170006]<std::__1::sub_match<char const*>*, std::__1::sub_match<char const*>*>(std::__1::sub_match<char const*>*, std::__1::sub_match<char const*>*, long)+0x1a0>
10001bbc8:     	sub	x8, x8, x0
10001bbcc:     	mov	x22, x0
10001bbd0:     	add	x8, x22, x8
10001bbd4:     	str	x8, [x19]
10001bbd8:     	ldp	x29, x30, [sp, #48]
10001bbdc:     	ldp	x20, x19, [sp, #32]
10001bbe0:     	ldp	x22, x21, [sp, #16]
10001bbe4:     	ldp	x24, x23, [sp], #64
10001bbe8:     	ret
10001bbec:     	mov	x0, x19
10001bbf0:     	bl	0x100012b28 <std::__1::vector<std::__1::sub_match<char const*>, std::__1::allocator<std::__1::sub_match<char const*>>>::__throw_length_error[abi:ue170006]() const>

000000010001bbf4 <void std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__assign_with_size[abi:ue170006]<std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*>(std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*, long)>:
10001bbf4:     	stp	x24, x23, [sp, #-64]!
10001bbf8:     	stp	x22, x21, [sp, #16]
10001bbfc:     	stp	x20, x19, [sp, #32]
10001bc00:     	stp	x29, x30, [sp, #48]
10001bc04:     	add	x29, sp, #48
10001bc08:     	mov	x23, x3
10001bc0c:     	mov	x20, x2
10001bc10:     	mov	x22, x1
10001bc14:     	mov	x19, x0
10001bc18:     	ldr	x8, [x0, #16]
10001bc1c:     	ldr	x0, [x0]
10001bc20:     	sub	x9, x8, x0
10001bc24:     	cmp	x3, x9, asr #4
10001bc28:     	b.ls	0x10001bcd0 <void std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__assign_with_size[abi:ue170006]<std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*>(std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*, long)+0xdc>
10001bc2c:     	cbz	x0, 0x10001bc44 <void std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__assign_with_size[abi:ue170006]<std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*>(std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*, long)+0x50>
10001bc30:     	str	x0, [x19, #8]
10001bc34:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001bc38:     	mov	x8, #0
10001bc3c:     	stp	xzr, xzr, [x19]
10001bc40:     	str	xzr, [x19, #16]
10001bc44:     	lsr	x9, x23, #60
10001bc48:     	cbnz	x9, 0x10001befc <void std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__assign_with_size[abi:ue170006]<std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*>(std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*, long)+0x308>
10001bc4c:     	asr	x9, x8, #3
10001bc50:     	cmp	x9, x23
10001bc54:     	csel	x9, x9, x23, hi
10001bc58:     	mov	x10, #9223372036854775792
10001bc5c:     	mov	x11, #1152921504606846975
10001bc60:     	cmp	x8, x10
10001bc64:     	csel	x8, x9, x11, lo
10001bc68:     	lsr	x9, x8, #60
10001bc6c:     	cbnz	x9, 0x10001befc <void std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__assign_with_size[abi:ue170006]<std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*>(std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*, long)+0x308>
10001bc70:     	lsl	x23, x8, #4
10001bc74:     	mov	x0, x23
10001bc78:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001bc7c:     	mov	x21, x0
10001bc80:     	str	x0, [x19]
10001bc84:     	mov	x24, x19
10001bc88:     	str	x0, [x24, #8]!
10001bc8c:     	add	x8, x0, x23
10001bc90:     	str	x8, [x19, #16]
10001bc94:     	mov	x8, x0
10001bc98:     	cmp	x22, x20
10001bc9c:     	b.eq	0x10001bcc4 <void std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__assign_with_size[abi:ue170006]<std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*>(std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*, long)+0xd0>
10001bca0:     	sub	x8, x20, x22
10001bca4:     	sub	x8, x8, #16
10001bca8:     	and	x8, x8, #0xfffffffffffffff0
10001bcac:     	add	x19, x8, #16
10001bcb0:     	mov	x0, x21
10001bcb4:     	mov	x1, x22
10001bcb8:     	mov	x2, x19
10001bcbc:     	bl	0x10002f1c4 <_vsnprintf+0x10002f1c4>
10001bcc0:     	add	x8, x19, x21
10001bcc4:     	sub	x8, x8, x21
10001bcc8:     	mov	x19, x24
10001bccc:     	b	0x10001bd78 <void std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__assign_with_size[abi:ue170006]<std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*>(std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*, long)+0x184>
10001bcd0:     	ldr	x21, [x19, #8]!
10001bcd4:     	sub	x10, x21, x0
10001bcd8:     	asr	x8, x10, #4
10001bcdc:     	cmp	x8, x23
10001bce0:     	b.hs	0x10001bd38 <void std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__assign_with_size[abi:ue170006]<std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*>(std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*, long)+0x144>
10001bce4:     	add	x8, x22, x8, lsl #4
10001bce8:     	cmp	x21, x0
10001bcec:     	b.eq	0x10001bd14 <void std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__assign_with_size[abi:ue170006]<std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*>(std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*, long)+0x120>
10001bcf0:     	sub	x9, x10, #16
10001bcf4:     	cmp	x9, #240
10001bcf8:     	b.hs	0x10001bd94 <void std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__assign_with_size[abi:ue170006]<std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*>(std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*, long)+0x1a0>
10001bcfc:     	mov	x9, x0
10001bd00:     	mov	x10, x22
10001bd04:     	ldp	x11, x12, [x10], #16
10001bd08:     	stp	x11, x12, [x9], #16
10001bd0c:     	cmp	x10, x8
10001bd10:     	b.ne	0x10001bd04 <void std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__assign_with_size[abi:ue170006]<std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*>(std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*, long)+0x110>
10001bd14:     	mov	x9, x21
10001bd18:     	cmp	x8, x20
10001bd1c:     	b.eq	0x10001bd30 <void std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__assign_with_size[abi:ue170006]<std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*>(std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*, long)+0x13c>
10001bd20:     	ldr	q0, [x8], #16
10001bd24:     	str	q0, [x9], #16
10001bd28:     	cmp	x8, x20
10001bd2c:     	b.ne	0x10001bd20 <void std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__assign_with_size[abi:ue170006]<std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*>(std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*, long)+0x12c>
10001bd30:     	sub	x8, x9, x21
10001bd34:     	b	0x10001bd78 <void std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__assign_with_size[abi:ue170006]<std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*>(std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*, long)+0x184>
10001bd38:     	cmp	x22, x20
10001bd3c:     	b.eq	0x10001bd6c <void std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__assign_with_size[abi:ue170006]<std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*>(std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*, long)+0x178>
10001bd40:     	sub	x8, x20, x22
10001bd44:     	sub	x8, x8, #16
10001bd48:     	cmp	x8, #240
10001bd4c:     	b.hs	0x10001be44 <void std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__assign_with_size[abi:ue170006]<std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*>(std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*, long)+0x250>
10001bd50:     	mov	x8, x0
10001bd54:     	mov	x9, x22
10001bd58:     	ldp	x10, x11, [x9], #16
10001bd5c:     	stp	x10, x11, [x8], #16
10001bd60:     	cmp	x9, x20
10001bd64:     	b.ne	0x10001bd58 <void std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__assign_with_size[abi:ue170006]<std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*>(std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*, long)+0x164>
10001bd68:     	b	0x10001bd70 <void std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__assign_with_size[abi:ue170006]<std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*>(std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*, long)+0x17c>
10001bd6c:     	mov	x8, x0
10001bd70:     	sub	x8, x8, x0
10001bd74:     	mov	x21, x0
10001bd78:     	add	x8, x21, x8
10001bd7c:     	str	x8, [x19]
10001bd80:     	ldp	x29, x30, [sp, #48]
10001bd84:     	ldp	x20, x19, [sp, #32]
10001bd88:     	ldp	x22, x21, [sp, #16]
10001bd8c:     	ldp	x24, x23, [sp], #64
10001bd90:     	ret
10001bd94:     	and	x10, x10, #0xfffffffffffffff0
10001bd98:     	add	x11, x0, x10
10001bd9c:     	sub	x12, x11, #8
10001bda0:     	add	x13, x0, #8
10001bda4:     	add	x10, x22, x10
10001bda8:     	cmp	x13, x10
10001bdac:     	sub	x13, x10, #8
10001bdb0:     	add	x10, x22, #8
10001bdb4:     	ccmp	x10, x11, #2, lo
10001bdb8:     	cset	w10, lo
10001bdbc:     	cmp	x12, x22
10001bdc0:     	ccmp	x0, x13, #2, hi
10001bdc4:     	b.lo	0x10001bcfc <void std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__assign_with_size[abi:ue170006]<std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*>(std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*, long)+0x108>
10001bdc8:     	tbnz	w10, #0, 0x10001bcfc <void std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__assign_with_size[abi:ue170006]<std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*>(std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*, long)+0x108>
10001bdcc:     	lsr	x9, x9, #4
10001bdd0:     	add	x11, x9, #1
10001bdd4:     	and	x12, x11, #0x1ffffffffffffff8
10001bdd8:     	lsl	x10, x12, #4
10001bddc:     	add	x9, x0, x10
10001bde0:     	add	x10, x22, x10
10001bde4:     	add	x15, x0, #64
10001bde8:     	add	x13, x22, #64
10001bdec:     	mov	x14, x12
10001bdf0:     	sub	x16, x13, #64
10001bdf4:     	ld2.2d	{ v0, v1 }, [x16]
10001bdf8:     	sub	x16, x13, #32
10001bdfc:     	ld2.2d	{ v2, v3 }, [x16]
10001be00:     	mov	x16, x13
10001be04:     	ld2.2d	{ v4, v5 }, [x16], #32
10001be08:     	ld2.2d	{ v6, v7 }, [x16]
10001be0c:     	sub	x16, x15, #64
10001be10:     	st2.2d	{ v0, v1 }, [x16]
10001be14:     	sub	x16, x15, #32
10001be18:     	st2.2d	{ v2, v3 }, [x16]
10001be1c:     	add	x16, x15, #128
10001be20:     	st2.2d	{ v4, v5 }, [x15], #32
10001be24:     	st2.2d	{ v6, v7 }, [x15]
10001be28:     	add	x13, x13, #128
10001be2c:     	mov	x15, x16
10001be30:     	subs	x14, x14, #8
10001be34:     	b.ne	0x10001bdf0 <void std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__assign_with_size[abi:ue170006]<std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*>(std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*, long)+0x1fc>
10001be38:     	cmp	x11, x12
10001be3c:     	b.ne	0x10001bd04 <void std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__assign_with_size[abi:ue170006]<std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*>(std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*, long)+0x110>
10001be40:     	b	0x10001bd14 <void std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__assign_with_size[abi:ue170006]<std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*>(std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*, long)+0x120>
10001be44:     	and	x9, x8, #0xfffffffffffffff0
10001be48:     	add	x10, x0, x9
10001be4c:     	add	x11, x10, #8
10001be50:     	add	x9, x22, x9
10001be54:     	add	x12, x9, #8
10001be58:     	add	x13, x0, #8
10001be5c:     	add	x10, x10, #16
10001be60:     	add	x14, x22, #8
10001be64:     	add	x9, x9, #16
10001be68:     	cmp	x13, x9
10001be6c:     	ccmp	x14, x10, #2, lo
10001be70:     	cset	w9, lo
10001be74:     	cmp	x11, x22
10001be78:     	ccmp	x0, x12, #2, hi
10001be7c:     	b.lo	0x10001bd50 <void std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__assign_with_size[abi:ue170006]<std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*>(std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*, long)+0x15c>
10001be80:     	tbnz	w9, #0, 0x10001bd50 <void std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__assign_with_size[abi:ue170006]<std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*>(std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*, long)+0x15c>
10001be84:     	lsr	x8, x8, #4
10001be88:     	add	x10, x8, #1
10001be8c:     	and	x11, x10, #0x1ffffffffffffff8
10001be90:     	lsl	x9, x11, #4
10001be94:     	add	x8, x0, x9
10001be98:     	add	x9, x22, x9
10001be9c:     	add	x14, x0, #64
10001bea0:     	add	x12, x22, #64
10001bea4:     	mov	x13, x11
10001bea8:     	sub	x15, x12, #64
10001beac:     	ld2.2d	{ v0, v1 }, [x15]
10001beb0:     	sub	x15, x12, #32
10001beb4:     	ld2.2d	{ v2, v3 }, [x15]
10001beb8:     	mov	x15, x12
10001bebc:     	ld2.2d	{ v4, v5 }, [x15], #32
10001bec0:     	ld2.2d	{ v6, v7 }, [x15]
10001bec4:     	sub	x15, x14, #64
10001bec8:     	st2.2d	{ v0, v1 }, [x15]
10001becc:     	sub	x15, x14, #32
10001bed0:     	st2.2d	{ v2, v3 }, [x15]
10001bed4:     	add	x15, x14, #128
10001bed8:     	st2.2d	{ v4, v5 }, [x14], #32
10001bedc:     	st2.2d	{ v6, v7 }, [x14]
10001bee0:     	add	x12, x12, #128
10001bee4:     	mov	x14, x15
10001bee8:     	subs	x13, x13, #8
10001beec:     	b.ne	0x10001bea8 <void std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__assign_with_size[abi:ue170006]<std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*>(std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*, long)+0x2b4>
10001bef0:     	cmp	x10, x11
10001bef4:     	b.ne	0x10001bd58 <void std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__assign_with_size[abi:ue170006]<std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*>(std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*, long)+0x164>
10001bef8:     	b	0x10001bd70 <void std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__assign_with_size[abi:ue170006]<std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*>(std::__1::pair<unsigned long, char const*>*, std::__1::pair<unsigned long, char const*>*, long)+0x17c>
10001befc:     	mov	x0, x19
10001bf00:     	bl	0x100013150 <std::__1::vector<std::__1::pair<unsigned long, char const*>, std::__1::allocator<std::__1::pair<unsigned long, char const*>>>::__throw_length_error[abi:ue170006]() const>

000000010001bf04 <void std::__1::vector<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>, std::__1::allocator<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>>::__push_back_slow_path<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>(std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>&&)>:
10001bf04:     	stp	x22, x21, [sp, #-48]!
10001bf08:     	stp	x20, x19, [sp, #16]
10001bf0c:     	stp	x29, x30, [sp, #32]
10001bf10:     	add	x29, sp, #32
10001bf14:     	mov	x19, x0
10001bf18:     	ldp	x8, x9, [x0]
10001bf1c:     	sub	x9, x9, x8
10001bf20:     	asr	x21, x9, #3
10001bf24:     	add	x9, x21, #1
10001bf28:     	lsr	x10, x9, #61
10001bf2c:     	cbnz	x10, 0x10001c020 <void std::__1::vector<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>, std::__1::allocator<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>>::__push_back_slow_path<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>(std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>&&)+0x11c>
10001bf30:     	mov	x20, x1
10001bf34:     	ldr	x10, [x19, #16]
10001bf38:     	mov	x11, #9223372036854775800
10001bf3c:     	sub	x8, x10, x8
10001bf40:     	asr	x10, x8, #2
10001bf44:     	cmp	x10, x9
10001bf48:     	csel	x9, x10, x9, hi
10001bf4c:     	cmp	x8, x11
10001bf50:     	mov	x8, #2305843009213693951
10001bf54:     	csel	x22, x9, x8, lo
10001bf58:     	cbz	x22, 0x10001bf70 <void std::__1::vector<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>, std::__1::allocator<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>>::__push_back_slow_path<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>(std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>&&)+0x6c>
10001bf5c:     	lsr	x8, x22, #61
10001bf60:     	cbnz	x8, 0x10001c028 <void std::__1::vector<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>, std::__1::allocator<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>>::__push_back_slow_path<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>(std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>&&)+0x124>
10001bf64:     	lsl	x0, x22, #3
10001bf68:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001bf6c:     	b	0x10001bf74 <void std::__1::vector<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>, std::__1::allocator<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>>::__push_back_slow_path<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>(std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>&&)+0x70>
10001bf70:     	mov	x0, #0
10001bf74:     	add	x9, x0, x21, lsl #3
10001bf78:     	add	x8, x0, x22, lsl #3
10001bf7c:     	ldr	x11, [x20]
10001bf80:     	str	xzr, [x20]
10001bf84:     	mov	x10, x9
10001bf88:     	str	x11, [x10], #8
10001bf8c:     	ldp	x11, x20, [x19]
10001bf90:     	cmp	x20, x11
10001bf94:     	b.eq	0x10001c004 <void std::__1::vector<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>, std::__1::allocator<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>>::__push_back_slow_path<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>(std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>&&)+0x100>
10001bf98:     	ldr	x12, [x20, #-8]!
10001bf9c:     	str	xzr, [x20]
10001bfa0:     	str	x12, [x9, #-8]!
10001bfa4:     	cmp	x20, x11
10001bfa8:     	b.ne	0x10001bf98 <void std::__1::vector<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>, std::__1::allocator<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>>::__push_back_slow_path<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>(std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>&&)+0x94>
10001bfac:     	ldp	x21, x20, [x19]
10001bfb0:     	stp	x9, x10, [x19]
10001bfb4:     	str	x8, [x19, #16]
10001bfb8:     	cmp	x20, x21
10001bfbc:     	b.ne	0x10001bfcc <void std::__1::vector<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>, std::__1::allocator<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>>::__push_back_slow_path<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>(std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>&&)+0xc8>
10001bfc0:     	b	0x10001bfec <void std::__1::vector<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>, std::__1::allocator<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>>::__push_back_slow_path<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>(std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>&&)+0xe8>
10001bfc4:     	cmp	x20, x21
10001bfc8:     	b.eq	0x10001bfe8 <void std::__1::vector<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>, std::__1::allocator<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>>::__push_back_slow_path<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>(std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>&&)+0xe4>
10001bfcc:     	ldr	x0, [x20, #-8]!
10001bfd0:     	str	xzr, [x20]
10001bfd4:     	cbz	x0, 0x10001bfc4 <void std::__1::vector<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>, std::__1::allocator<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>>::__push_back_slow_path<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>(std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>&&)+0xc0>
10001bfd8:     	ldr	x8, [x0]
10001bfdc:     	ldr	x8, [x8, #8]
10001bfe0:     	blr	x8
10001bfe4:     	b	0x10001bfc4 <void std::__1::vector<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>, std::__1::allocator<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>>::__push_back_slow_path<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>(std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>&&)+0xc0>
10001bfe8:     	mov	x20, x21
10001bfec:     	cbz	x20, 0x10001c010 <void std::__1::vector<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>, std::__1::allocator<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>>::__push_back_slow_path<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>(std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>&&)+0x10c>
10001bff0:     	mov	x0, x20
10001bff4:     	ldp	x29, x30, [sp, #32]
10001bff8:     	ldp	x20, x19, [sp, #16]
10001bffc:     	ldp	x22, x21, [sp], #48
10001c000:     	b	0x10002f014 <_vsnprintf+0x10002f014>
10001c004:     	stp	x9, x10, [x19]
10001c008:     	str	x8, [x19, #16]
10001c00c:     	cbnz	x20, 0x10001bff0 <void std::__1::vector<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>, std::__1::allocator<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>>::__push_back_slow_path<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>(std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>&&)+0xec>
10001c010:     	ldp	x29, x30, [sp, #32]
10001c014:     	ldp	x20, x19, [sp, #16]
10001c018:     	ldp	x22, x21, [sp], #48
10001c01c:     	ret
10001c020:     	mov	x0, x19
10001c024:     	bl	0x10001c02c <std::__1::vector<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>, std::__1::allocator<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>>::__throw_length_error[abi:ue170006]() const>
10001c028:     	bl	0x100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>

000000010001c02c <std::__1::vector<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>, std::__1::allocator<std::__1::unique_ptr<benchmark::internal::Benchmark, std::__1::default_delete<benchmark::internal::Benchmark>>>>::__throw_length_error[abi:ue170006]() const>:
10001c02c:     	stp	x29, x30, [sp, #-16]!
10001c030:     	mov	x29, sp
10001c034:     	adrp	x0, 0x100031000 <void std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::__push_back_slow_path<benchmark::internal::BenchmarkInstance>(benchmark::internal::BenchmarkInstance&&)+0x20>
10001c038:     	add	x0, x0, #3485
10001c03c:     	bl	0x100006a48 <std::__1::__throw_length_error[abi:ue170006](char const*)>

000000010001c040 <std::__1::vector<int, std::__1::allocator<int>>::__throw_length_error[abi:ue170006]() const>:
10001c040:     	stp	x29, x30, [sp, #-16]!
10001c044:     	mov	x29, sp
10001c048:     	adrp	x0, 0x100031000 <void std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::__push_back_slow_path<benchmark::internal::BenchmarkInstance>(benchmark::internal::BenchmarkInstance&&)+0x34>
10001c04c:     	add	x0, x0, #3485
10001c050:     	bl	0x100006a48 <std::__1::__throw_length_error[abi:ue170006](char const*)>

000000010001c054 <std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::__throw_length_error[abi:ue170006]() const>:
10001c054:     	stp	x29, x30, [sp, #-16]!
10001c058:     	mov	x29, sp
10001c05c:     	adrp	x0, 0x100031000 <void std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::__push_back_slow_path<benchmark::internal::BenchmarkInstance>(benchmark::internal::BenchmarkInstance&&)+0x48>
10001c060:     	add	x0, x0, #3485
10001c064:     	bl	0x100006a48 <std::__1::__throw_length_error[abi:ue170006](char const*)>

000000010001c068 <void std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::__push_back_slow_path<benchmark::internal::BenchmarkInstance>(benchmark::internal::BenchmarkInstance&&)>:
10001c068:     	stp	x24, x23, [sp, #-64]!
10001c06c:     	stp	x22, x21, [sp, #16]
10001c070:     	stp	x20, x19, [sp, #32]
10001c074:     	stp	x29, x30, [sp, #48]
10001c078:     	add	x29, sp, #48
10001c07c:     	mov	x19, x0
10001c080:     	mov	x8, #12483
10001c084:     	movk	x8, #49932, lsl #16
10001c088:     	movk	x8, #3120, lsl #32
10001c08c:     	movk	x8, #195, lsl #48
10001c090:     	ldp	x9, x10, [x0]
10001c094:     	sub	x22, x10, x9
10001c098:     	asr	x10, x22, #4
10001c09c:     	mov	x11, #53053
10001c0a0:     	movk	x11, #15603, lsl #16
10001c0a4:     	movk	x11, #62415, lsl #32
10001c0a8:     	movk	x11, #53052, lsl #48
10001c0ac:     	mul	x23, x10, x11
10001c0b0:     	add	x10, x23, #1
10001c0b4:     	cmp	x10, x8
10001c0b8:     	b.hi	0x10001c420 <void std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::__push_back_slow_path<benchmark::internal::BenchmarkInstance>(benchmark::internal::BenchmarkInstance&&)+0x3b8>
10001c0bc:     	mov	x20, x1
10001c0c0:     	ldr	x12, [x19, #16]
10001c0c4:     	sub	x9, x12, x9
10001c0c8:     	asr	x9, x9, #4
10001c0cc:     	mul	x9, x9, x11
10001c0d0:     	lsl	x11, x9, #1
10001c0d4:     	cmp	x11, x10
10001c0d8:     	csel	x10, x11, x10, hi
10001c0dc:     	mov	x11, #6241
10001c0e0:     	movk	x11, #24966, lsl #16
10001c0e4:     	movk	x11, #34328, lsl #32
10001c0e8:     	movk	x11, #97, lsl #48
10001c0ec:     	cmp	x9, x11
10001c0f0:     	csel	x21, x10, x8, lo
10001c0f4:     	cbz	x21, 0x10001c110 <void std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::__push_back_slow_path<benchmark::internal::BenchmarkInstance>(benchmark::internal::BenchmarkInstance&&)+0xa8>
10001c0f8:     	cmp	x21, x8
10001c0fc:     	b.hi	0x10001c428 <void std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::__push_back_slow_path<benchmark::internal::BenchmarkInstance>(benchmark::internal::BenchmarkInstance&&)+0x3c0>
10001c100:     	mov	w8, #336
10001c104:     	mul	x0, x21, x8
10001c108:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001c10c:     	b	0x10001c114 <void std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::__push_back_slow_path<benchmark::internal::BenchmarkInstance>(benchmark::internal::BenchmarkInstance&&)+0xac>
10001c110:     	mov	x0, #0
10001c114:     	mov	w9, #336
10001c118:     	ldr	q0, [x20]
10001c11c:     	madd	x8, x23, x9, x0
10001c120:     	str	q0, [x8]
10001c124:     	ldr	x10, [x20, #16]
10001c128:     	str	x10, [x8, #16]
10001c12c:     	stp	xzr, xzr, [x20]
10001c130:     	ldur	q0, [x20, #24]
10001c134:     	stp	xzr, xzr, [x20, #16]
10001c138:     	stur	q0, [x8, #24]
10001c13c:     	ldr	x10, [x20, #40]
10001c140:     	str	x10, [x8, #40]
10001c144:     	stp	xzr, xzr, [x20, #32]
10001c148:     	ldr	x10, [x20, #64]
10001c14c:     	str	x10, [x8, #64]
10001c150:     	ldr	q0, [x20, #48]
10001c154:     	str	q0, [x8, #48]
10001c158:     	stp	xzr, xzr, [x20, #48]
10001c15c:     	ldur	q0, [x20, #72]
10001c160:     	ldr	x10, [x20, #88]
10001c164:     	str	x10, [x8, #88]
10001c168:     	stur	q0, [x8, #72]
10001c16c:     	stp	xzr, xzr, [x20, #64]
10001c170:     	stp	xzr, xzr, [x20, #80]
10001c174:     	ldr	q0, [x20, #96]
10001c178:     	ldr	x10, [x20, #112]
10001c17c:     	str	x10, [x8, #112]
10001c180:     	str	q0, [x8, #96]
10001c184:     	stp	xzr, xzr, [x20, #96]
10001c188:     	ldur	q0, [x20, #120]
10001c18c:     	ldr	x10, [x20, #136]
10001c190:     	str	x10, [x8, #136]
10001c194:     	stur	q0, [x8, #120]
10001c198:     	stp	xzr, xzr, [x20, #112]
10001c19c:     	stp	xzr, xzr, [x20, #128]
10001c1a0:     	ldr	q0, [x20, #144]
10001c1a4:     	ldr	x10, [x20, #160]
10001c1a8:     	str	x10, [x8, #160]
10001c1ac:     	str	q0, [x8, #144]
10001c1b0:     	stp	xzr, xzr, [x20, #144]
10001c1b4:     	ldur	q0, [x20, #168]
10001c1b8:     	ldr	x10, [x20, #184]
10001c1bc:     	str	x10, [x8, #184]
10001c1c0:     	stur	q0, [x8, #168]
10001c1c4:     	stp	xzr, xzr, [x20, #160]
10001c1c8:     	stp	xzr, xzr, [x20, #176]
10001c1cc:     	add	x10, x0, x22
10001c1d0:     	ldr	q2, [x20, #224]
10001c1d4:     	ldp	q1, q0, [x20, #192]
10001c1d8:     	stp	q0, q2, [x10, #208]
10001c1dc:     	str	q1, [x10, #192]
10001c1e0:     	ldp	x11, x12, [x20, #240]
10001c1e4:     	stp	x11, x12, [x10, #240]
10001c1e8:     	add	x11, x10, #256
10001c1ec:     	ldp	x12, x13, [x20, #256]
10001c1f0:     	stp	x12, x13, [x10, #256]
10001c1f4:     	cbz	x13, 0x10001c20c <void std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::__push_back_slow_path<benchmark::internal::BenchmarkInstance>(benchmark::internal::BenchmarkInstance&&)+0x1a4>
10001c1f8:     	add	x13, x20, #256
10001c1fc:     	str	x11, [x12, #16]
10001c200:     	str	x13, [x20, #248]
10001c204:     	stp	xzr, xzr, [x13]
10001c208:     	b	0x10001c210 <void std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::__push_back_slow_path<benchmark::internal::BenchmarkInstance>(benchmark::internal::BenchmarkInstance&&)+0x1a8>
10001c20c:     	str	x11, [x10, #248]
10001c210:     	madd	x9, x21, x9, x0
10001c214:     	ldp	q0, q1, [x20, #272]
10001c218:     	stp	q0, q1, [x10, #272]
10001c21c:     	ldp	q0, q1, [x20, #304]
10001c220:     	stp	q0, q1, [x10, #304]
10001c224:     	add	x10, x8, #336
10001c228:     	ldp	x11, x20, [x19]
10001c22c:     	cmp	x20, x11
10001c230:     	b.eq	0x10001c3e0 <void std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::__push_back_slow_path<benchmark::internal::BenchmarkInstance>(benchmark::internal::BenchmarkInstance&&)+0x378>
10001c234:     	mov	x12, #0
10001c238:     	b	0x10001c270 <void std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::__push_back_slow_path<benchmark::internal::BenchmarkInstance>(benchmark::internal::BenchmarkInstance&&)+0x208>
10001c23c:     	str	x16, [x17, #16]
10001c240:     	stur	x15, [x13, #-88]
10001c244:     	stp	xzr, xzr, [x15]
10001c248:     	add	x13, x8, x12
10001c24c:     	add	x14, x20, x12
10001c250:     	ldp	q0, q1, [x14, #-64]
10001c254:     	ldp	q2, q3, [x14, #-32]
10001c258:     	stp	q2, q3, [x13, #-32]
10001c25c:     	stp	q0, q1, [x13, #-64]
10001c260:     	sub	x12, x12, #336
10001c264:     	add	x13, x20, x12
10001c268:     	cmp	x13, x11
10001c26c:     	b.eq	0x10001c39c <void std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::__push_back_slow_path<benchmark::internal::BenchmarkInstance>(benchmark::internal::BenchmarkInstance&&)+0x334>
10001c270:     	add	x14, x8, x12
10001c274:     	sub	x15, x14, #336
10001c278:     	add	x13, x20, x12
10001c27c:     	sub	x16, x13, #336
10001c280:     	ldr	q0, [x16]
10001c284:     	ldr	x17, [x16, #16]
10001c288:     	str	x17, [x15, #16]
10001c28c:     	str	q0, [x15]
10001c290:     	stp	xzr, xzr, [x16, #8]
10001c294:     	str	xzr, [x16]
10001c298:     	sub	x15, x14, #312
10001c29c:     	sub	x16, x13, #312
10001c2a0:     	ldr	q0, [x16]
10001c2a4:     	ldr	x17, [x16, #16]
10001c2a8:     	str	x17, [x15, #16]
10001c2ac:     	str	q0, [x15]
10001c2b0:     	stp	xzr, xzr, [x16, #8]
10001c2b4:     	str	xzr, [x16]
10001c2b8:     	sub	x15, x14, #288
10001c2bc:     	sub	x16, x13, #288
10001c2c0:     	ldr	q0, [x16]
10001c2c4:     	ldr	x17, [x16, #16]
10001c2c8:     	str	x17, [x15, #16]
10001c2cc:     	str	q0, [x15]
10001c2d0:     	stp	xzr, xzr, [x16, #8]
10001c2d4:     	str	xzr, [x16]
10001c2d8:     	sub	x15, x14, #264
10001c2dc:     	sub	x16, x13, #264
10001c2e0:     	ldr	q0, [x16]
10001c2e4:     	ldur	x17, [x13, #-248]
10001c2e8:     	stur	x17, [x14, #-248]
10001c2ec:     	str	q0, [x15]
10001c2f0:     	str	xzr, [x16]
10001c2f4:     	stp	xzr, xzr, [x13, #-256]
10001c2f8:     	ldur	q0, [x13, #-240]
10001c2fc:     	ldur	x15, [x13, #-224]
10001c300:     	stur	x15, [x14, #-224]
10001c304:     	stur	q0, [x14, #-240]
10001c308:     	stp	xzr, xzr, [x13, #-240]
10001c30c:     	stur	xzr, [x13, #-224]
10001c310:     	ldur	q0, [x13, #-216]
10001c314:     	ldur	x15, [x13, #-200]
10001c318:     	stur	x15, [x14, #-200]
10001c31c:     	stur	q0, [x14, #-216]
10001c320:     	stp	xzr, xzr, [x13, #-216]
10001c324:     	stur	xzr, [x13, #-200]
10001c328:     	ldur	q0, [x13, #-192]
10001c32c:     	ldur	x15, [x13, #-176]
10001c330:     	stur	x15, [x14, #-176]
10001c334:     	stur	q0, [x14, #-192]
10001c338:     	stp	xzr, xzr, [x13, #-192]
10001c33c:     	stur	xzr, [x13, #-176]
10001c340:     	ldur	q0, [x13, #-168]
10001c344:     	ldur	x15, [x13, #-152]
10001c348:     	stur	x15, [x14, #-152]
10001c34c:     	stur	q0, [x14, #-168]
10001c350:     	stp	xzr, xzr, [x13, #-168]
10001c354:     	stur	xzr, [x13, #-152]
10001c358:     	ldp	q0, q1, [x13, #-144]
10001c35c:     	ldur	q2, [x13, #-112]
10001c360:     	ldur	x15, [x13, #-96]
10001c364:     	stur	x15, [x14, #-96]
10001c368:     	stp	q1, q2, [x14, #-128]
10001c36c:     	stur	q0, [x14, #-144]
10001c370:     	ldur	x15, [x13, #-88]
10001c374:     	stur	x15, [x14, #-88]
10001c378:     	mov	x15, x13
10001c37c:     	ldr	x17, [x15, #-80]!
10001c380:     	mov	x16, x14
10001c384:     	str	x17, [x16, #-80]!
10001c388:     	ldur	x0, [x13, #-72]
10001c38c:     	stur	x0, [x14, #-72]
10001c390:     	cbnz	x0, 0x10001c23c <void std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::__push_back_slow_path<benchmark::internal::BenchmarkInstance>(benchmark::internal::BenchmarkInstance&&)+0x1d4>
10001c394:     	stur	x16, [x14, #-88]
10001c398:     	b	0x10001c248 <void std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::__push_back_slow_path<benchmark::internal::BenchmarkInstance>(benchmark::internal::BenchmarkInstance&&)+0x1e0>
10001c39c:     	add	x11, x8, x12
10001c3a0:     	ldp	x20, x8, [x19]
10001c3a4:     	stp	x11, x10, [x19]
10001c3a8:     	str	x9, [x19, #16]
10001c3ac:     	cmp	x8, x20
10001c3b0:     	b.eq	0x10001c404 <void std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::__push_back_slow_path<benchmark::internal::BenchmarkInstance>(benchmark::internal::BenchmarkInstance&&)+0x39c>
10001c3b4:     	sub	x19, x8, #88
10001c3b8:     	sub	x21, x19, #248
10001c3bc:     	ldr	x1, [x19, #8]
10001c3c0:     	mov	x0, x19
10001c3c4:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
10001c3c8:     	mov	x0, x21
10001c3cc:     	bl	0x1000090c8 <benchmark::BenchmarkName::~BenchmarkName()>
10001c3d0:     	sub	x19, x19, #336
10001c3d4:     	cmp	x21, x20
10001c3d8:     	b.ne	0x10001c3b8 <void std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::__push_back_slow_path<benchmark::internal::BenchmarkInstance>(benchmark::internal::BenchmarkInstance&&)+0x350>
10001c3dc:     	b	0x10001c3e8 <void std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::__push_back_slow_path<benchmark::internal::BenchmarkInstance>(benchmark::internal::BenchmarkInstance&&)+0x380>
10001c3e0:     	stp	x8, x10, [x19]
10001c3e4:     	str	x9, [x19, #16]
10001c3e8:     	cbz	x20, 0x10001c40c <void std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::__push_back_slow_path<benchmark::internal::BenchmarkInstance>(benchmark::internal::BenchmarkInstance&&)+0x3a4>
10001c3ec:     	mov	x0, x20
10001c3f0:     	ldp	x29, x30, [sp, #48]
10001c3f4:     	ldp	x20, x19, [sp, #32]
10001c3f8:     	ldp	x22, x21, [sp, #16]
10001c3fc:     	ldp	x24, x23, [sp], #64
10001c400:     	b	0x10002f014 <_vsnprintf+0x10002f014>
10001c404:     	mov	x20, x8
10001c408:     	cbnz	x8, 0x10001c3ec <void std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::__push_back_slow_path<benchmark::internal::BenchmarkInstance>(benchmark::internal::BenchmarkInstance&&)+0x384>
10001c40c:     	ldp	x29, x30, [sp, #48]
10001c410:     	ldp	x20, x19, [sp, #32]
10001c414:     	ldp	x22, x21, [sp, #16]
10001c418:     	ldp	x24, x23, [sp], #64
10001c41c:     	ret
10001c420:     	mov	x0, x19
10001c424:     	bl	0x10001c054 <std::__1::vector<benchmark::internal::BenchmarkInstance, std::__1::allocator<benchmark::internal::BenchmarkInstance>>::__throw_length_error[abi:ue170006]() const>
10001c428:     	bl	0x100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>

000000010001c42c <void std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__push_back_slow_path<std::__1::vector<long long, std::__1::allocator<long long>>>(std::__1::vector<long long, std::__1::allocator<long long>>&&)>:
10001c42c:     	stp	x24, x23, [sp, #-64]!
10001c430:     	stp	x22, x21, [sp, #16]
10001c434:     	stp	x20, x19, [sp, #32]
10001c438:     	stp	x29, x30, [sp, #48]
10001c43c:     	add	x29, sp, #48
10001c440:     	mov	x19, x0
10001c444:     	mov	x8, #-6148914691236517206
10001c448:     	movk	x8, #2730, lsl #48
10001c44c:     	ldp	x9, x10, [x0]
10001c450:     	sub	x22, x10, x9
10001c454:     	asr	x10, x22, #3
10001c458:     	mov	x11, #-6148914691236517206
10001c45c:     	movk	x11, #43691
10001c460:     	mul	x23, x10, x11
10001c464:     	add	x10, x23, #1
10001c468:     	cmp	x10, x8
10001c46c:     	b.hi	0x10001c598 <void std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__push_back_slow_path<std::__1::vector<long long, std::__1::allocator<long long>>>(std::__1::vector<long long, std::__1::allocator<long long>>&&)+0x16c>
10001c470:     	ldr	x12, [x19, #16]
10001c474:     	sub	x9, x12, x9
10001c478:     	asr	x9, x9, #3
10001c47c:     	mul	x9, x9, x11
10001c480:     	lsl	x11, x9, #1
10001c484:     	cmp	x11, x10
10001c488:     	csel	x10, x11, x10, hi
10001c48c:     	mov	x11, #6148914691236517205
10001c490:     	movk	x11, #1365, lsl #48
10001c494:     	cmp	x9, x11
10001c498:     	csel	x9, x10, x8, lo
10001c49c:     	cmp	x9, x8
10001c4a0:     	b.hi	0x10001c5a0 <void std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__push_back_slow_path<std::__1::vector<long long, std::__1::allocator<long long>>>(std::__1::vector<long long, std::__1::allocator<long long>>&&)+0x174>
10001c4a4:     	mov	x20, x1
10001c4a8:     	add	x8, x9, x9, lsl #1
10001c4ac:     	lsl	x21, x8, #3
10001c4b0:     	mov	x0, x21
10001c4b4:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001c4b8:     	mov	w8, #24
10001c4bc:     	madd	x8, x23, x8, x0
10001c4c0:     	stp	xzr, xzr, [x8, #8]
10001c4c4:     	add	x9, x0, x21
10001c4c8:     	add	x10, x0, x22
10001c4cc:     	ldp	x11, x12, [x20]
10001c4d0:     	str	x11, [x8]
10001c4d4:     	ldr	x11, [x20, #16]
10001c4d8:     	stp	x12, x11, [x10, #8]
10001c4dc:     	stp	xzr, xzr, [x20, #8]
10001c4e0:     	str	xzr, [x20]
10001c4e4:     	add	x10, x8, #24
10001c4e8:     	ldp	x11, x0, [x19]
10001c4ec:     	cmp	x0, x11
10001c4f0:     	b.eq	0x10001c578 <void std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__push_back_slow_path<std::__1::vector<long long, std::__1::allocator<long long>>>(std::__1::vector<long long, std::__1::allocator<long long>>&&)+0x14c>
10001c4f4:     	ldr	x12, [x0, #-24]!
10001c4f8:     	str	x12, [x8, #-24]!
10001c4fc:     	ldr	x12, [x0, #8]
10001c500:     	str	x12, [x8, #8]
10001c504:     	ldr	x12, [x0, #16]
10001c508:     	str	x12, [x8, #16]
10001c50c:     	stp	xzr, xzr, [x0]
10001c510:     	str	xzr, [x0, #16]
10001c514:     	cmp	x0, x11
10001c518:     	b.ne	0x10001c4f4 <void std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__push_back_slow_path<std::__1::vector<long long, std::__1::allocator<long long>>>(std::__1::vector<long long, std::__1::allocator<long long>>&&)+0xc8>
10001c51c:     	ldp	x20, x0, [x19]
10001c520:     	stp	x8, x10, [x19]
10001c524:     	str	x9, [x19, #16]
10001c528:     	cmp	x0, x20
10001c52c:     	b.eq	0x10001c560 <void std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__push_back_slow_path<std::__1::vector<long long, std::__1::allocator<long long>>>(std::__1::vector<long long, std::__1::allocator<long long>>&&)+0x134>
10001c530:     	mov	x19, x0
10001c534:     	b	0x10001c544 <void std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__push_back_slow_path<std::__1::vector<long long, std::__1::allocator<long long>>>(std::__1::vector<long long, std::__1::allocator<long long>>&&)+0x118>
10001c538:     	mov	x0, x19
10001c53c:     	cmp	x19, x20
10001c540:     	b.eq	0x10001c55c <void std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__push_back_slow_path<std::__1::vector<long long, std::__1::allocator<long long>>>(std::__1::vector<long long, std::__1::allocator<long long>>&&)+0x130>
10001c544:     	ldr	x8, [x19, #-24]!
10001c548:     	cbz	x8, 0x10001c538 <void std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__push_back_slow_path<std::__1::vector<long long, std::__1::allocator<long long>>>(std::__1::vector<long long, std::__1::allocator<long long>>&&)+0x10c>
10001c54c:     	stur	x8, [x0, #-16]
10001c550:     	mov	x0, x8
10001c554:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001c558:     	b	0x10001c538 <void std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__push_back_slow_path<std::__1::vector<long long, std::__1::allocator<long long>>>(std::__1::vector<long long, std::__1::allocator<long long>>&&)+0x10c>
10001c55c:     	mov	x0, x20
10001c560:     	cbz	x0, 0x10001c584 <void std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__push_back_slow_path<std::__1::vector<long long, std::__1::allocator<long long>>>(std::__1::vector<long long, std::__1::allocator<long long>>&&)+0x158>
10001c564:     	ldp	x29, x30, [sp, #48]
10001c568:     	ldp	x20, x19, [sp, #32]
10001c56c:     	ldp	x22, x21, [sp, #16]
10001c570:     	ldp	x24, x23, [sp], #64
10001c574:     	b	0x10002f014 <_vsnprintf+0x10002f014>
10001c578:     	stp	x8, x10, [x19]
10001c57c:     	str	x9, [x19, #16]
10001c580:     	cbnz	x0, 0x10001c564 <void std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__push_back_slow_path<std::__1::vector<long long, std::__1::allocator<long long>>>(std::__1::vector<long long, std::__1::allocator<long long>>&&)+0x138>
10001c584:     	ldp	x29, x30, [sp, #48]
10001c588:     	ldp	x20, x19, [sp, #32]
10001c58c:     	ldp	x22, x21, [sp, #16]
10001c590:     	ldp	x24, x23, [sp], #64
10001c594:     	ret
10001c598:     	mov	x0, x19
10001c59c:     	bl	0x10001c610 <std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__throw_length_error[abi:ue170006]() const>
10001c5a0:     	bl	0x100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>

000000010001c5a4 <std::__1::__split_buffer<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>&>::~__split_buffer()>:
10001c5a4:     	stp	x20, x19, [sp, #-32]!
10001c5a8:     	stp	x29, x30, [sp, #16]
10001c5ac:     	add	x29, sp, #16
10001c5b0:     	mov	x19, x0
10001c5b4:     	ldp	x20, x8, [x0, #8]
10001c5b8:     	cmp	x8, x20
10001c5bc:     	b.ne	0x10001c5d8 <std::__1::__split_buffer<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>&>::~__split_buffer()+0x34>
10001c5c0:     	b	0x10001c5f4 <std::__1::__split_buffer<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>&>::~__split_buffer()+0x50>
10001c5c4:     	stur	x0, [x8, #-16]
10001c5c8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001c5cc:     	ldr	x8, [x19, #16]
10001c5d0:     	cmp	x8, x20
10001c5d4:     	b.eq	0x10001c5f4 <std::__1::__split_buffer<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>&>::~__split_buffer()+0x50>
10001c5d8:     	mov	x9, x8
10001c5dc:     	ldr	x0, [x9, #-24]!
10001c5e0:     	str	x9, [x19, #16]
10001c5e4:     	cbnz	x0, 0x10001c5c4 <std::__1::__split_buffer<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>&>::~__split_buffer()+0x20>
10001c5e8:     	mov	x8, x9
10001c5ec:     	cmp	x9, x20
10001c5f0:     	b.ne	0x10001c5d8 <std::__1::__split_buffer<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>&>::~__split_buffer()+0x34>
10001c5f4:     	ldr	x0, [x19]
10001c5f8:     	cbz	x0, 0x10001c600 <std::__1::__split_buffer<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>&>::~__split_buffer()+0x5c>
10001c5fc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001c600:     	mov	x0, x19
10001c604:     	ldp	x29, x30, [sp, #16]
10001c608:     	ldp	x20, x19, [sp], #32
10001c60c:     	ret

000000010001c610 <std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__throw_length_error[abi:ue170006]() const>:
10001c610:     	stp	x29, x30, [sp, #-16]!
10001c614:     	mov	x29, sp
10001c618:     	adrp	x0, 0x100031000 <void benchmark::internal::AddNegatedPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x48>
10001c61c:     	add	x0, x0, #3485
10001c620:     	bl	0x100006a48 <std::__1::__throw_length_error[abi:ue170006](char const*)>

000000010001c624 <void benchmark::internal::AddNegatedPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)>:
10001c624:     	sub	sp, sp, #64
10001c628:     	stp	x20, x19, [sp, #32]
10001c62c:     	stp	x29, x30, [sp, #48]
10001c630:     	add	x29, sp, #48
10001c634:     	mov	x19, x0
10001c638:     	adrp	x8, 0x100038000 <void benchmark::internal::AddNegatedPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x84>
10001c63c:     	add	x8, x8, #8
10001c640:     	ldaprb	w9, [x8]
10001c644:     	tbz	w9, #0, 0x10001c734 <void benchmark::internal::AddNegatedPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x110>
10001c648:     	ldaprb	w9, [x8]
10001c64c:     	tbz	w9, #0, 0x10001c790 <void benchmark::internal::AddNegatedPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x16c>
10001c650:     	ldaprb	w9, [x8]
10001c654:     	tbz	w9, #0, 0x10001c7ec <void benchmark::internal::AddNegatedPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x1c8>
10001c658:     	ldaprb	w8, [x8]
10001c65c:     	tbz	w8, #0, 0x10001c848 <void benchmark::internal::AddNegatedPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x224>
10001c660:     	neg	x8, x1
10001c664:     	neg	x1, x2
10001c668:     	mov	x0, x19
10001c66c:     	mov	x2, x8
10001c670:     	bl	0x10001c894 <std::__1::vector<long long, std::__1::allocator<long long>>::iterator benchmark::internal::AddPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)>
10001c674:     	ldr	x8, [x19, #8]
10001c678:     	subs	x9, x8, x0
10001c67c:     	b.eq	0x10001c6ec <void benchmark::internal::AddNegatedPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0xc8>
10001c680:     	sub	x10, x9, #8
10001c684:     	mov	x9, x0
10001c688:     	cmp	x10, #56
10001c68c:     	b.lo	0x10001c6d8 <void benchmark::internal::AddNegatedPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0xb4>
10001c690:     	lsr	x9, x10, #3
10001c694:     	add	x10, x9, #1
10001c698:     	and	x11, x10, #0x3ffffffffffffff8
10001c69c:     	add	x9, x0, x11, lsl #3
10001c6a0:     	add	x12, x0, #32
10001c6a4:     	mov	x13, x11
10001c6a8:     	ldp	q0, q1, [x12, #-32]
10001c6ac:     	ldp	q2, q3, [x12]
10001c6b0:     	neg.2d	v0, v0
10001c6b4:     	neg.2d	v1, v1
10001c6b8:     	neg.2d	v2, v2
10001c6bc:     	neg.2d	v3, v3
10001c6c0:     	stp	q0, q1, [x12, #-32]
10001c6c4:     	stp	q2, q3, [x12], #64
10001c6c8:     	subs	x13, x13, #8
10001c6cc:     	b.ne	0x10001c6a8 <void benchmark::internal::AddNegatedPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x84>
10001c6d0:     	cmp	x10, x11
10001c6d4:     	b.eq	0x10001c6ec <void benchmark::internal::AddNegatedPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0xc8>
10001c6d8:     	ldr	x10, [x9]
10001c6dc:     	neg	x10, x10
10001c6e0:     	str	x10, [x9], #8
10001c6e4:     	cmp	x9, x8
10001c6e8:     	b.ne	0x10001c6d8 <void benchmark::internal::AddNegatedPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0xb4>
10001c6ec:     	cmp	x8, x0
10001c6f0:     	b.eq	0x10001c724 <void benchmark::internal::AddNegatedPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x100>
10001c6f4:     	sub	x8, x8, #8
10001c6f8:     	cmp	x8, x0
10001c6fc:     	b.ls	0x10001c724 <void benchmark::internal::AddNegatedPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x100>
10001c700:     	add	x9, x0, #8
10001c704:     	ldur	x10, [x9, #-8]
10001c708:     	ldr	x11, [x8]
10001c70c:     	stur	x11, [x9, #-8]
10001c710:     	str	x10, [x8], #-8
10001c714:     	add	x10, x9, #8
10001c718:     	cmp	x9, x8
10001c71c:     	mov	x9, x10
10001c720:     	b.lo	0x10001c704 <void benchmark::internal::AddNegatedPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0xe0>
10001c724:     	ldp	x29, x30, [sp, #48]
10001c728:     	ldp	x20, x19, [sp, #32]
10001c72c:     	add	sp, sp, #64
10001c730:     	ret
10001c734:     	adrp	x0, 0x100038000 <void benchmark::internal::AddNegatedPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x180>
10001c738:     	add	x0, x0, #8
10001c73c:     	str	w3, [sp, #20]
10001c740:     	str	x2, [sp, #8]
10001c744:     	str	x1, [sp, #24]
10001c748:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10001c74c:     	adrp	x8, 0x100038000 <void benchmark::internal::AddNegatedPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x198>
10001c750:     	add	x8, x8, #8
10001c754:     	ldr	x1, [sp, #24]
10001c758:     	ldr	x2, [sp, #8]
10001c75c:     	ldr	w3, [sp, #20]
10001c760:     	cbz	w0, 0x10001c648 <void benchmark::internal::AddNegatedPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x24>
10001c764:     	adrp	x8, 0x100038000 <void benchmark::internal::AddNegatedPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x1b0>
10001c768:     	str	xzr, [x8]
10001c76c:     	adrp	x0, 0x100038000 <void benchmark::internal::AddNegatedPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x1b8>
10001c770:     	add	x0, x0, #8
10001c774:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10001c778:     	adrp	x8, 0x100038000 <void benchmark::internal::AddNegatedPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x1c4>
10001c77c:     	add	x8, x8, #8
10001c780:     	ldr	x1, [sp, #24]
10001c784:     	ldr	x2, [sp, #8]
10001c788:     	ldr	w3, [sp, #20]
10001c78c:     	b	0x10001c648 <void benchmark::internal::AddNegatedPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x24>
10001c790:     	adrp	x0, 0x100038000 <void benchmark::internal::AddNegatedPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x1dc>
10001c794:     	add	x0, x0, #8
10001c798:     	str	w3, [sp, #20]
10001c79c:     	str	x2, [sp, #8]
10001c7a0:     	str	x1, [sp, #24]
10001c7a4:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10001c7a8:     	adrp	x8, 0x100038000 <void benchmark::internal::AddNegatedPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x1f4>
10001c7ac:     	add	x8, x8, #8
10001c7b0:     	ldr	x1, [sp, #24]
10001c7b4:     	ldr	x2, [sp, #8]
10001c7b8:     	ldr	w3, [sp, #20]
10001c7bc:     	cbz	w0, 0x10001c650 <void benchmark::internal::AddNegatedPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x2c>
10001c7c0:     	adrp	x8, 0x100038000 <void benchmark::internal::AddNegatedPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x20c>
10001c7c4:     	str	xzr, [x8]
10001c7c8:     	adrp	x0, 0x100038000 <void benchmark::internal::AddNegatedPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x214>
10001c7cc:     	add	x0, x0, #8
10001c7d0:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10001c7d4:     	adrp	x8, 0x100038000 <void benchmark::internal::AddNegatedPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x220>
10001c7d8:     	add	x8, x8, #8
10001c7dc:     	ldr	x1, [sp, #24]
10001c7e0:     	ldr	x2, [sp, #8]
10001c7e4:     	ldr	w3, [sp, #20]
10001c7e8:     	b	0x10001c650 <void benchmark::internal::AddNegatedPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x2c>
10001c7ec:     	adrp	x0, 0x100038000 <void benchmark::internal::AddNegatedPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x238>
10001c7f0:     	add	x0, x0, #8
10001c7f4:     	str	w3, [sp, #20]
10001c7f8:     	str	x2, [sp, #8]
10001c7fc:     	str	x1, [sp, #24]
10001c800:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10001c804:     	adrp	x8, 0x100038000 <void benchmark::internal::AddNegatedPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x250>
10001c808:     	add	x8, x8, #8
10001c80c:     	ldr	x1, [sp, #24]
10001c810:     	ldr	x2, [sp, #8]
10001c814:     	ldr	w3, [sp, #20]
10001c818:     	cbz	w0, 0x10001c658 <void benchmark::internal::AddNegatedPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x34>
10001c81c:     	adrp	x8, 0x100038000 <void benchmark::internal::AddNegatedPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x268>
10001c820:     	str	xzr, [x8]
10001c824:     	adrp	x0, 0x100038000 <std::__1::vector<long long, std::__1::allocator<long long>>::iterator benchmark::internal::AddPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)>
10001c828:     	add	x0, x0, #8
10001c82c:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10001c830:     	adrp	x8, 0x100038000 <std::__1::vector<long long, std::__1::allocator<long long>>::iterator benchmark::internal::AddPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0xc>
10001c834:     	add	x8, x8, #8
10001c838:     	ldr	x1, [sp, #24]
10001c83c:     	ldr	x2, [sp, #8]
10001c840:     	ldr	w3, [sp, #20]
10001c844:     	b	0x10001c658 <void benchmark::internal::AddNegatedPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x34>
10001c848:     	adrp	x0, 0x100038000 <std::__1::vector<long long, std::__1::allocator<long long>>::iterator benchmark::internal::AddPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x24>
10001c84c:     	add	x0, x0, #8
10001c850:     	str	w3, [sp, #20]
10001c854:     	str	x2, [sp, #8]
10001c858:     	str	x1, [sp, #24]
10001c85c:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10001c860:     	ldr	x1, [sp, #24]
10001c864:     	ldr	x2, [sp, #8]
10001c868:     	ldr	w3, [sp, #20]
10001c86c:     	cbz	w0, 0x10001c660 <void benchmark::internal::AddNegatedPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x3c>
10001c870:     	adrp	x8, 0x100038000 <std::__1::vector<long long, std::__1::allocator<long long>>::iterator benchmark::internal::AddPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x4c>
10001c874:     	str	xzr, [x8]
10001c878:     	adrp	x0, 0x100038000 <std::__1::vector<long long, std::__1::allocator<long long>>::iterator benchmark::internal::AddPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x54>
10001c87c:     	add	x0, x0, #8
10001c880:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10001c884:     	ldr	x1, [sp, #24]
10001c888:     	ldr	x2, [sp, #8]
10001c88c:     	ldr	w3, [sp, #20]
10001c890:     	b	0x10001c660 <void benchmark::internal::AddNegatedPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x3c>

000000010001c894 <std::__1::vector<long long, std::__1::allocator<long long>>::iterator benchmark::internal::AddPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)>:
10001c894:     	sub	sp, sp, #128
10001c898:     	stp	x28, x27, [sp, #32]
10001c89c:     	stp	x26, x25, [sp, #48]
10001c8a0:     	stp	x24, x23, [sp, #64]
10001c8a4:     	stp	x22, x21, [sp, #80]
10001c8a8:     	stp	x20, x19, [sp, #96]
10001c8ac:     	stp	x29, x30, [sp, #112]
10001c8b0:     	add	x29, sp, #112
10001c8b4:     	mov	x22, x3
10001c8b8:     	mov	x20, x2
10001c8bc:     	mov	x21, x1
10001c8c0:     	mov	x19, x0
10001c8c4:     	adrp	x23, 0x100038000 <std::__1::vector<long long, std::__1::allocator<long long>>::iterator benchmark::internal::AddPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0xa0>
10001c8c8:     	add	x23, x23, #8
10001c8cc:     	ldaprb	w8, [x23]
10001c8d0:     	tbz	w8, #0, 0x10001cad8 <std::__1::vector<long long, std::__1::allocator<long long>>::iterator benchmark::internal::AddPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x244>
10001c8d4:     	ldaprb	w8, [x23]
10001c8d8:     	tbz	w8, #0, 0x10001cb00 <std::__1::vector<long long, std::__1::allocator<long long>>::iterator benchmark::internal::AddPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x26c>
10001c8dc:     	ldaprb	w8, [x23]
10001c8e0:     	tbz	w8, #0, 0x10001cb28 <std::__1::vector<long long, std::__1::allocator<long long>>::iterator benchmark::internal::AddPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x294>
10001c8e4:     	ldp	x10, x9, [x19]
10001c8e8:     	cmp	x20, #1
10001c8ec:     	b.lt	0x10001ca9c <std::__1::vector<long long, std::__1::allocator<long long>>::iterator benchmark::internal::AddPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x208>
10001c8f0:     	stp	x10, x9, [sp, #8]
10001c8f4:     	sxtw	x25, w22
10001c8f8:     	mov	w26, #1
10001c8fc:     	mov	x8, #9223372036854775807
10001c900:     	sdiv	x24, x8, x25
10001c904:     	b	0x10001c920 <std::__1::vector<long long, std::__1::allocator<long long>>::iterator benchmark::internal::AddPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x8c>
10001c908:     	str	x26, [x27], #8
10001c90c:     	str	x27, [x19, #8]
10001c910:     	cmp	x26, x24
10001c914:     	mul	x26, x26, x25
10001c918:     	ccmp	x26, x20, #0, le
10001c91c:     	b.gt	0x10001ca90 <std::__1::vector<long long, std::__1::allocator<long long>>::iterator benchmark::internal::AddPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x1fc>
10001c920:     	cmp	x26, x21
10001c924:     	b.lt	0x10001c910 <std::__1::vector<long long, std::__1::allocator<long long>>::iterator benchmark::internal::AddPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x7c>
10001c928:     	ldp	x27, x8, [x19, #8]
10001c92c:     	cmp	x27, x8
10001c930:     	b.ne	0x10001c908 <std::__1::vector<long long, std::__1::allocator<long long>>::iterator benchmark::internal::AddPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x74>
10001c934:     	mov	x23, x25
10001c938:     	mov	x25, x20
10001c93c:     	mov	x20, x21
10001c940:     	ldr	x22, [x19]
10001c944:     	sub	x21, x27, x22
10001c948:     	asr	x28, x21, #3
10001c94c:     	add	x8, x28, #1
10001c950:     	lsr	x9, x8, #61
10001c954:     	cbnz	x9, 0x10001cacc <std::__1::vector<long long, std::__1::allocator<long long>>::iterator benchmark::internal::AddPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x238>
10001c958:     	asr	x9, x21, #2
10001c95c:     	cmp	x9, x8
10001c960:     	csel	x8, x9, x8, hi
10001c964:     	mov	x9, #9223372036854775800
10001c968:     	cmp	x21, x9
10001c96c:     	mov	x9, #2305843009213693951
10001c970:     	csel	x9, x8, x9, lo
10001c974:     	str	x9, [sp, #24]
10001c978:     	cbz	x9, 0x10001c9c4 <std::__1::vector<long long, std::__1::allocator<long long>>::iterator benchmark::internal::AddPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x130>
10001c97c:     	lsr	x8, x9, #61
10001c980:     	cbnz	x8, 0x10001cad4 <std::__1::vector<long long, std::__1::allocator<long long>>::iterator benchmark::internal::AddPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x240>
10001c984:     	lsl	x0, x9, #3
10001c988:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001c98c:     	add	x8, x0, x28, lsl #3
10001c990:     	mov	x9, x8
10001c994:     	str	x26, [x9], #8
10001c998:     	cmp	x27, x22
10001c99c:     	b.eq	0x10001c9dc <std::__1::vector<long long, std::__1::allocator<long long>>::iterator benchmark::internal::AddPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x148>
10001c9a0:     	sub	x11, x27, #8
10001c9a4:     	sub	x10, x11, x22
10001c9a8:     	cmp	x10, #88
10001c9ac:     	ldr	x16, [sp, #24]
10001c9b0:     	b.hs	0x10001c9f0 <std::__1::vector<long long, std::__1::allocator<long long>>::iterator benchmark::internal::AddPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x15c>
10001c9b4:     	mov	x21, x20
10001c9b8:     	mov	x20, x25
10001c9bc:     	mov	x25, x23
10001c9c0:     	b	0x10001ca64 <std::__1::vector<long long, std::__1::allocator<long long>>::iterator benchmark::internal::AddPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x1d0>
10001c9c4:     	mov	x0, #0
10001c9c8:     	add	x8, x0, x28, lsl #3
10001c9cc:     	mov	x9, x8
10001c9d0:     	str	x26, [x9], #8
10001c9d4:     	cmp	x27, x22
10001c9d8:     	b.ne	0x10001c9a0 <std::__1::vector<long long, std::__1::allocator<long long>>::iterator benchmark::internal::AddPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x10c>
10001c9dc:     	mov	x21, x20
10001c9e0:     	mov	x20, x25
10001c9e4:     	mov	x25, x23
10001c9e8:     	ldr	x16, [sp, #24]
10001c9ec:     	b	0x10001ca74 <std::__1::vector<long long, std::__1::allocator<long long>>::iterator benchmark::internal::AddPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x1e0>
10001c9f0:     	add	x12, x0, x21
10001c9f4:     	sub	x11, x11, x12
10001c9f8:     	add	x11, x11, #8
10001c9fc:     	cmp	x11, #64
10001ca00:     	mov	x21, x20
10001ca04:     	mov	x20, x25
10001ca08:     	mov	x25, x23
10001ca0c:     	b.lo	0x10001ca64 <std::__1::vector<long long, std::__1::allocator<long long>>::iterator benchmark::internal::AddPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x1d0>
10001ca10:     	lsr	x10, x10, #3
10001ca14:     	add	x10, x10, #1
10001ca18:     	and	x11, x10, #0x3ffffffffffffff8
10001ca1c:     	lsl	x13, x11, #3
10001ca20:     	sub	x12, x27, x13
10001ca24:     	sub	x8, x8, x13
10001ca28:     	sub	x13, x27, #32
10001ca2c:     	add	x14, x0, x28, lsl #3
10001ca30:     	sub	x14, x14, #32
10001ca34:     	mov	x15, x11
10001ca38:     	ldp	q1, q0, [x13]
10001ca3c:     	ldp	q3, q2, [x13, #-32]
10001ca40:     	stp	q1, q0, [x14]
10001ca44:     	stp	q3, q2, [x14, #-32]
10001ca48:     	sub	x13, x13, #64
10001ca4c:     	sub	x14, x14, #64
10001ca50:     	sub	x15, x15, #8
10001ca54:     	cbnz	x15, 0x10001ca38 <std::__1::vector<long long, std::__1::allocator<long long>>::iterator benchmark::internal::AddPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x1a4>
10001ca58:     	mov	x27, x12
10001ca5c:     	cmp	x10, x11
10001ca60:     	b.eq	0x10001ca74 <std::__1::vector<long long, std::__1::allocator<long long>>::iterator benchmark::internal::AddPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x1e0>
10001ca64:     	ldr	x10, [x27, #-8]!
10001ca68:     	str	x10, [x8, #-8]!
10001ca6c:     	cmp	x27, x22
10001ca70:     	b.ne	0x10001ca64 <std::__1::vector<long long, std::__1::allocator<long long>>::iterator benchmark::internal::AddPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x1d0>
10001ca74:     	add	x10, x0, x16, lsl #3
10001ca78:     	stp	x8, x9, [x19]
10001ca7c:     	str	x10, [x19, #16]
10001ca80:     	cbz	x22, 0x10001c910 <std::__1::vector<long long, std::__1::allocator<long long>>::iterator benchmark::internal::AddPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x7c>
10001ca84:     	mov	x0, x22
10001ca88:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001ca8c:     	b	0x10001c910 <std::__1::vector<long long, std::__1::allocator<long long>>::iterator benchmark::internal::AddPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x7c>
10001ca90:     	ldr	x8, [x19]
10001ca94:     	ldp	x10, x9, [sp, #8]
10001ca98:     	b	0x10001caa0 <std::__1::vector<long long, std::__1::allocator<long long>>::iterator benchmark::internal::AddPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x20c>
10001ca9c:     	mov	x8, x10
10001caa0:     	sub	x9, x9, x10
10001caa4:     	lsl	x9, x9, #29
10001caa8:     	add	x0, x8, x9, asr #29
10001caac:     	ldp	x29, x30, [sp, #112]
10001cab0:     	ldp	x20, x19, [sp, #96]
10001cab4:     	ldp	x22, x21, [sp, #80]
10001cab8:     	ldp	x24, x23, [sp, #64]
10001cabc:     	ldp	x26, x25, [sp, #48]
10001cac0:     	ldp	x28, x27, [sp, #32]
10001cac4:     	add	sp, sp, #128
10001cac8:     	ret
10001cacc:     	mov	x0, x19
10001cad0:     	bl	0x10000a2cc <std::__1::vector<long long, std::__1::allocator<long long>>::__throw_length_error[abi:ue170006]() const>
10001cad4:     	bl	0x100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>
10001cad8:     	adrp	x0, 0x100038000 <std::__1::vector<long long, std::__1::allocator<long long>>::iterator benchmark::internal::AddPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x2b4>
10001cadc:     	add	x0, x0, #8
10001cae0:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10001cae4:     	cbz	w0, 0x10001c8d4 <std::__1::vector<long long, std::__1::allocator<long long>>::iterator benchmark::internal::AddPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x40>
10001cae8:     	adrp	x8, 0x100038000 <void std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__push_back_slow_path<std::__1::vector<long long, std::__1::allocator<long long>> const&>(std::__1::vector<long long, std::__1::allocator<long long>> const&)+0x8>
10001caec:     	str	xzr, [x8]
10001caf0:     	adrp	x0, 0x100038000 <void std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__push_back_slow_path<std::__1::vector<long long, std::__1::allocator<long long>> const&>(std::__1::vector<long long, std::__1::allocator<long long>> const&)+0x10>
10001caf4:     	add	x0, x0, #8
10001caf8:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10001cafc:     	b	0x10001c8d4 <std::__1::vector<long long, std::__1::allocator<long long>>::iterator benchmark::internal::AddPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x40>
10001cb00:     	adrp	x0, 0x100038000 <void std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__push_back_slow_path<std::__1::vector<long long, std::__1::allocator<long long>> const&>(std::__1::vector<long long, std::__1::allocator<long long>> const&)+0x20>
10001cb04:     	add	x0, x0, #8
10001cb08:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10001cb0c:     	cbz	w0, 0x10001c8dc <std::__1::vector<long long, std::__1::allocator<long long>>::iterator benchmark::internal::AddPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x48>
10001cb10:     	adrp	x8, 0x100038000 <void std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__push_back_slow_path<std::__1::vector<long long, std::__1::allocator<long long>> const&>(std::__1::vector<long long, std::__1::allocator<long long>> const&)+0x30>
10001cb14:     	str	xzr, [x8]
10001cb18:     	adrp	x0, 0x100038000 <void std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__push_back_slow_path<std::__1::vector<long long, std::__1::allocator<long long>> const&>(std::__1::vector<long long, std::__1::allocator<long long>> const&)+0x38>
10001cb1c:     	add	x0, x0, #8
10001cb20:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10001cb24:     	b	0x10001c8dc <std::__1::vector<long long, std::__1::allocator<long long>>::iterator benchmark::internal::AddPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x48>
10001cb28:     	adrp	x0, 0x100038000 <void std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__push_back_slow_path<std::__1::vector<long long, std::__1::allocator<long long>> const&>(std::__1::vector<long long, std::__1::allocator<long long>> const&)+0x48>
10001cb2c:     	add	x0, x0, #8
10001cb30:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10001cb34:     	cbz	w0, 0x10001c8e4 <std::__1::vector<long long, std::__1::allocator<long long>>::iterator benchmark::internal::AddPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x50>
10001cb38:     	adrp	x8, 0x100038000 <void std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__push_back_slow_path<std::__1::vector<long long, std::__1::allocator<long long>> const&>(std::__1::vector<long long, std::__1::allocator<long long>> const&)+0x58>
10001cb3c:     	str	xzr, [x8]
10001cb40:     	adrp	x0, 0x100038000 <void std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__push_back_slow_path<std::__1::vector<long long, std::__1::allocator<long long>> const&>(std::__1::vector<long long, std::__1::allocator<long long>> const&)+0x60>
10001cb44:     	add	x0, x0, #8
10001cb48:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10001cb4c:     	b	0x10001c8e4 <std::__1::vector<long long, std::__1::allocator<long long>>::iterator benchmark::internal::AddPowers<long long>(std::__1::vector<long long, std::__1::allocator<long long>>*, long long, long long, int)+0x50>

000000010001cb50 <void std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__push_back_slow_path<std::__1::vector<long long, std::__1::allocator<long long>> const&>(std::__1::vector<long long, std::__1::allocator<long long>> const&)>:
10001cb50:     	sub	sp, sp, #144
10001cb54:     	stp	x28, x27, [sp, #48]
10001cb58:     	stp	x26, x25, [sp, #64]
10001cb5c:     	stp	x24, x23, [sp, #80]
10001cb60:     	stp	x22, x21, [sp, #96]
10001cb64:     	stp	x20, x19, [sp, #112]
10001cb68:     	stp	x29, x30, [sp, #128]
10001cb6c:     	add	x29, sp, #128
10001cb70:     	mov	x20, x0
10001cb74:     	mov	x8, #-6148914691236517206
10001cb78:     	movk	x8, #2730, lsl #48
10001cb7c:     	ldp	x24, x19, [x0]
10001cb80:     	sub	x26, x19, x24
10001cb84:     	asr	x9, x26, #3
10001cb88:     	mov	x10, #-6148914691236517206
10001cb8c:     	movk	x10, #43691
10001cb90:     	mul	x21, x9, x10
10001cb94:     	add	x9, x21, #1
10001cb98:     	cmp	x9, x8
10001cb9c:     	b.hi	0x10001cd34 <void std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__push_back_slow_path<std::__1::vector<long long, std::__1::allocator<long long>> const&>(std::__1::vector<long long, std::__1::allocator<long long>> const&)+0x1e4>
10001cba0:     	mov	x22, x1
10001cba4:     	add	x11, x20, #16
10001cba8:     	ldr	x12, [x11]
10001cbac:     	sub	x12, x12, x24
10001cbb0:     	asr	x12, x12, #3
10001cbb4:     	mul	x10, x12, x10
10001cbb8:     	lsl	x12, x10, #1
10001cbbc:     	cmp	x12, x9
10001cbc0:     	csel	x9, x12, x9, hi
10001cbc4:     	mov	x12, #6148914691236517205
10001cbc8:     	movk	x12, #1365, lsl #48
10001cbcc:     	cmp	x10, x12
10001cbd0:     	csel	x23, x9, x8, lo
10001cbd4:     	str	x11, [sp, #40]
10001cbd8:     	cbz	x23, 0x10001cbf4 <void std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__push_back_slow_path<std::__1::vector<long long, std::__1::allocator<long long>> const&>(std::__1::vector<long long, std::__1::allocator<long long>> const&)+0xa4>
10001cbdc:     	cmp	x23, x8
10001cbe0:     	b.hi	0x10001cd3c <void std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__push_back_slow_path<std::__1::vector<long long, std::__1::allocator<long long>> const&>(std::__1::vector<long long, std::__1::allocator<long long>> const&)+0x1ec>
10001cbe4:     	add	x8, x23, x23, lsl #1
10001cbe8:     	lsl	x0, x8, #3
10001cbec:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001cbf0:     	b	0x10001cbf8 <void std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__push_back_slow_path<std::__1::vector<long long, std::__1::allocator<long long>> const&>(std::__1::vector<long long, std::__1::allocator<long long>> const&)+0xa8>
10001cbf4:     	mov	x0, #0
10001cbf8:     	mov	w8, #24
10001cbfc:     	madd	x21, x21, x8, x0
10001cc00:     	stp	x0, x21, [sp, #8]
10001cc04:     	madd	x25, x23, x8, x0
10001cc08:     	stp	x21, x25, [sp, #24]
10001cc0c:     	stp	xzr, xzr, [x21, #8]
10001cc10:     	str	xzr, [x21]
10001cc14:     	ldp	x23, x8, [x22]
10001cc18:     	subs	x22, x8, x23
10001cc1c:     	b.eq	0x10001cc50 <void std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__push_back_slow_path<std::__1::vector<long long, std::__1::allocator<long long>> const&>(std::__1::vector<long long, std::__1::allocator<long long>> const&)+0x100>
10001cc20:     	add	x26, x0, x26
10001cc24:     	tbnz	x22, #63, 0x10001cd40 <void std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__push_back_slow_path<std::__1::vector<long long, std::__1::allocator<long long>> const&>(std::__1::vector<long long, std::__1::allocator<long long>> const&)+0x1f0>
10001cc28:     	mov	x0, x22
10001cc2c:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001cc30:     	asr	x8, x22, #3
10001cc34:     	str	x0, [x21]
10001cc38:     	add	x27, x0, x8, lsl #3
10001cc3c:     	stp	x0, x27, [x26, #8]
10001cc40:     	mov	x1, x23
10001cc44:     	mov	x2, x22
10001cc48:     	bl	0x10002f1c4 <_vsnprintf+0x10002f1c4>
10001cc4c:     	str	x27, [x26, #8]
10001cc50:     	add	x8, x21, #24
10001cc54:     	str	x8, [sp, #24]
10001cc58:     	cmp	x19, x24
10001cc5c:     	b.eq	0x10001ccd0 <void std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__push_back_slow_path<std::__1::vector<long long, std::__1::allocator<long long>> const&>(std::__1::vector<long long, std::__1::allocator<long long>> const&)+0x180>
10001cc60:     	mov	x8, x21
10001cc64:     	stp	xzr, xzr, [x21, #-16]
10001cc68:     	ldr	x9, [x19, #-24]!
10001cc6c:     	str	x9, [x21, #-24]!
10001cc70:     	ldr	x9, [x19, #8]
10001cc74:     	stur	x9, [x8, #-16]
10001cc78:     	ldr	x9, [x19, #16]
10001cc7c:     	stur	x9, [x8, #-8]
10001cc80:     	stp	xzr, xzr, [x19]
10001cc84:     	str	xzr, [x19, #16]
10001cc88:     	cmp	x19, x24
10001cc8c:     	b.ne	0x10001cc60 <void std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__push_back_slow_path<std::__1::vector<long long, std::__1::allocator<long long>> const&>(std::__1::vector<long long, std::__1::allocator<long long>> const&)+0x110>
10001cc90:     	ldp	x22, x19, [x20]
10001cc94:     	ldp	x8, x25, [sp, #24]
10001cc98:     	stp	x21, x8, [x20]
10001cc9c:     	str	x25, [x20, #16]
10001cca0:     	cmp	x19, x22
10001cca4:     	b.ne	0x10001cce4 <void std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__push_back_slow_path<std::__1::vector<long long, std::__1::allocator<long long>> const&>(std::__1::vector<long long, std::__1::allocator<long long>> const&)+0x194>
10001cca8:     	cbz	x19, 0x10001cd14 <void std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__push_back_slow_path<std::__1::vector<long long, std::__1::allocator<long long>> const&>(std::__1::vector<long long, std::__1::allocator<long long>> const&)+0x1c4>
10001ccac:     	mov	x0, x19
10001ccb0:     	ldp	x29, x30, [sp, #128]
10001ccb4:     	ldp	x20, x19, [sp, #112]
10001ccb8:     	ldp	x22, x21, [sp, #96]
10001ccbc:     	ldp	x24, x23, [sp, #80]
10001ccc0:     	ldp	x26, x25, [sp, #64]
10001ccc4:     	ldp	x28, x27, [sp, #48]
10001ccc8:     	add	sp, sp, #144
10001cccc:     	b	0x10002f014 <_vsnprintf+0x10002f014>
10001ccd0:     	mov	x22, x19
10001ccd4:     	stp	x21, x8, [x20]
10001ccd8:     	str	x25, [x20, #16]
10001ccdc:     	cmp	x19, x19
10001cce0:     	b.eq	0x10001cca8 <void std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__push_back_slow_path<std::__1::vector<long long, std::__1::allocator<long long>> const&>(std::__1::vector<long long, std::__1::allocator<long long>> const&)+0x158>
10001cce4:     	mov	x20, x19
10001cce8:     	b	0x10001ccf8 <void std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__push_back_slow_path<std::__1::vector<long long, std::__1::allocator<long long>> const&>(std::__1::vector<long long, std::__1::allocator<long long>> const&)+0x1a8>
10001ccec:     	mov	x19, x20
10001ccf0:     	cmp	x20, x22
10001ccf4:     	b.eq	0x10001cd0c <void std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__push_back_slow_path<std::__1::vector<long long, std::__1::allocator<long long>> const&>(std::__1::vector<long long, std::__1::allocator<long long>> const&)+0x1bc>
10001ccf8:     	ldr	x0, [x20, #-24]!
10001ccfc:     	cbz	x0, 0x10001ccec <void std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__push_back_slow_path<std::__1::vector<long long, std::__1::allocator<long long>> const&>(std::__1::vector<long long, std::__1::allocator<long long>> const&)+0x19c>
10001cd00:     	stur	x0, [x19, #-16]
10001cd04:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001cd08:     	b	0x10001ccec <void std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__push_back_slow_path<std::__1::vector<long long, std::__1::allocator<long long>> const&>(std::__1::vector<long long, std::__1::allocator<long long>> const&)+0x19c>
10001cd0c:     	mov	x19, x22
10001cd10:     	cbnz	x22, 0x10001ccac <void std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__push_back_slow_path<std::__1::vector<long long, std::__1::allocator<long long>> const&>(std::__1::vector<long long, std::__1::allocator<long long>> const&)+0x15c>
10001cd14:     	ldp	x29, x30, [sp, #128]
10001cd18:     	ldp	x20, x19, [sp, #112]
10001cd1c:     	ldp	x22, x21, [sp, #96]
10001cd20:     	ldp	x24, x23, [sp, #80]
10001cd24:     	ldp	x26, x25, [sp, #64]
10001cd28:     	ldp	x28, x27, [sp, #48]
10001cd2c:     	add	sp, sp, #144
10001cd30:     	ret
10001cd34:     	mov	x0, x20
10001cd38:     	bl	0x10001c610 <std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__throw_length_error[abi:ue170006]() const>
10001cd3c:     	bl	0x100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>
10001cd40:     	mov	x0, x21
10001cd44:     	bl	0x10000a2cc <std::__1::vector<long long, std::__1::allocator<long long>>::__throw_length_error[abi:ue170006]() const>
10001cd48:     	brk	#0x1
10001cd4c:     	mov	x19, x0
10001cd50:     	ldr	x0, [x21]
10001cd54:     	cbz	x0, 0x10001cd60 <void std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::__push_back_slow_path<std::__1::vector<long long, std::__1::allocator<long long>> const&>(std::__1::vector<long long, std::__1::allocator<long long>> const&)+0x210>
10001cd58:     	str	x0, [x26, #8]
10001cd5c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001cd60:     	add	x0, sp, #8
10001cd64:     	bl	0x10001c5a4 <std::__1::__split_buffer<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>&>::~__split_buffer()>
10001cd68:     	mov	x0, x19
10001cd6c:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010001cd70 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__assign_with_size[abi:ue170006]<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, long)>:
10001cd70:     	stp	x26, x25, [sp, #-80]!
10001cd74:     	stp	x24, x23, [sp, #16]
10001cd78:     	stp	x22, x21, [sp, #32]
10001cd7c:     	stp	x20, x19, [sp, #48]
10001cd80:     	stp	x29, x30, [sp, #64]
10001cd84:     	add	x29, sp, #64
10001cd88:     	mov	x23, x3
10001cd8c:     	mov	x20, x2
10001cd90:     	mov	x22, x1
10001cd94:     	mov	x19, x0
10001cd98:     	ldr	x8, [x0, #16]
10001cd9c:     	ldr	x21, [x0]
10001cda0:     	sub	x9, x8, x21
10001cda4:     	asr	x10, x9, #3
10001cda8:     	mov	x9, #-6148914691236517206
10001cdac:     	movk	x9, #43691
10001cdb0:     	mul	x10, x10, x9
10001cdb4:     	cmp	x10, x3
10001cdb8:     	b.hs	0x10001cdf8 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__assign_with_size[abi:ue170006]<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, long)+0x88>
10001cdbc:     	cbz	x21, 0x10001ced4 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__assign_with_size[abi:ue170006]<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, long)+0x164>
10001cdc0:     	ldr	x8, [x19, #8]
10001cdc4:     	mov	x0, x21
10001cdc8:     	cmp	x8, x21
10001cdcc:     	b.ne	0x10001cde0 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__assign_with_size[abi:ue170006]<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, long)+0x70>
10001cdd0:     	b	0x10001cec0 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__assign_with_size[abi:ue170006]<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, long)+0x150>
10001cdd4:     	mov	x8, x24
10001cdd8:     	cmp	x24, x21
10001cddc:     	b.eq	0x10001cebc <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__assign_with_size[abi:ue170006]<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, long)+0x14c>
10001cde0:     	sub	x24, x8, #24
10001cde4:     	ldursb	w9, [x8, #-1]
10001cde8:     	tbz	w9, #31, 0x10001cdd4 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__assign_with_size[abi:ue170006]<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, long)+0x64>
10001cdec:     	ldur	x0, [x8, #-24]
10001cdf0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001cdf4:     	b	0x10001cdd4 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__assign_with_size[abi:ue170006]<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, long)+0x64>
10001cdf8:     	ldr	x8, [x19, #8]
10001cdfc:     	sub	x10, x8, x21
10001ce00:     	asr	x10, x10, #3
10001ce04:     	mul	x9, x10, x9
10001ce08:     	cmp	x9, x23
10001ce0c:     	b.hs	0x10001ce4c <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__assign_with_size[abi:ue170006]<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, long)+0xdc>
10001ce10:     	mov	w10, #24
10001ce14:     	madd	x24, x9, x10, x22
10001ce18:     	cmp	x8, x21
10001ce1c:     	b.eq	0x10001cf5c <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__assign_with_size[abi:ue170006]<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, long)+0x1ec>
10001ce20:     	add	x8, x9, x9, lsl #1
10001ce24:     	lsl	x25, x8, #3
10001ce28:     	mov	x0, x21
10001ce2c:     	mov	x1, x22
10001ce30:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
10001ce34:     	add	x22, x22, #24
10001ce38:     	add	x21, x21, #24
10001ce3c:     	subs	x25, x25, #24
10001ce40:     	b.ne	0x10001ce28 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__assign_with_size[abi:ue170006]<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, long)+0xb8>
10001ce44:     	ldp	x21, x8, [x19]
10001ce48:     	b	0x10001cf60 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__assign_with_size[abi:ue170006]<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, long)+0x1f0>
10001ce4c:     	cmp	x22, x20
10001ce50:     	b.eq	0x10001ce74 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__assign_with_size[abi:ue170006]<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, long)+0x104>
10001ce54:     	mov	x0, x21
10001ce58:     	mov	x1, x22
10001ce5c:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
10001ce60:     	add	x22, x22, #24
10001ce64:     	add	x21, x21, #24
10001ce68:     	cmp	x22, x20
10001ce6c:     	b.ne	0x10001ce54 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__assign_with_size[abi:ue170006]<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, long)+0xe4>
10001ce70:     	ldr	x8, [x19, #8]
10001ce74:     	cmp	x8, x21
10001ce78:     	b.ne	0x10001cea4 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__assign_with_size[abi:ue170006]<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, long)+0x134>
10001ce7c:     	str	x21, [x19, #8]
10001ce80:     	ldp	x29, x30, [sp, #64]
10001ce84:     	ldp	x20, x19, [sp, #48]
10001ce88:     	ldp	x22, x21, [sp, #32]
10001ce8c:     	ldp	x24, x23, [sp, #16]
10001ce90:     	ldp	x26, x25, [sp], #80
10001ce94:     	ret
10001ce98:     	mov	x8, x20
10001ce9c:     	cmp	x20, x21
10001cea0:     	b.eq	0x10001ce7c <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__assign_with_size[abi:ue170006]<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, long)+0x10c>
10001cea4:     	sub	x20, x8, #24
10001cea8:     	ldursb	w9, [x8, #-1]
10001ceac:     	tbz	w9, #31, 0x10001ce98 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__assign_with_size[abi:ue170006]<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, long)+0x128>
10001ceb0:     	ldur	x0, [x8, #-24]
10001ceb4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001ceb8:     	b	0x10001ce98 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__assign_with_size[abi:ue170006]<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, long)+0x128>
10001cebc:     	ldr	x0, [x19]
10001cec0:     	str	x21, [x19, #8]
10001cec4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001cec8:     	mov	x8, #0
10001cecc:     	stp	xzr, xzr, [x19]
10001ced0:     	str	xzr, [x19, #16]
10001ced4:     	mov	x9, #-6148914691236517206
10001ced8:     	movk	x9, #2730, lsl #48
10001cedc:     	cmp	x23, x9
10001cee0:     	b.hi	0x10001cf94 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__assign_with_size[abi:ue170006]<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, long)+0x224>
10001cee4:     	asr	x8, x8, #3
10001cee8:     	mov	x10, #-6148914691236517206
10001ceec:     	movk	x10, #43691
10001cef0:     	mul	x8, x8, x10
10001cef4:     	lsl	x10, x8, #1
10001cef8:     	cmp	x10, x23
10001cefc:     	csel	x10, x10, x23, hi
10001cf00:     	mov	x11, #6148914691236517205
10001cf04:     	movk	x11, #1365, lsl #48
10001cf08:     	cmp	x8, x11
10001cf0c:     	csel	x8, x10, x9, lo
10001cf10:     	cmp	x8, x9
10001cf14:     	b.hi	0x10001cf94 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__assign_with_size[abi:ue170006]<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, long)+0x224>
10001cf18:     	add	x8, x8, x8, lsl #1
10001cf1c:     	lsl	x21, x8, #3
10001cf20:     	mov	x0, x21
10001cf24:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001cf28:     	stp	x0, x0, [x19]
10001cf2c:     	add	x8, x0, x21
10001cf30:     	str	x8, [x19, #16]
10001cf34:     	mov	x0, x19
10001cf38:     	mov	x1, x22
10001cf3c:     	mov	x2, x20
10001cf40:     	mov	x3, x23
10001cf44:     	ldp	x29, x30, [sp, #64]
10001cf48:     	ldp	x20, x19, [sp, #48]
10001cf4c:     	ldp	x22, x21, [sp, #32]
10001cf50:     	ldp	x24, x23, [sp, #16]
10001cf54:     	ldp	x26, x25, [sp], #80
10001cf58:     	b	0x10001cf9c <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__construct_at_end<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, unsigned long)>
10001cf5c:     	mov	x8, x21
10001cf60:     	sub	x8, x8, x21
10001cf64:     	asr	x8, x8, #3
10001cf68:     	mov	x9, #6148914691236517205
10001cf6c:     	madd	x3, x8, x9, x23
10001cf70:     	mov	x0, x19
10001cf74:     	mov	x1, x24
10001cf78:     	mov	x2, x20
10001cf7c:     	ldp	x29, x30, [sp, #64]
10001cf80:     	ldp	x20, x19, [sp, #48]
10001cf84:     	ldp	x22, x21, [sp, #32]
10001cf88:     	ldp	x24, x23, [sp, #16]
10001cf8c:     	ldp	x26, x25, [sp], #80
10001cf90:     	b	0x10001cf9c <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__construct_at_end<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, unsigned long)>
10001cf94:     	mov	x0, x19
10001cf98:     	bl	0x100017a60 <std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__throw_length_error[abi:ue170006]() const>

000000010001cf9c <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__construct_at_end<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, unsigned long)>:
10001cf9c:     	stp	x28, x27, [sp, #-96]!
10001cfa0:     	stp	x26, x25, [sp, #16]
10001cfa4:     	stp	x24, x23, [sp, #32]
10001cfa8:     	stp	x22, x21, [sp, #48]
10001cfac:     	stp	x20, x19, [sp, #64]
10001cfb0:     	stp	x29, x30, [sp, #80]
10001cfb4:     	add	x29, sp, #80
10001cfb8:     	mov	x19, x0
10001cfbc:     	ldr	x25, [x0, #8]
10001cfc0:     	cmp	x1, x2
10001cfc4:     	b.eq	0x10001d074 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__construct_at_end<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, unsigned long)+0xd8>
10001cfc8:     	mov	x21, x2
10001cfcc:     	mov	x22, x1
10001cfd0:     	mov	x26, #0
10001cfd4:     	mov	x27, #9223372036854775792
10001cfd8:     	b	0x10001cffc <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__construct_at_end<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, unsigned long)+0x60>
10001cfdc:     	ldr	q0, [x8]
10001cfe0:     	ldr	x8, [x8, #16]
10001cfe4:     	str	x8, [x20, #16]
10001cfe8:     	str	q0, [x20]
10001cfec:     	add	x26, x26, #24
10001cff0:     	add	x8, x22, x26
10001cff4:     	cmp	x8, x21
10001cff8:     	b.eq	0x10001d070 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__construct_at_end<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, unsigned long)+0xd4>
10001cffc:     	add	x20, x25, x26
10001d000:     	add	x8, x22, x26
10001d004:     	ldrsb	w9, [x8, #23]
10001d008:     	tbz	w9, #31, 0x10001cfdc <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__construct_at_end<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, unsigned long)+0x40>
10001d00c:     	ldp	x23, x28, [x8]
10001d010:     	cmp	x28, #22
10001d014:     	b.hi	0x10001d024 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__construct_at_end<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, unsigned long)+0x88>
10001d018:     	add	x8, x25, x26
10001d01c:     	strb	w28, [x8, #23]
10001d020:     	b	0x10001d050 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__construct_at_end<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, unsigned long)+0xb4>
10001d024:     	cmp	x28, x27
10001d028:     	b.hs	0x10001d094 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__construct_at_end<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, unsigned long)+0xf8>
10001d02c:     	orr	x8, x28, #0xf
10001d030:     	add	x24, x8, #1
10001d034:     	mov	x0, x24
10001d038:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001d03c:     	add	x8, x25, x26
10001d040:     	orr	x9, x24, #0x8000000000000000
10001d044:     	stp	x28, x9, [x8, #8]
10001d048:     	str	x0, [x8]
10001d04c:     	mov	x20, x0
10001d050:     	add	x2, x28, #1
10001d054:     	mov	x0, x20
10001d058:     	mov	x1, x23
10001d05c:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
10001d060:     	add	x26, x26, #24
10001d064:     	add	x8, x22, x26
10001d068:     	cmp	x8, x21
10001d06c:     	b.ne	0x10001cffc <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__construct_at_end<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, unsigned long)+0x60>
10001d070:     	add	x25, x25, x26
10001d074:     	str	x25, [x19, #8]
10001d078:     	ldp	x29, x30, [sp, #80]
10001d07c:     	ldp	x20, x19, [sp, #64]
10001d080:     	ldp	x22, x21, [sp, #48]
10001d084:     	ldp	x24, x23, [sp, #32]
10001d088:     	ldp	x26, x25, [sp, #16]
10001d08c:     	ldp	x28, x27, [sp], #96
10001d090:     	ret
10001d094:     	mov	x0, x20
10001d098:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
10001d09c:     	brk	#0x1
10001d0a0:     	b	0x10001d0a4 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__construct_at_end<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, unsigned long)+0x108>
10001d0a4:     	mov	x21, x0
10001d0a8:     	cmp	x20, x25
10001d0ac:     	b.ne	0x10001d0c8 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__construct_at_end<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, unsigned long)+0x12c>
10001d0b0:     	str	x25, [x19, #8]
10001d0b4:     	mov	x0, x21
10001d0b8:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
10001d0bc:     	mov	x20, x22
10001d0c0:     	cmp	x22, x25
10001d0c4:     	b.eq	0x10001d0b0 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__construct_at_end<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, unsigned long)+0x114>
10001d0c8:     	sub	x22, x20, #24
10001d0cc:     	ldursb	w8, [x20, #-1]
10001d0d0:     	tbz	w8, #31, 0x10001d0bc <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__construct_at_end<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, unsigned long)+0x120>
10001d0d4:     	ldur	x0, [x20, #-24]
10001d0d8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001d0dc:     	b	0x10001d0bc <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__construct_at_end<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*, unsigned long)+0x120>

000000010001d0e0 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__assign_with_size[abi:ue170006]<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, long)>:
10001d0e0:     	stp	x26, x25, [sp, #-80]!
10001d0e4:     	stp	x24, x23, [sp, #16]
10001d0e8:     	stp	x22, x21, [sp, #32]
10001d0ec:     	stp	x20, x19, [sp, #48]
10001d0f0:     	stp	x29, x30, [sp, #64]
10001d0f4:     	add	x29, sp, #64
10001d0f8:     	mov	x23, x3
10001d0fc:     	mov	x20, x2
10001d100:     	mov	x22, x1
10001d104:     	mov	x19, x0
10001d108:     	ldr	x8, [x0, #16]
10001d10c:     	ldr	x21, [x0]
10001d110:     	sub	x9, x8, x21
10001d114:     	asr	x10, x9, #3
10001d118:     	mov	x9, #-6148914691236517206
10001d11c:     	movk	x9, #43691
10001d120:     	mul	x10, x10, x9
10001d124:     	cmp	x10, x3
10001d128:     	b.hs	0x10001d168 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__assign_with_size[abi:ue170006]<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, long)+0x88>
10001d12c:     	cbz	x21, 0x10001d244 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__assign_with_size[abi:ue170006]<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, long)+0x164>
10001d130:     	ldr	x8, [x19, #8]
10001d134:     	mov	x0, x21
10001d138:     	cmp	x8, x21
10001d13c:     	b.ne	0x10001d150 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__assign_with_size[abi:ue170006]<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, long)+0x70>
10001d140:     	b	0x10001d230 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__assign_with_size[abi:ue170006]<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, long)+0x150>
10001d144:     	mov	x8, x24
10001d148:     	cmp	x24, x21
10001d14c:     	b.eq	0x10001d22c <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__assign_with_size[abi:ue170006]<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, long)+0x14c>
10001d150:     	sub	x24, x8, #24
10001d154:     	ldursb	w9, [x8, #-1]
10001d158:     	tbz	w9, #31, 0x10001d144 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__assign_with_size[abi:ue170006]<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, long)+0x64>
10001d15c:     	ldur	x0, [x8, #-24]
10001d160:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001d164:     	b	0x10001d144 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__assign_with_size[abi:ue170006]<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, long)+0x64>
10001d168:     	ldr	x8, [x19, #8]
10001d16c:     	sub	x10, x8, x21
10001d170:     	asr	x10, x10, #3
10001d174:     	mul	x9, x10, x9
10001d178:     	cmp	x9, x23
10001d17c:     	b.hs	0x10001d1bc <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__assign_with_size[abi:ue170006]<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, long)+0xdc>
10001d180:     	mov	w10, #24
10001d184:     	madd	x24, x9, x10, x22
10001d188:     	cmp	x8, x21
10001d18c:     	b.eq	0x10001d2cc <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__assign_with_size[abi:ue170006]<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, long)+0x1ec>
10001d190:     	add	x8, x9, x9, lsl #1
10001d194:     	lsl	x25, x8, #3
10001d198:     	mov	x0, x21
10001d19c:     	mov	x1, x22
10001d1a0:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
10001d1a4:     	add	x22, x22, #24
10001d1a8:     	add	x21, x21, #24
10001d1ac:     	subs	x25, x25, #24
10001d1b0:     	b.ne	0x10001d198 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__assign_with_size[abi:ue170006]<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, long)+0xb8>
10001d1b4:     	ldp	x21, x8, [x19]
10001d1b8:     	b	0x10001d2d0 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__assign_with_size[abi:ue170006]<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, long)+0x1f0>
10001d1bc:     	cmp	x22, x20
10001d1c0:     	b.eq	0x10001d1e4 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__assign_with_size[abi:ue170006]<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, long)+0x104>
10001d1c4:     	mov	x0, x21
10001d1c8:     	mov	x1, x22
10001d1cc:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
10001d1d0:     	add	x22, x22, #24
10001d1d4:     	add	x21, x21, #24
10001d1d8:     	cmp	x22, x20
10001d1dc:     	b.ne	0x10001d1c4 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__assign_with_size[abi:ue170006]<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, long)+0xe4>
10001d1e0:     	ldr	x8, [x19, #8]
10001d1e4:     	cmp	x8, x21
10001d1e8:     	b.ne	0x10001d214 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__assign_with_size[abi:ue170006]<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, long)+0x134>
10001d1ec:     	str	x21, [x19, #8]
10001d1f0:     	ldp	x29, x30, [sp, #64]
10001d1f4:     	ldp	x20, x19, [sp, #48]
10001d1f8:     	ldp	x22, x21, [sp, #32]
10001d1fc:     	ldp	x24, x23, [sp, #16]
10001d200:     	ldp	x26, x25, [sp], #80
10001d204:     	ret
10001d208:     	mov	x8, x20
10001d20c:     	cmp	x20, x21
10001d210:     	b.eq	0x10001d1ec <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__assign_with_size[abi:ue170006]<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, long)+0x10c>
10001d214:     	sub	x20, x8, #24
10001d218:     	ldursb	w9, [x8, #-1]
10001d21c:     	tbz	w9, #31, 0x10001d208 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__assign_with_size[abi:ue170006]<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, long)+0x128>
10001d220:     	ldur	x0, [x8, #-24]
10001d224:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001d228:     	b	0x10001d208 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__assign_with_size[abi:ue170006]<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, long)+0x128>
10001d22c:     	ldr	x0, [x19]
10001d230:     	str	x21, [x19, #8]
10001d234:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001d238:     	mov	x8, #0
10001d23c:     	stp	xzr, xzr, [x19]
10001d240:     	str	xzr, [x19, #16]
10001d244:     	mov	x9, #-6148914691236517206
10001d248:     	movk	x9, #2730, lsl #48
10001d24c:     	cmp	x23, x9
10001d250:     	b.hi	0x10001d304 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__assign_with_size[abi:ue170006]<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, long)+0x224>
10001d254:     	asr	x8, x8, #3
10001d258:     	mov	x10, #-6148914691236517206
10001d25c:     	movk	x10, #43691
10001d260:     	mul	x8, x8, x10
10001d264:     	lsl	x10, x8, #1
10001d268:     	cmp	x10, x23
10001d26c:     	csel	x10, x10, x23, hi
10001d270:     	mov	x11, #6148914691236517205
10001d274:     	movk	x11, #1365, lsl #48
10001d278:     	cmp	x8, x11
10001d27c:     	csel	x8, x10, x9, lo
10001d280:     	cmp	x8, x9
10001d284:     	b.hi	0x10001d304 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__assign_with_size[abi:ue170006]<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, long)+0x224>
10001d288:     	add	x8, x8, x8, lsl #1
10001d28c:     	lsl	x21, x8, #3
10001d290:     	mov	x0, x21
10001d294:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001d298:     	stp	x0, x0, [x19]
10001d29c:     	add	x8, x0, x21
10001d2a0:     	str	x8, [x19, #16]
10001d2a4:     	mov	x0, x19
10001d2a8:     	mov	x1, x22
10001d2ac:     	mov	x2, x20
10001d2b0:     	mov	x3, x23
10001d2b4:     	ldp	x29, x30, [sp, #64]
10001d2b8:     	ldp	x20, x19, [sp, #48]
10001d2bc:     	ldp	x22, x21, [sp, #32]
10001d2c0:     	ldp	x24, x23, [sp, #16]
10001d2c4:     	ldp	x26, x25, [sp], #80
10001d2c8:     	b	0x10001d30c <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__construct_at_end<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, unsigned long)>
10001d2cc:     	mov	x8, x21
10001d2d0:     	sub	x8, x8, x21
10001d2d4:     	asr	x8, x8, #3
10001d2d8:     	mov	x9, #6148914691236517205
10001d2dc:     	madd	x3, x8, x9, x23
10001d2e0:     	mov	x0, x19
10001d2e4:     	mov	x1, x24
10001d2e8:     	mov	x2, x20
10001d2ec:     	ldp	x29, x30, [sp, #64]
10001d2f0:     	ldp	x20, x19, [sp, #48]
10001d2f4:     	ldp	x22, x21, [sp, #32]
10001d2f8:     	ldp	x24, x23, [sp, #16]
10001d2fc:     	ldp	x26, x25, [sp], #80
10001d300:     	b	0x10001d30c <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__construct_at_end<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, unsigned long)>
10001d304:     	mov	x0, x19
10001d308:     	bl	0x100017a60 <std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__throw_length_error[abi:ue170006]() const>

000000010001d30c <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__construct_at_end<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, unsigned long)>:
10001d30c:     	stp	x28, x27, [sp, #-96]!
10001d310:     	stp	x26, x25, [sp, #16]
10001d314:     	stp	x24, x23, [sp, #32]
10001d318:     	stp	x22, x21, [sp, #48]
10001d31c:     	stp	x20, x19, [sp, #64]
10001d320:     	stp	x29, x30, [sp, #80]
10001d324:     	add	x29, sp, #80
10001d328:     	mov	x19, x0
10001d32c:     	ldr	x25, [x0, #8]
10001d330:     	cmp	x1, x2
10001d334:     	b.eq	0x10001d3e4 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__construct_at_end<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, unsigned long)+0xd8>
10001d338:     	mov	x21, x2
10001d33c:     	mov	x22, x1
10001d340:     	mov	x26, #0
10001d344:     	mov	x27, #9223372036854775792
10001d348:     	b	0x10001d36c <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__construct_at_end<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, unsigned long)+0x60>
10001d34c:     	ldr	q0, [x8]
10001d350:     	ldr	x8, [x8, #16]
10001d354:     	str	x8, [x20, #16]
10001d358:     	str	q0, [x20]
10001d35c:     	add	x26, x26, #24
10001d360:     	add	x8, x22, x26
10001d364:     	cmp	x8, x21
10001d368:     	b.eq	0x10001d3e0 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__construct_at_end<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, unsigned long)+0xd4>
10001d36c:     	add	x20, x25, x26
10001d370:     	add	x8, x22, x26
10001d374:     	ldrsb	w9, [x8, #23]
10001d378:     	tbz	w9, #31, 0x10001d34c <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__construct_at_end<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, unsigned long)+0x40>
10001d37c:     	ldp	x23, x28, [x8]
10001d380:     	cmp	x28, #22
10001d384:     	b.hi	0x10001d394 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__construct_at_end<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, unsigned long)+0x88>
10001d388:     	add	x8, x25, x26
10001d38c:     	strb	w28, [x8, #23]
10001d390:     	b	0x10001d3c0 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__construct_at_end<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, unsigned long)+0xb4>
10001d394:     	cmp	x28, x27
10001d398:     	b.hs	0x10001d404 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__construct_at_end<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, unsigned long)+0xf8>
10001d39c:     	orr	x8, x28, #0xf
10001d3a0:     	add	x24, x8, #1
10001d3a4:     	mov	x0, x24
10001d3a8:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001d3ac:     	add	x8, x25, x26
10001d3b0:     	orr	x9, x24, #0x8000000000000000
10001d3b4:     	stp	x28, x9, [x8, #8]
10001d3b8:     	str	x0, [x8]
10001d3bc:     	mov	x20, x0
10001d3c0:     	add	x2, x28, #1
10001d3c4:     	mov	x0, x20
10001d3c8:     	mov	x1, x23
10001d3cc:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
10001d3d0:     	add	x26, x26, #24
10001d3d4:     	add	x8, x22, x26
10001d3d8:     	cmp	x8, x21
10001d3dc:     	b.ne	0x10001d36c <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__construct_at_end<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, unsigned long)+0x60>
10001d3e0:     	add	x25, x25, x26
10001d3e4:     	str	x25, [x19, #8]
10001d3e8:     	ldp	x29, x30, [sp, #80]
10001d3ec:     	ldp	x20, x19, [sp, #64]
10001d3f0:     	ldp	x22, x21, [sp, #48]
10001d3f4:     	ldp	x24, x23, [sp, #32]
10001d3f8:     	ldp	x26, x25, [sp, #16]
10001d3fc:     	ldp	x28, x27, [sp], #96
10001d400:     	ret
10001d404:     	mov	x0, x20
10001d408:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
10001d40c:     	brk	#0x1
10001d410:     	b	0x10001d414 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__construct_at_end<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, unsigned long)+0x108>
10001d414:     	mov	x21, x0
10001d418:     	cmp	x20, x25
10001d41c:     	b.ne	0x10001d438 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__construct_at_end<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, unsigned long)+0x12c>
10001d420:     	str	x25, [x19, #8]
10001d424:     	mov	x0, x21
10001d428:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
10001d42c:     	mov	x20, x22
10001d430:     	cmp	x22, x25
10001d434:     	b.eq	0x10001d420 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__construct_at_end<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, unsigned long)+0x114>
10001d438:     	sub	x22, x20, #24
10001d43c:     	ldursb	w8, [x20, #-1]
10001d440:     	tbz	w8, #31, 0x10001d42c <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__construct_at_end<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, unsigned long)+0x120>
10001d444:     	ldur	x0, [x20, #-24]
10001d448:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001d44c:     	b	0x10001d42c <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__construct_at_end<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*, unsigned long)+0x120>

000000010001d450 <void std::__1::vector<benchmark::internal::Statistics, std::__1::allocator<benchmark::internal::Statistics>>::__emplace_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&)>:
10001d450:     	sub	sp, sp, #160
10001d454:     	stp	x28, x27, [sp, #64]
10001d458:     	stp	x26, x25, [sp, #80]
10001d45c:     	stp	x24, x23, [sp, #96]
10001d460:     	stp	x22, x21, [sp, #112]
10001d464:     	stp	x20, x19, [sp, #128]
10001d468:     	stp	x29, x30, [sp, #144]
10001d46c:     	add	x29, sp, #144
10001d470:     	mov	x20, x0
10001d474:     	mov	x8, #7378697629483820646
10001d478:     	movk	x8, #1638, lsl #48
10001d47c:     	ldp	x26, x19, [x0]
10001d480:     	sub	x28, x19, x26
10001d484:     	asr	x9, x28, #3
10001d488:     	mov	x10, #-3689348814741910324
10001d48c:     	movk	x10, #52429
10001d490:     	mul	x21, x9, x10
10001d494:     	add	x9, x21, #1
10001d498:     	cmp	x9, x8
10001d49c:     	b.hi	0x10001d698 <void std::__1::vector<benchmark::internal::Statistics, std::__1::allocator<benchmark::internal::Statistics>>::__emplace_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&)+0x248>
10001d4a0:     	mov	x24, x3
10001d4a4:     	mov	x25, x2
10001d4a8:     	mov	x23, x1
10001d4ac:     	add	x11, x20, #16
10001d4b0:     	ldr	x12, [x11]
10001d4b4:     	sub	x12, x12, x26
10001d4b8:     	asr	x12, x12, #3
10001d4bc:     	mul	x10, x12, x10
10001d4c0:     	lsl	x12, x10, #1
10001d4c4:     	cmp	x12, x9
10001d4c8:     	csel	x9, x12, x9, hi
10001d4cc:     	mov	x12, #3689348814741910323
10001d4d0:     	movk	x12, #819, lsl #48
10001d4d4:     	cmp	x10, x12
10001d4d8:     	csel	x27, x9, x8, lo
10001d4dc:     	str	x11, [sp, #56]
10001d4e0:     	cbz	x27, 0x10001d500 <void std::__1::vector<benchmark::internal::Statistics, std::__1::allocator<benchmark::internal::Statistics>>::__emplace_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&)+0xb0>
10001d4e4:     	cmp	x27, x8
10001d4e8:     	b.hi	0x10001d6a0 <void std::__1::vector<benchmark::internal::Statistics, std::__1::allocator<benchmark::internal::Statistics>>::__emplace_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&)+0x250>
10001d4ec:     	add	x8, x27, x27, lsl #2
10001d4f0:     	lsl	x0, x8, #3
10001d4f4:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001d4f8:     	mov	x22, x0
10001d4fc:     	b	0x10001d504 <void std::__1::vector<benchmark::internal::Statistics, std::__1::allocator<benchmark::internal::Statistics>>::__emplace_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&)+0xb4>
10001d500:     	mov	x22, #0
10001d504:     	mov	w8, #40
10001d508:     	madd	x21, x21, x8, x22
10001d50c:     	stp	x22, x21, [sp, #24]
10001d510:     	madd	x27, x27, x8, x22
10001d514:     	stp	x21, x27, [sp, #40]
10001d518:     	ldr	x25, [x25]
10001d51c:     	ldr	w24, [x24]
10001d520:     	ldrsb	w8, [x23, #23]
10001d524:     	tbnz	w8, #31, 0x10001d554 <void std::__1::vector<benchmark::internal::Statistics, std::__1::allocator<benchmark::internal::Statistics>>::__emplace_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&)+0x104>
10001d528:     	ldr	q0, [x23]
10001d52c:     	str	q0, [x21]
10001d530:     	ldr	x8, [x23, #16]
10001d534:     	str	x8, [x21, #16]
10001d538:     	add	x8, x22, x28
10001d53c:     	str	x25, [x8, #24]
10001d540:     	str	w24, [x8, #32]
10001d544:     	add	x8, x21, #40
10001d548:     	cmp	x19, x26
10001d54c:     	b.ne	0x10001d5bc <void std::__1::vector<benchmark::internal::Statistics, std::__1::allocator<benchmark::internal::Statistics>>::__emplace_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&)+0x16c>
10001d550:     	b	0x10001d634 <void std::__1::vector<benchmark::internal::Statistics, std::__1::allocator<benchmark::internal::Statistics>>::__emplace_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&)+0x1e4>
10001d554:     	ldp	x1, x23, [x23]
10001d558:     	cmp	x23, #22
10001d55c:     	b.hi	0x10001d56c <void std::__1::vector<benchmark::internal::Statistics, std::__1::allocator<benchmark::internal::Statistics>>::__emplace_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&)+0x11c>
10001d560:     	strb	w23, [x21, #23]
10001d564:     	mov	x0, x21
10001d568:     	b	0x10001d59c <void std::__1::vector<benchmark::internal::Statistics, std::__1::allocator<benchmark::internal::Statistics>>::__emplace_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&)+0x14c>
10001d56c:     	str	x1, [sp, #16]
10001d570:     	mov	x8, #9223372036854775792
10001d574:     	cmp	x23, x8
10001d578:     	b.hs	0x10001d6a4 <void std::__1::vector<benchmark::internal::Statistics, std::__1::allocator<benchmark::internal::Statistics>>::__emplace_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&)+0x254>
10001d57c:     	orr	x8, x23, #0xf
10001d580:     	add	x0, x8, #1
10001d584:     	str	x0, [sp, #8]
10001d588:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001d58c:     	ldp	x8, x1, [sp, #8]
10001d590:     	orr	x8, x8, #0x8000000000000000
10001d594:     	stp	x23, x8, [x21, #8]
10001d598:     	str	x0, [x21]
10001d59c:     	add	x2, x23, #1
10001d5a0:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
10001d5a4:     	add	x8, x22, x28
10001d5a8:     	str	x25, [x8, #24]
10001d5ac:     	str	w24, [x8, #32]
10001d5b0:     	add	x8, x21, #40
10001d5b4:     	cmp	x19, x26
10001d5b8:     	b.eq	0x10001d634 <void std::__1::vector<benchmark::internal::Statistics, std::__1::allocator<benchmark::internal::Statistics>>::__emplace_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&)+0x1e4>
10001d5bc:     	ldur	q0, [x19, #-40]
10001d5c0:     	ldur	x9, [x19, #-24]
10001d5c4:     	stur	x9, [x21, #-24]
10001d5c8:     	stur	q0, [x21, #-40]
10001d5cc:     	stp	xzr, xzr, [x19, #-32]
10001d5d0:     	stur	xzr, [x19, #-40]
10001d5d4:     	ldur	x9, [x19, #-16]
10001d5d8:     	ldur	w10, [x19, #-8]
10001d5dc:     	stur	w10, [x21, #-8]
10001d5e0:     	stur	x9, [x21, #-16]
10001d5e4:     	sub	x21, x21, #40
10001d5e8:     	sub	x9, x19, #40
10001d5ec:     	mov	x19, x9
10001d5f0:     	cmp	x9, x26
10001d5f4:     	b.ne	0x10001d5bc <void std::__1::vector<benchmark::internal::Statistics, std::__1::allocator<benchmark::internal::Statistics>>::__emplace_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&)+0x16c>
10001d5f8:     	ldp	x22, x19, [x20]
10001d5fc:     	stp	x21, x8, [x20]
10001d600:     	str	x27, [x20, #16]
10001d604:     	cmp	x19, x22
10001d608:     	b.ne	0x10001d658 <void std::__1::vector<benchmark::internal::Statistics, std::__1::allocator<benchmark::internal::Statistics>>::__emplace_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&)+0x208>
10001d60c:     	cbz	x19, 0x10001d678 <void std::__1::vector<benchmark::internal::Statistics, std::__1::allocator<benchmark::internal::Statistics>>::__emplace_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&)+0x228>
10001d610:     	mov	x0, x19
10001d614:     	ldp	x29, x30, [sp, #144]
10001d618:     	ldp	x20, x19, [sp, #128]
10001d61c:     	ldp	x22, x21, [sp, #112]
10001d620:     	ldp	x24, x23, [sp, #96]
10001d624:     	ldp	x26, x25, [sp, #80]
10001d628:     	ldp	x28, x27, [sp, #64]
10001d62c:     	add	sp, sp, #160
10001d630:     	b	0x10002f014 <_vsnprintf+0x10002f014>
10001d634:     	mov	x22, x19
10001d638:     	stp	x21, x8, [x20]
10001d63c:     	str	x27, [x20, #16]
10001d640:     	cmp	x19, x19
10001d644:     	b.ne	0x10001d658 <void std::__1::vector<benchmark::internal::Statistics, std::__1::allocator<benchmark::internal::Statistics>>::__emplace_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&)+0x208>
10001d648:     	b	0x10001d60c <void std::__1::vector<benchmark::internal::Statistics, std::__1::allocator<benchmark::internal::Statistics>>::__emplace_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&)+0x1bc>
10001d64c:     	mov	x19, x20
10001d650:     	cmp	x20, x22
10001d654:     	b.eq	0x10001d670 <void std::__1::vector<benchmark::internal::Statistics, std::__1::allocator<benchmark::internal::Statistics>>::__emplace_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&)+0x220>
10001d658:     	sub	x20, x19, #40
10001d65c:     	ldursb	w8, [x19, #-17]
10001d660:     	tbz	w8, #31, 0x10001d64c <void std::__1::vector<benchmark::internal::Statistics, std::__1::allocator<benchmark::internal::Statistics>>::__emplace_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&)+0x1fc>
10001d664:     	ldur	x0, [x19, #-40]
10001d668:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001d66c:     	b	0x10001d64c <void std::__1::vector<benchmark::internal::Statistics, std::__1::allocator<benchmark::internal::Statistics>>::__emplace_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&)+0x1fc>
10001d670:     	mov	x19, x22
10001d674:     	cbnz	x22, 0x10001d610 <void std::__1::vector<benchmark::internal::Statistics, std::__1::allocator<benchmark::internal::Statistics>>::__emplace_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double (*&)(std::__1::vector<double, std::__1::allocator<double>> const&), benchmark::StatisticUnit&)+0x1c0>
10001d678:     	ldp	x29, x30, [sp, #144]
10001d67c:     	ldp	x20, x19, [sp, #128]
10001d680:     	ldp	x22, x21, [sp, #112]
10001d684:     	ldp	x24, x23, [sp, #96]
10001d688:     	ldp	x26, x25, [sp, #80]
10001d68c:     	ldp	x28, x27, [sp, #64]
10001d690:     	add	sp, sp, #160
10001d694:     	ret
10001d698:     	mov	x0, x20
10001d69c:     	bl	0x10001d728 <std::__1::vector<benchmark::internal::Statistics, std::__1::allocator<benchmark::internal::Statistics>>::__throw_length_error[abi:ue170006]() const>
10001d6a0:     	bl	0x100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>
10001d6a4:     	mov	x0, x21
10001d6a8:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
10001d6ac:     	brk	#0x1
10001d6b0:     	mov	x19, x0
10001d6b4:     	add	x0, sp, #24
10001d6b8:     	bl	0x10001d6c4 <std::__1::__split_buffer<benchmark::internal::Statistics, std::__1::allocator<benchmark::internal::Statistics>&>::~__split_buffer()>
10001d6bc:     	mov	x0, x19
10001d6c0:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010001d6c4 <std::__1::__split_buffer<benchmark::internal::Statistics, std::__1::allocator<benchmark::internal::Statistics>&>::~__split_buffer()>:
10001d6c4:     	stp	x20, x19, [sp, #-32]!
10001d6c8:     	stp	x29, x30, [sp, #16]
10001d6cc:     	add	x29, sp, #16
10001d6d0:     	mov	x19, x0
10001d6d4:     	ldp	x20, x9, [x0, #8]
10001d6d8:     	cmp	x9, x20
10001d6dc:     	b.ne	0x10001d708 <std::__1::__split_buffer<benchmark::internal::Statistics, std::__1::allocator<benchmark::internal::Statistics>&>::~__split_buffer()+0x44>
10001d6e0:     	ldr	x0, [x19]
10001d6e4:     	cbz	x0, 0x10001d6ec <std::__1::__split_buffer<benchmark::internal::Statistics, std::__1::allocator<benchmark::internal::Statistics>&>::~__split_buffer()+0x28>
10001d6e8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001d6ec:     	mov	x0, x19
10001d6f0:     	ldp	x29, x30, [sp, #16]
10001d6f4:     	ldp	x20, x19, [sp], #32
10001d6f8:     	ret
10001d6fc:     	mov	x9, x8
10001d700:     	cmp	x8, x20
10001d704:     	b.eq	0x10001d6e0 <std::__1::__split_buffer<benchmark::internal::Statistics, std::__1::allocator<benchmark::internal::Statistics>&>::~__split_buffer()+0x1c>
10001d708:     	sub	x8, x9, #40
10001d70c:     	str	x8, [x19, #16]
10001d710:     	ldursb	w9, [x9, #-17]
10001d714:     	tbz	w9, #31, 0x10001d6fc <std::__1::__split_buffer<benchmark::internal::Statistics, std::__1::allocator<benchmark::internal::Statistics>&>::~__split_buffer()+0x38>
10001d718:     	ldr	x0, [x8]
10001d71c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001d720:     	ldr	x8, [x19, #16]
10001d724:     	b	0x10001d6fc <std::__1::__split_buffer<benchmark::internal::Statistics, std::__1::allocator<benchmark::internal::Statistics>&>::~__split_buffer()+0x38>

000000010001d728 <std::__1::vector<benchmark::internal::Statistics, std::__1::allocator<benchmark::internal::Statistics>>::__throw_length_error[abi:ue170006]() const>:
10001d728:     	stp	x29, x30, [sp, #-16]!
10001d72c:     	mov	x29, sp
10001d730:     	adrp	x0, 0x100031000 <void benchmark::internal::AddNegatedPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x44>
10001d734:     	add	x0, x0, #3485
10001d738:     	bl	0x100006a48 <std::__1::__throw_length_error[abi:ue170006](char const*)>

000000010001d73c <void benchmark::internal::AddNegatedPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)>:
10001d73c:     	sub	sp, sp, #48
10001d740:     	stp	x20, x19, [sp, #16]
10001d744:     	stp	x29, x30, [sp, #32]
10001d748:     	add	x29, sp, #32
10001d74c:     	mov	x19, x0
10001d750:     	adrp	x8, 0x100038000 <void benchmark::internal::AddNegatedPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x80>
10001d754:     	add	x8, x8, #8
10001d758:     	ldaprb	w9, [x8]
10001d75c:     	tbz	w9, #0, 0x10001d84c <void benchmark::internal::AddNegatedPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x110>
10001d760:     	ldaprb	w9, [x8]
10001d764:     	tbz	w9, #0, 0x10001d89c <void benchmark::internal::AddNegatedPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x160>
10001d768:     	ldaprb	w9, [x8]
10001d76c:     	tbz	w9, #0, 0x10001d8ec <void benchmark::internal::AddNegatedPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x1b0>
10001d770:     	ldaprb	w8, [x8]
10001d774:     	tbz	w8, #0, 0x10001d93c <void benchmark::internal::AddNegatedPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x200>
10001d778:     	neg	w8, w1
10001d77c:     	neg	w1, w2
10001d780:     	mov	x0, x19
10001d784:     	mov	x2, x8
10001d788:     	bl	0x10001d97c <std::__1::vector<int, std::__1::allocator<int>>::iterator benchmark::internal::AddPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)>
10001d78c:     	ldr	x8, [x19, #8]
10001d790:     	subs	x9, x8, x0
10001d794:     	b.eq	0x10001d804 <void benchmark::internal::AddNegatedPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0xc8>
10001d798:     	sub	x10, x9, #4
10001d79c:     	mov	x9, x0
10001d7a0:     	cmp	x10, #60
10001d7a4:     	b.lo	0x10001d7f0 <void benchmark::internal::AddNegatedPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0xb4>
10001d7a8:     	lsr	x9, x10, #2
10001d7ac:     	add	x10, x9, #1
10001d7b0:     	and	x11, x10, #0x7ffffffffffffff0
10001d7b4:     	add	x9, x0, x11, lsl #2
10001d7b8:     	add	x12, x0, #32
10001d7bc:     	mov	x13, x11
10001d7c0:     	ldp	q0, q1, [x12, #-32]
10001d7c4:     	ldp	q2, q3, [x12]
10001d7c8:     	neg.4s	v0, v0
10001d7cc:     	neg.4s	v1, v1
10001d7d0:     	neg.4s	v2, v2
10001d7d4:     	neg.4s	v3, v3
10001d7d8:     	stp	q0, q1, [x12, #-32]
10001d7dc:     	stp	q2, q3, [x12], #64
10001d7e0:     	subs	x13, x13, #16
10001d7e4:     	b.ne	0x10001d7c0 <void benchmark::internal::AddNegatedPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x84>
10001d7e8:     	cmp	x10, x11
10001d7ec:     	b.eq	0x10001d804 <void benchmark::internal::AddNegatedPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0xc8>
10001d7f0:     	ldr	w10, [x9]
10001d7f4:     	neg	w10, w10
10001d7f8:     	str	w10, [x9], #4
10001d7fc:     	cmp	x9, x8
10001d800:     	b.ne	0x10001d7f0 <void benchmark::internal::AddNegatedPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0xb4>
10001d804:     	cmp	x8, x0
10001d808:     	b.eq	0x10001d83c <void benchmark::internal::AddNegatedPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x100>
10001d80c:     	sub	x8, x8, #4
10001d810:     	cmp	x8, x0
10001d814:     	b.ls	0x10001d83c <void benchmark::internal::AddNegatedPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x100>
10001d818:     	add	x9, x0, #4
10001d81c:     	ldur	w10, [x9, #-4]
10001d820:     	ldr	w11, [x8]
10001d824:     	stur	w11, [x9, #-4]
10001d828:     	str	w10, [x8], #-4
10001d82c:     	add	x10, x9, #4
10001d830:     	cmp	x9, x8
10001d834:     	mov	x9, x10
10001d838:     	b.lo	0x10001d81c <void benchmark::internal::AddNegatedPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0xe0>
10001d83c:     	ldp	x29, x30, [sp, #32]
10001d840:     	ldp	x20, x19, [sp, #16]
10001d844:     	add	sp, sp, #48
10001d848:     	ret
10001d84c:     	adrp	x0, 0x100038000 <void benchmark::internal::AddNegatedPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x17c>
10001d850:     	add	x0, x0, #8
10001d854:     	stp	w2, w3, [sp, #4]
10001d858:     	str	w1, [sp, #12]
10001d85c:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10001d860:     	adrp	x8, 0x100038000 <void benchmark::internal::AddNegatedPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x190>
10001d864:     	add	x8, x8, #8
10001d868:     	ldp	w3, w1, [sp, #8]
10001d86c:     	ldr	w2, [sp, #4]
10001d870:     	cbz	w0, 0x10001d760 <void benchmark::internal::AddNegatedPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x24>
10001d874:     	adrp	x8, 0x100038000 <void benchmark::internal::AddNegatedPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x1a4>
10001d878:     	str	xzr, [x8]
10001d87c:     	adrp	x0, 0x100038000 <void benchmark::internal::AddNegatedPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x1ac>
10001d880:     	add	x0, x0, #8
10001d884:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10001d888:     	adrp	x8, 0x100038000 <void benchmark::internal::AddNegatedPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x1b8>
10001d88c:     	add	x8, x8, #8
10001d890:     	ldp	w3, w1, [sp, #8]
10001d894:     	ldr	w2, [sp, #4]
10001d898:     	b	0x10001d760 <void benchmark::internal::AddNegatedPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x24>
10001d89c:     	adrp	x0, 0x100038000 <void benchmark::internal::AddNegatedPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x1cc>
10001d8a0:     	add	x0, x0, #8
10001d8a4:     	stp	w2, w3, [sp, #4]
10001d8a8:     	str	w1, [sp, #12]
10001d8ac:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10001d8b0:     	adrp	x8, 0x100038000 <void benchmark::internal::AddNegatedPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x1e0>
10001d8b4:     	add	x8, x8, #8
10001d8b8:     	ldp	w3, w1, [sp, #8]
10001d8bc:     	ldr	w2, [sp, #4]
10001d8c0:     	cbz	w0, 0x10001d768 <void benchmark::internal::AddNegatedPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x2c>
10001d8c4:     	adrp	x8, 0x100038000 <void benchmark::internal::AddNegatedPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x1f4>
10001d8c8:     	str	xzr, [x8]
10001d8cc:     	adrp	x0, 0x100038000 <void benchmark::internal::AddNegatedPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x1fc>
10001d8d0:     	add	x0, x0, #8
10001d8d4:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10001d8d8:     	adrp	x8, 0x100038000 <void benchmark::internal::AddNegatedPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x208>
10001d8dc:     	add	x8, x8, #8
10001d8e0:     	ldp	w3, w1, [sp, #8]
10001d8e4:     	ldr	w2, [sp, #4]
10001d8e8:     	b	0x10001d768 <void benchmark::internal::AddNegatedPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x2c>
10001d8ec:     	adrp	x0, 0x100038000 <void benchmark::internal::AddNegatedPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x21c>
10001d8f0:     	add	x0, x0, #8
10001d8f4:     	stp	w2, w3, [sp, #4]
10001d8f8:     	str	w1, [sp, #12]
10001d8fc:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10001d900:     	adrp	x8, 0x100038000 <void benchmark::internal::AddNegatedPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x230>
10001d904:     	add	x8, x8, #8
10001d908:     	ldp	w3, w1, [sp, #8]
10001d90c:     	ldr	w2, [sp, #4]
10001d910:     	cbz	w0, 0x10001d770 <void benchmark::internal::AddNegatedPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x34>
10001d914:     	adrp	x8, 0x100038000 <std::__1::vector<int, std::__1::allocator<int>>::iterator benchmark::internal::AddPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x4>
10001d918:     	str	xzr, [x8]
10001d91c:     	adrp	x0, 0x100038000 <std::__1::vector<int, std::__1::allocator<int>>::iterator benchmark::internal::AddPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0xc>
10001d920:     	add	x0, x0, #8
10001d924:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10001d928:     	adrp	x8, 0x100038000 <std::__1::vector<int, std::__1::allocator<int>>::iterator benchmark::internal::AddPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x18>
10001d92c:     	add	x8, x8, #8
10001d930:     	ldp	w3, w1, [sp, #8]
10001d934:     	ldr	w2, [sp, #4]
10001d938:     	b	0x10001d770 <void benchmark::internal::AddNegatedPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x34>
10001d93c:     	adrp	x0, 0x100038000 <std::__1::vector<int, std::__1::allocator<int>>::iterator benchmark::internal::AddPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x2c>
10001d940:     	add	x0, x0, #8
10001d944:     	stp	w2, w3, [sp, #4]
10001d948:     	str	w1, [sp, #12]
10001d94c:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10001d950:     	ldp	w3, w1, [sp, #8]
10001d954:     	ldr	w2, [sp, #4]
10001d958:     	cbz	w0, 0x10001d778 <void benchmark::internal::AddNegatedPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x3c>
10001d95c:     	adrp	x8, 0x100038000 <std::__1::vector<int, std::__1::allocator<int>>::iterator benchmark::internal::AddPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x4c>
10001d960:     	str	xzr, [x8]
10001d964:     	adrp	x0, 0x100038000 <std::__1::vector<int, std::__1::allocator<int>>::iterator benchmark::internal::AddPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x54>
10001d968:     	add	x0, x0, #8
10001d96c:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10001d970:     	ldp	w3, w1, [sp, #8]
10001d974:     	ldr	w2, [sp, #4]
10001d978:     	b	0x10001d778 <void benchmark::internal::AddNegatedPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x3c>

000000010001d97c <std::__1::vector<int, std::__1::allocator<int>>::iterator benchmark::internal::AddPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)>:
10001d97c:     	sub	sp, sp, #128
10001d980:     	stp	x28, x27, [sp, #32]
10001d984:     	stp	x26, x25, [sp, #48]
10001d988:     	stp	x24, x23, [sp, #64]
10001d98c:     	stp	x22, x21, [sp, #80]
10001d990:     	stp	x20, x19, [sp, #96]
10001d994:     	stp	x29, x30, [sp, #112]
10001d998:     	add	x29, sp, #112
10001d99c:     	mov	x20, x3
10001d9a0:     	mov	x21, x2
10001d9a4:     	mov	x22, x1
10001d9a8:     	mov	x19, x0
10001d9ac:     	adrp	x23, 0x100038000 <std::__1::vector<int, std::__1::allocator<int>>::iterator benchmark::internal::AddPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x9c>
10001d9b0:     	add	x23, x23, #8
10001d9b4:     	ldaprb	w8, [x23]
10001d9b8:     	tbz	w8, #0, 0x10001dbbc <std::__1::vector<int, std::__1::allocator<int>>::iterator benchmark::internal::AddPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x240>
10001d9bc:     	ldaprb	w8, [x23]
10001d9c0:     	tbz	w8, #0, 0x10001dbe4 <std::__1::vector<int, std::__1::allocator<int>>::iterator benchmark::internal::AddPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x268>
10001d9c4:     	ldaprb	w8, [x23]
10001d9c8:     	tbz	w8, #0, 0x10001dc0c <std::__1::vector<int, std::__1::allocator<int>>::iterator benchmark::internal::AddPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x290>
10001d9cc:     	ldp	x10, x9, [x19]
10001d9d0:     	cmp	w21, #1
10001d9d4:     	b.lt	0x10001db80 <std::__1::vector<int, std::__1::allocator<int>>::iterator benchmark::internal::AddPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x204>
10001d9d8:     	stp	x10, x9, [sp, #8]
10001d9dc:     	mov	w26, #1
10001d9e0:     	mov	w8, #2147483647
10001d9e4:     	sdiv	w27, w8, w20
10001d9e8:     	b	0x10001da04 <std::__1::vector<int, std::__1::allocator<int>>::iterator benchmark::internal::AddPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x88>
10001d9ec:     	str	w26, [x25], #4
10001d9f0:     	str	x25, [x19, #8]
10001d9f4:     	cmp	w26, w27
10001d9f8:     	mul	w26, w26, w20
10001d9fc:     	ccmp	w26, w21, #0, le
10001da00:     	b.gt	0x10001db74 <std::__1::vector<int, std::__1::allocator<int>>::iterator benchmark::internal::AddPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x1f8>
10001da04:     	cmp	w26, w22
10001da08:     	b.lt	0x10001d9f4 <std::__1::vector<int, std::__1::allocator<int>>::iterator benchmark::internal::AddPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x78>
10001da0c:     	ldp	x25, x8, [x19, #8]
10001da10:     	cmp	x25, x8
10001da14:     	b.ne	0x10001d9ec <std::__1::vector<int, std::__1::allocator<int>>::iterator benchmark::internal::AddPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x70>
10001da18:     	mov	x24, x21
10001da1c:     	mov	x21, x20
10001da20:     	mov	x20, x22
10001da24:     	ldr	x23, [x19]
10001da28:     	sub	x22, x25, x23
10001da2c:     	asr	x28, x22, #2
10001da30:     	add	x8, x28, #1
10001da34:     	lsr	x9, x8, #62
10001da38:     	cbnz	x9, 0x10001dbb0 <std::__1::vector<int, std::__1::allocator<int>>::iterator benchmark::internal::AddPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x234>
10001da3c:     	asr	x9, x22, #1
10001da40:     	cmp	x9, x8
10001da44:     	csel	x8, x9, x8, hi
10001da48:     	mov	x9, #9223372036854775804
10001da4c:     	cmp	x22, x9
10001da50:     	mov	x9, #4611686018427387903
10001da54:     	csel	x9, x8, x9, lo
10001da58:     	str	x9, [sp, #24]
10001da5c:     	cbz	x9, 0x10001daa8 <std::__1::vector<int, std::__1::allocator<int>>::iterator benchmark::internal::AddPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x12c>
10001da60:     	lsr	x8, x9, #62
10001da64:     	cbnz	x8, 0x10001dbb8 <std::__1::vector<int, std::__1::allocator<int>>::iterator benchmark::internal::AddPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x23c>
10001da68:     	lsl	x0, x9, #2
10001da6c:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001da70:     	add	x8, x0, x28, lsl #2
10001da74:     	mov	x9, x8
10001da78:     	str	w26, [x9], #4
10001da7c:     	cmp	x25, x23
10001da80:     	b.eq	0x10001dac0 <std::__1::vector<int, std::__1::allocator<int>>::iterator benchmark::internal::AddPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x144>
10001da84:     	sub	x11, x25, #4
10001da88:     	sub	x10, x11, x23
10001da8c:     	cmp	x10, #60
10001da90:     	ldr	x16, [sp, #24]
10001da94:     	b.hs	0x10001dad4 <std::__1::vector<int, std::__1::allocator<int>>::iterator benchmark::internal::AddPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x158>
10001da98:     	mov	x22, x20
10001da9c:     	mov	x20, x21
10001daa0:     	mov	x21, x24
10001daa4:     	b	0x10001db48 <std::__1::vector<int, std::__1::allocator<int>>::iterator benchmark::internal::AddPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x1cc>
10001daa8:     	mov	x0, #0
10001daac:     	add	x8, x0, x28, lsl #2
10001dab0:     	mov	x9, x8
10001dab4:     	str	w26, [x9], #4
10001dab8:     	cmp	x25, x23
10001dabc:     	b.ne	0x10001da84 <std::__1::vector<int, std::__1::allocator<int>>::iterator benchmark::internal::AddPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x108>
10001dac0:     	mov	x22, x20
10001dac4:     	mov	x20, x21
10001dac8:     	mov	x21, x24
10001dacc:     	ldr	x16, [sp, #24]
10001dad0:     	b	0x10001db58 <std::__1::vector<int, std::__1::allocator<int>>::iterator benchmark::internal::AddPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x1dc>
10001dad4:     	add	x12, x0, x22
10001dad8:     	sub	x11, x11, x12
10001dadc:     	add	x11, x11, #4
10001dae0:     	cmp	x11, #64
10001dae4:     	mov	x22, x20
10001dae8:     	mov	x20, x21
10001daec:     	mov	x21, x24
10001daf0:     	b.lo	0x10001db48 <std::__1::vector<int, std::__1::allocator<int>>::iterator benchmark::internal::AddPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x1cc>
10001daf4:     	lsr	x10, x10, #2
10001daf8:     	add	x10, x10, #1
10001dafc:     	and	x11, x10, #0x7ffffffffffffff0
10001db00:     	lsl	x13, x11, #2
10001db04:     	sub	x12, x25, x13
10001db08:     	sub	x8, x8, x13
10001db0c:     	sub	x13, x25, #32
10001db10:     	add	x14, x0, x28, lsl #2
10001db14:     	sub	x14, x14, #32
10001db18:     	mov	x15, x11
10001db1c:     	ldp	q1, q0, [x13]
10001db20:     	ldp	q3, q2, [x13, #-32]
10001db24:     	stp	q1, q0, [x14]
10001db28:     	stp	q3, q2, [x14, #-32]
10001db2c:     	sub	x13, x13, #64
10001db30:     	sub	x14, x14, #64
10001db34:     	sub	x15, x15, #16
10001db38:     	cbnz	x15, 0x10001db1c <std::__1::vector<int, std::__1::allocator<int>>::iterator benchmark::internal::AddPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x1a0>
10001db3c:     	mov	x25, x12
10001db40:     	cmp	x10, x11
10001db44:     	b.eq	0x10001db58 <std::__1::vector<int, std::__1::allocator<int>>::iterator benchmark::internal::AddPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x1dc>
10001db48:     	ldr	w10, [x25, #-4]!
10001db4c:     	str	w10, [x8, #-4]!
10001db50:     	cmp	x25, x23
10001db54:     	b.ne	0x10001db48 <std::__1::vector<int, std::__1::allocator<int>>::iterator benchmark::internal::AddPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x1cc>
10001db58:     	add	x10, x0, x16, lsl #2
10001db5c:     	stp	x8, x9, [x19]
10001db60:     	str	x10, [x19, #16]
10001db64:     	cbz	x23, 0x10001d9f4 <std::__1::vector<int, std::__1::allocator<int>>::iterator benchmark::internal::AddPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x78>
10001db68:     	mov	x0, x23
10001db6c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001db70:     	b	0x10001d9f4 <std::__1::vector<int, std::__1::allocator<int>>::iterator benchmark::internal::AddPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x78>
10001db74:     	ldr	x8, [x19]
10001db78:     	ldp	x10, x9, [sp, #8]
10001db7c:     	b	0x10001db84 <std::__1::vector<int, std::__1::allocator<int>>::iterator benchmark::internal::AddPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x208>
10001db80:     	mov	x8, x10
10001db84:     	sub	x9, x9, x10
10001db88:     	lsl	x9, x9, #30
10001db8c:     	add	x0, x8, x9, asr #30
10001db90:     	ldp	x29, x30, [sp, #112]
10001db94:     	ldp	x20, x19, [sp, #96]
10001db98:     	ldp	x22, x21, [sp, #80]
10001db9c:     	ldp	x24, x23, [sp, #64]
10001dba0:     	ldp	x26, x25, [sp, #48]
10001dba4:     	ldp	x28, x27, [sp, #32]
10001dba8:     	add	sp, sp, #128
10001dbac:     	ret
10001dbb0:     	mov	x0, x19
10001dbb4:     	bl	0x10001c040 <std::__1::vector<int, std::__1::allocator<int>>::__throw_length_error[abi:ue170006]() const>
10001dbb8:     	bl	0x100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>
10001dbbc:     	adrp	x0, 0x100038000 <std::__1::vector<int, std::__1::allocator<int>>::iterator benchmark::internal::AddPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x2ac>
10001dbc0:     	add	x0, x0, #8
10001dbc4:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10001dbc8:     	cbz	w0, 0x10001d9bc <std::__1::vector<int, std::__1::allocator<int>>::iterator benchmark::internal::AddPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x40>
10001dbcc:     	adrp	x8, 0x100038000 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
10001dbd0:     	str	xzr, [x8]
10001dbd4:     	adrp	x0, 0x100038000 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x8>
10001dbd8:     	add	x0, x0, #8
10001dbdc:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10001dbe0:     	b	0x10001d9bc <std::__1::vector<int, std::__1::allocator<int>>::iterator benchmark::internal::AddPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x40>
10001dbe4:     	adrp	x0, 0x100038000 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x18>
10001dbe8:     	add	x0, x0, #8
10001dbec:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10001dbf0:     	cbz	w0, 0x10001d9c4 <std::__1::vector<int, std::__1::allocator<int>>::iterator benchmark::internal::AddPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x48>
10001dbf4:     	adrp	x8, 0x100038000 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x28>
10001dbf8:     	str	xzr, [x8]
10001dbfc:     	adrp	x0, 0x100038000 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x30>
10001dc00:     	add	x0, x0, #8
10001dc04:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10001dc08:     	b	0x10001d9c4 <std::__1::vector<int, std::__1::allocator<int>>::iterator benchmark::internal::AddPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x48>
10001dc0c:     	adrp	x0, 0x100038000 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x40>
10001dc10:     	add	x0, x0, #8
10001dc14:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10001dc18:     	cbz	w0, 0x10001d9cc <std::__1::vector<int, std::__1::allocator<int>>::iterator benchmark::internal::AddPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x50>
10001dc1c:     	adrp	x8, 0x100038000 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x50>
10001dc20:     	str	xzr, [x8]
10001dc24:     	adrp	x0, 0x100038000 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x58>
10001dc28:     	add	x0, x0, #8
10001dc2c:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10001dc30:     	b	0x10001d9cc <std::__1::vector<int, std::__1::allocator<int>>::iterator benchmark::internal::AddPowers<int>(std::__1::vector<int, std::__1::allocator<int>>*, int, int, int)+0x50>

000000010001dc34 <__GLOBAL__sub_I_benchmark_register.cc>:
10001dc34:     	b	0x10000363c <benchmark::internal::InitializeStreams()>

000000010001dc38 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>:
10001dc38:     	sub	sp, sp, #80
10001dc3c:     	stp	d9, d8, [sp, #16]
10001dc40:     	stp	x22, x21, [sp, #32]
10001dc44:     	stp	x20, x19, [sp, #48]
10001dc48:     	stp	x29, x30, [sp, #64]
10001dc4c:     	add	x29, sp, #64
10001dc50:     	mov	x19, x0
10001dc54:     	ldrsb	w8, [x0, #23]
10001dc58:     	tbnz	w8, #31, 0x10001dd0c <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xd4>
10001dc5c:     	and	x8, x8, #0xff
10001dc60:     	cbz	w8, 0x10001dd60 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x128>
10001dc64:     	add	x8, x19, x8
10001dc68:     	ldurb	w8, [x8, #-1]
10001dc6c:     	cmp	w8, #120
10001dc70:     	b.ne	0x10001dd28 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xf0>
10001dc74:     	bl	0x10002f0b0 <_vsnprintf+0x10002f0b0>
10001dc78:     	str	wzr, [x0]
10001dc7c:     	ldrsb	w8, [x19, #23]
10001dc80:     	ldr	x9, [x19]
10001dc84:     	cmp	w8, #0
10001dc88:     	csel	x0, x9, x19, lt
10001dc8c:     	add	x1, sp, #8
10001dc90:     	mov	w2, #10
10001dc94:     	bl	0x10002f284 <_vsnprintf+0x10002f284>
10001dc98:     	mov	x20, x0
10001dc9c:     	adrp	x8, 0x100038000 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xd0>
10001dca0:     	add	x8, x8, #8
10001dca4:     	ldaprb	w8, [x8]
10001dca8:     	tbz	w8, #0, 0x10001de78 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x240>
10001dcac:     	adrp	x21, 0x100038000 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xe0>
10001dcb0:     	ldr	x0, [x21]
10001dcb4:     	cbz	x0, 0x10001dd04 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xcc>
10001dcb8:     	adrp	x1, 0x100031000 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xd0>
10001dcbc:     	add	x1, x1, #4000
10001dcc0:     	mov	w2, #55
10001dcc4:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10001dcc8:     	ldr	x0, [x21]
10001dccc:     	cbz	x0, 0x10001dd04 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xcc>
10001dcd0:     	ldrb	w8, [x19, #23]
10001dcd4:     	sxtb	w9, w8
10001dcd8:     	ldp	x10, x11, [x19]
10001dcdc:     	cmp	w9, #0
10001dce0:     	csel	x1, x10, x19, lt
10001dce4:     	csel	x2, x11, x8, lt
10001dce8:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10001dcec:     	ldr	x0, [x21]
10001dcf0:     	cbz	x0, 0x10001dd04 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xcc>
10001dcf4:     	adrp	x1, 0x100031000 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x10c>
10001dcf8:     	add	x1, x1, #4056
10001dcfc:     	mov	w2, #44
10001dd00:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10001dd04:     	mov	x0, #0
10001dd08:     	b	0x10001de5c <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x224>
10001dd0c:     	ldr	x8, [x19, #8]
10001dd10:     	cbz	x8, 0x10001dd60 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x128>
10001dd14:     	ldr	x9, [x19]
10001dd18:     	add	x8, x9, x8
10001dd1c:     	ldurb	w8, [x8, #-1]
10001dd20:     	cmp	w8, #120
10001dd24:     	b.eq	0x10001dc74 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x3c>
10001dd28:     	adrp	x20, 0x100038000 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x15c>
10001dd2c:     	add	x20, x20, #8
10001dd30:     	cmp	w8, #115
10001dd34:     	b.eq	0x10001ddd0 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x198>
10001dd38:     	adrp	x8, 0x100038000 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x16c>
10001dd3c:     	ldr	w8, [x8, #32]
10001dd40:     	tbnz	w8, #31, 0x10001dd68 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x130>
10001dd44:     	adrp	x8, 0x100038000 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x178>
10001dd48:     	add	x8, x8, #24
10001dd4c:     	ldaprb	w8, [x8]
10001dd50:     	tbz	w8, #0, 0x10001dec4 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x28c>
10001dd54:     	adrp	x21, 0x100038000 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x188>
10001dd58:     	add	x21, x21, #16
10001dd5c:     	b	0x10001dd78 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x140>
10001dd60:     	mov	x20, #0
10001dd64:     	b	0x10001de58 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x220>
10001dd68:     	ldaprb	w8, [x20]
10001dd6c:     	tbz	w8, #0, 0x10001def4 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x2bc>
10001dd70:     	adrp	x21, 0x100038000 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x1a4>
10001dd74:     	add	x21, x21, #0
10001dd78:     	ldr	x0, [x21]
10001dd7c:     	cbz	x0, 0x10001ddd0 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x198>
10001dd80:     	adrp	x1, 0x100032000 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x19c>
10001dd84:     	add	x1, x1, #5
10001dd88:     	mov	w2, #7
10001dd8c:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10001dd90:     	ldr	x0, [x21]
10001dd94:     	cbz	x0, 0x10001ddd0 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x198>
10001dd98:     	mov	w1, #0
10001dd9c:     	bl	0x10002ee28 <_vsnprintf+0x10002ee28>
10001dda0:     	ldr	x0, [x21]
10001dda4:     	cbz	x0, 0x10001ddd0 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x198>
10001dda8:     	adrp	x1, 0x100032000 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x1c4>
10001ddac:     	add	x1, x1, #13
10001ddb0:     	mov	w2, #3
10001ddb4:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10001ddb8:     	ldr	x0, [x21]
10001ddbc:     	cbz	x0, 0x10001ddd0 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x198>
10001ddc0:     	adrp	x1, 0x100032000 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x1dc>
10001ddc4:     	add	x1, x1, #17
10001ddc8:     	mov	w2, #85
10001ddcc:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10001ddd0:     	bl	0x10002f0b0 <_vsnprintf+0x10002f0b0>
10001ddd4:     	str	wzr, [x0]
10001ddd8:     	ldrsb	w8, [x19, #23]
10001dddc:     	ldr	x9, [x19]
10001dde0:     	cmp	w8, #0
10001dde4:     	csel	x0, x9, x19, lt
10001dde8:     	add	x1, sp, #8
10001ddec:     	bl	0x10002f278 <_vsnprintf+0x10002f278>
10001ddf0:     	fmov	d8, d0
10001ddf4:     	ldaprb	w8, [x20]
10001ddf8:     	adrp	x20, 0x100038000 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x22c>
10001ddfc:     	tbz	w8, #0, 0x10001dea0 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x268>
10001de00:     	ldr	x0, [x20]
10001de04:     	cbz	x0, 0x10001de54 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x21c>
10001de08:     	adrp	x1, 0x100032000 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x224>
10001de0c:     	add	x1, x1, #103
10001de10:     	mov	w2, #57
10001de14:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10001de18:     	ldr	x0, [x20]
10001de1c:     	cbz	x0, 0x10001de54 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x21c>
10001de20:     	ldrb	w8, [x19, #23]
10001de24:     	sxtb	w9, w8
10001de28:     	ldp	x10, x11, [x19]
10001de2c:     	cmp	w9, #0
10001de30:     	csel	x1, x10, x19, lt
10001de34:     	csel	x2, x11, x8, lt
10001de38:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10001de3c:     	ldr	x0, [x20]
10001de40:     	cbz	x0, 0x10001de54 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x21c>
10001de44:     	adrp	x1, 0x100032000 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x260>
10001de48:     	add	x1, x1, #161
10001de4c:     	mov	w2, #42
10001de50:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10001de54:     	fmov	x20, d8
10001de58:     	mov	w0, #1
10001de5c:     	mov	x1, x20
10001de60:     	ldp	x29, x30, [sp, #64]
10001de64:     	ldp	x20, x19, [sp, #48]
10001de68:     	ldp	x22, x21, [sp, #32]
10001de6c:     	ldp	d9, d8, [sp, #16]
10001de70:     	add	sp, sp, #80
10001de74:     	ret
10001de78:     	adrp	x0, 0x100038000 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x2ac>
10001de7c:     	add	x0, x0, #8
10001de80:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10001de84:     	cbz	w0, 0x10001dcac <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x74>
10001de88:     	adrp	x8, 0x100038000 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x2bc>
10001de8c:     	str	xzr, [x8]
10001de90:     	adrp	x0, 0x100038000 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x2c4>
10001de94:     	add	x0, x0, #8
10001de98:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10001de9c:     	b	0x10001dcac <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x74>
10001dea0:     	adrp	x0, 0x100038000 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x2d4>
10001dea4:     	add	x0, x0, #8
10001dea8:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10001deac:     	cbz	w0, 0x10001de00 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x1c8>
10001deb0:     	str	xzr, [x20]
10001deb4:     	adrp	x0, 0x100038000 <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)>
10001deb8:     	add	x0, x0, #8
10001debc:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10001dec0:     	b	0x10001de00 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x1c8>
10001dec4:     	adrp	x0, 0x100038000 <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)+0x10>
10001dec8:     	add	x0, x0, #24
10001decc:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10001ded0:     	adrp	x21, 0x100038000 <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)+0x1c>
10001ded4:     	add	x21, x21, #16
10001ded8:     	cbz	w0, 0x10001dd78 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x140>
10001dedc:     	adrp	x8, 0x100034000 <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)+0x18>
10001dee0:     	ldr	x8, [x8, #464]
10001dee4:     	str	x8, [x21]
10001dee8:     	adrp	x0, 0x100038000 <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)+0x34>
10001deec:     	add	x0, x0, #24
10001def0:     	b	0x10001df18 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x2e0>
10001def4:     	adrp	x0, 0x100038000 <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)+0x40>
10001def8:     	add	x0, x0, #8
10001defc:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10001df00:     	adrp	x21, 0x100038000 <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)+0x4c>
10001df04:     	add	x21, x21, #0
10001df08:     	cbz	w0, 0x10001dd78 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x140>
10001df0c:     	str	xzr, [x21]
10001df10:     	adrp	x0, 0x100038000 <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)+0x5c>
10001df14:     	add	x0, x0, #8
10001df18:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10001df1c:     	b	0x10001dd78 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x140>

000000010001df20 <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)>:
10001df20:     	stp	x28, x27, [sp, #-96]!
10001df24:     	stp	x26, x25, [sp, #16]
10001df28:     	stp	x24, x23, [sp, #32]
10001df2c:     	stp	x22, x21, [sp, #48]
10001df30:     	stp	x20, x19, [sp, #64]
10001df34:     	stp	x29, x30, [sp, #80]
10001df38:     	add	x29, sp, #80
10001df3c:     	mov	x20, x2
10001df40:     	mov	x22, x1
10001df44:     	mov	x19, x0
10001df48:     	strh	wzr, [x0, #48]
10001df4c:     	movi.2d	v0, #0000000000000000
10001df50:     	stp	q0, q0, [x0, #16]
10001df54:     	str	q0, [x0]
10001df58:     	stp	x1, x3, [x0, #56]
10001df5c:     	adrp	x0, 0x100038000 <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)+0xa8>
10001df60:     	add	x0, x0, #280
10001df64:     	bl	0x10001dc38 <benchmark::internal::ParseBenchMinTime(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
10001df68:     	stp	x0, x1, [x19, #72]
10001df6c:     	ldr	d0, [x22, #288]
10001df70:     	bl	0x1000041e8 <benchmark::internal::IsZero(double)>
10001df74:     	ldr	w8, [x19, #72]
10001df78:     	adrp	x9, 0x100038000 <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)+0xc4>
10001df7c:     	add	x9, x9, #184
10001df80:     	add	x10, x19, #80
10001df84:     	cmp	w8, #0
10001df88:     	csel	x8, x9, x10, eq
10001df8c:     	add	x9, x22, #288
10001df90:     	cmp	w0, #0
10001df94:     	csel	x8, x8, x9, ne
10001df98:     	ldr	d0, [x8]
10001df9c:     	str	d0, [x19, #88]
10001dfa0:     	ldr	x8, [x19, #56]
10001dfa4:     	ldr	d0, [x8, #288]
10001dfa8:     	bl	0x1000041e8 <benchmark::internal::IsZero(double)>
10001dfac:     	ldr	x25, [x19, #56]
10001dfb0:     	tbnz	w0, #0, 0x10001dfc0 <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)+0xa0>
10001dfb4:     	ldr	d0, [x25, #296]
10001dfb8:     	fcmp	d0, #0.0
10001dfbc:     	b.gt	0x10001dfcc <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)+0xac>
10001dfc0:     	adrp	x8, 0x100038000 <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)+0x10c>
10001dfc4:     	add	x8, x8, #304
10001dfc8:     	ldr	d0, [x8]
10001dfcc:     	str	d0, [x19, #96]
10001dfd0:     	fcmp	d0, #0.0
10001dfd4:     	cset	w8, le
10001dfd8:     	strb	w8, [x19, #104]
10001dfdc:     	adrp	x8, 0x100038000 <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)+0x128>
10001dfe0:     	add	x8, x8, #312
10001dfe4:     	ldr	w9, [x25, #280]
10001dfe8:     	ldr	w8, [x8]
10001dfec:     	cmp	w9, #0
10001dff0:     	csel	w8, w8, w9, eq
10001dff4:     	str	w8, [x19, #108]
10001dff8:     	ldr	x8, [x25, #304]
10001dffc:     	cbz	x8, 0x10001e008 <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)+0xe8>
10001e000:     	mov	w26, #1
10001e004:     	b	0x10001e014 <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)+0xf4>
10001e008:     	ldr	w8, [x19, #72]
10001e00c:     	cmp	w8, #0
10001e010:     	cset	w26, eq
10001e014:     	ldrsw	x27, [x25, #312]
10001e018:     	mov	x21, x19
10001e01c:     	str	xzr, [x21, #120]!
10001e020:     	sturb	w26, [x21, #-8]
10001e024:     	stur	wzr, [x21, #-4]
10001e028:     	stp	xzr, xzr, [x21, #8]
10001e02c:     	sub	x8, x27, #1
10001e030:     	cbz	w8, 0x10001e06c <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)+0x14c>
10001e034:     	cmp	w27, #0
10001e038:     	b.le	0x10001e13c <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)+0x21c>
10001e03c:     	lsl	x23, x8, #3
10001e040:     	mov	x0, x23
10001e044:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001e048:     	mov	x24, x0
10001e04c:     	str	x0, [x19, #120]
10001e050:     	add	x8, x0, x27, lsl #3
10001e054:     	sub	x8, x8, #8
10001e058:     	str	x8, [x19, #136]
10001e05c:     	mov	x1, x23
10001e060:     	bl	0x10002f0f8 <_vsnprintf+0x10002f0f8>
10001e064:     	add	x8, x24, x23
10001e068:     	str	x8, [x19, #128]
10001e06c:     	mov	x23, x19
10001e070:     	stp	xzr, xzr, [x23, #144]!
10001e074:     	str	xzr, [x23, #16]
10001e078:     	cbz	w26, 0x10001e0a0 <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)+0x180>
10001e07c:     	ldr	x8, [x22, #304]
10001e080:     	cbnz	x8, 0x10001e0a4 <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)+0x184>
10001e084:     	adrp	x8, 0x100038000 <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)+0x1cc>
10001e088:     	add	x8, x8, #8
10001e08c:     	ldaprb	w8, [x8]
10001e090:     	tbz	w8, #0, 0x10001e16c <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)+0x24c>
10001e094:     	ldr	x8, [x19, #80]
10001e098:     	ldr	x25, [x19, #56]
10001e09c:     	b	0x10001e0a4 <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)+0x184>
10001e0a0:     	mov	w8, #1
10001e0a4:     	adrp	x9, 0x100038000 <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)+0x1ec>
10001e0a8:     	add	x9, x9, #317
10001e0ac:     	stp	x8, x20, [x19, #168]
10001e0b0:     	ldrb	w8, [x9]
10001e0b4:     	cmp	w8, #0
10001e0b8:     	cset	w9, ne
10001e0bc:     	adrp	x10, 0x100038000 <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)+0x204>
10001e0c0:     	add	x10, x10, #318
10001e0c4:     	ldrb	w10, [x10]
10001e0c8:     	orr	w9, w9, w10
10001e0cc:     	and	w9, w9, #0x1
10001e0d0:     	strb	w9, [x19, #48]
10001e0d4:     	strb	w8, [x19, #49]
10001e0d8:     	ldr	w8, [x25, #208]
10001e0dc:     	cbz	w8, 0x10001e11c <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)+0x1fc>
10001e0e0:     	ubfx	w9, w8, #2, #1
10001e0e4:     	strb	w9, [x19, #48]
10001e0e8:     	ubfx	w8, w8, #1, #1
10001e0ec:     	strb	w8, [x19, #49]
10001e0f0:     	adrp	x8, 0x100038000 <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)+0x238>
10001e0f4:     	add	x8, x8, #8
10001e0f8:     	ldaprb	w8, [x8]
10001e0fc:     	adrp	x20, 0x100038000 <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)+0x244>
10001e100:     	tbz	w8, #0, 0x10001e148 <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)+0x228>
10001e104:     	ldr	x0, [x20]
10001e108:     	cbz	x0, 0x10001e11c <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)+0x1fc>
10001e10c:     	adrp	x1, 0x100032000 <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)+0x23c>
10001e110:     	add	x1, x1, #204
10001e114:     	mov	w2, #53
10001e118:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10001e11c:     	mov	x0, x19
10001e120:     	ldp	x29, x30, [sp, #80]
10001e124:     	ldp	x20, x19, [sp, #64]
10001e128:     	ldp	x22, x21, [sp, #48]
10001e12c:     	ldp	x24, x23, [sp, #32]
10001e130:     	ldp	x26, x25, [sp, #16]
10001e134:     	ldp	x28, x27, [sp], #96
10001e138:     	ret
10001e13c:     	mov	x0, x21
10001e140:     	bl	0x10001fa7c <std::__1::vector<std::__1::thread, std::__1::allocator<std::__1::thread>>::__throw_length_error[abi:ue170006]() const>
10001e144:     	brk	#0x1
10001e148:     	adrp	x0, 0x100038000 <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)+0x290>
10001e14c:     	add	x0, x0, #8
10001e150:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10001e154:     	cbz	w0, 0x10001e104 <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)+0x1e4>
10001e158:     	str	xzr, [x20]
10001e15c:     	adrp	x0, 0x100038000 <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)+0x2a4>
10001e160:     	add	x0, x0, #8
10001e164:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10001e168:     	b	0x10001e104 <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)+0x1e4>
10001e16c:     	adrp	x0, 0x100038000 <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)+0x2b4>
10001e170:     	add	x0, x0, #8
10001e174:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10001e178:     	cbz	w0, 0x10001e094 <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)+0x174>
10001e17c:     	adrp	x8, 0x100038000 <std::__1::vector<std::__1::thread, std::__1::allocator<std::__1::thread>>::~vector[abi:ue170006]()>
10001e180:     	str	xzr, [x8]
10001e184:     	adrp	x0, 0x100038000 <std::__1::vector<std::__1::thread, std::__1::allocator<std::__1::thread>>::~vector[abi:ue170006]()+0x8>
10001e188:     	add	x0, x0, #8
10001e18c:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10001e190:     	b	0x10001e094 <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)+0x174>
10001e194:     	mov	x20, x0
10001e198:     	ldr	x0, [x23]
10001e19c:     	cbz	x0, 0x10001e1a8 <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)+0x288>
10001e1a0:     	str	x0, [x19, #152]
10001e1a4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001e1a8:     	mov	x0, x21
10001e1ac:     	bl	0x10001e1e4 <std::__1::vector<std::__1::thread, std::__1::allocator<std::__1::thread>>::~vector[abi:ue170006]()>
10001e1b0:     	b	0x10001e1d4 <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)+0x2b4>
10001e1b4:     	mov	x20, x0
10001e1b8:     	ldr	x1, [x21]
10001e1bc:     	cbz	x1, 0x10001e1d4 <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)+0x2b4>
10001e1c0:     	add	x0, x19, #128
10001e1c4:     	mov	x2, x21
10001e1c8:     	bl	0x10002eb90 <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*) (.cold.1)>
10001e1cc:     	b	0x10001e1d4 <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)+0x2b4>
10001e1d0:     	mov	x20, x0
10001e1d4:     	mov	x0, x19
10001e1d8:     	bl	0x100006e58 <benchmark::internal::RunResults::~RunResults()>
10001e1dc:     	mov	x0, x20
10001e1e0:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010001e1e4 <std::__1::vector<std::__1::thread, std::__1::allocator<std::__1::thread>>::~vector[abi:ue170006]()>:
10001e1e4:     	stp	x20, x19, [sp, #-32]!
10001e1e8:     	stp	x29, x30, [sp, #16]
10001e1ec:     	add	x29, sp, #16
10001e1f0:     	mov	x19, x0
10001e1f4:     	ldr	x20, [x0]
10001e1f8:     	cbz	x20, 0x10001e22c <std::__1::vector<std::__1::thread, std::__1::allocator<std::__1::thread>>::~vector[abi:ue170006]()+0x48>
10001e1fc:     	ldr	x0, [x19, #8]
10001e200:     	mov	x8, x20
10001e204:     	cmp	x0, x20
10001e208:     	b.eq	0x10001e220 <std::__1::vector<std::__1::thread, std::__1::allocator<std::__1::thread>>::~vector[abi:ue170006]()+0x3c>
10001e20c:     	sub	x0, x0, #8
10001e210:     	bl	0x10002efa8 <_vsnprintf+0x10002efa8>
10001e214:     	cmp	x0, x20
10001e218:     	b.ne	0x10001e20c <std::__1::vector<std::__1::thread, std::__1::allocator<std::__1::thread>>::~vector[abi:ue170006]()+0x28>
10001e21c:     	ldr	x8, [x19]
10001e220:     	str	x20, [x19, #8]
10001e224:     	mov	x0, x8
10001e228:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001e22c:     	mov	x0, x19
10001e230:     	ldp	x29, x30, [sp, #16]
10001e234:     	ldp	x20, x19, [sp], #32
10001e238:     	ret

000000010001e23c <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)>:
10001e23c:     	b	0x10001df20 <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*)>

000000010001e240 <benchmark::internal::BenchmarkRunner::DoNIterations()>:
10001e240:     	sub	sp, sp, #144
10001e244:     	stp	x26, x25, [sp, #64]
10001e248:     	stp	x24, x23, [sp, #80]
10001e24c:     	stp	x22, x21, [sp, #96]
10001e250:     	stp	x20, x19, [sp, #112]
10001e254:     	stp	x29, x30, [sp, #128]
10001e258:     	add	x29, sp, #128
10001e25c:     	mov	x20, x0
10001e260:     	mov	x19, x8
10001e264:     	adrp	x23, 0x100038000 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x8c>
10001e268:     	ldr	w8, [x23, #32]
10001e26c:     	cmp	w8, #2
10001e270:     	b.ge	0x10001e290 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x50>
10001e274:     	adrp	x8, 0x100038000 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x9c>
10001e278:     	add	x8, x8, #8
10001e27c:     	ldaprb	w8, [x8]
10001e280:     	tbz	w8, #0, 0x10001e78c <benchmark::internal::BenchmarkRunner::DoNIterations()+0x54c>
10001e284:     	adrp	x22, 0x100038000 <benchmark::internal::BenchmarkRunner::DoNIterations()+0xac>
10001e288:     	add	x22, x22, #0
10001e28c:     	b	0x10001e2a8 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x68>
10001e290:     	adrp	x8, 0x100038000 <benchmark::internal::BenchmarkRunner::DoNIterations()+0xb8>
10001e294:     	add	x8, x8, #24
10001e298:     	ldaprb	w8, [x8]
10001e29c:     	tbz	w8, #0, 0x10001e7b4 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x574>
10001e2a0:     	adrp	x22, 0x100038000 <benchmark::internal::BenchmarkRunner::DoNIterations()+0xc8>
10001e2a4:     	add	x22, x22, #16
10001e2a8:     	ldr	x0, [x22]
10001e2ac:     	cbz	x0, 0x10001e300 <benchmark::internal::BenchmarkRunner::DoNIterations()+0xc0>
10001e2b0:     	adrp	x1, 0x100032000 <benchmark::internal::BenchmarkRunner::DoNIterations()+0xc0>
10001e2b4:     	add	x1, x1, #5
10001e2b8:     	mov	w2, #7
10001e2bc:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10001e2c0:     	ldr	x0, [x22]
10001e2c4:     	cbz	x0, 0x10001e300 <benchmark::internal::BenchmarkRunner::DoNIterations()+0xc0>
10001e2c8:     	mov	w1, #2
10001e2cc:     	bl	0x10002ee28 <_vsnprintf+0x10002ee28>
10001e2d0:     	ldr	x0, [x22]
10001e2d4:     	cbz	x0, 0x10001e300 <benchmark::internal::BenchmarkRunner::DoNIterations()+0xc0>
10001e2d8:     	adrp	x1, 0x100032000 <benchmark::internal::BenchmarkRunner::DoNIterations()+0xe8>
10001e2dc:     	add	x1, x1, #13
10001e2e0:     	mov	w2, #3
10001e2e4:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10001e2e8:     	ldr	x0, [x22]
10001e2ec:     	cbz	x0, 0x10001e300 <benchmark::internal::BenchmarkRunner::DoNIterations()+0xc0>
10001e2f0:     	adrp	x1, 0x100032000 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x100>
10001e2f4:     	add	x1, x1, #258
10001e2f8:     	mov	w2, #8
10001e2fc:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10001e300:     	ldr	x0, [x20, #56]
10001e304:     	add	x21, sp, #40
10001e308:     	add	x8, sp, #40
10001e30c:     	bl	0x10000ba9c <benchmark::BenchmarkName::str() const>
10001e310:     	ldr	x0, [x22]
10001e314:     	cbz	x0, 0x10001e37c <benchmark::internal::BenchmarkRunner::DoNIterations()+0x13c>
10001e318:     	ldrb	w8, [sp, #63]
10001e31c:     	sxtb	w9, w8
10001e320:     	ldp	x10, x11, [sp, #40]
10001e324:     	cmp	w9, #0
10001e328:     	csel	x1, x10, x21, lt
10001e32c:     	csel	x2, x11, x8, lt
10001e330:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10001e334:     	ldr	x0, [x22]
10001e338:     	cbz	x0, 0x10001e37c <benchmark::internal::BenchmarkRunner::DoNIterations()+0x13c>
10001e33c:     	adrp	x1, 0x100032000 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x14c>
10001e340:     	add	x1, x1, #267
10001e344:     	mov	w2, #5
10001e348:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10001e34c:     	ldr	x0, [x22]
10001e350:     	add	x21, x20, #168
10001e354:     	cbz	x0, 0x10001e380 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x140>
10001e358:     	ldr	x1, [x21]
10001e35c:     	bl	0x10002ee40 <_vsnprintf+0x10002ee40>
10001e360:     	ldr	x0, [x22]
10001e364:     	cbz	x0, 0x10001e380 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x140>
10001e368:     	adrp	x1, 0x100031000 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x174>
10001e36c:     	add	x1, x1, #2523
10001e370:     	mov	w2, #1
10001e374:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10001e378:     	b	0x10001e380 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x140>
10001e37c:     	add	x21, x20, #168
10001e380:     	ldrsb	w8, [sp, #63]
10001e384:     	tbz	w8, #31, 0x10001e390 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x150>
10001e388:     	ldr	x0, [sp, #40]
10001e38c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001e390:     	str	xzr, [sp, #32]
10001e394:     	mov	w0, #432
10001e398:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001e39c:     	mov	x3, x0
10001e3a0:     	ldr	x0, [x20, #56]
10001e3a4:     	ldr	w8, [x0, #312]
10001e3a8:     	mov	x9, x3
10001e3ac:     	str	xzr, [x9, #104]!
10001e3b0:     	movi.2d	v0, #0000000000000000
10001e3b4:     	stp	q0, q0, [x3]
10001e3b8:     	stp	q0, q0, [x3, #32]
10001e3bc:     	str	q0, [x3, #64]
10001e3c0:     	stur	q0, [x3, #76]
10001e3c4:     	str	x9, [x3, #96]
10001e3c8:     	mov	w9, #43943
10001e3cc:     	movk	w9, #12970, lsl #16
10001e3d0:     	stp	xzr, x9, [x3, #112]
10001e3d4:     	stp	q0, q0, [x3, #128]
10001e3d8:     	str	q0, [x3, #160]
10001e3dc:     	str	xzr, [x3, #176]
10001e3e0:     	str	w8, [x3, #184]
10001e3e4:     	mov	x10, x3
10001e3e8:     	str	x9, [x10, #192]!
10001e3ec:     	stur	q0, [x3, #232]
10001e3f0:     	stur	q0, [x3, #216]
10001e3f4:     	stur	q0, [x3, #200]
10001e3f8:     	mov	w11, #45499
10001e3fc:     	movk	w11, #15536, lsl #16
10001e400:     	stp	xzr, x11, [x3, #248]
10001e404:     	str	xzr, [x3, #296]
10001e408:     	stur	q0, [x10, #88]
10001e40c:     	stur	q0, [x10, #72]
10001e410:     	str	w8, [x3, #304]
10001e414:     	str	wzr, [x3, #312]
10001e418:     	str	wzr, [x3, #308]
10001e41c:     	add	x8, x3, #320
10001e420:     	str	x9, [x3, #320]
10001e424:     	stur	q0, [x8, #40]
10001e428:     	stur	q0, [x8, #24]
10001e42c:     	stur	q0, [x8, #8]
10001e430:     	add	x8, x3, #384
10001e434:     	stp	xzr, x11, [x3, #376]
10001e438:     	str	xzr, [x3, #424]
10001e43c:     	stur	q0, [x8, #24]
10001e440:     	stur	q0, [x8, #8]
10001e444:     	str	x3, [sp, #32]
10001e448:     	ldp	x9, x8, [x20, #120]
10001e44c:     	cmp	x8, x9
10001e450:     	b.eq	0x10001e4d8 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x298>
10001e454:     	mov	x25, #0
10001e458:     	add	x22, x20, #176
10001e45c:     	adrp	x24, 0x10001e000 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x21c>
10001e460:     	add	x24, x24, #2224
10001e464:     	ldr	x8, [x20, #56]
10001e468:     	stp	x8, x24, [sp, #16]
10001e46c:     	add	x26, x25, #1
10001e470:     	str	w26, [sp, #12]
10001e474:     	ldr	x8, [sp, #32]
10001e478:     	str	x8, [sp]
10001e47c:     	add	x0, sp, #40
10001e480:     	add	x1, sp, #24
10001e484:     	add	x2, sp, #16
10001e488:     	add	x4, sp, #12
10001e48c:     	mov	x5, sp
10001e490:     	mov	x3, x21
10001e494:     	mov	x6, x22
10001e498:     	bl	0x10001fb28 <std::__1::thread::thread<void (*)(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*), benchmark::internal::BenchmarkInstance const*, long long&, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement* const&, void>(void (*&&)(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*), benchmark::internal::BenchmarkInstance const*&&, long long&, int&&, benchmark::internal::ThreadManager*&&, benchmark::internal::PerfCountersMeasurement* const&)>
10001e49c:     	ldr	x8, [x20, #120]
10001e4a0:     	ldr	x9, [x8, x25, lsl #3]
10001e4a4:     	cbnz	x9, 0x10001e788 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x548>
10001e4a8:     	ldr	x9, [sp, #40]
10001e4ac:     	str	x9, [x8, x25, lsl #3]
10001e4b0:     	str	xzr, [sp, #40]
10001e4b4:     	add	x0, sp, #40
10001e4b8:     	bl	0x10002efa8 <_vsnprintf+0x10002efa8>
10001e4bc:     	ldp	x9, x8, [x20, #120]
10001e4c0:     	sub	x8, x8, x9
10001e4c4:     	cmp	x26, x8, asr #3
10001e4c8:     	mov	x25, x26
10001e4cc:     	b.lo	0x10001e464 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x224>
10001e4d0:     	ldr	x0, [x20, #56]
10001e4d4:     	ldr	x3, [sp, #32]
10001e4d8:     	ldp	x1, x4, [x20, #168]
10001e4dc:     	mov	w2, #0
10001e4e0:     	bl	0x10001e8b0 <benchmark::internal::(anonymous namespace)::RunInThread(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)>
10001e4e4:     	ldr	x22, [sp, #32]
10001e4e8:     	add	x0, x22, #320
10001e4ec:     	str	x0, [sp, #40]
10001e4f0:     	mov	w8, #1
10001e4f4:     	strb	w8, [sp, #48]
10001e4f8:     	bl	0x10002ef24 <_vsnprintf+0x10002ef24>
10001e4fc:     	add	x8, x22, #184
10001e500:     	ldar	w8, [x8]
10001e504:     	cbz	w8, 0x10001e524 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x2e4>
10001e508:     	add	x21, x22, #384
10001e50c:     	add	x1, sp, #40
10001e510:     	mov	x0, x21
10001e514:     	bl	0x10002eed0 <_vsnprintf+0x10002eed0>
10001e518:     	add	x8, x22, #184
10001e51c:     	ldar	w8, [x8]
10001e520:     	cbnz	w8, 0x10001e50c <benchmark::internal::BenchmarkRunner::DoNIterations()+0x2cc>
10001e524:     	ldrb	w8, [sp, #48]
10001e528:     	cbz	w8, 0x10001e534 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x2f4>
10001e52c:     	ldr	x0, [sp, #40]
10001e530:     	bl	0x10002ef30 <_vsnprintf+0x10002ef30>
10001e534:     	ldp	x21, x22, [x20, #120]
10001e538:     	cmp	x21, x22
10001e53c:     	b.eq	0x10001e554 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x314>
10001e540:     	mov	x0, x21
10001e544:     	bl	0x10002ef9c <_vsnprintf+0x10002ef9c>
10001e548:     	add	x21, x21, #8
10001e54c:     	cmp	x21, x22
10001e550:     	b.ne	0x10001e540 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x300>
10001e554:     	mov	x8, x19
10001e558:     	str	xzr, [x8, #104]!
10001e55c:     	mov	x22, x19
10001e560:     	str	x8, [x22, #96]!
10001e564:     	str	xzr, [x19, #112]
10001e568:     	movi.2d	v0, #0000000000000000
10001e56c:     	stp	q0, q0, [x19]
10001e570:     	stp	q0, q0, [x19, #32]
10001e574:     	str	q0, [x19, #64]
10001e578:     	stur	q0, [x19, #76]
10001e57c:     	ldr	x8, [sp, #32]
10001e580:     	add	x21, x8, #120
10001e584:     	mov	x0, x21
10001e588:     	bl	0x10002ef24 <_vsnprintf+0x10002ef24>
10001e58c:     	ldr	x24, [sp, #32]
10001e590:     	ldr	x8, [x24, #32]
10001e594:     	ldp	q1, q0, [x24]
10001e598:     	stp	q1, q0, [x19]
10001e59c:     	str	x8, [x19, #32]
10001e5a0:     	add	x0, x19, #40
10001e5a4:     	add	x1, x24, #40
10001e5a8:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
10001e5ac:     	add	x0, x19, #64
10001e5b0:     	add	x1, x24, #64
10001e5b4:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
10001e5b8:     	ldr	w8, [x24, #88]
10001e5bc:     	str	w8, [x19, #88]
10001e5c0:     	cmp	x24, x19
10001e5c4:     	b.eq	0x10001e5d8 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x398>
10001e5c8:     	ldr	x1, [x24, #96]
10001e5cc:     	add	x2, x24, #104
10001e5d0:     	mov	x0, x22
10001e5d4:     	bl	0x1000095b0 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)>
10001e5d8:     	mov	x0, x21
10001e5dc:     	bl	0x10002ef30 <_vsnprintf+0x10002ef30>
10001e5e0:     	ldr	x1, [sp, #32]
10001e5e4:     	str	xzr, [sp, #32]
10001e5e8:     	cbz	x1, 0x10001e5f4 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x3b4>
10001e5ec:     	add	x0, sp, #32
10001e5f0:     	bl	0x10001fa90 <std::__1::default_delete<benchmark::internal::ThreadManager>::operator()[abi:ue170006](benchmark::internal::ThreadManager*) const>
10001e5f4:     	ldr	x8, [x20, #56]
10001e5f8:     	ldr	s0, [x8, #312]
10001e5fc:     	sshll.2d	v0, v0, #0
10001e600:     	scvtf	d0, d0
10001e604:     	mov	x21, x19
10001e608:     	ldr	d1, [x21, #8]!
10001e60c:     	fdiv	d1, d1, d0
10001e610:     	str	d1, [x21]
10001e614:     	mov	x22, x21
10001e618:     	ldr	d1, [x22, #16]!
10001e61c:     	fdiv	d1, d1, d0
10001e620:     	str	d1, [x22]
10001e624:     	ldrb	w8, [x8, #228]
10001e628:     	cbz	w8, 0x10001e638 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x3f8>
10001e62c:     	ldr	d1, [x19, #16]
10001e630:     	fdiv	d0, d1, d0
10001e634:     	str	d0, [x19, #16]
10001e638:     	ldr	w8, [x23, #32]
10001e63c:     	cmp	w8, #2
10001e640:     	b.ge	0x10001e660 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x420>
10001e644:     	adrp	x8, 0x100038000 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x46c>
10001e648:     	add	x8, x8, #8
10001e64c:     	ldaprb	w8, [x8]
10001e650:     	tbz	w8, #0, 0x10001e7e8 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x5a8>
10001e654:     	adrp	x23, 0x100038000 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x47c>
10001e658:     	add	x23, x23, #0
10001e65c:     	b	0x10001e678 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x438>
10001e660:     	adrp	x8, 0x100038000 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x488>
10001e664:     	add	x8, x8, #24
10001e668:     	ldaprb	w8, [x8]
10001e66c:     	tbz	w8, #0, 0x10001e810 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x5d0>
10001e670:     	adrp	x23, 0x100038000 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x498>
10001e674:     	add	x23, x23, #16
10001e678:     	ldr	x0, [x23]
10001e67c:     	cbz	x0, 0x10001e720 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x4e0>
10001e680:     	adrp	x1, 0x100032000 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x490>
10001e684:     	add	x1, x1, #5
10001e688:     	mov	w2, #7
10001e68c:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10001e690:     	ldr	x0, [x23]
10001e694:     	cbz	x0, 0x10001e720 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x4e0>
10001e698:     	mov	w1, #2
10001e69c:     	bl	0x10002ee28 <_vsnprintf+0x10002ee28>
10001e6a0:     	ldr	x0, [x23]
10001e6a4:     	cbz	x0, 0x10001e720 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x4e0>
10001e6a8:     	adrp	x1, 0x100032000 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x4b8>
10001e6ac:     	add	x1, x1, #13
10001e6b0:     	mov	w2, #3
10001e6b4:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10001e6b8:     	ldr	x0, [x23]
10001e6bc:     	cbz	x0, 0x10001e720 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x4e0>
10001e6c0:     	adrp	x1, 0x100032000 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x4d0>
10001e6c4:     	add	x1, x1, #273
10001e6c8:     	mov	w2, #7
10001e6cc:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10001e6d0:     	ldr	x0, [x23]
10001e6d4:     	cbz	x0, 0x10001e720 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x4e0>
10001e6d8:     	ldr	d0, [x19, #16]
10001e6dc:     	bl	0x10002ee1c <_vsnprintf+0x10002ee1c>
10001e6e0:     	ldr	x0, [x23]
10001e6e4:     	cbz	x0, 0x10001e720 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x4e0>
10001e6e8:     	adrp	x1, 0x100032000 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x4f8>
10001e6ec:     	add	x1, x1, #281
10001e6f0:     	mov	w2, #1
10001e6f4:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10001e6f8:     	ldr	x0, [x23]
10001e6fc:     	cbz	x0, 0x10001e720 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x4e0>
10001e700:     	ldr	d0, [x21]
10001e704:     	bl	0x10002ee1c <_vsnprintf+0x10002ee1c>
10001e708:     	ldr	x0, [x23]
10001e70c:     	cbz	x0, 0x10001e720 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x4e0>
10001e710:     	adrp	x1, 0x100031000 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x51c>
10001e714:     	add	x1, x1, #2523
10001e718:     	mov	w2, #1
10001e71c:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10001e720:     	ldr	x9, [x19]
10001e724:     	ldr	x8, [x20, #56]
10001e728:     	ldrsw	x10, [x8, #312]
10001e72c:     	sdiv	x9, x9, x10
10001e730:     	str	x9, [x19, #120]
10001e734:     	ldr	d0, [x19, #16]
10001e738:     	str	d0, [x19, #128]
10001e73c:     	ldrb	w9, [x8, #230]
10001e740:     	cbnz	w9, 0x10001e750 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x510>
10001e744:     	ldrb	w8, [x8, #229]
10001e748:     	mov	x22, x21
10001e74c:     	cbz	w8, 0x10001e758 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x518>
10001e750:     	ldr	d0, [x22]
10001e754:     	str	d0, [x19, #128]
10001e758:     	ldr	x1, [sp, #32]
10001e75c:     	str	xzr, [sp, #32]
10001e760:     	cbz	x1, 0x10001e76c <benchmark::internal::BenchmarkRunner::DoNIterations()+0x52c>
10001e764:     	add	x0, sp, #32
10001e768:     	bl	0x10001fa90 <std::__1::default_delete<benchmark::internal::ThreadManager>::operator()[abi:ue170006](benchmark::internal::ThreadManager*) const>
10001e76c:     	ldp	x29, x30, [sp, #128]
10001e770:     	ldp	x20, x19, [sp, #112]
10001e774:     	ldp	x22, x21, [sp, #96]
10001e778:     	ldp	x24, x23, [sp, #80]
10001e77c:     	ldp	x26, x25, [sp, #64]
10001e780:     	add	sp, sp, #144
10001e784:     	ret
10001e788:     	bl	0x10002effc <_vsnprintf+0x10002effc>
10001e78c:     	adrp	x0, 0x100038000 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x5b4>
10001e790:     	add	x0, x0, #8
10001e794:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10001e798:     	adrp	x22, 0x100038000 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x5c0>
10001e79c:     	add	x22, x22, #0
10001e7a0:     	cbz	w0, 0x10001e2a8 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x68>
10001e7a4:     	str	xzr, [x22]
10001e7a8:     	adrp	x0, 0x100038000 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x5d0>
10001e7ac:     	add	x0, x0, #8
10001e7b0:     	b	0x10001e7e0 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x5a0>
10001e7b4:     	adrp	x0, 0x100038000 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x5dc>
10001e7b8:     	add	x0, x0, #24
10001e7bc:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10001e7c0:     	adrp	x22, 0x100038000 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x5e8>
10001e7c4:     	add	x22, x22, #16
10001e7c8:     	cbz	w0, 0x10001e2a8 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x68>
10001e7cc:     	adrp	x8, 0x100034000 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x5e4>
10001e7d0:     	ldr	x8, [x8, #464]
10001e7d4:     	str	x8, [x22]
10001e7d8:     	adrp	x0, 0x100038000 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x600>
10001e7dc:     	add	x0, x0, #24
10001e7e0:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10001e7e4:     	b	0x10001e2a8 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x68>
10001e7e8:     	adrp	x0, 0x100038000 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x610>
10001e7ec:     	add	x0, x0, #8
10001e7f0:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10001e7f4:     	adrp	x23, 0x100038000 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x61c>
10001e7f8:     	add	x23, x23, #0
10001e7fc:     	cbz	w0, 0x10001e678 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x438>
10001e800:     	str	xzr, [x23]
10001e804:     	adrp	x0, 0x100038000 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x62c>
10001e808:     	add	x0, x0, #8
10001e80c:     	b	0x10001e83c <benchmark::internal::BenchmarkRunner::DoNIterations()+0x5fc>
10001e810:     	adrp	x0, 0x100038000 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x638>
10001e814:     	add	x0, x0, #24
10001e818:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10001e81c:     	adrp	x23, 0x100038000 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x644>
10001e820:     	add	x23, x23, #16
10001e824:     	cbz	w0, 0x10001e678 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x438>
10001e828:     	adrp	x8, 0x100034000 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x640>
10001e82c:     	ldr	x8, [x8, #464]
10001e830:     	str	x8, [x23]
10001e834:     	adrp	x0, 0x100038000 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x65c>
10001e838:     	add	x0, x0, #24
10001e83c:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10001e840:     	b	0x10001e678 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x438>
10001e844:     	b	0x10001e84c <benchmark::internal::BenchmarkRunner::DoNIterations()+0x60c>
10001e848:     	b	0x10001e84c <benchmark::internal::BenchmarkRunner::DoNIterations()+0x60c>
10001e84c:     	mov	x20, x0
10001e850:     	b	0x10001e87c <benchmark::internal::BenchmarkRunner::DoNIterations()+0x63c>
10001e854:     	mov	x20, x0
10001e858:     	ldrsb	w8, [sp, #63]
10001e85c:     	tbz	w8, #31, 0x10001e8a8 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x668>
10001e860:     	ldr	x0, [sp, #40]
10001e864:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001e868:     	mov	x0, x20
10001e86c:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
10001e870:     	mov	x20, x0
10001e874:     	mov	x0, x21
10001e878:     	bl	0x10002ef30 <_vsnprintf+0x10002ef30>
10001e87c:     	mov	x0, x19
10001e880:     	bl	0x10001eb3c <benchmark::internal::BenchmarkRunner::IterationResults::~IterationResults()>
10001e884:     	b	0x10001e894 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x654>
10001e888:     	b	0x10001e890 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x650>
10001e88c:     	b	0x10001e890 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x650>
10001e890:     	mov	x20, x0
10001e894:     	ldr	x1, [sp, #32]
10001e898:     	str	xzr, [sp, #32]
10001e89c:     	cbz	x1, 0x10001e8a8 <benchmark::internal::BenchmarkRunner::DoNIterations()+0x668>
10001e8a0:     	add	x0, sp, #32
10001e8a4:     	bl	0x10001fa90 <std::__1::default_delete<benchmark::internal::ThreadManager>::operator()[abi:ue170006](benchmark::internal::ThreadManager*) const>
10001e8a8:     	mov	x0, x20
10001e8ac:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010001e8b0 <benchmark::internal::(anonymous namespace)::RunInThread(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)>:
10001e8b0:     	sub	sp, sp, #240
10001e8b4:     	stp	x22, x21, [sp, #192]
10001e8b8:     	stp	x20, x19, [sp, #208]
10001e8bc:     	stp	x29, x30, [sp, #224]
10001e8c0:     	add	x29, sp, #224
10001e8c4:     	mov	x5, x4
10001e8c8:     	mov	x19, x3
10001e8cc:     	sub	x8, x29, #80
10001e8d0:     	ldrb	w9, [x0, #228]
10001e8d4:     	sturb	w9, [x29, #-80]
10001e8d8:     	movi.2d	v0, #0000000000000000
10001e8dc:     	stur	q0, [x8, #8]
10001e8e0:     	stur	q0, [x8, #24]
10001e8e4:     	stur	xzr, [x29, #-40]
10001e8e8:     	sturb	wzr, [x29, #-79]
10001e8ec:     	mov	x8, sp
10001e8f0:     	sub	x3, x29, #80
10001e8f4:     	mov	x4, x19
10001e8f8:     	bl	0x10000b668 <benchmark::internal::BenchmarkInstance::Run(long long, int, benchmark::internal::ThreadTimer*, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*) const>
10001e8fc:     	adrp	x22, 0x100038000 <benchmark::internal::(anonymous namespace)::RunInThread(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0xb4>
10001e900:     	add	x22, x22, #8
10001e904:     	ldaprb	w8, [x22]
10001e908:     	adrp	x21, 0x100038000 <benchmark::internal::(anonymous namespace)::RunInThread(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0xc0>
10001e90c:     	tbz	w8, #0, 0x10001eaa8 <benchmark::internal::(anonymous namespace)::RunInThread(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0x1f8>
10001e910:     	ldr	x0, [x21]
10001e914:     	cbz	x0, 0x10001e928 <benchmark::internal::(anonymous namespace)::RunInThread(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0x78>
10001e918:     	adrp	x1, 0x100032000 <benchmark::internal::(anonymous namespace)::RunInThread(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0xb8>
10001e91c:     	add	x1, x1, #299
10001e920:     	mov	w2, #62
10001e924:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10001e928:     	add	x20, x19, #120
10001e92c:     	mov	x0, x20
10001e930:     	bl	0x10002ef24 <_vsnprintf+0x10002ef24>
10001e934:     	ldrb	w8, [sp, #24]
10001e938:     	cbz	w8, 0x10001ea6c <benchmark::internal::(anonymous namespace)::RunInThread(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0x1bc>
10001e93c:     	ldp	x10, x8, [sp, #8]
10001e940:     	ldr	x9, [sp]
10001e944:     	sub	x8, x8, x9
10001e948:     	add	x8, x8, x10
10001e94c:     	ldr	x9, [x19]
10001e950:     	add	x8, x9, x8
10001e954:     	str	x8, [x19]
10001e958:     	ldaprb	w8, [x22]
10001e95c:     	tbz	w8, #0, 0x10001ea84 <benchmark::internal::(anonymous namespace)::RunInThread(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0x1d4>
10001e960:     	ldur	d0, [x29, #-48]
10001e964:     	ldr	d1, [x19, #16]
10001e968:     	fadd	d0, d0, d1
10001e96c:     	str	d0, [x19, #16]
10001e970:     	ldaprb	w8, [x22]
10001e974:     	tbz	w8, #0, 0x10001eacc <benchmark::internal::(anonymous namespace)::RunInThread(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0x21c>
10001e978:     	ldur	d0, [x29, #-56]
10001e97c:     	ldr	d1, [x19, #8]
10001e980:     	fadd	d0, d0, d1
10001e984:     	str	d0, [x19, #8]
10001e988:     	ldaprb	w8, [x22]
10001e98c:     	tbz	w8, #0, 0x10001eaf0 <benchmark::internal::(anonymous namespace)::RunInThread(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0x240>
10001e990:     	ldur	d0, [x29, #-40]
10001e994:     	ldr	d1, [x19, #24]
10001e998:     	fadd	d0, d0, d1
10001e99c:     	str	d0, [x19, #24]
10001e9a0:     	ldr	x8, [sp, #56]
10001e9a4:     	ldr	x9, [x19, #32]
10001e9a8:     	add	x8, x9, x8
10001e9ac:     	str	x8, [x19, #32]
10001e9b0:     	add	x0, x19, #96
10001e9b4:     	mov	x8, sp
10001e9b8:     	add	x21, x8, #64
10001e9bc:     	mov	x1, x21
10001e9c0:     	bl	0x1000247d4 <benchmark::internal::Increment(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>>*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)>
10001e9c4:     	mov	x0, x20
10001e9c8:     	bl	0x10002ef30 <_vsnprintf+0x10002ef30>
10001e9cc:     	add	x20, x19, #192
10001e9d0:     	mov	x0, x20
10001e9d4:     	bl	0x10002ef24 <_vsnprintf+0x10002ef24>
10001e9d8:     	ldr	w8, [x19, #304]
10001e9dc:     	sub	w8, w8, #1
10001e9e0:     	str	w8, [x19, #304]
10001e9e4:     	ldr	w8, [x19, #312]
10001e9e8:     	cbz	w8, 0x10001e9f4 <benchmark::internal::(anonymous namespace)::RunInThread(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0x144>
10001e9ec:     	add	x0, x19, #256
10001e9f0:     	bl	0x10002eec4 <_vsnprintf+0x10002eec4>
10001e9f4:     	mov	x0, x20
10001e9f8:     	bl	0x10002ef30 <_vsnprintf+0x10002ef30>
10001e9fc:     	add	x8, x19, #184
10001ea00:     	mov	w9, #-1
10001ea04:     	ldaddal	w9, w8, [x8]
10001ea08:     	cmp	w8, #1
10001ea0c:     	b.ne	0x10001ea2c <benchmark::internal::(anonymous namespace)::RunInThread(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0x17c>
10001ea10:     	add	x20, x19, #320
10001ea14:     	mov	x0, x20
10001ea18:     	bl	0x10002ef24 <_vsnprintf+0x10002ef24>
10001ea1c:     	add	x0, x19, #384
10001ea20:     	bl	0x10002eec4 <_vsnprintf+0x10002eec4>
10001ea24:     	mov	x0, x20
10001ea28:     	bl	0x10002ef30 <_vsnprintf+0x10002ef30>
10001ea2c:     	ldrsb	w8, [sp, #111]
10001ea30:     	tbz	w8, #31, 0x10001ea3c <benchmark::internal::(anonymous namespace)::RunInThread(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0x18c>
10001ea34:     	ldr	x0, [sp, #88]
10001ea38:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001ea3c:     	ldr	x1, [sp, #72]
10001ea40:     	mov	x0, x21
10001ea44:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
10001ea48:     	ldr	x0, [sp, #32]
10001ea4c:     	cbz	x0, 0x10001ea58 <benchmark::internal::(anonymous namespace)::RunInThread(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0x1a8>
10001ea50:     	str	x0, [sp, #40]
10001ea54:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001ea58:     	ldp	x29, x30, [sp, #224]
10001ea5c:     	ldp	x20, x19, [sp, #208]
10001ea60:     	ldp	x22, x21, [sp, #192]
10001ea64:     	add	sp, sp, #240
10001ea68:     	ret
10001ea6c:     	mov	x8, #0
10001ea70:     	ldr	x9, [x19]
10001ea74:     	add	x8, x9, x8
10001ea78:     	str	x8, [x19]
10001ea7c:     	ldaprb	w8, [x22]
10001ea80:     	tbnz	w8, #0, 0x10001e960 <benchmark::internal::(anonymous namespace)::RunInThread(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0xb0>
10001ea84:     	adrp	x0, 0x100038000 <benchmark::internal::(anonymous namespace)::RunInThread(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0x23c>
10001ea88:     	add	x0, x0, #8
10001ea8c:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10001ea90:     	cbz	w0, 0x10001e960 <benchmark::internal::(anonymous namespace)::RunInThread(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0xb0>
10001ea94:     	str	xzr, [x21]
10001ea98:     	adrp	x0, 0x100038000 <benchmark::internal::(anonymous namespace)::RunInThread(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0x250>
10001ea9c:     	add	x0, x0, #8
10001eaa0:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10001eaa4:     	b	0x10001e960 <benchmark::internal::(anonymous namespace)::RunInThread(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0xb0>
10001eaa8:     	adrp	x0, 0x100038000 <benchmark::internal::(anonymous namespace)::RunInThread(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0x260>
10001eaac:     	add	x0, x0, #8
10001eab0:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10001eab4:     	cbz	w0, 0x10001e910 <benchmark::internal::(anonymous namespace)::RunInThread(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0x60>
10001eab8:     	str	xzr, [x21]
10001eabc:     	adrp	x0, 0x100038000 <benchmark::internal::(anonymous namespace)::RunInThread(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0x274>
10001eac0:     	add	x0, x0, #8
10001eac4:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10001eac8:     	b	0x10001e910 <benchmark::internal::(anonymous namespace)::RunInThread(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0x60>
10001eacc:     	adrp	x0, 0x100038000 <benchmark::internal::(anonymous namespace)::RunInThread(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0x284>
10001ead0:     	add	x0, x0, #8
10001ead4:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10001ead8:     	cbz	w0, 0x10001e978 <benchmark::internal::(anonymous namespace)::RunInThread(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0xc8>
10001eadc:     	str	xzr, [x21]
10001eae0:     	adrp	x0, 0x100038000 <benchmark::internal::BenchmarkRunner::IterationResults::~IterationResults()+0xc>
10001eae4:     	add	x0, x0, #8
10001eae8:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10001eaec:     	b	0x10001e978 <benchmark::internal::(anonymous namespace)::RunInThread(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0xc8>
10001eaf0:     	adrp	x0, 0x100038000 <benchmark::internal::BenchmarkRunner::IterationResults::~IterationResults()+0x1c>
10001eaf4:     	add	x0, x0, #8
10001eaf8:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10001eafc:     	cbz	w0, 0x10001e990 <benchmark::internal::(anonymous namespace)::RunInThread(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0xe0>
10001eb00:     	str	xzr, [x21]
10001eb04:     	adrp	x0, 0x100038000 <benchmark::internal::BenchmarkRunner::IterationResults::~IterationResults()+0x30>
10001eb08:     	add	x0, x0, #8
10001eb0c:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10001eb10:     	b	0x10001e990 <benchmark::internal::(anonymous namespace)::RunInThread(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0xe0>
10001eb14:     	mov	x19, x0
10001eb18:     	mov	x0, x20
10001eb1c:     	bl	0x10002ef30 <_vsnprintf+0x10002ef30>
10001eb20:     	b	0x10001eb2c <benchmark::internal::(anonymous namespace)::RunInThread(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0x27c>
10001eb24:     	b	0x10001eb28 <benchmark::internal::(anonymous namespace)::RunInThread(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)+0x278>
10001eb28:     	mov	x19, x0
10001eb2c:     	mov	x0, sp
10001eb30:     	bl	0x10000b7ac <benchmark::State::~State()>
10001eb34:     	mov	x0, x19
10001eb38:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010001eb3c <benchmark::internal::BenchmarkRunner::IterationResults::~IterationResults()>:
10001eb3c:     	stp	x20, x19, [sp, #-32]!
10001eb40:     	stp	x29, x30, [sp, #16]
10001eb44:     	add	x29, sp, #16
10001eb48:     	mov	x19, x0
10001eb4c:     	add	x0, x0, #96
10001eb50:     	ldr	x1, [x19, #104]
10001eb54:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
10001eb58:     	ldrsb	w8, [x19, #87]
10001eb5c:     	tbnz	w8, #31, 0x10001eb78 <benchmark::internal::BenchmarkRunner::IterationResults::~IterationResults()+0x3c>
10001eb60:     	ldrsb	w8, [x19, #63]
10001eb64:     	tbnz	w8, #31, 0x10001eb88 <benchmark::internal::BenchmarkRunner::IterationResults::~IterationResults()+0x4c>
10001eb68:     	mov	x0, x19
10001eb6c:     	ldp	x29, x30, [sp, #16]
10001eb70:     	ldp	x20, x19, [sp], #32
10001eb74:     	ret
10001eb78:     	ldr	x0, [x19, #64]
10001eb7c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001eb80:     	ldrsb	w8, [x19, #63]
10001eb84:     	tbz	w8, #31, 0x10001eb68 <benchmark::internal::BenchmarkRunner::IterationResults::~IterationResults()+0x2c>
10001eb88:     	ldr	x0, [x19, #40]
10001eb8c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001eb90:     	mov	x0, x19
10001eb94:     	ldp	x29, x30, [sp, #16]
10001eb98:     	ldp	x20, x19, [sp], #32
10001eb9c:     	ret

000000010001eba0 <benchmark::internal::BenchmarkRunner::PredictNumItersNeeded(benchmark::internal::BenchmarkRunner::IterationResults const&) const>:
10001eba0:     	stp	d9, d8, [sp, #-48]!
10001eba4:     	stp	x20, x19, [sp, #16]
10001eba8:     	stp	x29, x30, [sp, #32]
10001ebac:     	add	x29, sp, #32
10001ebb0:     	ldrb	w8, [x0, #104]
10001ebb4:     	cmp	w8, #0
10001ebb8:     	mov	w8, #88
10001ebbc:     	mov	w9, #96
10001ebc0:     	csel	x8, x9, x8, eq
10001ebc4:     	ldr	d0, [x0, x8]
10001ebc8:     	mov	x8, #7378697629483820646
10001ebcc:     	movk	x8, #16374, lsl #48
10001ebd0:     	fmov	d1, x8
10001ebd4:     	fmul	d1, d0, d1
10001ebd8:     	mov	x8, #54933
10001ebdc:     	movk	x8, #59430, lsl #16
10001ebe0:     	movk	x8, #11787, lsl #32
10001ebe4:     	movk	x8, #15889, lsl #48
10001ebe8:     	fmov	d2, x8
10001ebec:     	ldp	d4, d3, [x1, #120]
10001ebf0:     	fmax	d2, d3, d2
10001ebf4:     	fdiv	d1, d1, d2
10001ebf8:     	fdiv	d0, d3, d0
10001ebfc:     	mov	x8, #-7378697629483820647
10001ec00:     	movk	x8, #39322
10001ec04:     	movk	x8, #16313, lsl #48
10001ec08:     	fmov	d2, x8
10001ec0c:     	fcmp	d0, d2
10001ec10:     	fmov	d0, #10.00000000
10001ec14:     	fcsel	d8, d1, d0, gt
10001ec18:     	scvtf	d0, d4
10001ec1c:     	fmul	d1, d8, d0
10001ec20:     	fmov	d2, #1.00000000
10001ec24:     	fadd	d0, d0, d2
10001ec28:     	fcmp	d1, d0
10001ec2c:     	fcsel	d0, d0, d1, mi
10001ec30:     	fcvtas	x8, d0
10001ec34:     	mov	w9, #51712
10001ec38:     	movk	w9, #15258, lsl #16
10001ec3c:     	cmp	x8, x9
10001ec40:     	csel	x19, x8, x9, lt
10001ec44:     	adrp	x8, 0x100038000 <benchmark::internal::BenchmarkRunner::PredictNumItersNeeded(benchmark::internal::BenchmarkRunner::IterationResults const&) const+0x10c>
10001ec48:     	ldr	w8, [x8, #32]
10001ec4c:     	cmp	w8, #3
10001ec50:     	b.ge	0x10001ec70 <benchmark::internal::BenchmarkRunner::PredictNumItersNeeded(benchmark::internal::BenchmarkRunner::IterationResults const&) const+0xd0>
10001ec54:     	adrp	x8, 0x100038000 <benchmark::internal::BenchmarkRunner::PredictNumItersNeeded(benchmark::internal::BenchmarkRunner::IterationResults const&) const+0x11c>
10001ec58:     	add	x8, x8, #8
10001ec5c:     	ldaprb	w8, [x8]
10001ec60:     	tbz	w8, #0, 0x10001ed44 <benchmark::internal::BenchmarkRunner::PredictNumItersNeeded(benchmark::internal::BenchmarkRunner::IterationResults const&) const+0x1a4>
10001ec64:     	adrp	x20, 0x100038000 <benchmark::internal::BenchmarkRunner::PredictNumItersNeeded(benchmark::internal::BenchmarkRunner::IterationResults const&) const+0x12c>
10001ec68:     	add	x20, x20, #0
10001ec6c:     	b	0x10001ec88 <benchmark::internal::BenchmarkRunner::PredictNumItersNeeded(benchmark::internal::BenchmarkRunner::IterationResults const&) const+0xe8>
10001ec70:     	adrp	x8, 0x100038000 <benchmark::internal::BenchmarkRunner::PredictNumItersNeeded(benchmark::internal::BenchmarkRunner::IterationResults const&) const+0x138>
10001ec74:     	add	x8, x8, #24
10001ec78:     	ldaprb	w8, [x8]
10001ec7c:     	tbz	w8, #0, 0x10001ed6c <benchmark::internal::BenchmarkRunner::PredictNumItersNeeded(benchmark::internal::BenchmarkRunner::IterationResults const&) const+0x1cc>
10001ec80:     	adrp	x20, 0x100038000 <benchmark::internal::BenchmarkRunner::PredictNumItersNeeded(benchmark::internal::BenchmarkRunner::IterationResults const&) const+0x148>
10001ec84:     	add	x20, x20, #16
10001ec88:     	ldr	x0, [x20]
10001ec8c:     	cbz	x0, 0x10001ed30 <benchmark::internal::BenchmarkRunner::PredictNumItersNeeded(benchmark::internal::BenchmarkRunner::IterationResults const&) const+0x190>
10001ec90:     	adrp	x1, 0x100032000 <benchmark::internal::BenchmarkRunner::PredictNumItersNeeded(benchmark::internal::BenchmarkRunner::IterationResults const&) const+0x140>
10001ec94:     	add	x1, x1, #5
10001ec98:     	mov	w2, #7
10001ec9c:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10001eca0:     	ldr	x0, [x20]
10001eca4:     	cbz	x0, 0x10001ed30 <benchmark::internal::BenchmarkRunner::PredictNumItersNeeded(benchmark::internal::BenchmarkRunner::IterationResults const&) const+0x190>
10001eca8:     	mov	w1, #3
10001ecac:     	bl	0x10002ee28 <_vsnprintf+0x10002ee28>
10001ecb0:     	ldr	x0, [x20]
10001ecb4:     	cbz	x0, 0x10001ed30 <benchmark::internal::BenchmarkRunner::PredictNumItersNeeded(benchmark::internal::BenchmarkRunner::IterationResults const&) const+0x190>
10001ecb8:     	adrp	x1, 0x100032000 <benchmark::internal::BenchmarkRunner::PredictNumItersNeeded(benchmark::internal::BenchmarkRunner::IterationResults const&) const+0x168>
10001ecbc:     	add	x1, x1, #13
10001ecc0:     	mov	w2, #3
10001ecc4:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10001ecc8:     	ldr	x0, [x20]
10001eccc:     	cbz	x0, 0x10001ed30 <benchmark::internal::BenchmarkRunner::PredictNumItersNeeded(benchmark::internal::BenchmarkRunner::IterationResults const&) const+0x190>
10001ecd0:     	adrp	x1, 0x100032000 <benchmark::internal::BenchmarkRunner::PredictNumItersNeeded(benchmark::internal::BenchmarkRunner::IterationResults const&) const+0x180>
10001ecd4:     	add	x1, x1, #283
10001ecd8:     	mov	w2, #12
10001ecdc:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10001ece0:     	ldr	x0, [x20]
10001ece4:     	cbz	x0, 0x10001ed30 <benchmark::internal::BenchmarkRunner::PredictNumItersNeeded(benchmark::internal::BenchmarkRunner::IterationResults const&) const+0x190>
10001ece8:     	mov	x1, x19
10001ecec:     	bl	0x10002ee40 <_vsnprintf+0x10002ee40>
10001ecf0:     	ldr	x0, [x20]
10001ecf4:     	cbz	x0, 0x10001ed30 <benchmark::internal::BenchmarkRunner::PredictNumItersNeeded(benchmark::internal::BenchmarkRunner::IterationResults const&) const+0x190>
10001ecf8:     	adrp	x1, 0x100032000 <benchmark::internal::BenchmarkRunner::PredictNumItersNeeded(benchmark::internal::BenchmarkRunner::IterationResults const&) const+0x1a8>
10001ecfc:     	add	x1, x1, #296
10001ed00:     	mov	w2, #2
10001ed04:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10001ed08:     	ldr	x0, [x20]
10001ed0c:     	cbz	x0, 0x10001ed30 <benchmark::internal::BenchmarkRunner::PredictNumItersNeeded(benchmark::internal::BenchmarkRunner::IterationResults const&) const+0x190>
10001ed10:     	fmov	d0, d8
10001ed14:     	bl	0x10002ee1c <_vsnprintf+0x10002ee1c>
10001ed18:     	ldr	x0, [x20]
10001ed1c:     	cbz	x0, 0x10001ed30 <benchmark::internal::BenchmarkRunner::PredictNumItersNeeded(benchmark::internal::BenchmarkRunner::IterationResults const&) const+0x190>
10001ed20:     	adrp	x1, 0x100031000 <benchmark::internal::BenchmarkRunner::PredictNumItersNeeded(benchmark::internal::BenchmarkRunner::IterationResults const&) const+0x1cc>
10001ed24:     	add	x1, x1, #2523
10001ed28:     	mov	w2, #1
10001ed2c:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10001ed30:     	mov	x0, x19
10001ed34:     	ldp	x29, x30, [sp, #32]
10001ed38:     	ldp	x20, x19, [sp, #16]
10001ed3c:     	ldp	d9, d8, [sp], #48
10001ed40:     	ret
10001ed44:     	adrp	x0, 0x100038000 <benchmark::internal::BenchmarkRunner::GetMinTimeToApply() const+0xc>
10001ed48:     	add	x0, x0, #8
10001ed4c:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10001ed50:     	adrp	x20, 0x100038000 <benchmark::internal::BenchmarkRunner::GetMinTimeToApply() const+0x18>
10001ed54:     	add	x20, x20, #0
10001ed58:     	cbz	w0, 0x10001ec88 <benchmark::internal::BenchmarkRunner::PredictNumItersNeeded(benchmark::internal::BenchmarkRunner::IterationResults const&) const+0xe8>
10001ed5c:     	str	xzr, [x20]
10001ed60:     	adrp	x0, 0x100038000 <benchmark::internal::BenchmarkRunner::ShouldReportIterationResults(benchmark::internal::BenchmarkRunner::IterationResults const&) const+0xc>
10001ed64:     	add	x0, x0, #8
10001ed68:     	b	0x10001ed98 <benchmark::internal::BenchmarkRunner::PredictNumItersNeeded(benchmark::internal::BenchmarkRunner::IterationResults const&) const+0x1f8>
10001ed6c:     	adrp	x0, 0x100038000 <benchmark::internal::BenchmarkRunner::ShouldReportIterationResults(benchmark::internal::BenchmarkRunner::IterationResults const&) const+0x18>
10001ed70:     	add	x0, x0, #24
10001ed74:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10001ed78:     	adrp	x20, 0x100038000 <benchmark::internal::BenchmarkRunner::ShouldReportIterationResults(benchmark::internal::BenchmarkRunner::IterationResults const&) const+0x24>
10001ed7c:     	add	x20, x20, #16
10001ed80:     	cbz	w0, 0x10001ec88 <benchmark::internal::BenchmarkRunner::PredictNumItersNeeded(benchmark::internal::BenchmarkRunner::IterationResults const&) const+0xe8>
10001ed84:     	adrp	x8, 0x100034000 <benchmark::internal::BenchmarkRunner::ShouldReportIterationResults(benchmark::internal::BenchmarkRunner::IterationResults const&) const+0x20>
10001ed88:     	ldr	x8, [x8, #464]
10001ed8c:     	str	x8, [x20]
10001ed90:     	adrp	x0, 0x100038000 <benchmark::internal::BenchmarkRunner::ShouldReportIterationResults(benchmark::internal::BenchmarkRunner::IterationResults const&) const+0x3c>
10001ed94:     	add	x0, x0, #24
10001ed98:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10001ed9c:     	b	0x10001ec88 <benchmark::internal::BenchmarkRunner::PredictNumItersNeeded(benchmark::internal::BenchmarkRunner::IterationResults const&) const+0xe8>

000000010001eda0 <benchmark::internal::BenchmarkRunner::GetMinTimeToApply() const>:
10001eda0:     	ldrb	w8, [x0, #104]
10001eda4:     	cmp	w8, #0
10001eda8:     	mov	w8, #88
10001edac:     	mov	w9, #96
10001edb0:     	csel	x8, x9, x8, eq
10001edb4:     	ldr	d0, [x0, x8]
10001edb8:     	ret

000000010001edbc <benchmark::internal::BenchmarkRunner::ShouldReportIterationResults(benchmark::internal::BenchmarkRunner::IterationResults const&) const>:
10001edbc:     	ldr	w8, [x1, #88]
10001edc0:     	ldr	x9, [x1, #120]
10001edc4:     	cmp	w8, #0
10001edc8:     	mov	w8, #51711
10001edcc:     	movk	w8, #15258, lsl #16
10001edd0:     	ccmp	x9, x8, #0, eq
10001edd4:     	b.gt	0x10001ee18 <benchmark::internal::BenchmarkRunner::ShouldReportIterationResults(benchmark::internal::BenchmarkRunner::IterationResults const&) const+0x5c>
10001edd8:     	ldr	d1, [x1, #128]
10001eddc:     	ldrb	w8, [x0, #104]
10001ede0:     	cmp	w8, #0
10001ede4:     	mov	w8, #88
10001ede8:     	mov	w9, #96
10001edec:     	csel	x8, x9, x8, eq
10001edf0:     	ldr	d0, [x0, x8]
10001edf4:     	fcmp	d1, d0
10001edf8:     	b.ge	0x10001ee18 <benchmark::internal::BenchmarkRunner::ShouldReportIterationResults(benchmark::internal::BenchmarkRunner::IterationResults const&) const+0x5c>
10001edfc:     	ldr	d1, [x1, #8]
10001ee00:     	fmov	d2, #5.00000000
10001ee04:     	fmul	d0, d0, d2
10001ee08:     	fcmp	d1, d0
10001ee0c:     	b.ge	0x10001ee20 <benchmark::internal::BenchmarkRunner::ShouldReportIterationResults(benchmark::internal::BenchmarkRunner::IterationResults const&) const+0x64>
10001ee10:     	mov	w0, #0
10001ee14:     	ret
10001ee18:     	mov	w0, #1
10001ee1c:     	ret
10001ee20:     	ldr	x8, [x0, #56]
10001ee24:     	ldrb	w8, [x8, #230]
10001ee28:     	cmp	w8, #0
10001ee2c:     	cset	w0, eq
10001ee30:     	ret

000000010001ee34 <benchmark::internal::BenchmarkRunner::FinishWarmUp(long long const&)>:
10001ee34:     	mov	w8, #1
10001ee38:     	strb	w8, [x0, #104]
10001ee3c:     	ldr	x8, [x1]
10001ee40:     	str	x8, [x0, #168]
10001ee44:     	ret

000000010001ee48 <benchmark::internal::BenchmarkRunner::RunWarmUp()>:
10001ee48:     	sub	sp, sp, #432
10001ee4c:     	stp	d9, d8, [sp, #320]
10001ee50:     	stp	x28, x27, [sp, #336]
10001ee54:     	stp	x26, x25, [sp, #352]
10001ee58:     	stp	x24, x23, [sp, #368]
10001ee5c:     	stp	x22, x21, [sp, #384]
10001ee60:     	stp	x20, x19, [sp, #400]
10001ee64:     	stp	x29, x30, [sp, #416]
10001ee68:     	add	x29, sp, #416
10001ee6c:     	mov	x20, x0
10001ee70:     	add	x22, sp, #160
10001ee74:     	add	x11, x22, #96
10001ee78:     	stp	xzr, xzr, [sp, #264]
10001ee7c:     	add	x9, x22, #104
10001ee80:     	movi.2d	v0, #0000000000000000
10001ee84:     	stp	q0, q0, [x22]
10001ee88:     	stp	q0, q0, [x22, #32]
10001ee8c:     	str	q0, [x22, #64]
10001ee90:     	add	x24, x22, #64
10001ee94:     	add	x25, x22, #40
10001ee98:     	add	x8, sp, #24
10001ee9c:     	add	x26, x8, #40
10001eea0:     	add	x27, x8, #64
10001eea4:     	stur	q0, [x22, #76]
10001eea8:     	add	x10, x8, #96
10001eeac:     	stp	x10, x11, [sp, #8]
10001eeb0:     	add	x28, x8, #104
10001eeb4:     	add	x19, x22, #120
10001eeb8:     	add	x23, x8, #120
10001eebc:     	mov	x21, x9
10001eec0:     	str	x9, [sp, #256]
10001eec4:     	fmov	d8, #5.00000000
10001eec8:     	ldr	x8, [x0, #168]
10001eecc:     	str	x8, [sp]
10001eed0:     	ldr	x0, [x20, #56]
10001eed4:     	bl	0x10000b810 <benchmark::internal::BenchmarkInstance::Setup() const>
10001eed8:     	add	x8, sp, #24
10001eedc:     	mov	x0, x20
10001eee0:     	bl	0x10001e240 <benchmark::internal::BenchmarkRunner::DoNIterations()>
10001eee4:     	ldur	q0, [sp, #24]
10001eee8:     	ldur	q1, [sp, #40]
10001eeec:     	stp	q0, q1, [x22]
10001eef0:     	ldr	x8, [sp, #56]
10001eef4:     	str	x8, [sp, #192]
10001eef8:     	ldrsb	w8, [sp, #223]
10001eefc:     	tbz	w8, #31, 0x10001ef08 <benchmark::internal::BenchmarkRunner::RunWarmUp()+0xc0>
10001ef00:     	ldr	x0, [sp, #200]
10001ef04:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001ef08:     	ldr	q0, [x26]
10001ef0c:     	str	q0, [x25]
10001ef10:     	ldr	x8, [x26, #16]
10001ef14:     	str	x8, [x25, #16]
10001ef18:     	strb	wzr, [sp, #87]
10001ef1c:     	strb	wzr, [sp, #64]
10001ef20:     	ldrsb	w8, [sp, #247]
10001ef24:     	tbz	w8, #31, 0x10001ef30 <benchmark::internal::BenchmarkRunner::RunWarmUp()+0xe8>
10001ef28:     	ldr	x0, [sp, #224]
10001ef2c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001ef30:     	ldr	q0, [x27]
10001ef34:     	str	q0, [x24]
10001ef38:     	ldr	x8, [x27, #16]
10001ef3c:     	str	x8, [x24, #16]
10001ef40:     	strb	wzr, [sp, #111]
10001ef44:     	strb	wzr, [sp, #88]
10001ef48:     	ldr	w8, [sp, #112]
10001ef4c:     	str	w8, [sp, #248]
10001ef50:     	ldr	x1, [sp, #264]
10001ef54:     	ldr	x0, [sp, #16]
10001ef58:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
10001ef5c:     	ldp	x8, x1, [sp, #120]
10001ef60:     	stp	x8, x1, [sp, #256]
10001ef64:     	ldr	x8, [sp, #136]
10001ef68:     	str	x8, [sp, #272]
10001ef6c:     	cbz	x8, 0x10001f018 <benchmark::internal::BenchmarkRunner::RunWarmUp()+0x1d0>
10001ef70:     	str	x21, [x1, #16]
10001ef74:     	mov	x1, #0
10001ef78:     	str	x28, [sp, #120]
10001ef7c:     	stp	xzr, xzr, [x28]
10001ef80:     	ldr	q0, [x23]
10001ef84:     	str	q0, [x19]
10001ef88:     	ldr	x0, [sp, #8]
10001ef8c:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
10001ef90:     	ldrsb	w8, [sp, #111]
10001ef94:     	tbnz	w8, #31, 0x10001f034 <benchmark::internal::BenchmarkRunner::RunWarmUp()+0x1ec>
10001ef98:     	ldrsb	w8, [sp, #87]
10001ef9c:     	tbnz	w8, #31, 0x10001f044 <benchmark::internal::BenchmarkRunner::RunWarmUp()+0x1fc>
10001efa0:     	ldr	x0, [x20, #56]
10001efa4:     	bl	0x10000b954 <benchmark::internal::BenchmarkInstance::Teardown() const>
10001efa8:     	ldr	w8, [sp, #248]
10001efac:     	cbnz	w8, 0x10001f050 <benchmark::internal::BenchmarkRunner::RunWarmUp()+0x208>
10001efb0:     	ldr	x8, [sp, #280]
10001efb4:     	mov	w9, #51711
10001efb8:     	movk	w9, #15258, lsl #16
10001efbc:     	cmp	x8, x9
10001efc0:     	b.gt	0x10001f050 <benchmark::internal::BenchmarkRunner::RunWarmUp()+0x208>
10001efc4:     	ldr	d1, [sp, #288]
10001efc8:     	ldrb	w8, [x20, #104]
10001efcc:     	cmp	w8, #0
10001efd0:     	mov	w8, #88
10001efd4:     	mov	w9, #96
10001efd8:     	csel	x8, x9, x8, eq
10001efdc:     	ldr	d0, [x20, x8]
10001efe0:     	fcmp	d1, d0
10001efe4:     	b.ge	0x10001f050 <benchmark::internal::BenchmarkRunner::RunWarmUp()+0x208>
10001efe8:     	ldr	d1, [sp, #168]
10001efec:     	fmul	d0, d0, d8
10001eff0:     	fcmp	d1, d0
10001eff4:     	b.lt	0x10001f004 <benchmark::internal::BenchmarkRunner::RunWarmUp()+0x1bc>
10001eff8:     	ldr	x8, [x20, #56]
10001effc:     	ldrb	w8, [x8, #230]
10001f000:     	cbz	w8, 0x10001f050 <benchmark::internal::BenchmarkRunner::RunWarmUp()+0x208>
10001f004:     	add	x1, sp, #160
10001f008:     	mov	x0, x20
10001f00c:     	bl	0x10001eba0 <benchmark::internal::BenchmarkRunner::PredictNumItersNeeded(benchmark::internal::BenchmarkRunner::IterationResults const&) const>
10001f010:     	str	x0, [x20, #168]
10001f014:     	b	0x10001eed0 <benchmark::internal::BenchmarkRunner::RunWarmUp()+0x88>
10001f018:     	str	x21, [sp, #256]
10001f01c:     	ldr	q0, [x23]
10001f020:     	str	q0, [x19]
10001f024:     	ldr	x0, [sp, #8]
10001f028:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
10001f02c:     	ldrsb	w8, [sp, #111]
10001f030:     	tbz	w8, #31, 0x10001ef98 <benchmark::internal::BenchmarkRunner::RunWarmUp()+0x150>
10001f034:     	ldr	x0, [sp, #88]
10001f038:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001f03c:     	ldrsb	w8, [sp, #87]
10001f040:     	tbz	w8, #31, 0x10001efa0 <benchmark::internal::BenchmarkRunner::RunWarmUp()+0x158>
10001f044:     	ldr	x0, [sp, #64]
10001f048:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001f04c:     	b	0x10001efa0 <benchmark::internal::BenchmarkRunner::RunWarmUp()+0x158>
10001f050:     	mov	w8, #1
10001f054:     	strb	w8, [x20, #104]
10001f058:     	ldr	x8, [sp]
10001f05c:     	str	x8, [x20, #168]
10001f060:     	ldr	x1, [sp, #264]
10001f064:     	ldr	x0, [sp, #16]
10001f068:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
10001f06c:     	ldrsb	w8, [sp, #247]
10001f070:     	tbnz	w8, #31, 0x10001f0a0 <benchmark::internal::BenchmarkRunner::RunWarmUp()+0x258>
10001f074:     	ldrsb	w8, [sp, #223]
10001f078:     	tbnz	w8, #31, 0x10001f0b0 <benchmark::internal::BenchmarkRunner::RunWarmUp()+0x268>
10001f07c:     	ldp	x29, x30, [sp, #416]
10001f080:     	ldp	x20, x19, [sp, #400]
10001f084:     	ldp	x22, x21, [sp, #384]
10001f088:     	ldp	x24, x23, [sp, #368]
10001f08c:     	ldp	x26, x25, [sp, #352]
10001f090:     	ldp	x28, x27, [sp, #336]
10001f094:     	ldp	d9, d8, [sp, #320]
10001f098:     	add	sp, sp, #432
10001f09c:     	ret
10001f0a0:     	ldr	x0, [sp, #224]
10001f0a4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001f0a8:     	ldrsb	w8, [sp, #223]
10001f0ac:     	tbz	w8, #31, 0x10001f07c <benchmark::internal::BenchmarkRunner::RunWarmUp()+0x234>
10001f0b0:     	ldr	x0, [sp, #200]
10001f0b4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001f0b8:     	b	0x10001f07c <benchmark::internal::BenchmarkRunner::RunWarmUp()+0x234>
10001f0bc:     	b	0x10001f0c4 <benchmark::internal::BenchmarkRunner::RunWarmUp()+0x27c>
10001f0c0:     	b	0x10001f0c4 <benchmark::internal::BenchmarkRunner::RunWarmUp()+0x27c>
10001f0c4:     	mov	x19, x0
10001f0c8:     	add	x0, sp, #160
10001f0cc:     	bl	0x10001eb3c <benchmark::internal::BenchmarkRunner::IterationResults::~IterationResults()>
10001f0d0:     	mov	x0, x19
10001f0d4:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010001f0d8 <benchmark::internal::BenchmarkRunner::DoOneRepetition()>:
10001f0d8:     	stp	d9, d8, [sp, #-112]!
10001f0dc:     	stp	x28, x27, [sp, #16]
10001f0e0:     	stp	x26, x25, [sp, #32]
10001f0e4:     	stp	x24, x23, [sp, #48]
10001f0e8:     	stp	x22, x21, [sp, #64]
10001f0ec:     	stp	x20, x19, [sp, #80]
10001f0f0:     	stp	x29, x30, [sp, #96]
10001f0f4:     	add	x29, sp, #96
10001f0f8:     	sub	sp, sp, #640
10001f0fc:     	mov	x20, x0
10001f100:     	sub	x25, x29, #256
10001f104:     	ldr	w26, [x0, #116]
10001f108:     	ldrb	w8, [x0, #104]
10001f10c:     	cbnz	w8, 0x10001f118 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x40>
10001f110:     	mov	x0, x20
10001f114:     	bl	0x10001ee48 <benchmark::internal::BenchmarkRunner::RunWarmUp()>
10001f118:     	add	x10, x25, #96
10001f11c:     	stp	xzr, xzr, [x29, #-152]
10001f120:     	add	x9, x25, #104
10001f124:     	movi.2d	v0, #0000000000000000
10001f128:     	stp	q0, q0, [x25]
10001f12c:     	stp	q0, q0, [x25, #32]
10001f130:     	str	q0, [x25, #64]
10001f134:     	add	x23, x25, #64
10001f138:     	add	x8, x25, #40
10001f13c:     	stp	x10, x8, [sp, #8]
10001f140:     	add	x8, sp, #24
10001f144:     	add	x27, x8, #40
10001f148:     	add	x28, x8, #64
10001f14c:     	add	x24, x8, #96
10001f150:     	add	x19, x8, #104
10001f154:     	stur	q0, [x25, #76]
10001f158:     	add	x21, x25, #120
10001f15c:     	add	x22, x8, #120
10001f160:     	fmov	d8, #5.00000000
10001f164:     	str	x9, [sp]
10001f168:     	stur	x9, [x29, #-160]
10001f16c:     	ldr	x0, [x20, #56]
10001f170:     	bl	0x10000b810 <benchmark::internal::BenchmarkInstance::Setup() const>
10001f174:     	add	x8, sp, #24
10001f178:     	mov	x0, x20
10001f17c:     	bl	0x10001e240 <benchmark::internal::BenchmarkRunner::DoNIterations()>
10001f180:     	ldur	q0, [sp, #24]
10001f184:     	ldur	q1, [sp, #40]
10001f188:     	stp	q0, q1, [x25]
10001f18c:     	ldr	x8, [sp, #56]
10001f190:     	stur	x8, [x29, #-224]
10001f194:     	ldursb	w8, [x29, #-193]
10001f198:     	tbz	w8, #31, 0x10001f1a4 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0xcc>
10001f19c:     	ldur	x0, [x29, #-216]
10001f1a0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001f1a4:     	ldr	q0, [x27]
10001f1a8:     	ldr	x9, [sp, #16]
10001f1ac:     	str	q0, [x9]
10001f1b0:     	ldr	x8, [x27, #16]
10001f1b4:     	str	x8, [x9, #16]
10001f1b8:     	strb	wzr, [sp, #87]
10001f1bc:     	strb	wzr, [sp, #64]
10001f1c0:     	ldursb	w8, [x29, #-169]
10001f1c4:     	tbz	w8, #31, 0x10001f1d0 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0xf8>
10001f1c8:     	ldur	x0, [x29, #-192]
10001f1cc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001f1d0:     	ldr	q0, [x28]
10001f1d4:     	str	q0, [x23]
10001f1d8:     	ldr	x8, [x28, #16]
10001f1dc:     	str	x8, [x23, #16]
10001f1e0:     	strb	wzr, [sp, #111]
10001f1e4:     	strb	wzr, [sp, #88]
10001f1e8:     	ldr	w8, [sp, #112]
10001f1ec:     	stur	w8, [x29, #-168]
10001f1f0:     	ldur	x1, [x29, #-152]
10001f1f4:     	ldr	x0, [sp, #8]
10001f1f8:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
10001f1fc:     	ldp	x8, x1, [sp, #120]
10001f200:     	stp	x8, x1, [x29, #-160]
10001f204:     	ldr	x8, [sp, #136]
10001f208:     	stur	x8, [x29, #-144]
10001f20c:     	cbz	x8, 0x10001f2c8 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x1f0>
10001f210:     	ldr	x8, [sp]
10001f214:     	str	x8, [x1, #16]
10001f218:     	mov	x1, #0
10001f21c:     	str	x19, [sp, #120]
10001f220:     	stp	xzr, xzr, [x19]
10001f224:     	ldr	q0, [x22]
10001f228:     	str	q0, [x21]
10001f22c:     	mov	x0, x24
10001f230:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
10001f234:     	ldrsb	w8, [sp, #111]
10001f238:     	tbnz	w8, #31, 0x10001f2e8 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x210>
10001f23c:     	ldrsb	w8, [sp, #87]
10001f240:     	tbnz	w8, #31, 0x10001f2f8 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x220>
10001f244:     	ldr	x0, [x20, #56]
10001f248:     	bl	0x10000b954 <benchmark::internal::BenchmarkInstance::Teardown() const>
10001f24c:     	cbnz	w26, 0x10001f304 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x22c>
10001f250:     	ldrb	w8, [x20, #112]
10001f254:     	cbnz	w8, 0x10001f304 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x22c>
10001f258:     	ldur	w8, [x29, #-168]
10001f25c:     	cbnz	w8, 0x10001f304 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x22c>
10001f260:     	ldur	x8, [x29, #-136]
10001f264:     	mov	w9, #51711
10001f268:     	movk	w9, #15258, lsl #16
10001f26c:     	cmp	x8, x9
10001f270:     	b.gt	0x10001f304 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x22c>
10001f274:     	ldur	d1, [x29, #-128]
10001f278:     	ldrb	w8, [x20, #104]
10001f27c:     	cmp	w8, #0
10001f280:     	mov	w8, #88
10001f284:     	mov	w9, #96
10001f288:     	csel	x8, x9, x8, eq
10001f28c:     	ldr	d0, [x20, x8]
10001f290:     	fcmp	d1, d0
10001f294:     	b.ge	0x10001f304 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x22c>
10001f298:     	ldur	d1, [x29, #-248]
10001f29c:     	fmul	d0, d0, d8
10001f2a0:     	fcmp	d1, d0
10001f2a4:     	b.lt	0x10001f2b4 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x1dc>
10001f2a8:     	ldr	x8, [x20, #56]
10001f2ac:     	ldrb	w8, [x8, #230]
10001f2b0:     	cbz	w8, 0x10001f304 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x22c>
10001f2b4:     	sub	x1, x29, #256
10001f2b8:     	mov	x0, x20
10001f2bc:     	bl	0x10001eba0 <benchmark::internal::BenchmarkRunner::PredictNumItersNeeded(benchmark::internal::BenchmarkRunner::IterationResults const&) const>
10001f2c0:     	str	x0, [x20, #168]
10001f2c4:     	b	0x10001f16c <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x94>
10001f2c8:     	ldr	x8, [sp]
10001f2cc:     	stur	x8, [x29, #-160]
10001f2d0:     	ldr	q0, [x22]
10001f2d4:     	str	q0, [x21]
10001f2d8:     	mov	x0, x24
10001f2dc:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
10001f2e0:     	ldrsb	w8, [sp, #111]
10001f2e4:     	tbz	w8, #31, 0x10001f23c <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x164>
10001f2e8:     	ldr	x0, [sp, #88]
10001f2ec:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001f2f0:     	ldrsb	w8, [sp, #87]
10001f2f4:     	tbz	w8, #31, 0x10001f244 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x16c>
10001f2f8:     	ldr	x0, [sp, #64]
10001f2fc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001f300:     	b	0x10001f244 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x16c>
10001f304:     	adrp	x27, 0x100038000 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x290>
10001f308:     	ldr	x25, [x27, #520]
10001f30c:     	cbz	x25, 0x10001f340 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x268>
10001f310:     	adrp	x8, 0x100033000 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x288>
10001f314:     	add	x8, x8, #768
10001f318:     	ldr	x21, [x8]
10001f31c:     	ldp	x24, x8, [x20, #152]
10001f320:     	cmp	x24, x8
10001f324:     	b.hs	0x10001f348 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x270>
10001f328:     	stp	xzr, xzr, [x24]
10001f32c:     	dup.2d	v0, x21
10001f330:     	str	q0, [x24, #16]
10001f334:     	add	x28, x24, #32
10001f338:     	str	x28, [x20, #152]
10001f33c:     	b	0x10001f3f8 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x320>
10001f340:     	mov	x24, #0
10001f344:     	b	0x10001f584 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x4ac>
10001f348:     	add	x26, x20, #144
10001f34c:     	ldr	x19, [x26]
10001f350:     	sub	x9, x24, x19
10001f354:     	asr	x22, x9, #5
10001f358:     	add	x9, x22, #1
10001f35c:     	lsr	x10, x9, #59
10001f360:     	cbnz	x10, 0x10001f838 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x760>
10001f364:     	mov	x10, #9223372036854775776
10001f368:     	sub	x8, x8, x19
10001f36c:     	asr	x11, x8, #4
10001f370:     	cmp	x11, x9
10001f374:     	csel	x9, x11, x9, hi
10001f378:     	cmp	x8, x10
10001f37c:     	mov	x8, #576460752303423487
10001f380:     	csel	x28, x9, x8, lo
10001f384:     	cbz	x28, 0x10001f39c <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x2c4>
10001f388:     	lsr	x8, x28, #59
10001f38c:     	cbnz	x8, 0x10001f844 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x76c>
10001f390:     	lsl	x0, x28, #5
10001f394:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001f398:     	b	0x10001f3a0 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x2c8>
10001f39c:     	mov	x0, #0
10001f3a0:     	add	x9, x0, x22, lsl #5
10001f3a4:     	add	x8, x0, x28, lsl #5
10001f3a8:     	stp	xzr, xzr, [x9]
10001f3ac:     	dup.2d	v0, x21
10001f3b0:     	str	q0, [x9, #16]
10001f3b4:     	add	x28, x9, #32
10001f3b8:     	cmp	x24, x19
10001f3bc:     	b.eq	0x10001f3dc <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x304>
10001f3c0:     	ldp	q0, q1, [x24, #-32]
10001f3c4:     	sub	x10, x24, #32
10001f3c8:     	stp	q0, q1, [x9, #-32]!
10001f3cc:     	mov	x24, x10
10001f3d0:     	cmp	x10, x19
10001f3d4:     	b.ne	0x10001f3c0 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x2e8>
10001f3d8:     	ldr	x24, [x26]
10001f3dc:     	stp	x9, x28, [x20, #144]
10001f3e0:     	str	x8, [x20, #160]
10001f3e4:     	cbz	x24, 0x10001f3f8 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x320>
10001f3e8:     	mov	x0, x24
10001f3ec:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001f3f0:     	ldr	x28, [x20, #152]
10001f3f4:     	ldr	x25, [x27, #520]
10001f3f8:     	ldr	x8, [x20, #168]
10001f3fc:     	mov	w9, #16
10001f400:     	cmp	x8, #16
10001f404:     	csel	x24, x8, x9, lt
10001f408:     	ldr	x8, [x25]
10001f40c:     	ldr	x8, [x8, #16]
10001f410:     	mov	x0, x25
10001f414:     	blr	x8
10001f418:     	str	xzr, [sp, #472]
10001f41c:     	mov	w0, #432
10001f420:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001f424:     	mov	x8, x0
10001f428:     	str	xzr, [x8, #104]!
10001f42c:     	movi.2d	v0, #0000000000000000
10001f430:     	stp	q0, q0, [x0]
10001f434:     	stp	q0, q0, [x0, #32]
10001f438:     	str	q0, [x0, #64]
10001f43c:     	stur	q0, [x0, #76]
10001f440:     	str	x8, [x0, #96]
10001f444:     	mov	w8, #43943
10001f448:     	movk	w8, #12970, lsl #16
10001f44c:     	stp	xzr, x8, [x0, #112]
10001f450:     	stp	q0, q0, [x0, #128]
10001f454:     	str	q0, [x0, #160]
10001f458:     	str	xzr, [x0, #176]
10001f45c:     	mov	w9, #1
10001f460:     	str	w9, [x0, #184]
10001f464:     	mov	x9, x0
10001f468:     	str	x8, [x9, #192]!
10001f46c:     	stur	q0, [x0, #232]
10001f470:     	stur	q0, [x0, #216]
10001f474:     	stur	q0, [x0, #200]
10001f478:     	mov	w10, #45499
10001f47c:     	movk	w10, #15536, lsl #16
10001f480:     	stp	xzr, x10, [x0, #248]
10001f484:     	str	xzr, [x0, #296]
10001f488:     	stur	q0, [x9, #88]
10001f48c:     	stur	q0, [x9, #72]
10001f490:     	adrp	x9, 0x100033000 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x408>
10001f494:     	ldr	d1, [x9, #568]
10001f498:     	str	d1, [x0, #304]
10001f49c:     	str	wzr, [x0, #312]
10001f4a0:     	add	x9, x0, #320
10001f4a4:     	str	x8, [x0, #320]
10001f4a8:     	stur	q0, [x9, #8]
10001f4ac:     	stur	q0, [x9, #24]
10001f4b0:     	stur	q0, [x9, #40]
10001f4b4:     	add	x8, x0, #384
10001f4b8:     	stp	xzr, x10, [x0, #376]
10001f4bc:     	str	xzr, [x0, #424]
10001f4c0:     	stur	q0, [x8, #24]
10001f4c4:     	stur	q0, [x8, #8]
10001f4c8:     	str	x0, [sp, #472]
10001f4cc:     	ldr	x0, [x20, #56]
10001f4d0:     	bl	0x10000b810 <benchmark::internal::BenchmarkInstance::Setup() const>
10001f4d4:     	ldr	x0, [x20, #56]
10001f4d8:     	ldr	x3, [sp, #472]
10001f4dc:     	ldr	x4, [x20, #176]
10001f4e0:     	mov	x1, x24
10001f4e4:     	mov	w2, #0
10001f4e8:     	bl	0x10001e8b0 <benchmark::internal::(anonymous namespace)::RunInThread(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*)>
10001f4ec:     	ldr	x19, [sp, #472]
10001f4f0:     	add	x0, x19, #320
10001f4f4:     	str	x0, [sp, #24]
10001f4f8:     	mov	w8, #1
10001f4fc:     	strb	w8, [sp, #32]
10001f500:     	bl	0x10002ef24 <_vsnprintf+0x10002ef24>
10001f504:     	add	x8, x19, #184
10001f508:     	ldar	w8, [x8]
10001f50c:     	cbz	w8, 0x10001f52c <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x454>
10001f510:     	add	x25, x19, #384
10001f514:     	add	x1, sp, #24
10001f518:     	mov	x0, x25
10001f51c:     	bl	0x10002eed0 <_vsnprintf+0x10002eed0>
10001f520:     	add	x8, x19, #184
10001f524:     	ldar	w8, [x8]
10001f528:     	cbnz	w8, 0x10001f514 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x43c>
10001f52c:     	ldrb	w8, [sp, #32]
10001f530:     	cbz	w8, 0x10001f53c <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x464>
10001f534:     	ldr	x0, [sp, #24]
10001f538:     	bl	0x10002ef30 <_vsnprintf+0x10002ef30>
10001f53c:     	ldr	x1, [sp, #472]
10001f540:     	str	xzr, [sp, #472]
10001f544:     	cbz	x1, 0x10001f550 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x478>
10001f548:     	add	x0, sp, #472
10001f54c:     	bl	0x10001fa90 <std::__1::default_delete<benchmark::internal::ThreadManager>::operator()[abi:ue170006](benchmark::internal::ThreadManager*) const>
10001f550:     	ldr	x0, [x20, #56]
10001f554:     	bl	0x10000b954 <benchmark::internal::BenchmarkInstance::Teardown() const>
10001f558:     	sub	x25, x28, #32
10001f55c:     	ldr	x0, [x27, #520]
10001f560:     	ldr	x8, [x0]
10001f564:     	ldr	x8, [x8, #24]
10001f568:     	mov	x1, x25
10001f56c:     	blr	x8
10001f570:     	ldr	x1, [sp, #472]
10001f574:     	str	xzr, [sp, #472]
10001f578:     	cbz	x1, 0x10001f584 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x4ac>
10001f57c:     	add	x0, sp, #472
10001f580:     	bl	0x10001fa90 <std::__1::default_delete<benchmark::internal::ThreadManager>::operator()[abi:ue170006](benchmark::internal::ThreadManager*) const>
10001f584:     	ldr	x26, [x20, #56]
10001f588:     	ldur	d8, [x29, #-128]
10001f58c:     	ldrsw	x19, [x20, #116]
10001f590:     	ldrsw	x21, [x20, #108]
10001f594:     	add	x0, sp, #24
10001f598:     	bl	0x10001f994 <benchmark::BenchmarkReporter::Run::Run()>
10001f59c:     	add	x22, sp, #24
10001f5a0:     	add	x0, sp, #24
10001f5a4:     	mov	x1, x26
10001f5a8:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
10001f5ac:     	add	x0, x22, #24
10001f5b0:     	add	x1, x26, #24
10001f5b4:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
10001f5b8:     	add	x22, sp, #24
10001f5bc:     	add	x0, x22, #48
10001f5c0:     	add	x1, x26, #48
10001f5c4:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
10001f5c8:     	add	x0, x22, #72
10001f5cc:     	add	x1, x26, #72
10001f5d0:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
10001f5d4:     	add	x22, sp, #24
10001f5d8:     	add	x0, x22, #96
10001f5dc:     	add	x1, x26, #96
10001f5e0:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
10001f5e4:     	add	x0, x22, #120
10001f5e8:     	add	x1, x26, #120
10001f5ec:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
10001f5f0:     	add	x22, sp, #24
10001f5f4:     	add	x0, x22, #144
10001f5f8:     	add	x1, x26, #144
10001f5fc:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
10001f600:     	add	x0, x22, #168
10001f604:     	add	x1, x26, #168
10001f608:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
10001f60c:     	ldr	d0, [x26, #200]
10001f610:     	sshll.2d	v0, v0, #0
10001f614:     	stur	q0, [sp, #216]
10001f618:     	ldur	w8, [x29, #-168]
10001f61c:     	str	w8, [sp, #296]
10001f620:     	add	x22, sp, #24
10001f624:     	add	x0, x22, #280
10001f628:     	mov	x1, x23
10001f62c:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
10001f630:     	add	x0, x22, #248
10001f634:     	ldr	x1, [sp, #16]
10001f638:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
10001f63c:     	ldur	x8, [x29, #-256]
10001f640:     	str	x8, [sp, #328]
10001f644:     	ldr	w8, [x26, #224]
10001f648:     	str	w8, [sp, #360]
10001f64c:     	ldrsw	x8, [x26, #312]
10001f650:     	stp	x8, x19, [sp, #336]
10001f654:     	str	x21, [sp, #352]
10001f658:     	ldr	w8, [sp, #296]
10001f65c:     	cbnz	w8, 0x10001f6f8 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x620>
10001f660:     	ldrb	w8, [x26, #230]
10001f664:     	sub	x9, x29, #256
10001f668:     	add	x10, x9, #24
10001f66c:     	orr	x9, x9, #0x8
10001f670:     	cmp	w8, #0
10001f674:     	csel	x8, x9, x10, eq
10001f678:     	ldr	d0, [x8]
10001f67c:     	ldur	d1, [x29, #-240]
10001f680:     	stp	d0, d1, [sp, #368]
10001f684:     	ldur	x8, [x29, #-224]
10001f688:     	ldur	x1, [x29, #-160]
10001f68c:     	str	x8, [sp, #408]
10001f690:     	ldr	w8, [x26, #232]
10001f694:     	str	w8, [sp, #392]
10001f698:     	ldr	x8, [x26, #240]
10001f69c:     	str	x8, [sp, #400]
10001f6a0:     	ldr	x8, [x26, #272]
10001f6a4:     	str	x8, [sp, #416]
10001f6a8:     	add	x8, sp, #24
10001f6ac:     	add	x22, x8, #408
10001f6b0:     	mov	x0, x22
10001f6b4:     	ldr	x2, [sp]
10001f6b8:     	bl	0x1000095b0 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)>
10001f6bc:     	cmp	x24, #1
10001f6c0:     	b.lt	0x10001f6dc <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x604>
10001f6c4:     	str	x25, [sp, #456]
10001f6c8:     	ldr	d0, [x25]
10001f6cc:     	scvtf	d0, d0
10001f6d0:     	scvtf	d1, x24
10001f6d4:     	fdiv	d0, d0, d1
10001f6d8:     	str	d0, [sp, #464]
10001f6dc:     	ldur	x1, [x29, #-256]
10001f6e0:     	ldr	s0, [x26, #312]
10001f6e4:     	sshll.2d	v0, v0, #0
10001f6e8:     	scvtf	d1, d0
10001f6ec:     	mov	x0, x22
10001f6f0:     	fmov	d0, d8
10001f6f4:     	bl	0x100024734 <benchmark::internal::Finish(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>>*, long long, double, double)>
10001f6f8:     	ldr	x22, [x20, #64]
10001f6fc:     	cbz	x22, 0x10001f744 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x66c>
10001f700:     	ldr	w8, [x22, #4]
10001f704:     	add	w8, w8, #1
10001f708:     	str	w8, [x22, #4]
10001f70c:     	ldr	w8, [sp, #296]
10001f710:     	cbnz	w8, 0x10001f744 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x66c>
10001f714:     	ldp	x21, x8, [x22, #16]
10001f718:     	cmp	x21, x8
10001f71c:     	b.eq	0x10001f738 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x660>
10001f720:     	add	x1, sp, #24
10001f724:     	mov	x0, x21
10001f728:     	bl	0x1000081f0 <benchmark::BenchmarkReporter::Run::Run(benchmark::BenchmarkReporter::Run const&)>
10001f72c:     	add	x8, x21, #448
10001f730:     	str	x8, [x22, #16]
10001f734:     	b	0x10001f744 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x66c>
10001f738:     	add	x0, x22, #8
10001f73c:     	add	x1, sp, #24
10001f740:     	bl	0x10001fd40 <void std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__push_back_slow_path<benchmark::BenchmarkReporter::Run const&>(benchmark::BenchmarkReporter::Run const&)>
10001f744:     	ldp	x21, x8, [x20, #8]
10001f748:     	cmp	x21, x8
10001f74c:     	b.eq	0x10001f768 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x690>
10001f750:     	add	x1, sp, #24
10001f754:     	mov	x0, x21
10001f758:     	bl	0x1000081f0 <benchmark::BenchmarkReporter::Run::Run(benchmark::BenchmarkReporter::Run const&)>
10001f75c:     	add	x8, x21, #448
10001f760:     	str	x8, [x20, #8]
10001f764:     	b	0x10001f774 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x69c>
10001f768:     	add	x1, sp, #24
10001f76c:     	mov	x0, x20
10001f770:     	bl	0x10001fd40 <void std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__push_back_slow_path<benchmark::BenchmarkReporter::Run const&>(benchmark::BenchmarkReporter::Run const&)>
10001f774:     	ldr	w8, [x20, #116]
10001f778:     	add	w8, w8, #1
10001f77c:     	str	w8, [x20, #116]
10001f780:     	add	x8, sp, #24
10001f784:     	add	x0, x8, #408
10001f788:     	ldr	x1, [sp, #440]
10001f78c:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
10001f790:     	ldrsb	w8, [sp, #327]
10001f794:     	tbnz	w8, #31, 0x10001f7f0 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x718>
10001f798:     	ldrsb	w8, [sp, #295]
10001f79c:     	tbnz	w8, #31, 0x10001f800 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x728>
10001f7a0:     	ldrsb	w8, [sp, #263]
10001f7a4:     	tbnz	w8, #31, 0x10001f810 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x738>
10001f7a8:     	add	x0, sp, #24
10001f7ac:     	bl	0x1000090c8 <benchmark::BenchmarkName::~BenchmarkName()>
10001f7b0:     	ldur	x1, [x29, #-152]
10001f7b4:     	ldr	x0, [sp, #8]
10001f7b8:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
10001f7bc:     	ldursb	w8, [x29, #-169]
10001f7c0:     	tbnz	w8, #31, 0x10001f81c <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x744>
10001f7c4:     	ldursb	w8, [x29, #-193]
10001f7c8:     	tbnz	w8, #31, 0x10001f82c <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x754>
10001f7cc:     	add	sp, sp, #640
10001f7d0:     	ldp	x29, x30, [sp, #96]
10001f7d4:     	ldp	x20, x19, [sp, #80]
10001f7d8:     	ldp	x22, x21, [sp, #64]
10001f7dc:     	ldp	x24, x23, [sp, #48]
10001f7e0:     	ldp	x26, x25, [sp, #32]
10001f7e4:     	ldp	x28, x27, [sp, #16]
10001f7e8:     	ldp	d9, d8, [sp], #112
10001f7ec:     	ret
10001f7f0:     	ldr	x0, [sp, #304]
10001f7f4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001f7f8:     	ldrsb	w8, [sp, #295]
10001f7fc:     	tbz	w8, #31, 0x10001f7a0 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x6c8>
10001f800:     	ldr	x0, [sp, #272]
10001f804:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001f808:     	ldrsb	w8, [sp, #263]
10001f80c:     	tbz	w8, #31, 0x10001f7a8 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x6d0>
10001f810:     	ldr	x0, [sp, #240]
10001f814:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001f818:     	b	0x10001f7a8 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x6d0>
10001f81c:     	ldur	x0, [x29, #-192]
10001f820:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001f824:     	ldursb	w8, [x29, #-193]
10001f828:     	tbz	w8, #31, 0x10001f7cc <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x6f4>
10001f82c:     	ldur	x0, [x29, #-216]
10001f830:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001f834:     	b	0x10001f7cc <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x6f4>
10001f838:     	mov	x0, x26
10001f83c:     	bl	0x10001fd2c <std::__1::vector<benchmark::MemoryManager::Result, std::__1::allocator<benchmark::MemoryManager::Result>>::__throw_length_error[abi:ue170006]() const>
10001f840:     	b	0x10001f848 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x770>
10001f844:     	bl	0x100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>
10001f848:     	brk	#0x1
10001f84c:     	mov	x19, x0
10001f850:     	str	x21, [x22, #16]
10001f854:     	b	0x10001f89c <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x7c4>
10001f858:     	b	0x10001f898 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x7c0>
10001f85c:     	mov	x19, x0
10001f860:     	str	x21, [x20, #8]
10001f864:     	b	0x10001f89c <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x7c4>
10001f868:     	b	0x10001f8a8 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x7d0>
10001f86c:     	b	0x10001f8a8 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x7d0>
10001f870:     	b	0x10001f8a8 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x7d0>
10001f874:     	mov	x19, x0
10001f878:     	ldr	x1, [sp, #472]
10001f87c:     	str	xzr, [sp, #472]
10001f880:     	cbz	x1, 0x10001f8ac <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x7d4>
10001f884:     	add	x0, sp, #472
10001f888:     	bl	0x10001fa90 <std::__1::default_delete<benchmark::internal::ThreadManager>::operator()[abi:ue170006](benchmark::internal::ThreadManager*) const>
10001f88c:     	b	0x10001f8ac <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x7d4>
10001f890:     	b	0x10001f8a8 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x7d0>
10001f894:     	b	0x10001f8a8 <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x7d0>
10001f898:     	mov	x19, x0
10001f89c:     	add	x0, sp, #24
10001f8a0:     	bl	0x10001f8bc <benchmark::BenchmarkReporter::Run::~Run()>
10001f8a4:     	b	0x10001f8ac <benchmark::internal::BenchmarkRunner::DoOneRepetition()+0x7d4>
10001f8a8:     	mov	x19, x0
10001f8ac:     	sub	x0, x29, #256
10001f8b0:     	bl	0x10001eb3c <benchmark::internal::BenchmarkRunner::IterationResults::~IterationResults()>
10001f8b4:     	mov	x0, x19
10001f8b8:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010001f8bc <benchmark::BenchmarkReporter::Run::~Run()>:
10001f8bc:     	stp	x20, x19, [sp, #-32]!
10001f8c0:     	stp	x29, x30, [sp, #16]
10001f8c4:     	add	x29, sp, #16
10001f8c8:     	mov	x19, x0
10001f8cc:     	add	x0, x0, #408
10001f8d0:     	ldr	x1, [x19, #416]
10001f8d4:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
10001f8d8:     	ldrsb	w8, [x19, #303]
10001f8dc:     	tbnz	w8, #31, 0x10001f900 <benchmark::BenchmarkReporter::Run::~Run()+0x44>
10001f8e0:     	ldrsb	w8, [x19, #271]
10001f8e4:     	tbnz	w8, #31, 0x10001f910 <benchmark::BenchmarkReporter::Run::~Run()+0x54>
10001f8e8:     	ldrsb	w8, [x19, #239]
10001f8ec:     	tbnz	w8, #31, 0x10001f920 <benchmark::BenchmarkReporter::Run::~Run()+0x64>
10001f8f0:     	mov	x0, x19
10001f8f4:     	ldp	x29, x30, [sp, #16]
10001f8f8:     	ldp	x20, x19, [sp], #32
10001f8fc:     	b	0x1000090c8 <benchmark::BenchmarkName::~BenchmarkName()>
10001f900:     	ldr	x0, [x19, #280]
10001f904:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001f908:     	ldrsb	w8, [x19, #271]
10001f90c:     	tbz	w8, #31, 0x10001f8e8 <benchmark::BenchmarkReporter::Run::~Run()+0x2c>
10001f910:     	ldr	x0, [x19, #248]
10001f914:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001f918:     	ldrsb	w8, [x19, #239]
10001f91c:     	tbz	w8, #31, 0x10001f8f0 <benchmark::BenchmarkReporter::Run::~Run()+0x34>
10001f920:     	ldr	x0, [x19, #216]
10001f924:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001f928:     	mov	x0, x19
10001f92c:     	ldp	x29, x30, [sp, #16]
10001f930:     	ldp	x20, x19, [sp], #32
10001f934:     	b	0x1000090c8 <benchmark::BenchmarkName::~BenchmarkName()>

000000010001f938 <benchmark::internal::BenchmarkRunner::GetResults()>:
10001f938:     	sub	sp, sp, #64
10001f93c:     	stp	x20, x19, [sp, #32]
10001f940:     	stp	x29, x30, [sp, #48]
10001f944:     	add	x29, sp, #48
10001f948:     	mov	x19, x0
10001f94c:     	mov	x20, sp
10001f950:     	mov	x8, sp
10001f954:     	bl	0x10002a584 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)>
10001f958:     	add	x0, x19, #24
10001f95c:     	bl	0x100020148 <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__vdeallocate()>
10001f960:     	ldr	q0, [sp]
10001f964:     	stur	q0, [x19, #24]
10001f968:     	ldr	x8, [sp, #16]
10001f96c:     	str	x8, [x19, #40]
10001f970:     	stp	xzr, xzr, [sp]
10001f974:     	stp	xzr, x20, [sp, #16]
10001f978:     	add	x0, sp, #24
10001f97c:     	bl	0x100009fac <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__destroy_vector::operator()[abi:ue170006]()>
10001f980:     	mov	x0, x19
10001f984:     	ldp	x29, x30, [sp, #48]
10001f988:     	ldp	x20, x19, [sp, #32]
10001f98c:     	add	sp, sp, #64
10001f990:     	ret

000000010001f994 <benchmark::BenchmarkReporter::Run::Run()>:
10001f994:     	stp	x24, x23, [sp, #-64]!
10001f998:     	stp	x22, x21, [sp, #16]
10001f99c:     	stp	x20, x19, [sp, #32]
10001f9a0:     	stp	x29, x30, [sp, #48]
10001f9a4:     	add	x29, sp, #48
10001f9a8:     	mov	x19, x0
10001f9ac:     	movi.2d	v0, #0000000000000000
10001f9b0:     	stp	q0, q0, [x0, #160]
10001f9b4:     	stp	q0, q0, [x0, #128]
10001f9b8:     	stp	q0, q0, [x0, #96]
10001f9bc:     	stp	q0, q0, [x0, #64]
10001f9c0:     	stp	q0, q0, [x0, #32]
10001f9c4:     	stp	q0, q0, [x0]
10001f9c8:     	mov	x20, x0
10001f9cc:     	str	xzr, [x20, #216]!
10001f9d0:     	str	wzr, [x0, #208]
10001f9d4:     	stp	xzr, xzr, [x0, #288]
10001f9d8:     	str	xzr, [x0, #280]
10001f9dc:     	stp	xzr, xzr, [x0, #224]
10001f9e0:     	str	wzr, [x0, #240]
10001f9e4:     	mov	x21, x0
10001f9e8:     	str	xzr, [x21, #248]!
10001f9ec:     	add	x23, x0, #280
10001f9f0:     	str	wzr, [x21, #24]
10001f9f4:     	stp	xzr, xzr, [x21, #8]
10001f9f8:     	mov	w8, #1
10001f9fc:     	dup.2d	v0, x8
10001fa00:     	stur	q0, [x21, #56]
10001fa04:     	bl	0x100005e00 <benchmark::GetDefaultTimeUnit()>
10001fa08:     	str	w0, [x19, #336]
10001fa0c:     	strh	wzr, [x19, #400]
10001fa10:     	add	x8, x19, #416
10001fa14:     	stp	xzr, xzr, [x19, #352]
10001fa18:     	str	xzr, [x19, #344]
10001fa1c:     	str	wzr, [x19, #368]
10001fa20:     	stp	xzr, xzr, [x19, #376]
10001fa24:     	stp	x8, xzr, [x19, #408]
10001fa28:     	stp	xzr, xzr, [x19, #432]
10001fa2c:     	str	xzr, [x19, #424]
10001fa30:     	mov	x0, x19
10001fa34:     	ldp	x29, x30, [sp, #48]
10001fa38:     	ldp	x20, x19, [sp, #32]
10001fa3c:     	ldp	x22, x21, [sp, #16]
10001fa40:     	ldp	x24, x23, [sp], #64
10001fa44:     	ret
10001fa48:     	mov	x22, x0
10001fa4c:     	ldrsb	w8, [x19, #303]
10001fa50:     	tbz	w8, #31, 0x10001fa5c <benchmark::BenchmarkReporter::Run::Run()+0xc8>
10001fa54:     	ldr	x0, [x23]
10001fa58:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001fa5c:     	mov	x0, x19
10001fa60:     	mov	x1, x21
10001fa64:     	mov	x2, x20
10001fa68:     	bl	0x10002ebe8 <benchmark::BenchmarkReporter::Run::Run() (.cold.1)>
10001fa6c:     	mov	x0, x19
10001fa70:     	bl	0x1000090c8 <benchmark::BenchmarkName::~BenchmarkName()>
10001fa74:     	mov	x0, x22
10001fa78:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010001fa7c <std::__1::vector<std::__1::thread, std::__1::allocator<std::__1::thread>>::__throw_length_error[abi:ue170006]() const>:
10001fa7c:     	stp	x29, x30, [sp, #-16]!
10001fa80:     	mov	x29, sp
10001fa84:     	adrp	x0, 0x100031000 <std::__1::default_delete<benchmark::internal::ThreadManager>::operator()[abi:ue170006](benchmark::internal::ThreadManager*) const+0x3c>
10001fa88:     	add	x0, x0, #3485
10001fa8c:     	bl	0x100006a48 <std::__1::__throw_length_error[abi:ue170006](char const*)>

000000010001fa90 <std::__1::default_delete<benchmark::internal::ThreadManager>::operator()[abi:ue170006](benchmark::internal::ThreadManager*) const>:
10001fa90:     	cbz	x1, 0x10001fafc <std::__1::default_delete<benchmark::internal::ThreadManager>::operator()[abi:ue170006](benchmark::internal::ThreadManager*) const+0x6c>
10001fa94:     	stp	x20, x19, [sp, #-32]!
10001fa98:     	stp	x29, x30, [sp, #16]
10001fa9c:     	add	x29, sp, #16
10001faa0:     	mov	x19, x1
10001faa4:     	add	x0, x1, #384
10001faa8:     	bl	0x10002eedc <_vsnprintf+0x10002eedc>
10001faac:     	add	x0, x19, #320
10001fab0:     	bl	0x10002ef3c <_vsnprintf+0x10002ef3c>
10001fab4:     	add	x20, x19, #192
10001fab8:     	add	x0, x19, #256
10001fabc:     	bl	0x10002eedc <_vsnprintf+0x10002eedc>
10001fac0:     	mov	x0, x20
10001fac4:     	bl	0x10002ef3c <_vsnprintf+0x10002ef3c>
10001fac8:     	add	x0, x19, #120
10001facc:     	bl	0x10002ef3c <_vsnprintf+0x10002ef3c>
10001fad0:     	add	x0, x19, #96
10001fad4:     	ldr	x1, [x19, #104]
10001fad8:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
10001fadc:     	ldrsb	w8, [x19, #87]
10001fae0:     	tbnz	w8, #31, 0x10001fb00 <std::__1::default_delete<benchmark::internal::ThreadManager>::operator()[abi:ue170006](benchmark::internal::ThreadManager*) const+0x70>
10001fae4:     	ldrsb	w8, [x19, #63]
10001fae8:     	tbnz	w8, #31, 0x10001fb10 <std::__1::default_delete<benchmark::internal::ThreadManager>::operator()[abi:ue170006](benchmark::internal::ThreadManager*) const+0x80>
10001faec:     	mov	x0, x19
10001faf0:     	ldp	x29, x30, [sp, #16]
10001faf4:     	ldp	x20, x19, [sp], #32
10001faf8:     	b	0x10002f014 <_vsnprintf+0x10002f014>
10001fafc:     	ret
10001fb00:     	ldr	x0, [x19, #64]
10001fb04:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001fb08:     	ldrsb	w8, [x19, #63]
10001fb0c:     	tbz	w8, #31, 0x10001faec <std::__1::default_delete<benchmark::internal::ThreadManager>::operator()[abi:ue170006](benchmark::internal::ThreadManager*) const+0x5c>
10001fb10:     	ldr	x0, [x19, #40]
10001fb14:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001fb18:     	mov	x0, x19
10001fb1c:     	ldp	x29, x30, [sp, #16]
10001fb20:     	ldp	x20, x19, [sp], #32
10001fb24:     	b	0x10002f014 <_vsnprintf+0x10002f014>

000000010001fb28 <std::__1::thread::thread<void (*)(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*), benchmark::internal::BenchmarkInstance const*, long long&, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement* const&, void>(void (*&&)(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*), benchmark::internal::BenchmarkInstance const*&&, long long&, int&&, benchmark::internal::ThreadManager*&&, benchmark::internal::PerfCountersMeasurement* const&)>:
10001fb28:     	sub	sp, sp, #96
10001fb2c:     	stp	x26, x25, [sp, #16]
10001fb30:     	stp	x24, x23, [sp, #32]
10001fb34:     	stp	x22, x21, [sp, #48]
10001fb38:     	stp	x20, x19, [sp, #64]
10001fb3c:     	stp	x29, x30, [sp, #80]
10001fb40:     	add	x29, sp, #80
10001fb44:     	mov	x20, x6
10001fb48:     	mov	x21, x5
10001fb4c:     	mov	x22, x4
10001fb50:     	mov	x23, x3
10001fb54:     	mov	x24, x2
10001fb58:     	mov	x25, x1
10001fb5c:     	mov	x19, x0
10001fb60:     	mov	w0, #8
10001fb64:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001fb68:     	mov	x26, x0
10001fb6c:     	bl	0x10002ee94 <_vsnprintf+0x10002ee94>
10001fb70:     	str	x26, [sp, #8]
10001fb74:     	mov	w0, #56
10001fb78:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001fb7c:     	mov	x3, x0
10001fb80:     	stp	x0, xzr, [sp]
10001fb84:     	ldr	x8, [x25]
10001fb88:     	stp	x26, x8, [x0]
10001fb8c:     	ldr	x8, [x24]
10001fb90:     	ldr	x9, [x23]
10001fb94:     	stp	x8, x9, [x0, #16]
10001fb98:     	ldr	w8, [x22]
10001fb9c:     	str	w8, [x0, #32]
10001fba0:     	ldr	x8, [x21]
10001fba4:     	ldr	x9, [x20]
10001fba8:     	stp	x8, x9, [x0, #40]
10001fbac:     	adrp	x2, 0x10001f000 <std::__1::thread::thread<void (*)(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*), benchmark::internal::BenchmarkInstance const*, long long&, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement* const&, void>(void (*&&)(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*), benchmark::internal::BenchmarkInstance const*&&, long long&, int&&, benchmark::internal::ThreadManager*&&, benchmark::internal::PerfCountersMeasurement* const&)+0x84>
10001fbb0:     	add	x2, x2, #3116
10001fbb4:     	mov	x0, x19
10001fbb8:     	mov	x1, #0
10001fbbc:     	bl	0x10002f1f4 <_vsnprintf+0x10002f1f4>
10001fbc0:     	cbnz	w0, 0x10001fbe4 <std::__1::thread::thread<void (*)(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*), benchmark::internal::BenchmarkInstance const*, long long&, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement* const&, void>(void (*&&)(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*), benchmark::internal::BenchmarkInstance const*&&, long long&, int&&, benchmark::internal::ThreadManager*&&, benchmark::internal::PerfCountersMeasurement* const&)+0xbc>
10001fbc4:     	mov	x0, x19
10001fbc8:     	ldp	x29, x30, [sp, #80]
10001fbcc:     	ldp	x20, x19, [sp, #64]
10001fbd0:     	ldp	x22, x21, [sp, #48]
10001fbd4:     	ldp	x24, x23, [sp, #32]
10001fbd8:     	ldp	x26, x25, [sp, #16]
10001fbdc:     	add	sp, sp, #96
10001fbe0:     	ret
10001fbe4:     	adrp	x1, 0x100032000 <void* std::__1::__thread_proxy[abi:ue170006]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (*)(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*), benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*>>(void*)+0x4>
10001fbe8:     	add	x1, x1, #362
10001fbec:     	bl	0x10002ef18 <_vsnprintf+0x10002ef18>
10001fbf0:     	brk	#0x1
10001fbf4:     	mov	x19, x0
10001fbf8:     	b	0x10001fc1c <std::__1::thread::thread<void (*)(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*), benchmark::internal::BenchmarkInstance const*, long long&, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement* const&, void>(void (*&&)(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*), benchmark::internal::BenchmarkInstance const*&&, long long&, int&&, benchmark::internal::ThreadManager*&&, benchmark::internal::PerfCountersMeasurement* const&)+0xf4>
10001fbfc:     	mov	x19, x0
10001fc00:     	mov	x0, x26
10001fc04:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001fc08:     	mov	x0, x19
10001fc0c:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
10001fc10:     	mov	x19, x0
10001fc14:     	mov	x0, sp
10001fc18:     	bl	0x10001fcb0 <std::__1::unique_ptr<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (*)(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*), benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*>, std::__1::default_delete<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (*)(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*), benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*>>>::~unique_ptr[abi:ue170006]()>
10001fc1c:     	add	x0, sp, #8
10001fc20:     	bl	0x10001fcf8 <std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>::~unique_ptr[abi:ue170006]()>
10001fc24:     	mov	x0, x19
10001fc28:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010001fc2c <void* std::__1::__thread_proxy[abi:ue170006]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (*)(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*), benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*>>(void*)>:
10001fc2c:     	sub	sp, sp, #48
10001fc30:     	stp	x20, x19, [sp, #16]
10001fc34:     	stp	x29, x30, [sp, #32]
10001fc38:     	add	x29, sp, #32
10001fc3c:     	mov	x19, x0
10001fc40:     	str	x0, [sp, #8]
10001fc44:     	bl	0x10002ef00 <_vsnprintf+0x10002ef00>
10001fc48:     	ldr	x1, [x19]
10001fc4c:     	str	xzr, [x19]
10001fc50:     	ldr	x0, [x0]
10001fc54:     	bl	0x10002f218 <_vsnprintf+0x10002f218>
10001fc58:     	ldp	x8, x0, [x19, #8]
10001fc5c:     	ldr	x1, [x19, #24]
10001fc60:     	ldr	w2, [x19, #32]
10001fc64:     	ldp	x3, x4, [x19, #40]
10001fc68:     	blr	x8
10001fc6c:     	ldr	x0, [x19]
10001fc70:     	str	xzr, [x19]
10001fc74:     	cbz	x0, 0x10001fc80 <void* std::__1::__thread_proxy[abi:ue170006]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (*)(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*), benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*>>(void*)+0x54>
10001fc78:     	bl	0x10002eea0 <_vsnprintf+0x10002eea0>
10001fc7c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001fc80:     	mov	x0, x19
10001fc84:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001fc88:     	mov	x0, #0
10001fc8c:     	ldp	x29, x30, [sp, #32]
10001fc90:     	ldp	x20, x19, [sp, #16]
10001fc94:     	add	sp, sp, #48
10001fc98:     	ret
10001fc9c:     	mov	x19, x0
10001fca0:     	add	x0, sp, #8
10001fca4:     	bl	0x10001fcb0 <std::__1::unique_ptr<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (*)(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*), benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*>, std::__1::default_delete<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (*)(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*), benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*>>>::~unique_ptr[abi:ue170006]()>
10001fca8:     	mov	x0, x19
10001fcac:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010001fcb0 <std::__1::unique_ptr<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (*)(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*), benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*>, std::__1::default_delete<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (*)(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*), benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*>>>::~unique_ptr[abi:ue170006]()>:
10001fcb0:     	stp	x20, x19, [sp, #-32]!
10001fcb4:     	stp	x29, x30, [sp, #16]
10001fcb8:     	add	x29, sp, #16
10001fcbc:     	mov	x19, x0
10001fcc0:     	ldr	x20, [x0]
10001fcc4:     	str	xzr, [x0]
10001fcc8:     	cbz	x20, 0x10001fce8 <std::__1::unique_ptr<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (*)(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*), benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*>, std::__1::default_delete<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (*)(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*), benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*>>>::~unique_ptr[abi:ue170006]()+0x38>
10001fccc:     	ldr	x0, [x20]
10001fcd0:     	str	xzr, [x20]
10001fcd4:     	cbz	x0, 0x10001fce0 <std::__1::unique_ptr<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (*)(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*), benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*>, std::__1::default_delete<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (*)(benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*), benchmark::internal::BenchmarkInstance const*, long long, int, benchmark::internal::ThreadManager*, benchmark::internal::PerfCountersMeasurement*>>>::~unique_ptr[abi:ue170006]()+0x30>
10001fcd8:     	bl	0x10002eea0 <_vsnprintf+0x10002eea0>
10001fcdc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001fce0:     	mov	x0, x20
10001fce4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001fce8:     	mov	x0, x19
10001fcec:     	ldp	x29, x30, [sp, #16]
10001fcf0:     	ldp	x20, x19, [sp], #32
10001fcf4:     	ret

000000010001fcf8 <std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>::~unique_ptr[abi:ue170006]()>:
10001fcf8:     	stp	x20, x19, [sp, #-32]!
10001fcfc:     	stp	x29, x30, [sp, #16]
10001fd00:     	add	x29, sp, #16
10001fd04:     	mov	x19, x0
10001fd08:     	ldr	x0, [x0]
10001fd0c:     	str	xzr, [x19]
10001fd10:     	cbz	x0, 0x10001fd1c <std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>::~unique_ptr[abi:ue170006]()+0x24>
10001fd14:     	bl	0x10002eea0 <_vsnprintf+0x10002eea0>
10001fd18:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10001fd1c:     	mov	x0, x19
10001fd20:     	ldp	x29, x30, [sp, #16]
10001fd24:     	ldp	x20, x19, [sp], #32
10001fd28:     	ret

000000010001fd2c <std::__1::vector<benchmark::MemoryManager::Result, std::__1::allocator<benchmark::MemoryManager::Result>>::__throw_length_error[abi:ue170006]() const>:
10001fd2c:     	stp	x29, x30, [sp, #-16]!
10001fd30:     	mov	x29, sp
10001fd34:     	adrp	x0, 0x100031000 <void std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__push_back_slow_path<benchmark::BenchmarkReporter::Run const&>(benchmark::BenchmarkReporter::Run const&)+0x3c>
10001fd38:     	add	x0, x0, #3485
10001fd3c:     	bl	0x100006a48 <std::__1::__throw_length_error[abi:ue170006](char const*)>

000000010001fd40 <void std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__push_back_slow_path<benchmark::BenchmarkReporter::Run const&>(benchmark::BenchmarkReporter::Run const&)>:
10001fd40:     	sub	sp, sp, #96
10001fd44:     	stp	x22, x21, [sp, #48]
10001fd48:     	stp	x20, x19, [sp, #64]
10001fd4c:     	stp	x29, x30, [sp, #80]
10001fd50:     	add	x29, sp, #80
10001fd54:     	mov	x19, x0
10001fd58:     	mov	x8, #9362
10001fd5c:     	movk	x8, #37449, lsl #16
10001fd60:     	movk	x8, #18724, lsl #32
10001fd64:     	movk	x8, #146, lsl #48
10001fd68:     	ldp	x9, x10, [x0]
10001fd6c:     	sub	x10, x10, x9
10001fd70:     	asr	x10, x10, #6
10001fd74:     	mov	x11, #28087
10001fd78:     	movk	x11, #46811, lsl #16
10001fd7c:     	movk	x11, #56173, lsl #32
10001fd80:     	movk	x11, #28086, lsl #48
10001fd84:     	mul	x21, x10, x11
10001fd88:     	add	x10, x21, #1
10001fd8c:     	cmp	x10, x8
10001fd90:     	b.hi	0x100020128 <void std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__push_back_slow_path<benchmark::BenchmarkReporter::Run const&>(benchmark::BenchmarkReporter::Run const&)+0x3e8>
10001fd94:     	mov	x20, x1
10001fd98:     	add	x12, x19, #16
10001fd9c:     	ldr	x13, [x12]
10001fda0:     	sub	x9, x13, x9
10001fda4:     	asr	x9, x9, #6
10001fda8:     	mul	x9, x9, x11
10001fdac:     	lsl	x11, x9, #1
10001fdb0:     	cmp	x11, x10
10001fdb4:     	csel	x10, x11, x10, hi
10001fdb8:     	mov	x11, #37449
10001fdbc:     	movk	x11, #18724, lsl #16
10001fdc0:     	movk	x11, #9362, lsl #32
10001fdc4:     	movk	x11, #73, lsl #48
10001fdc8:     	cmp	x9, x11
10001fdcc:     	csel	x22, x10, x8, lo
10001fdd0:     	str	x12, [sp, #40]
10001fdd4:     	cbz	x22, 0x10001fdf4 <void std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__push_back_slow_path<benchmark::BenchmarkReporter::Run const&>(benchmark::BenchmarkReporter::Run const&)+0xb4>
10001fdd8:     	cmp	x22, x8
10001fddc:     	b.hi	0x100020130 <void std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__push_back_slow_path<benchmark::BenchmarkReporter::Run const&>(benchmark::BenchmarkReporter::Run const&)+0x3f0>
10001fde0:     	lsl	x8, x22, #9
10001fde4:     	sub	x0, x8, x22, lsl #6
10001fde8:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10001fdec:     	mov	x8, x0
10001fdf0:     	b	0x10001fdf8 <void std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__push_back_slow_path<benchmark::BenchmarkReporter::Run const&>(benchmark::BenchmarkReporter::Run const&)+0xb8>
10001fdf4:     	mov	x8, #0
10001fdf8:     	mov	w9, #448
10001fdfc:     	madd	x0, x21, x9, x8
10001fe00:     	stp	x8, x0, [sp, #8]
10001fe04:     	madd	x21, x22, x9, x8
10001fe08:     	stp	x0, x21, [sp, #24]
10001fe0c:     	mov	x1, x20
10001fe10:     	bl	0x1000081f0 <benchmark::BenchmarkReporter::Run::Run(benchmark::BenchmarkReporter::Run const&)>
10001fe14:     	add	x10, x0, #448
10001fe18:     	str	x10, [sp, #24]
10001fe1c:     	ldp	x9, x8, [x19]
10001fe20:     	cmp	x8, x9
10001fe24:     	b.eq	0x100020080 <void std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__push_back_slow_path<benchmark::BenchmarkReporter::Run const&>(benchmark::BenchmarkReporter::Run const&)+0x340>
10001fe28:     	mov	x10, #0
10001fe2c:     	b	0x10001fe5c <void std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__push_back_slow_path<benchmark::BenchmarkReporter::Run const&>(benchmark::BenchmarkReporter::Run const&)+0x11c>
10001fe30:     	str	x14, [x15, #16]
10001fe34:     	stur	x13, [x11, #-40]
10001fe38:     	stp	xzr, xzr, [x13]
10001fe3c:     	add	x11, x0, x10
10001fe40:     	add	x12, x8, x10
10001fe44:     	ldur	q0, [x12, #-16]
10001fe48:     	stur	q0, [x11, #-16]
10001fe4c:     	sub	x10, x10, #448
10001fe50:     	add	x11, x8, x10
10001fe54:     	cmp	x11, x9
10001fe58:     	b.eq	0x100020048 <void std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__push_back_slow_path<benchmark::BenchmarkReporter::Run const&>(benchmark::BenchmarkReporter::Run const&)+0x308>
10001fe5c:     	add	x12, x0, x10
10001fe60:     	sub	x13, x12, #448
10001fe64:     	add	x11, x8, x10
10001fe68:     	sub	x14, x11, #448
10001fe6c:     	ldr	q0, [x14]
10001fe70:     	ldr	x15, [x14, #16]
10001fe74:     	str	x15, [x13, #16]
10001fe78:     	str	q0, [x13]
10001fe7c:     	stp	xzr, xzr, [x14, #8]
10001fe80:     	str	xzr, [x14]
10001fe84:     	sub	x13, x12, #424
10001fe88:     	sub	x14, x11, #424
10001fe8c:     	ldr	q0, [x14]
10001fe90:     	ldr	x15, [x14, #16]
10001fe94:     	str	x15, [x13, #16]
10001fe98:     	str	q0, [x13]
10001fe9c:     	stp	xzr, xzr, [x14, #8]
10001fea0:     	str	xzr, [x14]
10001fea4:     	sub	x13, x12, #400
10001fea8:     	sub	x14, x11, #400
10001feac:     	ldr	q0, [x14]
10001feb0:     	ldr	x15, [x14, #16]
10001feb4:     	str	x15, [x13, #16]
10001feb8:     	str	q0, [x13]
10001febc:     	stp	xzr, xzr, [x14, #8]
10001fec0:     	str	xzr, [x14]
10001fec4:     	sub	x13, x12, #376
10001fec8:     	sub	x14, x11, #376
10001fecc:     	ldr	q0, [x14]
10001fed0:     	ldr	x15, [x14, #16]
10001fed4:     	str	x15, [x13, #16]
10001fed8:     	str	q0, [x13]
10001fedc:     	sub	x13, x11, #368
10001fee0:     	str	xzr, [x13]
10001fee4:     	str	xzr, [x14]
10001fee8:     	str	xzr, [x14, #16]
10001feec:     	sub	x13, x12, #352
10001fef0:     	sub	x14, x11, #352
10001fef4:     	ldr	q0, [x14]
10001fef8:     	ldr	x15, [x14, #16]
10001fefc:     	str	x15, [x13, #16]
10001ff00:     	str	q0, [x13]
10001ff04:     	sub	x13, x11, #344
10001ff08:     	str	xzr, [x13]
10001ff0c:     	str	xzr, [x14]
10001ff10:     	str	xzr, [x14, #16]
10001ff14:     	sub	x13, x12, #328
10001ff18:     	sub	x14, x11, #328
10001ff1c:     	ldr	q0, [x14]
10001ff20:     	ldr	x15, [x14, #16]
10001ff24:     	str	x15, [x13, #16]
10001ff28:     	str	q0, [x13]
10001ff2c:     	sub	x13, x11, #320
10001ff30:     	str	xzr, [x13]
10001ff34:     	str	xzr, [x14]
10001ff38:     	str	xzr, [x14, #16]
10001ff3c:     	sub	x13, x12, #304
10001ff40:     	sub	x14, x11, #304
10001ff44:     	ldr	q0, [x14]
10001ff48:     	ldr	x15, [x14, #16]
10001ff4c:     	str	x15, [x13, #16]
10001ff50:     	str	q0, [x13]
10001ff54:     	sub	x13, x11, #296
10001ff58:     	str	xzr, [x13]
10001ff5c:     	str	xzr, [x14]
10001ff60:     	str	xzr, [x14, #16]
10001ff64:     	sub	x13, x12, #280
10001ff68:     	sub	x14, x11, #280
10001ff6c:     	ldr	q0, [x14]
10001ff70:     	ldr	x15, [x14, #16]
10001ff74:     	str	x15, [x13, #16]
10001ff78:     	str	q0, [x13]
10001ff7c:     	sub	x13, x11, #272
10001ff80:     	str	xzr, [x13]
10001ff84:     	str	xzr, [x14]
10001ff88:     	str	xzr, [x14, #16]
10001ff8c:     	ldur	q0, [x11, #-256]
10001ff90:     	ldur	w13, [x11, #-240]
10001ff94:     	stur	w13, [x12, #-240]
10001ff98:     	stur	q0, [x12, #-256]
10001ff9c:     	ldur	q0, [x11, #-232]
10001ffa0:     	ldur	x13, [x11, #-216]
10001ffa4:     	stur	x13, [x12, #-216]
10001ffa8:     	stur	q0, [x12, #-232]
10001ffac:     	stp	xzr, xzr, [x11, #-232]
10001ffb0:     	stur	xzr, [x11, #-216]
10001ffb4:     	ldur	w13, [x11, #-208]
10001ffb8:     	stur	w13, [x12, #-208]
10001ffbc:     	ldur	q0, [x11, #-200]
10001ffc0:     	ldur	x13, [x11, #-184]
10001ffc4:     	stur	x13, [x12, #-184]
10001ffc8:     	stur	q0, [x12, #-200]
10001ffcc:     	stp	xzr, xzr, [x11, #-192]
10001ffd0:     	stur	xzr, [x11, #-200]
10001ffd4:     	ldur	w13, [x11, #-176]
10001ffd8:     	stur	w13, [x12, #-176]
10001ffdc:     	ldur	q0, [x11, #-168]
10001ffe0:     	ldur	x13, [x11, #-152]
10001ffe4:     	stur	x13, [x12, #-152]
10001ffe8:     	stur	q0, [x12, #-168]
10001ffec:     	stp	xzr, xzr, [x11, #-160]
10001fff0:     	stur	xzr, [x11, #-168]
10001fff4:     	ldp	q1, q0, [x11, #-96]
10001fff8:     	ldurh	w13, [x11, #-48]
10001fffc:     	ldur	q2, [x11, #-64]
100020000:     	stur	q2, [x12, #-64]
100020004:     	sturh	w13, [x12, #-48]
100020008:     	ldp	q2, q3, [x11, #-144]
10002000c:     	ldur	q4, [x11, #-112]
100020010:     	stp	q2, q3, [x12, #-144]
100020014:     	stp	q4, q1, [x12, #-112]
100020018:     	stur	q0, [x12, #-80]
10002001c:     	ldur	x13, [x11, #-40]
100020020:     	stur	x13, [x12, #-40]
100020024:     	mov	x13, x11
100020028:     	ldr	x15, [x13, #-32]!
10002002c:     	mov	x14, x12
100020030:     	str	x15, [x14, #-32]!
100020034:     	ldur	x16, [x11, #-24]
100020038:     	stur	x16, [x12, #-24]
10002003c:     	cbnz	x16, 0x10001fe30 <void std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__push_back_slow_path<benchmark::BenchmarkReporter::Run const&>(benchmark::BenchmarkReporter::Run const&)+0xf0>
100020040:     	stur	x14, [x12, #-40]
100020044:     	b	0x10001fe3c <void std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__push_back_slow_path<benchmark::BenchmarkReporter::Run const&>(benchmark::BenchmarkReporter::Run const&)+0xfc>
100020048:     	add	x0, x0, x10
10002004c:     	ldp	x20, x8, [x19]
100020050:     	ldp	x10, x21, [sp, #24]
100020054:     	stp	x0, x10, [x19]
100020058:     	str	x21, [x19, #16]
10002005c:     	cmp	x8, x20
100020060:     	b.ne	0x100020094 <void std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__push_back_slow_path<benchmark::BenchmarkReporter::Run const&>(benchmark::BenchmarkReporter::Run const&)+0x354>
100020064:     	cbz	x8, 0x100020114 <void std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__push_back_slow_path<benchmark::BenchmarkReporter::Run const&>(benchmark::BenchmarkReporter::Run const&)+0x3d4>
100020068:     	mov	x0, x8
10002006c:     	ldp	x29, x30, [sp, #80]
100020070:     	ldp	x20, x19, [sp, #64]
100020074:     	ldp	x22, x21, [sp, #48]
100020078:     	add	sp, sp, #96
10002007c:     	b	0x10002f014 <_vsnprintf+0x10002f014>
100020080:     	mov	x20, x8
100020084:     	stp	x0, x10, [x19]
100020088:     	str	x21, [x19, #16]
10002008c:     	cmp	x8, x8
100020090:     	b.eq	0x100020064 <void std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__push_back_slow_path<benchmark::BenchmarkReporter::Run const&>(benchmark::BenchmarkReporter::Run const&)+0x324>
100020094:     	sub	x21, x8, #209
100020098:     	b	0x1000200b0 <void std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__push_back_slow_path<benchmark::BenchmarkReporter::Run const&>(benchmark::BenchmarkReporter::Run const&)+0x370>
10002009c:     	mov	x0, x19
1000200a0:     	bl	0x1000090c8 <benchmark::BenchmarkName::~BenchmarkName()>
1000200a4:     	sub	x21, x21, #448
1000200a8:     	cmp	x19, x20
1000200ac:     	b.eq	0x10002010c <void std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__push_back_slow_path<benchmark::BenchmarkReporter::Run const&>(benchmark::BenchmarkReporter::Run const&)+0x3cc>
1000200b0:     	add	x0, x21, #169
1000200b4:     	ldur	x1, [x21, #177]
1000200b8:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
1000200bc:     	ldrsb	w8, [x21, #64]
1000200c0:     	tbnz	w8, #31, 0x1000200dc <void std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__push_back_slow_path<benchmark::BenchmarkReporter::Run const&>(benchmark::BenchmarkReporter::Run const&)+0x39c>
1000200c4:     	ldrsb	w8, [x21, #32]
1000200c8:     	tbnz	w8, #31, 0x1000200ec <void std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__push_back_slow_path<benchmark::BenchmarkReporter::Run const&>(benchmark::BenchmarkReporter::Run const&)+0x3ac>
1000200cc:     	sub	x19, x21, #239
1000200d0:     	ldrsb	w8, [x21]
1000200d4:     	tbz	w8, #31, 0x10002009c <void std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__push_back_slow_path<benchmark::BenchmarkReporter::Run const&>(benchmark::BenchmarkReporter::Run const&)+0x35c>
1000200d8:     	b	0x100020100 <void std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__push_back_slow_path<benchmark::BenchmarkReporter::Run const&>(benchmark::BenchmarkReporter::Run const&)+0x3c0>
1000200dc:     	ldur	x0, [x21, #41]
1000200e0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000200e4:     	ldrsb	w8, [x21, #32]
1000200e8:     	tbz	w8, #31, 0x1000200cc <void std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__push_back_slow_path<benchmark::BenchmarkReporter::Run const&>(benchmark::BenchmarkReporter::Run const&)+0x38c>
1000200ec:     	ldur	x0, [x21, #9]
1000200f0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000200f4:     	sub	x19, x21, #239
1000200f8:     	ldrsb	w8, [x21]
1000200fc:     	tbz	w8, #31, 0x10002009c <void std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__push_back_slow_path<benchmark::BenchmarkReporter::Run const&>(benchmark::BenchmarkReporter::Run const&)+0x35c>
100020100:     	ldur	x0, [x21, #-23]
100020104:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100020108:     	b	0x10002009c <void std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__push_back_slow_path<benchmark::BenchmarkReporter::Run const&>(benchmark::BenchmarkReporter::Run const&)+0x35c>
10002010c:     	mov	x8, x20
100020110:     	cbnz	x20, 0x100020068 <void std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__push_back_slow_path<benchmark::BenchmarkReporter::Run const&>(benchmark::BenchmarkReporter::Run const&)+0x328>
100020114:     	ldp	x29, x30, [sp, #80]
100020118:     	ldp	x20, x19, [sp, #64]
10002011c:     	ldp	x22, x21, [sp, #48]
100020120:     	add	sp, sp, #96
100020124:     	ret
100020128:     	mov	x0, x19
10002012c:     	bl	0x100009b30 <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__throw_length_error[abi:ue170006]() const>
100020130:     	bl	0x100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>
100020134:     	mov	x19, x0
100020138:     	add	x0, sp, #8
10002013c:     	bl	0x100008138 <std::__1::__split_buffer<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>&>::~__split_buffer()>
100020140:     	mov	x0, x19
100020144:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100020148 <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__vdeallocate()>:
100020148:     	stp	x22, x21, [sp, #-48]!
10002014c:     	stp	x20, x19, [sp, #16]
100020150:     	stp	x29, x30, [sp, #32]
100020154:     	add	x29, sp, #32
100020158:     	ldr	x21, [x0]
10002015c:     	cbz	x21, 0x100020200 <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__vdeallocate()+0xb8>
100020160:     	mov	x19, x0
100020164:     	ldr	x8, [x0, #8]
100020168:     	mov	x0, x21
10002016c:     	cmp	x8, x21
100020170:     	b.eq	0x1000201f0 <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__vdeallocate()+0xa8>
100020174:     	sub	x22, x8, #209
100020178:     	b	0x100020190 <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__vdeallocate()+0x48>
10002017c:     	mov	x0, x20
100020180:     	bl	0x1000090c8 <benchmark::BenchmarkName::~BenchmarkName()>
100020184:     	sub	x22, x22, #448
100020188:     	cmp	x20, x21
10002018c:     	b.eq	0x1000201ec <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__vdeallocate()+0xa4>
100020190:     	add	x0, x22, #169
100020194:     	ldur	x1, [x22, #177]
100020198:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
10002019c:     	ldrsb	w8, [x22, #64]
1000201a0:     	tbnz	w8, #31, 0x1000201bc <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__vdeallocate()+0x74>
1000201a4:     	ldrsb	w8, [x22, #32]
1000201a8:     	tbnz	w8, #31, 0x1000201cc <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__vdeallocate()+0x84>
1000201ac:     	sub	x20, x22, #239
1000201b0:     	ldrsb	w8, [x22]
1000201b4:     	tbz	w8, #31, 0x10002017c <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__vdeallocate()+0x34>
1000201b8:     	b	0x1000201e0 <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__vdeallocate()+0x98>
1000201bc:     	ldur	x0, [x22, #41]
1000201c0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000201c4:     	ldrsb	w8, [x22, #32]
1000201c8:     	tbz	w8, #31, 0x1000201ac <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__vdeallocate()+0x64>
1000201cc:     	ldur	x0, [x22, #9]
1000201d0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000201d4:     	sub	x20, x22, #239
1000201d8:     	ldrsb	w8, [x22]
1000201dc:     	tbz	w8, #31, 0x10002017c <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__vdeallocate()+0x34>
1000201e0:     	ldur	x0, [x22, #-23]
1000201e4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000201e8:     	b	0x10002017c <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__vdeallocate()+0x34>
1000201ec:     	ldr	x0, [x19]
1000201f0:     	str	x21, [x19, #8]
1000201f4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000201f8:     	stp	xzr, xzr, [x19]
1000201fc:     	str	xzr, [x19, #16]
100020200:     	ldp	x29, x30, [sp, #32]
100020204:     	ldp	x20, x19, [sp, #16]
100020208:     	ldp	x22, x21, [sp], #48
10002020c:     	ret

0000000100020210 <__GLOBAL__sub_I_benchmark_runner.cc>:
100020210:     	stp	x29, x30, [sp, #-16]!
100020214:     	mov	x29, sp
100020218:     	bl	0x10000363c <benchmark::internal::InitializeStreams()>
10002021c:     	bl	0x100029524 <benchmark::internal::PerfCounters::Initialize()>
100020220:     	adrp	x0, 0x100033000 <benchmark::FormatString(char const*, char*)+0x2c>
100020224:     	add	x0, x0, #576
100020228:     	mov	x1, #0
10002022c:     	bl	0x10002f278 <_vsnprintf+0x10002f278>
100020230:     	adrp	x8, 0x100038000 <benchmark::FormatString(char const*, char*)+0x50>
100020234:     	str	d0, [x8, #184]
100020238:     	ldp	x29, x30, [sp], #16
10002023c:     	ret

0000000100020240 <benchmark::FormatString(char const*, char*)>:
100020240:     	sub	sp, sp, #368
100020244:     	stp	x28, x27, [sp, #288]
100020248:     	stp	x24, x23, [sp, #304]
10002024c:     	stp	x22, x21, [sp, #320]
100020250:     	stp	x20, x19, [sp, #336]
100020254:     	stp	x29, x30, [sp, #352]
100020258:     	add	x29, sp, #352
10002025c:     	mov	x3, x1
100020260:     	mov	x21, x0
100020264:     	mov	x19, x8
100020268:     	adrp	x8, 0x100034000 <benchmark::FormatString(char const*, char*)+0x78>
10002026c:     	ldr	x8, [x8, #928]
100020270:     	ldr	x8, [x8]
100020274:     	stur	x8, [x29, #-72]
100020278:     	stp	x1, x1, [sp, #8]
10002027c:     	add	x0, sp, #24
100020280:     	mov	w1, #256
100020284:     	mov	x2, x21
100020288:     	bl	0x10002f2a8 <_vsnprintf+0x10002f2a8>
10002028c:     	mov	x20, x0
100020290:     	adrp	x24, 0x100038000 <benchmark::FormatString(char const*, char*)+0xb0>
100020294:     	add	x24, x24, #8
100020298:     	ldaprb	w8, [x24]
10002029c:     	tbz	w8, #0, 0x1000203e4 <benchmark::FormatString(char const*, char*)+0x1a4>
1000202a0:     	cbz	w20, 0x1000202dc <benchmark::FormatString(char const*, char*)+0x9c>
1000202a4:     	mov	x23, #-17
1000202a8:     	movk	x23, #32767, lsl #48
1000202ac:     	cmp	w20, #255
1000202b0:     	b.hi	0x1000202e8 <benchmark::FormatString(char const*, char*)+0xa8>
1000202b4:     	add	x0, sp, #24
1000202b8:     	bl	0x10002f254 <_vsnprintf+0x10002f254>
1000202bc:     	cmp	x0, x23
1000202c0:     	b.hi	0x100020410 <benchmark::FormatString(char const*, char*)+0x1d0>
1000202c4:     	mov	x20, x0
1000202c8:     	cmp	x0, #23
1000202cc:     	b.hs	0x10002033c <benchmark::FormatString(char const*, char*)+0xfc>
1000202d0:     	strb	w20, [x19, #23]
1000202d4:     	cbnz	x20, 0x10002035c <benchmark::FormatString(char const*, char*)+0x11c>
1000202d8:     	b	0x10002036c <benchmark::FormatString(char const*, char*)+0x12c>
1000202dc:     	stp	xzr, xzr, [x19]
1000202e0:     	str	xzr, [x19, #16]
1000202e4:     	b	0x1000203b0 <benchmark::FormatString(char const*, char*)+0x170>
1000202e8:     	sxtw	x8, w20
1000202ec:     	add	x22, x8, #1
1000202f0:     	mov	x0, x22
1000202f4:     	bl	0x10002f020 <_vsnprintf+0x10002f020>
1000202f8:     	mov	x20, x0
1000202fc:     	ldr	x3, [sp, #16]
100020300:     	mov	x1, x22
100020304:     	mov	x2, x21
100020308:     	bl	0x10002f2a8 <_vsnprintf+0x10002f2a8>
10002030c:     	ldaprb	w8, [x24]
100020310:     	tbz	w8, #0, 0x100020418 <benchmark::FormatString(char const*, char*)+0x1d8>
100020314:     	mov	x0, x20
100020318:     	bl	0x10002f254 <_vsnprintf+0x10002f254>
10002031c:     	cmp	x0, x23
100020320:     	b.hi	0x100020440 <benchmark::FormatString(char const*, char*)+0x200>
100020324:     	mov	x21, x0
100020328:     	cmp	x0, #23
10002032c:     	b.hs	0x100020374 <benchmark::FormatString(char const*, char*)+0x134>
100020330:     	strb	w21, [x19, #23]
100020334:     	cbnz	x21, 0x100020394 <benchmark::FormatString(char const*, char*)+0x154>
100020338:     	b	0x1000203a4 <benchmark::FormatString(char const*, char*)+0x164>
10002033c:     	orr	x8, x20, #0xf
100020340:     	add	x21, x8, #1
100020344:     	mov	x0, x21
100020348:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10002034c:     	orr	x8, x21, #0x8000000000000000
100020350:     	stp	x20, x8, [x19, #8]
100020354:     	str	x0, [x19]
100020358:     	mov	x19, x0
10002035c:     	add	x1, sp, #24
100020360:     	mov	x0, x19
100020364:     	mov	x2, x20
100020368:     	bl	0x10002f1c4 <_vsnprintf+0x10002f1c4>
10002036c:     	strb	wzr, [x19, x20]
100020370:     	b	0x1000203b0 <benchmark::FormatString(char const*, char*)+0x170>
100020374:     	orr	x8, x21, #0xf
100020378:     	add	x22, x8, #1
10002037c:     	mov	x0, x22
100020380:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100020384:     	orr	x8, x22, #0x8000000000000000
100020388:     	stp	x21, x8, [x19, #8]
10002038c:     	str	x0, [x19]
100020390:     	mov	x19, x0
100020394:     	mov	x0, x19
100020398:     	mov	x1, x20
10002039c:     	mov	x2, x21
1000203a0:     	bl	0x10002f1c4 <_vsnprintf+0x10002f1c4>
1000203a4:     	strb	wzr, [x19, x21]
1000203a8:     	mov	x0, x20
1000203ac:     	bl	0x10002f008 <_vsnprintf+0x10002f008>
1000203b0:     	ldur	x8, [x29, #-72]
1000203b4:     	adrp	x9, 0x100034000 <benchmark::FormatString(char const*, char*)+0x1c4>
1000203b8:     	ldr	x9, [x9, #928]
1000203bc:     	ldr	x9, [x9]
1000203c0:     	cmp	x9, x8
1000203c4:     	b.ne	0x10002040c <benchmark::FormatString(char const*, char*)+0x1cc>
1000203c8:     	ldp	x29, x30, [sp, #352]
1000203cc:     	ldp	x20, x19, [sp, #336]
1000203d0:     	ldp	x22, x21, [sp, #320]
1000203d4:     	ldp	x24, x23, [sp, #304]
1000203d8:     	ldp	x28, x27, [sp, #288]
1000203dc:     	add	sp, sp, #368
1000203e0:     	ret
1000203e4:     	adrp	x0, 0x100038000 <benchmark::FormatString(char const*, char*)+0x204>
1000203e8:     	add	x0, x0, #8
1000203ec:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
1000203f0:     	cbz	w0, 0x1000202a0 <benchmark::FormatString(char const*, char*)+0x60>
1000203f4:     	adrp	x8, 0x100038000 <benchmark::FormatString(char const*, char*)+0x214>
1000203f8:     	str	xzr, [x8]
1000203fc:     	adrp	x0, 0x100038000 <benchmark::FormatString(char const*, char*)+0x21c>
100020400:     	add	x0, x0, #8
100020404:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
100020408:     	b	0x1000202a0 <benchmark::FormatString(char const*, char*)+0x60>
10002040c:     	bl	0x10002f0d4 <_vsnprintf+0x10002f0d4>
100020410:     	mov	x0, x19
100020414:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
100020418:     	adrp	x0, 0x100038000 <benchmark::FormatString(char const*, ...)+0x18>
10002041c:     	add	x0, x0, #8
100020420:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
100020424:     	cbz	w0, 0x100020314 <benchmark::FormatString(char const*, char*)+0xd4>
100020428:     	adrp	x8, 0x100038000 <benchmark::ColorPrintf(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, benchmark::LogColor, char const*, ...)>
10002042c:     	str	xzr, [x8]
100020430:     	adrp	x0, 0x100038000 <benchmark::ColorPrintf(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, benchmark::LogColor, char const*, ...)+0x8>
100020434:     	add	x0, x0, #8
100020438:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10002043c:     	b	0x100020314 <benchmark::FormatString(char const*, char*)+0xd4>
100020440:     	mov	x0, x19
100020444:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
100020448:     	brk	#0x1
10002044c:     	mov	x19, x0
100020450:     	mov	x0, x20
100020454:     	bl	0x10002f008 <_vsnprintf+0x10002f008>
100020458:     	mov	x0, x19
10002045c:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100020460 <benchmark::FormatString(char const*, ...)>:
100020460:     	sub	sp, sp, #32
100020464:     	stp	x29, x30, [sp, #16]
100020468:     	add	x29, sp, #16
10002046c:     	add	x9, x29, #16
100020470:     	str	x9, [sp, #8]
100020474:     	add	x1, x29, #16
100020478:     	bl	0x100020240 <benchmark::FormatString(char const*, char*)>
10002047c:     	ldp	x29, x30, [sp, #16]
100020480:     	add	sp, sp, #32
100020484:     	ret

0000000100020488 <benchmark::ColorPrintf(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, benchmark::LogColor, char const*, ...)>:
100020488:     	sub	sp, sp, #32
10002048c:     	stp	x29, x30, [sp, #16]
100020490:     	add	x29, sp, #16
100020494:     	add	x8, x29, #16
100020498:     	str	x8, [sp, #8]
10002049c:     	add	x3, x29, #16
1000204a0:     	bl	0x1000204b0 <benchmark::ColorPrintf(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, benchmark::LogColor, char const*, char*)>
1000204a4:     	ldp	x29, x30, [sp, #16]
1000204a8:     	add	sp, sp, #32
1000204ac:     	ret

00000001000204b0 <benchmark::ColorPrintf(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, benchmark::LogColor, char const*, char*)>:
1000204b0:     	sub	sp, sp, #80
1000204b4:     	stp	x22, x21, [sp, #32]
1000204b8:     	stp	x20, x19, [sp, #48]
1000204bc:     	stp	x29, x30, [sp, #64]
1000204c0:     	add	x29, sp, #64
1000204c4:     	mov	x20, x3
1000204c8:     	mov	x21, x2
1000204cc:     	mov	x19, x0
1000204d0:     	sub	w8, w1, #1
1000204d4:     	cmp	w8, #6
1000204d8:     	b.hi	0x100020530 <benchmark::ColorPrintf(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, benchmark::LogColor, char const*, char*)+0x80>
1000204dc:     	adrp	x9, 0x100034000 <benchmark::ColorPrintf(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, benchmark::LogColor, char const*, char*)+0x7c>
1000204e0:     	add	x9, x9, #3168
1000204e4:     	ldr	x8, [x9, w8, sxtw #3]
1000204e8:     	str	x8, [sp]
1000204ec:     	adrp	x0, 0x100032000 <benchmark::ColorPrintf(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, benchmark::LogColor, char const*, char*)+0x84>
1000204f0:     	add	x0, x0, #388
1000204f4:     	add	x22, sp, #8
1000204f8:     	add	x8, sp, #8
1000204fc:     	bl	0x100020460 <benchmark::FormatString(char const*, ...)>
100020500:     	ldrb	w8, [sp, #31]
100020504:     	sxtb	w9, w8
100020508:     	ldp	x10, x11, [sp, #8]
10002050c:     	cmp	w9, #0
100020510:     	csel	x1, x10, x22, lt
100020514:     	csel	x2, x11, x8, lt
100020518:     	mov	x0, x19
10002051c:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100020520:     	ldrsb	w8, [sp, #31]
100020524:     	tbz	w8, #31, 0x100020530 <benchmark::ColorPrintf(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, benchmark::LogColor, char const*, char*)+0x80>
100020528:     	ldr	x0, [sp, #8]
10002052c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100020530:     	add	x22, sp, #8
100020534:     	add	x8, sp, #8
100020538:     	mov	x0, x21
10002053c:     	mov	x1, x20
100020540:     	bl	0x100020240 <benchmark::FormatString(char const*, char*)>
100020544:     	ldrb	w8, [sp, #31]
100020548:     	sxtb	w9, w8
10002054c:     	ldp	x10, x11, [sp, #8]
100020550:     	cmp	w9, #0
100020554:     	csel	x1, x10, x22, lt
100020558:     	csel	x2, x11, x8, lt
10002055c:     	mov	x0, x19
100020560:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100020564:     	adrp	x1, 0x100032000 <benchmark::ColorPrintf(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, benchmark::LogColor, char const*, char*)+0xfc>
100020568:     	add	x1, x1, #397
10002056c:     	mov	w2, #3
100020570:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100020574:     	ldrsb	w8, [sp, #31]
100020578:     	tbnz	w8, #31, 0x100020590 <benchmark::ColorPrintf(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, benchmark::LogColor, char const*, char*)+0xe0>
10002057c:     	ldp	x29, x30, [sp, #64]
100020580:     	ldp	x20, x19, [sp, #48]
100020584:     	ldp	x22, x21, [sp, #32]
100020588:     	add	sp, sp, #80
10002058c:     	ret
100020590:     	ldr	x0, [sp, #8]
100020594:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100020598:     	ldp	x29, x30, [sp, #64]
10002059c:     	ldp	x20, x19, [sp, #48]
1000205a0:     	ldp	x22, x21, [sp, #32]
1000205a4:     	add	sp, sp, #80
1000205a8:     	ret
1000205ac:     	b	0x1000205b0 <benchmark::ColorPrintf(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, benchmark::LogColor, char const*, char*)+0x100>
1000205b0:     	mov	x19, x0
1000205b4:     	ldrsb	w8, [sp, #31]
1000205b8:     	tbz	w8, #31, 0x1000205c4 <benchmark::ColorPrintf(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, benchmark::LogColor, char const*, char*)+0x114>
1000205bc:     	ldr	x0, [sp, #8]
1000205c0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000205c4:     	mov	x0, x19
1000205c8:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

00000001000205cc <benchmark::IsColorTerminal()>:
1000205cc:     	stp	x20, x19, [sp, #-32]!
1000205d0:     	stp	x29, x30, [sp, #16]
1000205d4:     	add	x29, sp, #16
1000205d8:     	adrp	x0, 0x100032000 <benchmark::IsColorTerminal()+0x54>
1000205dc:     	add	x0, x0, #524
1000205e0:     	bl	0x10002f134 <_vsnprintf+0x10002f134>
1000205e4:     	mov	x19, x0
1000205e8:     	cbz	x0, 0x1000206d4 <benchmark::IsColorTerminal()+0x108>
1000205ec:     	adrp	x1, 0x100032000 <benchmark::IsColorTerminal()+0x68>
1000205f0:     	add	x1, x1, #401
1000205f4:     	mov	x0, x19
1000205f8:     	bl	0x10002f230 <_vsnprintf+0x10002f230>
1000205fc:     	cbz	w0, 0x1000206d0 <benchmark::IsColorTerminal()+0x104>
100020600:     	adrp	x1, 0x100032000 <benchmark::IsColorTerminal()+0x7c>
100020604:     	add	x1, x1, #407
100020608:     	mov	x0, x19
10002060c:     	bl	0x10002f230 <_vsnprintf+0x10002f230>
100020610:     	cbz	w0, 0x1000206d0 <benchmark::IsColorTerminal()+0x104>
100020614:     	adrp	x1, 0x100032000 <benchmark::IsColorTerminal()+0x90>
100020618:     	add	x1, x1, #419
10002061c:     	mov	x0, x19
100020620:     	bl	0x10002f230 <_vsnprintf+0x10002f230>
100020624:     	cbz	w0, 0x1000206d0 <benchmark::IsColorTerminal()+0x104>
100020628:     	adrp	x1, 0x100032000 <benchmark::IsColorTerminal()+0xa4>
10002062c:     	add	x1, x1, #434
100020630:     	mov	x0, x19
100020634:     	bl	0x10002f230 <_vsnprintf+0x10002f230>
100020638:     	cbz	w0, 0x1000206d0 <benchmark::IsColorTerminal()+0x104>
10002063c:     	adrp	x1, 0x100032000 <benchmark::IsColorTerminal()+0xb8>
100020640:     	add	x1, x1, #441
100020644:     	mov	x0, x19
100020648:     	bl	0x10002f230 <_vsnprintf+0x10002f230>
10002064c:     	cbz	w0, 0x1000206d0 <benchmark::IsColorTerminal()+0x104>
100020650:     	adrp	x1, 0x100032000 <benchmark::IsColorTerminal()+0xcc>
100020654:     	add	x1, x1, #457
100020658:     	mov	x0, x19
10002065c:     	bl	0x10002f230 <_vsnprintf+0x10002f230>
100020660:     	cbz	w0, 0x1000206d0 <benchmark::IsColorTerminal()+0x104>
100020664:     	adrp	x1, 0x100032000 <benchmark::IsColorTerminal()+0xe0>
100020668:     	add	x1, x1, #462
10002066c:     	mov	x0, x19
100020670:     	bl	0x10002f230 <_vsnprintf+0x10002f230>
100020674:     	cbz	w0, 0x1000206d0 <benchmark::IsColorTerminal()+0x104>
100020678:     	adrp	x1, 0x100032000 <benchmark::IsColorTerminal()+0xf4>
10002067c:     	add	x1, x1, #476
100020680:     	mov	x0, x19
100020684:     	bl	0x10002f230 <_vsnprintf+0x10002f230>
100020688:     	cbz	w0, 0x1000206d0 <benchmark::IsColorTerminal()+0x104>
10002068c:     	adrp	x1, 0x100032000 <benchmark::IsColorTerminal()+0x108>
100020690:     	add	x1, x1, #489
100020694:     	mov	x0, x19
100020698:     	bl	0x10002f230 <_vsnprintf+0x10002f230>
10002069c:     	cbz	w0, 0x1000206d0 <benchmark::IsColorTerminal()+0x104>
1000206a0:     	adrp	x1, 0x100032000 <benchmark::IsColorTerminal()+0x11c>
1000206a4:     	add	x1, x1, #511
1000206a8:     	mov	x0, x19
1000206ac:     	bl	0x10002f230 <_vsnprintf+0x10002f230>
1000206b0:     	cbz	w0, 0x1000206d0 <benchmark::IsColorTerminal()+0x104>
1000206b4:     	adrp	x1, 0x100032000 <benchmark::IsColorTerminal()+0x130>
1000206b8:     	add	x1, x1, #517
1000206bc:     	mov	x0, x19
1000206c0:     	bl	0x10002f230 <_vsnprintf+0x10002f230>
1000206c4:     	cmp	w0, #0
1000206c8:     	cset	w19, eq
1000206cc:     	b	0x1000206d4 <benchmark::IsColorTerminal()+0x108>
1000206d0:     	mov	w19, #1
1000206d4:     	adrp	x8, 0x100034000 <benchmark::BoolFromEnv(char const*, bool)+0x24>
1000206d8:     	ldr	x8, [x8, #944]
1000206dc:     	ldr	x0, [x8]
1000206e0:     	bl	0x10002f110 <_vsnprintf+0x10002f110>
1000206e4:     	bl	0x10002f170 <_vsnprintf+0x10002f170>
1000206e8:     	cmp	w0, #0
1000206ec:     	cset	w8, ne
1000206f0:     	and	w0, w8, w19
1000206f4:     	ldp	x29, x30, [sp, #16]
1000206f8:     	ldp	x20, x19, [sp], #32
1000206fc:     	ret

0000000100020700 <benchmark::BoolFromEnv(char const*, bool)>:
100020700:     	sub	sp, sp, #96
100020704:     	stp	x22, x21, [sp, #48]
100020708:     	stp	x20, x19, [sp, #64]
10002070c:     	stp	x29, x30, [sp, #80]
100020710:     	add	x29, sp, #80
100020714:     	mov	x19, x1
100020718:     	mov	x1, x0
10002071c:     	add	x20, sp, #24
100020720:     	add	x0, sp, #24
100020724:     	bl	0x100020858 <benchmark::(anonymous namespace)::FlagToEnvVar(char const*)>
100020728:     	ldrsb	w21, [sp, #47]
10002072c:     	ldr	x8, [sp, #24]
100020730:     	cmp	w21, #0
100020734:     	csel	x0, x8, x20, lt
100020738:     	bl	0x10002f134 <_vsnprintf+0x10002f134>
10002073c:     	cbz	x0, 0x1000207c4 <benchmark::BoolFromEnv(char const*, bool)+0xc4>
100020740:     	mov	x20, x0
100020744:     	bl	0x10002f254 <_vsnprintf+0x10002f254>
100020748:     	mov	x8, #9223372036854775792
10002074c:     	cmp	x0, x8
100020750:     	b.hs	0x100020800 <benchmark::BoolFromEnv(char const*, bool)+0x100>
100020754:     	mov	x19, x0
100020758:     	cmp	x0, #23
10002075c:     	b.hs	0x100020770 <benchmark::BoolFromEnv(char const*, bool)+0x70>
100020760:     	strb	w19, [sp, #23]
100020764:     	mov	x21, sp
100020768:     	cbnz	x19, 0x100020790 <benchmark::BoolFromEnv(char const*, bool)+0x90>
10002076c:     	b	0x1000207a0 <benchmark::BoolFromEnv(char const*, bool)+0xa0>
100020770:     	orr	x8, x19, #0xf
100020774:     	add	x22, x8, #1
100020778:     	mov	x0, x22
10002077c:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100020780:     	mov	x21, x0
100020784:     	orr	x8, x22, #0x8000000000000000
100020788:     	stp	x19, x8, [sp, #8]
10002078c:     	str	x0, [sp]
100020790:     	mov	x0, x21
100020794:     	mov	x1, x20
100020798:     	mov	x2, x19
10002079c:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
1000207a0:     	strb	wzr, [x21, x19]
1000207a4:     	mov	x0, sp
1000207a8:     	bl	0x100020998 <benchmark::IsTruthyFlagValue(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
1000207ac:     	mov	x19, x0
1000207b0:     	ldrsb	w8, [sp, #23]
1000207b4:     	tbz	w8, #31, 0x1000207c0 <benchmark::BoolFromEnv(char const*, bool)+0xc0>
1000207b8:     	ldr	x0, [sp]
1000207bc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000207c0:     	ldrb	w21, [sp, #47]
1000207c4:     	tbnz	w21, #7, 0x1000207e0 <benchmark::BoolFromEnv(char const*, bool)+0xe0>
1000207c8:     	mov	x0, x19
1000207cc:     	ldp	x29, x30, [sp, #80]
1000207d0:     	ldp	x20, x19, [sp, #64]
1000207d4:     	ldp	x22, x21, [sp, #48]
1000207d8:     	add	sp, sp, #96
1000207dc:     	ret
1000207e0:     	ldr	x0, [sp, #24]
1000207e4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000207e8:     	mov	x0, x19
1000207ec:     	ldp	x29, x30, [sp, #80]
1000207f0:     	ldp	x20, x19, [sp, #64]
1000207f4:     	ldp	x22, x21, [sp, #48]
1000207f8:     	add	sp, sp, #96
1000207fc:     	ret
100020800:     	mov	x0, sp
100020804:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
100020808:     	brk	#0x1
10002080c:     	mov	x19, x0
100020810:     	ldrsb	w8, [sp, #23]
100020814:     	tbnz	w8, #31, 0x100020828 <benchmark::BoolFromEnv(char const*, bool)+0x128>
100020818:     	ldrsb	w8, [sp, #47]
10002081c:     	tbnz	w8, #31, 0x100020848 <benchmark::BoolFromEnv(char const*, bool)+0x148>
100020820:     	mov	x0, x19
100020824:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
100020828:     	ldr	x0, [sp]
10002082c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100020830:     	ldrsb	w8, [sp, #47]
100020834:     	tbz	w8, #31, 0x100020820 <benchmark::BoolFromEnv(char const*, bool)+0x120>
100020838:     	b	0x100020848 <benchmark::BoolFromEnv(char const*, bool)+0x148>
10002083c:     	mov	x19, x0
100020840:     	ldrsb	w8, [sp, #47]
100020844:     	tbz	w8, #31, 0x100020820 <benchmark::BoolFromEnv(char const*, bool)+0x120>
100020848:     	ldr	x0, [sp, #24]
10002084c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100020850:     	mov	x0, x19
100020854:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100020858 <benchmark::(anonymous namespace)::FlagToEnvVar(char const*)>:
100020858:     	sub	sp, sp, #96
10002085c:     	stp	x24, x23, [sp, #32]
100020860:     	stp	x22, x21, [sp, #48]
100020864:     	stp	x20, x19, [sp, #64]
100020868:     	stp	x29, x30, [sp, #80]
10002086c:     	add	x29, sp, #80
100020870:     	mov	x21, x1
100020874:     	mov	x19, x0
100020878:     	mov	x0, x1
10002087c:     	bl	0x10002f254 <_vsnprintf+0x10002f254>
100020880:     	mov	x8, #9223372036854775792
100020884:     	cmp	x0, x8
100020888:     	b.hs	0x10002095c <benchmark::(anonymous namespace)::FlagToEnvVar(char const*)+0x104>
10002088c:     	mov	x20, x0
100020890:     	cmp	x0, #23
100020894:     	b.hs	0x1000208a8 <benchmark::(anonymous namespace)::FlagToEnvVar(char const*)+0x50>
100020898:     	strb	w20, [sp, #31]
10002089c:     	add	x22, sp, #8
1000208a0:     	cbnz	x20, 0x1000208c8 <benchmark::(anonymous namespace)::FlagToEnvVar(char const*)+0x70>
1000208a4:     	b	0x1000208d8 <benchmark::(anonymous namespace)::FlagToEnvVar(char const*)+0x80>
1000208a8:     	orr	x8, x20, #0xf
1000208ac:     	add	x23, x8, #1
1000208b0:     	mov	x0, x23
1000208b4:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
1000208b8:     	mov	x22, x0
1000208bc:     	orr	x8, x23, #0x8000000000000000
1000208c0:     	stp	x20, x8, [sp, #16]
1000208c4:     	str	x0, [sp, #8]
1000208c8:     	mov	x0, x22
1000208cc:     	mov	x1, x21
1000208d0:     	mov	x2, x20
1000208d4:     	bl	0x10002f1c4 <_vsnprintf+0x10002f1c4>
1000208d8:     	mov	x23, #0
1000208dc:     	strb	wzr, [x22, x20]
1000208e0:     	stp	xzr, xzr, [x19]
1000208e4:     	str	xzr, [x19, #16]
1000208e8:     	ldrb	w21, [sp, #31]
1000208ec:     	tbnz	w21, #7, 0x100020900 <benchmark::(anonymous namespace)::FlagToEnvVar(char const*)+0xa8>
1000208f0:     	cmp	x21, x23
1000208f4:     	b.eq	0x10002092c <benchmark::(anonymous namespace)::FlagToEnvVar(char const*)+0xd4>
1000208f8:     	add	x0, sp, #8
1000208fc:     	b	0x10002090c <benchmark::(anonymous namespace)::FlagToEnvVar(char const*)+0xb4>
100020900:     	ldp	x0, x8, [sp, #8]
100020904:     	cmp	x23, x8
100020908:     	b.eq	0x100020944 <benchmark::(anonymous namespace)::FlagToEnvVar(char const*)+0xec>
10002090c:     	ldrsb	w0, [x0, x23]
100020910:     	bl	0x10002f0ec <_vsnprintf+0x10002f0ec>
100020914:     	sxtb	w1, w0
100020918:     	mov	x0, x19
10002091c:     	bl	0x10002ed74 <_vsnprintf+0x10002ed74>
100020920:     	add	x23, x23, #1
100020924:     	tbz	w21, #7, 0x1000208f0 <benchmark::(anonymous namespace)::FlagToEnvVar(char const*)+0x98>
100020928:     	b	0x100020900 <benchmark::(anonymous namespace)::FlagToEnvVar(char const*)+0xa8>
10002092c:     	ldp	x29, x30, [sp, #80]
100020930:     	ldp	x20, x19, [sp, #64]
100020934:     	ldp	x22, x21, [sp, #48]
100020938:     	ldp	x24, x23, [sp, #32]
10002093c:     	add	sp, sp, #96
100020940:     	ret
100020944:     	ldp	x29, x30, [sp, #80]
100020948:     	ldp	x20, x19, [sp, #64]
10002094c:     	ldp	x22, x21, [sp, #48]
100020950:     	ldp	x24, x23, [sp, #32]
100020954:     	add	sp, sp, #96
100020958:     	b	0x10002f014 <_vsnprintf+0x10002f014>
10002095c:     	add	x0, sp, #8
100020960:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
100020964:     	mov	x20, x0
100020968:     	ldrsb	w8, [x19, #23]
10002096c:     	tbnz	w8, #31, 0x10002097c <benchmark::(anonymous namespace)::FlagToEnvVar(char const*)+0x124>
100020970:     	tbnz	w21, #7, 0x100020988 <benchmark::(anonymous namespace)::FlagToEnvVar(char const*)+0x130>
100020974:     	mov	x0, x20
100020978:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
10002097c:     	ldr	x0, [x19]
100020980:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100020984:     	tbz	w21, #7, 0x100020974 <benchmark::(anonymous namespace)::FlagToEnvVar(char const*)+0x11c>
100020988:     	ldr	x0, [sp, #8]
10002098c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100020990:     	mov	x0, x20
100020994:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100020998 <benchmark::IsTruthyFlagValue(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>:
100020998:     	sub	sp, sp, #80
10002099c:     	stp	x22, x21, [sp, #32]
1000209a0:     	stp	x20, x19, [sp, #48]
1000209a4:     	stp	x29, x30, [sp, #64]
1000209a8:     	add	x29, sp, #64
1000209ac:     	ldrsb	w8, [x0, #23]
1000209b0:     	tbnz	w8, #31, 0x1000209d8 <benchmark::IsTruthyFlagValue(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x40>
1000209b4:     	and	w8, w8, #0xff
1000209b8:     	cbz	w8, 0x100020bd0 <benchmark::IsTruthyFlagValue(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x238>
1000209bc:     	cmp	w8, #1
1000209c0:     	b.eq	0x1000209ec <benchmark::IsTruthyFlagValue(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x54>
1000209c4:     	ldr	q0, [x0]
1000209c8:     	str	q0, [sp]
1000209cc:     	ldr	x8, [x0, #16]
1000209d0:     	str	x8, [sp, #16]
1000209d4:     	b	0x100020ab0 <benchmark::IsTruthyFlagValue(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x118>
1000209d8:     	ldr	x21, [x0, #8]
1000209dc:     	cbz	x21, 0x100020bd0 <benchmark::IsTruthyFlagValue(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x238>
1000209e0:     	cmp	x21, #1
1000209e4:     	b.ne	0x100020a64 <benchmark::IsTruthyFlagValue(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xcc>
1000209e8:     	ldr	x0, [x0]
1000209ec:     	ldrsb	w19, [x0]
1000209f0:     	tbnz	w19, #31, 0x100020a38 <benchmark::IsTruthyFlagValue(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xa0>
1000209f4:     	adrp	x8, 0x100034000 <benchmark::IsTruthyFlagValue(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xac>
1000209f8:     	ldr	x8, [x8]
1000209fc:     	add	x8, x8, w19, uxtw #2
100020a00:     	ldr	w8, [x8, #60]
100020a04:     	mov	w9, #1280
100020a08:     	and	w0, w8, w9
100020a0c:     	cbz	w0, 0x100020a48 <benchmark::IsTruthyFlagValue(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xb0>
100020a10:     	sub	w8, w19, #48
100020a14:     	mov	w9, #1
100020a18:     	mov	x10, #-2
100020a1c:     	movk	x10, #49087, lsl #16
100020a20:     	movk	x10, #16319, lsl #48
100020a24:     	lsr	x10, x10, x8
100020a28:     	and	w10, w10, #0x1
100020a2c:     	cmp	w8, #63
100020a30:     	csel	w19, w10, w9, lo
100020a34:     	b	0x100020c2c <benchmark::IsTruthyFlagValue(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x294>
100020a38:     	mov	x0, x19
100020a3c:     	mov	w1, #1280
100020a40:     	bl	0x10002f0c8 <_vsnprintf+0x10002f0c8>
100020a44:     	cbnz	w0, 0x100020a10 <benchmark::IsTruthyFlagValue(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x78>
100020a48:     	mov	w19, #0
100020a4c:     	mov	x0, x19
100020a50:     	ldp	x29, x30, [sp, #64]
100020a54:     	ldp	x20, x19, [sp, #48]
100020a58:     	ldp	x22, x21, [sp, #32]
100020a5c:     	add	sp, sp, #80
100020a60:     	ret
100020a64:     	ldr	x19, [x0]
100020a68:     	cmp	x21, #22
100020a6c:     	b.hi	0x100020a7c <benchmark::IsTruthyFlagValue(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xe4>
100020a70:     	strb	w21, [sp, #23]
100020a74:     	mov	x0, sp
100020a78:     	b	0x100020aa4 <benchmark::IsTruthyFlagValue(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x10c>
100020a7c:     	mov	x8, #9223372036854775792
100020a80:     	cmp	x21, x8
100020a84:     	b.hs	0x100020c68 <benchmark::IsTruthyFlagValue(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x2d0>
100020a88:     	orr	x8, x21, #0xf
100020a8c:     	add	x20, x8, #1
100020a90:     	mov	x0, x20
100020a94:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100020a98:     	orr	x8, x20, #0x8000000000000000
100020a9c:     	stp	x21, x8, [sp, #8]
100020aa0:     	str	x0, [sp]
100020aa4:     	add	x2, x21, #1
100020aa8:     	mov	x1, x19
100020aac:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
100020ab0:     	ldrb	w9, [sp, #23]
100020ab4:     	sxtb	w8, w9
100020ab8:     	ldp	x10, x11, [sp]
100020abc:     	add	x11, x10, x11
100020ac0:     	mov	x12, sp
100020ac4:     	add	x9, x12, x9
100020ac8:     	cmp	w8, #0
100020acc:     	csel	x19, x11, x9, lt
100020ad0:     	csel	x20, x10, x12, lt
100020ad4:     	cmp	x20, x19
100020ad8:     	b.eq	0x100020af4 <benchmark::IsTruthyFlagValue(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x15c>
100020adc:     	ldrsb	w0, [x20]
100020ae0:     	bl	0x10002f0e0 <_vsnprintf+0x10002f0e0>
100020ae4:     	strb	w0, [x20], #1
100020ae8:     	cmp	x20, x19
100020aec:     	b.ne	0x100020adc <benchmark::IsTruthyFlagValue(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x144>
100020af0:     	ldrb	w8, [sp, #23]
100020af4:     	tbnz	w8, #7, 0x100020b54 <benchmark::IsTruthyFlagValue(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x1bc>
100020af8:     	and	w9, w8, #0xff
100020afc:     	cmp	w9, #2
100020b00:     	b.eq	0x100020bc0 <benchmark::IsTruthyFlagValue(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x228>
100020b04:     	cmp	w9, #3
100020b08:     	b.eq	0x100020bec <benchmark::IsTruthyFlagValue(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x254>
100020b0c:     	cmp	w9, #5
100020b10:     	b.ne	0x100020bd0 <benchmark::IsTruthyFlagValue(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x238>
100020b14:     	ldr	w8, [sp]
100020b18:     	mov	w9, #24934
100020b1c:     	movk	w9, #29548, lsl #16
100020b20:     	eor	w8, w8, w9
100020b24:     	ldrb	w9, [sp, #4]
100020b28:     	mov	w10, #101
100020b2c:     	eor	w9, w9, w10
100020b30:     	orr	w8, w8, w9
100020b34:     	cmp	w8, #0
100020b38:     	cset	w19, ne
100020b3c:     	mov	x0, x19
100020b40:     	ldp	x29, x30, [sp, #64]
100020b44:     	ldp	x20, x19, [sp, #48]
100020b48:     	ldp	x22, x21, [sp, #32]
100020b4c:     	add	sp, sp, #80
100020b50:     	ret
100020b54:     	ldr	x9, [sp, #8]
100020b58:     	cmp	x9, #2
100020b5c:     	b.eq	0x100020b98 <benchmark::IsTruthyFlagValue(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x200>
100020b60:     	cmp	x9, #5
100020b64:     	b.ne	0x100020bb0 <benchmark::IsTruthyFlagValue(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x218>
100020b68:     	ldr	x10, [sp]
100020b6c:     	ldr	w11, [x10]
100020b70:     	mov	w12, #24934
100020b74:     	movk	w12, #29548, lsl #16
100020b78:     	eor	w11, w11, w12
100020b7c:     	ldrb	w10, [x10, #4]
100020b80:     	mov	w12, #101
100020b84:     	eor	w10, w10, w12
100020b88:     	orr	w10, w11, w10
100020b8c:     	cbz	w10, 0x100020c24 <benchmark::IsTruthyFlagValue(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x28c>
100020b90:     	cmp	x9, #2
100020b94:     	b.ne	0x100020bb0 <benchmark::IsTruthyFlagValue(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x218>
100020b98:     	ldr	x9, [sp]
100020b9c:     	ldrh	w9, [x9]
100020ba0:     	mov	w10, #28526
100020ba4:     	cmp	w9, w10
100020ba8:     	b.eq	0x100020c44 <benchmark::IsTruthyFlagValue(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x2ac>
100020bac:     	ldr	x9, [sp, #8]
100020bb0:     	cmp	x9, #3
100020bb4:     	b.ne	0x100020c1c <benchmark::IsTruthyFlagValue(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x284>
100020bb8:     	ldr	x9, [sp]
100020bbc:     	b	0x100020bf0 <benchmark::IsTruthyFlagValue(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x258>
100020bc0:     	ldrh	w9, [sp]
100020bc4:     	mov	w10, #28526
100020bc8:     	cmp	w9, w10
100020bcc:     	b.eq	0x100020c24 <benchmark::IsTruthyFlagValue(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x28c>
100020bd0:     	mov	w19, #1
100020bd4:     	mov	x0, x19
100020bd8:     	ldp	x29, x30, [sp, #64]
100020bdc:     	ldp	x20, x19, [sp, #48]
100020be0:     	ldp	x22, x21, [sp, #32]
100020be4:     	add	sp, sp, #80
100020be8:     	ret
100020bec:     	mov	x9, sp
100020bf0:     	ldrh	w10, [x9]
100020bf4:     	mov	w11, #26223
100020bf8:     	eor	w10, w10, w11
100020bfc:     	ldrb	w9, [x9, #2]
100020c00:     	mov	w11, #102
100020c04:     	eor	w9, w9, w11
100020c08:     	orr	w9, w10, w9
100020c0c:     	cmp	w9, #0
100020c10:     	cset	w19, ne
100020c14:     	tbz	w8, #7, 0x100020c2c <benchmark::IsTruthyFlagValue(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x294>
100020c18:     	b	0x100020c48 <benchmark::IsTruthyFlagValue(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x2b0>
100020c1c:     	mov	w19, #1
100020c20:     	b	0x100020c48 <benchmark::IsTruthyFlagValue(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x2b0>
100020c24:     	mov	w19, #0
100020c28:     	tbnz	w8, #7, 0x100020c48 <benchmark::IsTruthyFlagValue(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x2b0>
100020c2c:     	mov	x0, x19
100020c30:     	ldp	x29, x30, [sp, #64]
100020c34:     	ldp	x20, x19, [sp, #48]
100020c38:     	ldp	x22, x21, [sp, #32]
100020c3c:     	add	sp, sp, #80
100020c40:     	ret
100020c44:     	mov	w19, #0
100020c48:     	ldr	x0, [sp]
100020c4c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100020c50:     	mov	x0, x19
100020c54:     	ldp	x29, x30, [sp, #64]
100020c58:     	ldp	x20, x19, [sp, #48]
100020c5c:     	ldp	x22, x21, [sp, #32]
100020c60:     	add	sp, sp, #80
100020c64:     	ret
100020c68:     	mov	x0, sp
100020c6c:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
100020c70:     	mov	x19, x0
100020c74:     	ldrsb	w8, [sp, #23]
100020c78:     	tbz	w8, #31, 0x100020c84 <benchmark::IsTruthyFlagValue(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x2ec>
100020c7c:     	ldr	x0, [sp]
100020c80:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100020c84:     	mov	x0, x19
100020c88:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100020c8c <benchmark::Int32FromEnv(char const*, int)>:
100020c8c:     	sub	sp, sp, #144
100020c90:     	stp	x22, x21, [sp, #96]
100020c94:     	stp	x20, x19, [sp, #112]
100020c98:     	stp	x29, x30, [sp, #128]
100020c9c:     	add	x29, sp, #128
100020ca0:     	mov	x19, x1
100020ca4:     	mov	x1, x0
100020ca8:     	sub	x20, x29, #56
100020cac:     	sub	x0, x29, #56
100020cb0:     	bl	0x100020858 <benchmark::(anonymous namespace)::FlagToEnvVar(char const*)>
100020cb4:     	ldurb	w22, [x29, #-33]
100020cb8:     	sxtb	w8, w22
100020cbc:     	ldur	x9, [x29, #-56]
100020cc0:     	cmp	w8, #0
100020cc4:     	csel	x21, x9, x20, lt
100020cc8:     	mov	x0, x21
100020ccc:     	bl	0x10002f134 <_vsnprintf+0x10002f134>
100020cd0:     	stur	w19, [x29, #-60]
100020cd4:     	cbz	x0, 0x100020d60 <benchmark::Int32FromEnv(char const*, int)+0xd4>
100020cd8:     	mov	x20, x0
100020cdc:     	sxtb	w8, w22
100020ce0:     	mov	w9, #21
100020ce4:     	strb	w9, [sp, #23]
100020ce8:     	adrp	x9, 0x100032000 <benchmark::Int32FromEnv(char const*, int)+0xa4>
100020cec:     	add	x9, x9, #543
100020cf0:     	ldr	q0, [x9]
100020cf4:     	str	q0, [sp]
100020cf8:     	ldur	x9, [x9, #13]
100020cfc:     	stur	x9, [sp, #13]
100020d00:     	strb	wzr, [sp, #21]
100020d04:     	ldur	x9, [x29, #-48]
100020d08:     	cmp	w8, #0
100020d0c:     	csel	x2, x9, x22, lt
100020d10:     	mov	x0, sp
100020d14:     	mov	x1, x21
100020d18:     	bl	0x10002ed38 <_vsnprintf+0x10002ed38>
100020d1c:     	ldr	q0, [x0]
100020d20:     	ldr	x8, [x0, #16]
100020d24:     	str	x8, [sp, #48]
100020d28:     	str	q0, [sp, #32]
100020d2c:     	stp	xzr, xzr, [x0, #8]
100020d30:     	str	xzr, [x0]
100020d34:     	add	x0, sp, #32
100020d38:     	sub	x2, x29, #60
100020d3c:     	mov	x1, x20
100020d40:     	bl	0x100020e24 <benchmark::(anonymous namespace)::ParseInt32(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*, int*)>
100020d44:     	mov	x20, x0
100020d48:     	ldrsb	w8, [sp, #55]
100020d4c:     	tbnz	w8, #31, 0x100020da0 <benchmark::Int32FromEnv(char const*, int)+0x114>
100020d50:     	ldrsb	w8, [sp, #23]
100020d54:     	tbnz	w8, #31, 0x100020db0 <benchmark::Int32FromEnv(char const*, int)+0x124>
100020d58:     	tbz	w20, #0, 0x100020d60 <benchmark::Int32FromEnv(char const*, int)+0xd4>
100020d5c:     	ldur	w19, [x29, #-60]
100020d60:     	ldursb	w8, [x29, #-33]
100020d64:     	tbnz	w8, #31, 0x100020d80 <benchmark::Int32FromEnv(char const*, int)+0xf4>
100020d68:     	mov	x0, x19
100020d6c:     	ldp	x29, x30, [sp, #128]
100020d70:     	ldp	x20, x19, [sp, #112]
100020d74:     	ldp	x22, x21, [sp, #96]
100020d78:     	add	sp, sp, #144
100020d7c:     	ret
100020d80:     	ldur	x0, [x29, #-56]
100020d84:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100020d88:     	mov	x0, x19
100020d8c:     	ldp	x29, x30, [sp, #128]
100020d90:     	ldp	x20, x19, [sp, #112]
100020d94:     	ldp	x22, x21, [sp, #96]
100020d98:     	add	sp, sp, #144
100020d9c:     	ret
100020da0:     	ldr	x0, [sp, #32]
100020da4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100020da8:     	ldrsb	w8, [sp, #23]
100020dac:     	tbz	w8, #31, 0x100020d58 <benchmark::Int32FromEnv(char const*, int)+0xcc>
100020db0:     	ldr	x0, [sp]
100020db4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100020db8:     	tbnz	w20, #0, 0x100020d5c <benchmark::Int32FromEnv(char const*, int)+0xd0>
100020dbc:     	b	0x100020d60 <benchmark::Int32FromEnv(char const*, int)+0xd4>
100020dc0:     	mov	x19, x0
100020dc4:     	ldrsb	w8, [sp, #55]
100020dc8:     	tbnz	w8, #31, 0x100020de4 <benchmark::Int32FromEnv(char const*, int)+0x158>
100020dcc:     	ldrsb	w8, [sp, #23]
100020dd0:     	tbnz	w8, #31, 0x100020e04 <benchmark::Int32FromEnv(char const*, int)+0x178>
100020dd4:     	ldursb	w8, [x29, #-33]
100020dd8:     	tbnz	w8, #31, 0x100020e14 <benchmark::Int32FromEnv(char const*, int)+0x188>
100020ddc:     	mov	x0, x19
100020de0:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
100020de4:     	ldr	x0, [sp, #32]
100020de8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100020dec:     	ldrsb	w8, [sp, #23]
100020df0:     	tbz	w8, #31, 0x100020dd4 <benchmark::Int32FromEnv(char const*, int)+0x148>
100020df4:     	b	0x100020e04 <benchmark::Int32FromEnv(char const*, int)+0x178>
100020df8:     	mov	x19, x0
100020dfc:     	ldrsb	w8, [sp, #23]
100020e00:     	tbz	w8, #31, 0x100020dd4 <benchmark::Int32FromEnv(char const*, int)+0x148>
100020e04:     	ldr	x0, [sp]
100020e08:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100020e0c:     	ldursb	w8, [x29, #-33]
100020e10:     	tbz	w8, #31, 0x100020ddc <benchmark::Int32FromEnv(char const*, int)+0x150>
100020e14:     	ldur	x0, [x29, #-56]
100020e18:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100020e1c:     	mov	x0, x19
100020e20:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100020e24 <benchmark::(anonymous namespace)::ParseInt32(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*, int*)>:
100020e24:     	sub	sp, sp, #64
100020e28:     	stp	x22, x21, [sp, #16]
100020e2c:     	stp	x20, x19, [sp, #32]
100020e30:     	stp	x29, x30, [sp, #48]
100020e34:     	add	x29, sp, #48
100020e38:     	mov	x21, x2
100020e3c:     	mov	x19, x1
100020e40:     	mov	x20, x0
100020e44:     	str	xzr, [sp, #8]
100020e48:     	add	x1, sp, #8
100020e4c:     	mov	x0, x19
100020e50:     	mov	w2, #10
100020e54:     	bl	0x10002f284 <_vsnprintf+0x10002f284>
100020e58:     	ldr	x8, [sp, #8]
100020e5c:     	ldrb	w8, [x8]
100020e60:     	cbz	w8, 0x100020ed4 <benchmark::(anonymous namespace)::ParseInt32(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*, int*)+0xb0>
100020e64:     	ldrb	w8, [x20, #23]
100020e68:     	sxtb	w9, w8
100020e6c:     	ldp	x10, x11, [x20]
100020e70:     	cmp	w9, #0
100020e74:     	csel	x1, x10, x20, lt
100020e78:     	csel	x2, x11, x8, lt
100020e7c:     	adrp	x0, 0x100034000 <benchmark::(anonymous namespace)::ParseInt32(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*, int*)+0xa8>
100020e80:     	ldr	x0, [x0, #456]
100020e84:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100020e88:     	adrp	x1, 0x100032000 <benchmark::(anonymous namespace)::ParseInt32(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*, int*)+0xac>
100020e8c:     	add	x1, x1, #599
100020e90:     	mov	w2, #37
100020e94:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100020e98:     	adrp	x1, 0x100032000 <benchmark::(anonymous namespace)::ParseInt32(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*, int*)+0xbc>
100020e9c:     	add	x1, x1, #637
100020ea0:     	mov	w2, #24
100020ea4:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100020ea8:     	mov	x20, x0
100020eac:     	mov	x0, x19
100020eb0:     	bl	0x10002f254 <_vsnprintf+0x10002f254>
100020eb4:     	mov	x2, x0
100020eb8:     	mov	x0, x20
100020ebc:     	mov	x1, x19
100020ec0:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100020ec4:     	adrp	x1, 0x100032000 <benchmark::(anonymous namespace)::ParseInt32(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*, int*)+0xe8>
100020ec8:     	add	x1, x1, #662
100020ecc:     	mov	w2, #3
100020ed0:     	b	0x100020f74 <benchmark::(anonymous namespace)::ParseInt32(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*, int*)+0x150>
100020ed4:     	cmp	x0, w0, sxtw
100020ed8:     	b.ne	0x100020ef8 <benchmark::(anonymous namespace)::ParseInt32(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*, int*)+0xd4>
100020edc:     	str	w0, [x21]
100020ee0:     	mov	w0, #1
100020ee4:     	ldp	x29, x30, [sp, #48]
100020ee8:     	ldp	x20, x19, [sp, #32]
100020eec:     	ldp	x22, x21, [sp, #16]
100020ef0:     	add	sp, sp, #64
100020ef4:     	ret
100020ef8:     	ldrb	w8, [x20, #23]
100020efc:     	sxtb	w9, w8
100020f00:     	ldp	x10, x11, [x20]
100020f04:     	cmp	w9, #0
100020f08:     	csel	x1, x10, x20, lt
100020f0c:     	csel	x2, x11, x8, lt
100020f10:     	adrp	x0, 0x100034000 <benchmark::(anonymous namespace)::ParseInt32(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*, int*)+0x13c>
100020f14:     	ldr	x0, [x0, #456]
100020f18:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100020f1c:     	adrp	x1, 0x100032000 <benchmark::(anonymous namespace)::ParseInt32(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*, int*)+0x140>
100020f20:     	add	x1, x1, #599
100020f24:     	mov	w2, #37
100020f28:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100020f2c:     	adrp	x1, 0x100032000 <benchmark::(anonymous namespace)::ParseInt32(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*, int*)+0x150>
100020f30:     	add	x1, x1, #637
100020f34:     	mov	w2, #24
100020f38:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100020f3c:     	mov	x20, x0
100020f40:     	mov	x0, x19
100020f44:     	bl	0x10002f254 <_vsnprintf+0x10002f254>
100020f48:     	mov	x2, x0
100020f4c:     	mov	x0, x20
100020f50:     	mov	x1, x19
100020f54:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100020f58:     	adrp	x1, 0x100032000 <benchmark::DoubleFromEnv(char const*, double)+0x10>
100020f5c:     	add	x1, x1, #666
100020f60:     	mov	w2, #3
100020f64:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100020f68:     	adrp	x1, 0x100032000 <benchmark::DoubleFromEnv(char const*, double)+0x20>
100020f6c:     	add	x1, x1, #670
100020f70:     	mov	w2, #17
100020f74:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100020f78:     	mov	w0, #0
100020f7c:     	ldp	x29, x30, [sp, #48]
100020f80:     	ldp	x20, x19, [sp, #32]
100020f84:     	ldp	x22, x21, [sp, #16]
100020f88:     	add	sp, sp, #64
100020f8c:     	ret

0000000100020f90 <benchmark::DoubleFromEnv(char const*, double)>:
100020f90:     	sub	sp, sp, #160
100020f94:     	stp	d9, d8, [sp, #96]
100020f98:     	stp	x22, x21, [sp, #112]
100020f9c:     	stp	x20, x19, [sp, #128]
100020fa0:     	stp	x29, x30, [sp, #144]
100020fa4:     	add	x29, sp, #144
100020fa8:     	fmov	d8, d0
100020fac:     	mov	x1, x0
100020fb0:     	add	x19, sp, #72
100020fb4:     	add	x0, sp, #72
100020fb8:     	bl	0x100020858 <benchmark::(anonymous namespace)::FlagToEnvVar(char const*)>
100020fbc:     	ldrb	w21, [sp, #95]
100020fc0:     	sxtb	w8, w21
100020fc4:     	ldr	x9, [sp, #72]
100020fc8:     	cmp	w8, #0
100020fcc:     	csel	x20, x9, x19, lt
100020fd0:     	mov	x0, x20
100020fd4:     	bl	0x10002f134 <_vsnprintf+0x10002f134>
100020fd8:     	str	d8, [sp, #64]
100020fdc:     	cbz	x0, 0x100021068 <benchmark::DoubleFromEnv(char const*, double)+0xd8>
100020fe0:     	mov	x19, x0
100020fe4:     	sxtb	w8, w21
100020fe8:     	mov	w9, #21
100020fec:     	strb	w9, [sp, #23]
100020ff0:     	adrp	x9, 0x100032000 <benchmark::DoubleFromEnv(char const*, double)+0xa8>
100020ff4:     	add	x9, x9, #543
100020ff8:     	ldr	q0, [x9]
100020ffc:     	str	q0, [sp]
100021000:     	ldur	x9, [x9, #13]
100021004:     	stur	x9, [sp, #13]
100021008:     	strb	wzr, [sp, #21]
10002100c:     	ldr	x9, [sp, #80]
100021010:     	cmp	w8, #0
100021014:     	csel	x2, x9, x21, lt
100021018:     	mov	x0, sp
10002101c:     	mov	x1, x20
100021020:     	bl	0x10002ed38 <_vsnprintf+0x10002ed38>
100021024:     	ldr	q0, [x0]
100021028:     	ldr	x8, [x0, #16]
10002102c:     	str	x8, [sp, #48]
100021030:     	str	q0, [sp, #32]
100021034:     	stp	xzr, xzr, [x0, #8]
100021038:     	str	xzr, [x0]
10002103c:     	add	x0, sp, #32
100021040:     	add	x2, sp, #64
100021044:     	mov	x1, x19
100021048:     	bl	0x100021118 <benchmark::(anonymous namespace)::ParseDouble(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*, double*)>
10002104c:     	mov	x19, x0
100021050:     	ldrsb	w8, [sp, #55]
100021054:     	tbnz	w8, #31, 0x100021094 <benchmark::DoubleFromEnv(char const*, double)+0x104>
100021058:     	ldrsb	w8, [sp, #23]
10002105c:     	tbnz	w8, #31, 0x1000210a4 <benchmark::DoubleFromEnv(char const*, double)+0x114>
100021060:     	tbz	w19, #0, 0x100021068 <benchmark::DoubleFromEnv(char const*, double)+0xd8>
100021064:     	ldr	d8, [sp, #64]
100021068:     	ldrsb	w8, [sp, #95]
10002106c:     	tbz	w8, #31, 0x100021078 <benchmark::DoubleFromEnv(char const*, double)+0xe8>
100021070:     	ldr	x0, [sp, #72]
100021074:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100021078:     	fmov	d0, d8
10002107c:     	ldp	x29, x30, [sp, #144]
100021080:     	ldp	x20, x19, [sp, #128]
100021084:     	ldp	x22, x21, [sp, #112]
100021088:     	ldp	d9, d8, [sp, #96]
10002108c:     	add	sp, sp, #160
100021090:     	ret
100021094:     	ldr	x0, [sp, #32]
100021098:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002109c:     	ldrsb	w8, [sp, #23]
1000210a0:     	tbz	w8, #31, 0x100021060 <benchmark::DoubleFromEnv(char const*, double)+0xd0>
1000210a4:     	ldr	x0, [sp]
1000210a8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000210ac:     	tbnz	w19, #0, 0x100021064 <benchmark::DoubleFromEnv(char const*, double)+0xd4>
1000210b0:     	b	0x100021068 <benchmark::DoubleFromEnv(char const*, double)+0xd8>
1000210b4:     	mov	x19, x0
1000210b8:     	ldrsb	w8, [sp, #55]
1000210bc:     	tbnz	w8, #31, 0x1000210d8 <benchmark::DoubleFromEnv(char const*, double)+0x148>
1000210c0:     	ldrsb	w8, [sp, #23]
1000210c4:     	tbnz	w8, #31, 0x1000210f8 <benchmark::DoubleFromEnv(char const*, double)+0x168>
1000210c8:     	ldrsb	w8, [sp, #95]
1000210cc:     	tbnz	w8, #31, 0x100021108 <benchmark::DoubleFromEnv(char const*, double)+0x178>
1000210d0:     	mov	x0, x19
1000210d4:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
1000210d8:     	ldr	x0, [sp, #32]
1000210dc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000210e0:     	ldrsb	w8, [sp, #23]
1000210e4:     	tbz	w8, #31, 0x1000210c8 <benchmark::DoubleFromEnv(char const*, double)+0x138>
1000210e8:     	b	0x1000210f8 <benchmark::DoubleFromEnv(char const*, double)+0x168>
1000210ec:     	mov	x19, x0
1000210f0:     	ldrsb	w8, [sp, #23]
1000210f4:     	tbz	w8, #31, 0x1000210c8 <benchmark::DoubleFromEnv(char const*, double)+0x138>
1000210f8:     	ldr	x0, [sp]
1000210fc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100021100:     	ldrsb	w8, [sp, #95]
100021104:     	tbz	w8, #31, 0x1000210d0 <benchmark::DoubleFromEnv(char const*, double)+0x140>
100021108:     	ldr	x0, [sp, #72]
10002110c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100021110:     	mov	x0, x19
100021114:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100021118 <benchmark::(anonymous namespace)::ParseDouble(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*, double*)>:
100021118:     	sub	sp, sp, #64
10002111c:     	stp	x22, x21, [sp, #16]
100021120:     	stp	x20, x19, [sp, #32]
100021124:     	stp	x29, x30, [sp, #48]
100021128:     	add	x29, sp, #48
10002112c:     	mov	x21, x2
100021130:     	mov	x19, x1
100021134:     	mov	x20, x0
100021138:     	str	xzr, [sp, #8]
10002113c:     	add	x1, sp, #8
100021140:     	mov	x0, x19
100021144:     	bl	0x10002f278 <_vsnprintf+0x10002f278>
100021148:     	ldr	x8, [sp, #8]
10002114c:     	ldrb	w22, [x8]
100021150:     	cbz	w22, 0x1000211c8 <benchmark::(anonymous namespace)::ParseDouble(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*, double*)+0xb0>
100021154:     	ldrb	w8, [x20, #23]
100021158:     	sxtb	w9, w8
10002115c:     	ldp	x10, x11, [x20]
100021160:     	cmp	w9, #0
100021164:     	csel	x1, x10, x20, lt
100021168:     	csel	x2, x11, x8, lt
10002116c:     	adrp	x0, 0x100034000 <benchmark::(anonymous namespace)::ParseDouble(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*, double*)+0xa0>
100021170:     	ldr	x0, [x0, #456]
100021174:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100021178:     	adrp	x1, 0x100032000 <benchmark::(anonymous namespace)::ParseDouble(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*, double*)+0xa4>
10002117c:     	add	x1, x1, #688
100021180:     	mov	w2, #29
100021184:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100021188:     	adrp	x1, 0x100032000 <benchmark::(anonymous namespace)::ParseDouble(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*, double*)+0xb4>
10002118c:     	add	x1, x1, #637
100021190:     	mov	w2, #24
100021194:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100021198:     	mov	x20, x0
10002119c:     	mov	x0, x19
1000211a0:     	bl	0x10002f254 <_vsnprintf+0x10002f254>
1000211a4:     	mov	x2, x0
1000211a8:     	mov	x0, x20
1000211ac:     	mov	x1, x19
1000211b0:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000211b4:     	adrp	x1, 0x100032000 <benchmark::StringFromEnv(char const*, char const*)+0x10>
1000211b8:     	add	x1, x1, #662
1000211bc:     	mov	w2, #3
1000211c0:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000211c4:     	b	0x1000211cc <benchmark::(anonymous namespace)::ParseDouble(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*, double*)+0xb4>
1000211c8:     	str	d0, [x21]
1000211cc:     	cmp	w22, #0
1000211d0:     	cset	w0, eq
1000211d4:     	ldp	x29, x30, [sp, #48]
1000211d8:     	ldp	x20, x19, [sp, #32]
1000211dc:     	ldp	x22, x21, [sp, #16]
1000211e0:     	add	sp, sp, #64
1000211e4:     	ret

00000001000211e8 <benchmark::StringFromEnv(char const*, char const*)>:
1000211e8:     	sub	sp, sp, #64
1000211ec:     	stp	x20, x19, [sp, #32]
1000211f0:     	stp	x29, x30, [sp, #48]
1000211f4:     	add	x29, sp, #48
1000211f8:     	mov	x19, x1
1000211fc:     	mov	x1, x0
100021200:     	add	x0, sp, #8
100021204:     	bl	0x100020858 <benchmark::(anonymous namespace)::FlagToEnvVar(char const*)>
100021208:     	ldrsb	w8, [sp, #31]
10002120c:     	tbnz	w8, #31, 0x100021234 <benchmark::StringFromEnv(char const*, char const*)+0x4c>
100021210:     	add	x0, sp, #8
100021214:     	bl	0x10002f134 <_vsnprintf+0x10002f134>
100021218:     	cmp	x0, #0
10002121c:     	csel	x19, x19, x0, eq
100021220:     	mov	x0, x19
100021224:     	ldp	x29, x30, [sp, #48]
100021228:     	ldp	x20, x19, [sp, #32]
10002122c:     	add	sp, sp, #64
100021230:     	ret
100021234:     	ldr	x20, [sp, #8]
100021238:     	mov	x0, x20
10002123c:     	bl	0x10002f134 <_vsnprintf+0x10002f134>
100021240:     	cmp	x0, #0
100021244:     	csel	x19, x19, x0, eq
100021248:     	mov	x0, x20
10002124c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100021250:     	mov	x0, x19
100021254:     	ldp	x29, x30, [sp, #48]
100021258:     	ldp	x20, x19, [sp, #32]
10002125c:     	add	sp, sp, #64
100021260:     	ret

0000000100021264 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)>:
100021264:     	sub	sp, sp, #240
100021268:     	stp	x28, x27, [sp, #144]
10002126c:     	stp	x26, x25, [sp, #160]
100021270:     	stp	x24, x23, [sp, #176]
100021274:     	stp	x22, x21, [sp, #192]
100021278:     	stp	x20, x19, [sp, #208]
10002127c:     	stp	x29, x30, [sp, #224]
100021280:     	add	x29, sp, #224
100021284:     	mov	x20, x1
100021288:     	mov	x1, x0
10002128c:     	mov	x19, x8
100021290:     	add	x21, sp, #48
100021294:     	add	x0, sp, #48
100021298:     	bl	0x100020858 <benchmark::(anonymous namespace)::FlagToEnvVar(char const*)>
10002129c:     	ldrsb	w8, [sp, #71]
1000212a0:     	ldr	x9, [sp, #48]
1000212a4:     	cmp	w8, #0
1000212a8:     	csel	x0, x9, x21, lt
1000212ac:     	bl	0x10002f134 <_vsnprintf+0x10002f134>
1000212b0:     	cbz	x0, 0x10002131c <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0xb8>
1000212b4:     	mov	x21, x0
1000212b8:     	add	x8, sp, #24
1000212bc:     	stp	xzr, xzr, [sp, #32]
1000212c0:     	add	x26, x8, #8
1000212c4:     	str	x26, [sp, #24]
1000212c8:     	adrp	x0, 0x100032000 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0xa8>
1000212cc:     	add	x0, x0, #543
1000212d0:     	mov	x8, sp
1000212d4:     	add	x1, sp, #48
1000212d8:     	bl	0x10002eff0 <_vsnprintf+0x10002eff0>
1000212dc:     	sub	x8, x29, #104
1000212e0:     	stp	xzr, xzr, [x29, #-96]
1000212e4:     	add	x22, x8, #8
1000212e8:     	stur	x22, [x29, #-104]
1000212ec:     	mov	x0, x21
1000212f0:     	bl	0x10002f254 <_vsnprintf+0x10002f254>
1000212f4:     	mov	x8, #9223372036854775792
1000212f8:     	cmp	x0, x8
1000212fc:     	b.hs	0x100021704 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x4a0>
100021300:     	mov	x23, x0
100021304:     	cmp	x0, #23
100021308:     	b.hs	0x100021350 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0xec>
10002130c:     	strb	w23, [sp, #95]
100021310:     	add	x24, sp, #72
100021314:     	cbnz	x23, 0x100021370 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x10c>
100021318:     	b	0x100021380 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x11c>
10002131c:     	ldr	x9, [x20]
100021320:     	mov	x8, x20
100021324:     	ldr	x10, [x8, #8]!
100021328:     	str	x9, [x19]
10002132c:     	mov	x9, x19
100021330:     	str	x10, [x9, #8]!
100021334:     	ldr	x11, [x20, #16]
100021338:     	str	x11, [x19, #16]
10002133c:     	cbz	x11, 0x100021454 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x1f0>
100021340:     	str	x9, [x10, #16]
100021344:     	str	x8, [x20]
100021348:     	stp	xzr, xzr, [x8]
10002134c:     	b	0x1000216d4 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x470>
100021350:     	orr	x8, x23, #0xf
100021354:     	add	x25, x8, #1
100021358:     	mov	x0, x25
10002135c:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100021360:     	mov	x24, x0
100021364:     	orr	x8, x25, #0x8000000000000000
100021368:     	stp	x23, x8, [sp, #80]
10002136c:     	str	x0, [sp, #72]
100021370:     	mov	x0, x24
100021374:     	mov	x1, x21
100021378:     	mov	x2, x23
10002137c:     	bl	0x10002f1c4 <_vsnprintf+0x10002f1c4>
100021380:     	strb	wzr, [x24, x23]
100021384:     	add	x8, sp, #96
100021388:     	add	x0, sp, #72
10002138c:     	mov	w1, #44
100021390:     	bl	0x10002c6f8 <benchmark::StrSplit(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char)>
100021394:     	ldrsb	w8, [sp, #95]
100021398:     	tbnz	w8, #31, 0x1000213ac <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x148>
10002139c:     	ldp	x23, x24, [sp, #96]
1000213a0:     	cmp	x23, x24
1000213a4:     	b.ne	0x1000213e0 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x17c>
1000213a8:     	b	0x1000213c0 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x15c>
1000213ac:     	ldr	x0, [sp, #72]
1000213b0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000213b4:     	ldp	x23, x24, [sp, #96]
1000213b8:     	cmp	x23, x24
1000213bc:     	b.ne	0x1000213e0 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x17c>
1000213c0:     	cbnz	x23, 0x100021580 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x31c>
1000213c4:     	b	0x1000215c4 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x360>
1000213c8:     	ldr	x0, [sp, #72]
1000213cc:     	str	x25, [sp, #80]
1000213d0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000213d4:     	add	x23, x23, #24
1000213d8:     	cmp	x23, x24
1000213dc:     	b.eq	0x100021578 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x314>
1000213e0:     	add	x8, sp, #72
1000213e4:     	mov	x0, x23
1000213e8:     	mov	w1, #61
1000213ec:     	bl	0x10002c6f8 <benchmark::StrSplit(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char)>
1000213f0:     	ldp	x1, x8, [sp, #72]
1000213f4:     	sub	x8, x8, x1
1000213f8:     	cmp	x8, #48
1000213fc:     	b.ne	0x10002145c <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x1f8>
100021400:     	add	x3, x1, #24
100021404:     	sub	x0, x29, #104
100021408:     	mov	x2, x1
10002140c:     	bl	0x10000a7c8 <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
100021410:     	tbz	w1, #0, 0x1000214d0 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x26c>
100021414:     	ldr	x25, [sp, #72]
100021418:     	cbz	x25, 0x1000213d4 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x170>
10002141c:     	ldr	x8, [sp, #80]
100021420:     	mov	x0, x25
100021424:     	cmp	x8, x25
100021428:     	b.ne	0x10002143c <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x1d8>
10002142c:     	b	0x1000213cc <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x168>
100021430:     	mov	x8, x27
100021434:     	cmp	x27, x25
100021438:     	b.eq	0x1000213c8 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x164>
10002143c:     	sub	x27, x8, #24
100021440:     	ldursb	w9, [x8, #-1]
100021444:     	tbz	w9, #31, 0x100021430 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x1cc>
100021448:     	ldur	x0, [x8, #-24]
10002144c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100021450:     	b	0x100021430 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x1cc>
100021454:     	str	x9, [x19]
100021458:     	b	0x1000216d4 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x470>
10002145c:     	ldrb	w8, [sp, #23]
100021460:     	sxtb	w9, w8
100021464:     	ldp	x10, x11, [sp]
100021468:     	cmp	w9, #0
10002146c:     	mov	x9, sp
100021470:     	csel	x1, x10, x9, lt
100021474:     	csel	x2, x11, x8, lt
100021478:     	adrp	x0, 0x100034000 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x260>
10002147c:     	ldr	x0, [x0, #456]
100021480:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100021484:     	adrp	x1, 0x100032000 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x264>
100021488:     	add	x1, x1, #718
10002148c:     	mov	w2, #45
100021490:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100021494:     	adrp	x1, 0x100032000 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x274>
100021498:     	add	x1, x1, #764
10002149c:     	mov	w2, #47
1000214a0:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000214a4:     	mov	x22, x0
1000214a8:     	mov	x0, x21
1000214ac:     	bl	0x10002f254 <_vsnprintf+0x10002f254>
1000214b0:     	mov	x2, x0
1000214b4:     	mov	x0, x22
1000214b8:     	mov	x1, x21
1000214bc:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000214c0:     	adrp	x1, 0x100032000 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x2a0>
1000214c4:     	add	x1, x1, #662
1000214c8:     	mov	w2, #3
1000214cc:     	b	0x100021534 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x2d0>
1000214d0:     	ldrb	w8, [sp, #23]
1000214d4:     	sxtb	w9, w8
1000214d8:     	ldp	x10, x11, [sp]
1000214dc:     	cmp	w9, #0
1000214e0:     	mov	x9, sp
1000214e4:     	csel	x1, x10, x9, lt
1000214e8:     	csel	x2, x11, x8, lt
1000214ec:     	adrp	x0, 0x100034000 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x2d4>
1000214f0:     	ldr	x0, [x0, #456]
1000214f4:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000214f8:     	adrp	x1, 0x100032000 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x2d8>
1000214fc:     	add	x1, x1, #812
100021500:     	mov	w2, #45
100021504:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100021508:     	ldr	x8, [sp, #72]
10002150c:     	ldrb	w9, [x8, #23]
100021510:     	sxtb	w10, w9
100021514:     	ldp	x11, x12, [x8]
100021518:     	cmp	w10, #0
10002151c:     	csel	x1, x11, x8, lt
100021520:     	csel	x2, x12, x9, lt
100021524:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100021528:     	adrp	x1, 0x100032000 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x308>
10002152c:     	add	x1, x1, #858
100021530:     	mov	w2, #16
100021534:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100021538:     	ldr	x21, [sp, #72]
10002153c:     	cbz	x21, 0x100021624 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x3c0>
100021540:     	ldr	x8, [sp, #80]
100021544:     	mov	x0, x21
100021548:     	cmp	x8, x21
10002154c:     	b.ne	0x100021560 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x2fc>
100021550:     	b	0x10002161c <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x3b8>
100021554:     	mov	x8, x22
100021558:     	cmp	x22, x21
10002155c:     	b.eq	0x100021618 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x3b4>
100021560:     	sub	x22, x8, #24
100021564:     	ldursb	w9, [x8, #-1]
100021568:     	tbz	w9, #31, 0x100021554 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x2f0>
10002156c:     	ldur	x0, [x8, #-24]
100021570:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100021574:     	b	0x100021554 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x2f0>
100021578:     	ldr	x23, [sp, #96]
10002157c:     	cbz	x23, 0x1000215c4 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x360>
100021580:     	ldr	x8, [sp, #104]
100021584:     	mov	x0, x23
100021588:     	cmp	x8, x23
10002158c:     	b.ne	0x1000215a0 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x33c>
100021590:     	b	0x1000215bc <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x358>
100021594:     	mov	x8, x21
100021598:     	cmp	x21, x23
10002159c:     	b.eq	0x1000215b8 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x354>
1000215a0:     	sub	x21, x8, #24
1000215a4:     	ldursb	w9, [x8, #-1]
1000215a8:     	tbz	w9, #31, 0x100021594 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x330>
1000215ac:     	ldur	x0, [x8, #-24]
1000215b0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000215b4:     	b	0x100021594 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x330>
1000215b8:     	ldr	x0, [sp, #96]
1000215bc:     	str	x23, [sp, #104]
1000215c0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000215c4:     	ldur	x1, [x29, #-104]
1000215c8:     	add	x0, sp, #24
1000215cc:     	mov	x2, x22
1000215d0:     	bl	0x100022028 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)>
1000215d4:     	mov	w21, #1
1000215d8:     	ldur	x1, [x29, #-96]
1000215dc:     	sub	x0, x29, #104
1000215e0:     	bl	0x10000a254 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*)>
1000215e4:     	ldrsb	w8, [sp, #23]
1000215e8:     	tbnz	w8, #31, 0x100021688 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x424>
1000215ec:     	add	x8, x19, #8
1000215f0:     	tbz	w21, #0, 0x100021698 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x434>
1000215f4:     	ldp	x10, x9, [sp, #24]
1000215f8:     	stp	x10, x9, [x19]
1000215fc:     	ldr	x10, [sp, #40]
100021600:     	str	x10, [x19, #16]
100021604:     	cbz	x10, 0x1000216c4 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x460>
100021608:     	str	x8, [x9, #16]
10002160c:     	str	x26, [sp, #24]
100021610:     	stp	xzr, xzr, [x26]
100021614:     	b	0x1000216c8 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x464>
100021618:     	ldr	x0, [sp, #72]
10002161c:     	str	x21, [sp, #80]
100021620:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100021624:     	ldr	x21, [sp, #96]
100021628:     	cbz	x21, 0x100021670 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x40c>
10002162c:     	ldr	x8, [sp, #104]
100021630:     	mov	x0, x21
100021634:     	cmp	x8, x21
100021638:     	b.ne	0x10002164c <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x3e8>
10002163c:     	b	0x100021668 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x404>
100021640:     	mov	x8, x22
100021644:     	cmp	x22, x21
100021648:     	b.eq	0x100021664 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x400>
10002164c:     	sub	x22, x8, #24
100021650:     	ldursb	w9, [x8, #-1]
100021654:     	tbz	w9, #31, 0x100021640 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x3dc>
100021658:     	ldur	x0, [x8, #-24]
10002165c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100021660:     	b	0x100021640 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x3dc>
100021664:     	ldr	x0, [sp, #96]
100021668:     	str	x21, [sp, #104]
10002166c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100021670:     	mov	w21, #0
100021674:     	ldur	x1, [x29, #-96]
100021678:     	sub	x0, x29, #104
10002167c:     	bl	0x10000a254 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*)>
100021680:     	ldrsb	w8, [sp, #23]
100021684:     	tbz	w8, #31, 0x1000215ec <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x388>
100021688:     	ldr	x0, [sp]
10002168c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100021690:     	add	x8, x19, #8
100021694:     	tbnz	w21, #0, 0x1000215f4 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x390>
100021698:     	ldr	x11, [x20]
10002169c:     	mov	x9, x20
1000216a0:     	ldr	x10, [x9, #8]!
1000216a4:     	stp	x11, x10, [x19]
1000216a8:     	ldr	x11, [x20, #16]
1000216ac:     	str	x11, [x19, #16]
1000216b0:     	cbz	x11, 0x1000216c4 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x460>
1000216b4:     	str	x8, [x10, #16]
1000216b8:     	str	x9, [x20]
1000216bc:     	stp	xzr, xzr, [x9]
1000216c0:     	b	0x1000216c8 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x464>
1000216c4:     	str	x8, [x19]
1000216c8:     	ldr	x1, [sp, #32]
1000216cc:     	add	x0, sp, #24
1000216d0:     	bl	0x10000a254 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*)>
1000216d4:     	ldrsb	w8, [sp, #71]
1000216d8:     	tbz	w8, #31, 0x1000216e4 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x480>
1000216dc:     	ldr	x0, [sp, #48]
1000216e0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000216e4:     	ldp	x29, x30, [sp, #224]
1000216e8:     	ldp	x20, x19, [sp, #208]
1000216ec:     	ldp	x22, x21, [sp, #192]
1000216f0:     	ldp	x24, x23, [sp, #176]
1000216f4:     	ldp	x26, x25, [sp, #160]
1000216f8:     	ldp	x28, x27, [sp, #144]
1000216fc:     	add	sp, sp, #240
100021700:     	ret
100021704:     	add	x0, sp, #72
100021708:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
10002170c:     	brk	#0x1
100021710:     	b	0x100021794 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x530>
100021714:     	mov	x19, x0
100021718:     	ldrsb	w8, [sp, #95]
10002171c:     	tbz	w8, #31, 0x100021740 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x4dc>
100021720:     	ldr	x0, [sp, #72]
100021724:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100021728:     	ldur	x1, [x29, #-96]
10002172c:     	sub	x0, x29, #104
100021730:     	bl	0x10000a254 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*)>
100021734:     	ldrsb	w8, [sp, #23]
100021738:     	tbz	w8, #31, 0x1000217e4 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x580>
10002173c:     	b	0x100021754 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x4f0>
100021740:     	ldur	x1, [x29, #-96]
100021744:     	sub	x0, x29, #104
100021748:     	bl	0x10000a254 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*)>
10002174c:     	ldrsb	w8, [sp, #23]
100021750:     	tbz	w8, #31, 0x1000217e4 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x580>
100021754:     	ldr	x0, [sp]
100021758:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002175c:     	ldr	x1, [sp, #32]
100021760:     	add	x0, sp, #24
100021764:     	bl	0x10000a254 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*)>
100021768:     	ldrsb	w8, [sp, #71]
10002176c:     	tbnz	w8, #31, 0x1000217f8 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x594>
100021770:     	mov	x0, x19
100021774:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
100021778:     	mov	x19, x0
10002177c:     	ldr	x1, [sp, #32]
100021780:     	add	x0, sp, #24
100021784:     	bl	0x10000a254 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*)>
100021788:     	ldrsb	w8, [sp, #71]
10002178c:     	tbz	w8, #31, 0x100021770 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x50c>
100021790:     	b	0x1000217f8 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x594>
100021794:     	mov	x19, x0
100021798:     	ldur	x1, [x29, #-96]
10002179c:     	sub	x0, x29, #104
1000217a0:     	bl	0x10000a254 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*)>
1000217a4:     	ldrsb	w8, [sp, #23]
1000217a8:     	tbz	w8, #31, 0x1000217e4 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x580>
1000217ac:     	b	0x100021754 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x4f0>
1000217b0:     	b	0x1000217b4 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x550>
1000217b4:     	mov	x19, x0
1000217b8:     	add	x0, sp, #72
1000217bc:     	bl	0x100006bdc <std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::~vector[abi:ue170006]()>
1000217c0:     	b	0x1000217c8 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x564>
1000217c4:     	mov	x19, x0
1000217c8:     	add	x0, sp, #96
1000217cc:     	bl	0x100006bdc <std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::~vector[abi:ue170006]()>
1000217d0:     	ldur	x1, [x29, #-96]
1000217d4:     	sub	x0, x29, #104
1000217d8:     	bl	0x10000a254 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*)>
1000217dc:     	ldrsb	w8, [sp, #23]
1000217e0:     	tbnz	w8, #31, 0x100021754 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x4f0>
1000217e4:     	ldr	x1, [sp, #32]
1000217e8:     	add	x0, sp, #24
1000217ec:     	bl	0x10000a254 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*)>
1000217f0:     	ldrsb	w8, [sp, #71]
1000217f4:     	tbz	w8, #31, 0x100021770 <benchmark::KvPairsFromEnv(char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>)+0x50c>
1000217f8:     	ldr	x0, [sp, #48]
1000217fc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100021800:     	mov	x0, x19
100021804:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100021808 <benchmark::ParseFlagValue(char const*, char const*, bool)>:
100021808:     	sub	sp, sp, #144
10002180c:     	stp	x24, x23, [sp, #80]
100021810:     	stp	x22, x21, [sp, #96]
100021814:     	stp	x20, x19, [sp, #112]
100021818:     	stp	x29, x30, [sp, #128]
10002181c:     	add	x29, sp, #128
100021820:     	mov	x22, #0
100021824:     	cbz	x0, 0x100021970 <benchmark::ParseFlagValue(char const*, char const*, bool)+0x168>
100021828:     	mov	x21, x1
10002182c:     	cbz	x1, 0x100021970 <benchmark::ParseFlagValue(char const*, char const*, bool)+0x168>
100021830:     	mov	x19, x2
100021834:     	mov	x20, x0
100021838:     	mov	w8, #2
10002183c:     	strb	w8, [sp, #47]
100021840:     	mov	w8, #11565
100021844:     	strh	w8, [sp, #24]
100021848:     	strb	wzr, [sp, #26]
10002184c:     	mov	x0, x21
100021850:     	bl	0x10002f254 <_vsnprintf+0x10002f254>
100021854:     	mov	x8, #9223372036854775792
100021858:     	cmp	x0, x8
10002185c:     	b.hs	0x10002198c <benchmark::ParseFlagValue(char const*, char const*, bool)+0x184>
100021860:     	mov	x22, x0
100021864:     	cmp	x0, #23
100021868:     	b.hs	0x10002187c <benchmark::ParseFlagValue(char const*, char const*, bool)+0x74>
10002186c:     	strb	w22, [sp, #23]
100021870:     	mov	x23, sp
100021874:     	cbnz	x22, 0x10002189c <benchmark::ParseFlagValue(char const*, char const*, bool)+0x94>
100021878:     	b	0x1000218ac <benchmark::ParseFlagValue(char const*, char const*, bool)+0xa4>
10002187c:     	orr	x8, x22, #0xf
100021880:     	add	x24, x8, #1
100021884:     	mov	x0, x24
100021888:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10002188c:     	mov	x23, x0
100021890:     	orr	x8, x24, #0x8000000000000000
100021894:     	stp	x22, x8, [sp, #8]
100021898:     	str	x0, [sp]
10002189c:     	mov	x0, x23
1000218a0:     	mov	x1, x21
1000218a4:     	mov	x2, x22
1000218a8:     	bl	0x10002f1c4 <_vsnprintf+0x10002f1c4>
1000218ac:     	strb	wzr, [x23, x22]
1000218b0:     	ldrb	w8, [sp, #23]
1000218b4:     	sxtb	w9, w8
1000218b8:     	ldp	x10, x11, [sp]
1000218bc:     	cmp	w9, #0
1000218c0:     	mov	x9, sp
1000218c4:     	csel	x1, x10, x9, lt
1000218c8:     	csel	x2, x11, x8, lt
1000218cc:     	add	x0, sp, #24
1000218d0:     	bl	0x10002ed38 <_vsnprintf+0x10002ed38>
1000218d4:     	ldr	q0, [x0]
1000218d8:     	str	q0, [sp, #48]
1000218dc:     	ldr	x8, [x0, #16]
1000218e0:     	str	x8, [sp, #64]
1000218e4:     	stp	xzr, xzr, [x0, #8]
1000218e8:     	str	xzr, [x0]
1000218ec:     	ldrsb	w8, [sp, #23]
1000218f0:     	tbnz	w8, #31, 0x100021930 <benchmark::ParseFlagValue(char const*, char const*, bool)+0x128>
1000218f4:     	ldrsb	w8, [sp, #47]
1000218f8:     	tbnz	w8, #31, 0x100021940 <benchmark::ParseFlagValue(char const*, char const*, bool)+0x138>
1000218fc:     	ldrb	w8, [sp, #71]
100021900:     	sxtb	w23, w8
100021904:     	ldp	x21, x9, [sp, #48]
100021908:     	cmp	w23, #0
10002190c:     	csel	x22, x9, x8, lt
100021910:     	add	x8, sp, #48
100021914:     	csel	x1, x21, x8, lt
100021918:     	mov	x0, x20
10002191c:     	mov	x2, x22
100021920:     	bl	0x10002f26c <_vsnprintf+0x10002f26c>
100021924:     	cbz	w0, 0x10002194c <benchmark::ParseFlagValue(char const*, char const*, bool)+0x144>
100021928:     	mov	x22, #0
10002192c:     	b	0x100021964 <benchmark::ParseFlagValue(char const*, char const*, bool)+0x15c>
100021930:     	ldr	x0, [sp]
100021934:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100021938:     	ldrsb	w8, [sp, #47]
10002193c:     	tbz	w8, #31, 0x1000218fc <benchmark::ParseFlagValue(char const*, char const*, bool)+0xf4>
100021940:     	ldr	x0, [sp, #24]
100021944:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100021948:     	b	0x1000218fc <benchmark::ParseFlagValue(char const*, char const*, bool)+0xf4>
10002194c:     	add	x22, x20, x22
100021950:     	ldrb	w8, [x22]
100021954:     	cbz	w19, 0x10002195c <benchmark::ParseFlagValue(char const*, char const*, bool)+0x154>
100021958:     	cbz	w8, 0x100021964 <benchmark::ParseFlagValue(char const*, char const*, bool)+0x15c>
10002195c:     	cmp	w8, #61
100021960:     	csinc	x22, xzr, x22, ne
100021964:     	tbz	w23, #31, 0x100021970 <benchmark::ParseFlagValue(char const*, char const*, bool)+0x168>
100021968:     	mov	x0, x21
10002196c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100021970:     	mov	x0, x22
100021974:     	ldp	x29, x30, [sp, #128]
100021978:     	ldp	x20, x19, [sp, #112]
10002197c:     	ldp	x22, x21, [sp, #96]
100021980:     	ldp	x24, x23, [sp, #80]
100021984:     	add	sp, sp, #144
100021988:     	ret
10002198c:     	mov	x0, sp
100021990:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
100021994:     	brk	#0x1
100021998:     	mov	x19, x0
10002199c:     	ldrsb	w8, [sp, #23]
1000219a0:     	tbnz	w8, #31, 0x1000219b4 <benchmark::ParseFlagValue(char const*, char const*, bool)+0x1ac>
1000219a4:     	ldrsb	w8, [sp, #47]
1000219a8:     	tbnz	w8, #31, 0x1000219d4 <benchmark::ParseFlagValue(char const*, char const*, bool)+0x1cc>
1000219ac:     	mov	x0, x19
1000219b0:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
1000219b4:     	ldr	x0, [sp]
1000219b8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000219bc:     	ldrsb	w8, [sp, #47]
1000219c0:     	tbz	w8, #31, 0x1000219ac <benchmark::ParseFlagValue(char const*, char const*, bool)+0x1a4>
1000219c4:     	b	0x1000219d4 <benchmark::ParseFlagValue(char const*, char const*, bool)+0x1cc>
1000219c8:     	mov	x19, x0
1000219cc:     	ldrsb	w8, [sp, #47]
1000219d0:     	tbz	w8, #31, 0x1000219ac <benchmark::ParseFlagValue(char const*, char const*, bool)+0x1a4>
1000219d4:     	ldr	x0, [sp, #24]
1000219d8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000219dc:     	mov	x0, x19
1000219e0:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

00000001000219e4 <benchmark::ParseBoolFlag(char const*, char const*, bool*)>:
1000219e4:     	sub	sp, sp, #96
1000219e8:     	stp	x24, x23, [sp, #32]
1000219ec:     	stp	x22, x21, [sp, #48]
1000219f0:     	stp	x20, x19, [sp, #64]
1000219f4:     	stp	x29, x30, [sp, #80]
1000219f8:     	add	x29, sp, #80
1000219fc:     	mov	x20, x2
100021a00:     	mov	w2, #1
100021a04:     	bl	0x100021808 <benchmark::ParseFlagValue(char const*, char const*, bool)>
100021a08:     	mov	x19, x0
100021a0c:     	cbz	x0, 0x100021a90 <benchmark::ParseBoolFlag(char const*, char const*, bool*)+0xac>
100021a10:     	mov	x0, x19
100021a14:     	bl	0x10002f254 <_vsnprintf+0x10002f254>
100021a18:     	mov	x8, #9223372036854775792
100021a1c:     	cmp	x0, x8
100021a20:     	b.hs	0x100021ab0 <benchmark::ParseBoolFlag(char const*, char const*, bool*)+0xcc>
100021a24:     	mov	x21, x0
100021a28:     	cmp	x0, #23
100021a2c:     	b.hs	0x100021a40 <benchmark::ParseBoolFlag(char const*, char const*, bool*)+0x5c>
100021a30:     	strb	w21, [sp, #31]
100021a34:     	add	x22, sp, #8
100021a38:     	cbnz	x21, 0x100021a60 <benchmark::ParseBoolFlag(char const*, char const*, bool*)+0x7c>
100021a3c:     	b	0x100021a70 <benchmark::ParseBoolFlag(char const*, char const*, bool*)+0x8c>
100021a40:     	orr	x8, x21, #0xf
100021a44:     	add	x23, x8, #1
100021a48:     	mov	x0, x23
100021a4c:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100021a50:     	mov	x22, x0
100021a54:     	orr	x8, x23, #0x8000000000000000
100021a58:     	stp	x21, x8, [sp, #16]
100021a5c:     	str	x0, [sp, #8]
100021a60:     	mov	x0, x22
100021a64:     	mov	x1, x19
100021a68:     	mov	x2, x21
100021a6c:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
100021a70:     	strb	wzr, [x22, x21]
100021a74:     	add	x0, sp, #8
100021a78:     	bl	0x100020998 <benchmark::IsTruthyFlagValue(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
100021a7c:     	strb	w0, [x20]
100021a80:     	ldrsb	w8, [sp, #31]
100021a84:     	tbz	w8, #31, 0x100021a90 <benchmark::ParseBoolFlag(char const*, char const*, bool*)+0xac>
100021a88:     	ldr	x0, [sp, #8]
100021a8c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100021a90:     	cmp	x19, #0
100021a94:     	cset	w0, ne
100021a98:     	ldp	x29, x30, [sp, #80]
100021a9c:     	ldp	x20, x19, [sp, #64]
100021aa0:     	ldp	x22, x21, [sp, #48]
100021aa4:     	ldp	x24, x23, [sp, #32]
100021aa8:     	add	sp, sp, #96
100021aac:     	ret
100021ab0:     	add	x0, sp, #8
100021ab4:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
100021ab8:     	mov	x19, x0
100021abc:     	ldrsb	w8, [sp, #31]
100021ac0:     	tbz	w8, #31, 0x100021acc <benchmark::ParseBoolFlag(char const*, char const*, bool*)+0xe8>
100021ac4:     	ldr	x0, [sp, #8]
100021ac8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100021acc:     	mov	x0, x19
100021ad0:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100021ad4 <benchmark::ParseInt32Flag(char const*, char const*, int*)>:
100021ad4:     	sub	sp, sp, #112
100021ad8:     	stp	x22, x21, [sp, #64]
100021adc:     	stp	x20, x19, [sp, #80]
100021ae0:     	stp	x29, x30, [sp, #96]
100021ae4:     	add	x29, sp, #96
100021ae8:     	mov	x19, x2
100021aec:     	mov	x21, x1
100021af0:     	mov	w2, #0
100021af4:     	bl	0x100021808 <benchmark::ParseFlagValue(char const*, char const*, bool)>
100021af8:     	cbz	x0, 0x100021b88 <benchmark::ParseInt32Flag(char const*, char const*, int*)+0xb4>
100021afc:     	mov	x20, x0
100021b00:     	mov	w8, #20
100021b04:     	strb	w8, [sp, #23]
100021b08:     	mov	w8, #8295
100021b0c:     	movk	w8, #11565, lsl #16
100021b10:     	str	w8, [sp, #16]
100021b14:     	adrp	x8, 0x100032000 <benchmark::ParseInt32Flag(char const*, char const*, int*)+0x84>
100021b18:     	add	x8, x8, #565
100021b1c:     	ldr	q0, [x8]
100021b20:     	str	q0, [sp]
100021b24:     	strb	wzr, [sp, #20]
100021b28:     	mov	x0, sp
100021b2c:     	mov	x1, x21
100021b30:     	bl	0x10002ed2c <_vsnprintf+0x10002ed2c>
100021b34:     	ldr	q0, [x0]
100021b38:     	ldr	x8, [x0, #16]
100021b3c:     	str	x8, [sp, #48]
100021b40:     	str	q0, [sp, #32]
100021b44:     	stp	xzr, xzr, [x0, #8]
100021b48:     	str	xzr, [x0]
100021b4c:     	add	x0, sp, #32
100021b50:     	mov	x1, x20
100021b54:     	mov	x2, x19
100021b58:     	bl	0x100020e24 <benchmark::(anonymous namespace)::ParseInt32(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*, int*)>
100021b5c:     	mov	x19, x0
100021b60:     	ldrsb	w8, [sp, #55]
100021b64:     	tbnz	w8, #31, 0x100021ba4 <benchmark::ParseInt32Flag(char const*, char const*, int*)+0xd0>
100021b68:     	ldrsb	w8, [sp, #23]
100021b6c:     	tbnz	w8, #31, 0x100021bb4 <benchmark::ParseInt32Flag(char const*, char const*, int*)+0xe0>
100021b70:     	mov	x0, x19
100021b74:     	ldp	x29, x30, [sp, #96]
100021b78:     	ldp	x20, x19, [sp, #80]
100021b7c:     	ldp	x22, x21, [sp, #64]
100021b80:     	add	sp, sp, #112
100021b84:     	ret
100021b88:     	mov	w19, #0
100021b8c:     	mov	x0, x19
100021b90:     	ldp	x29, x30, [sp, #96]
100021b94:     	ldp	x20, x19, [sp, #80]
100021b98:     	ldp	x22, x21, [sp, #64]
100021b9c:     	add	sp, sp, #112
100021ba0:     	ret
100021ba4:     	ldr	x0, [sp, #32]
100021ba8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100021bac:     	ldrsb	w8, [sp, #23]
100021bb0:     	tbz	w8, #31, 0x100021b70 <benchmark::ParseInt32Flag(char const*, char const*, int*)+0x9c>
100021bb4:     	ldr	x0, [sp]
100021bb8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100021bbc:     	mov	x0, x19
100021bc0:     	ldp	x29, x30, [sp, #96]
100021bc4:     	ldp	x20, x19, [sp, #80]
100021bc8:     	ldp	x22, x21, [sp, #64]
100021bcc:     	add	sp, sp, #112
100021bd0:     	ret
100021bd4:     	mov	x19, x0
100021bd8:     	ldrsb	w8, [sp, #55]
100021bdc:     	tbnz	w8, #31, 0x100021bf0 <benchmark::ParseInt32Flag(char const*, char const*, int*)+0x11c>
100021be0:     	ldrsb	w8, [sp, #23]
100021be4:     	tbnz	w8, #31, 0x100021c10 <benchmark::ParseInt32Flag(char const*, char const*, int*)+0x13c>
100021be8:     	mov	x0, x19
100021bec:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
100021bf0:     	ldr	x0, [sp, #32]
100021bf4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100021bf8:     	ldrsb	w8, [sp, #23]
100021bfc:     	tbz	w8, #31, 0x100021be8 <benchmark::ParseInt32Flag(char const*, char const*, int*)+0x114>
100021c00:     	b	0x100021c10 <benchmark::ParseInt32Flag(char const*, char const*, int*)+0x13c>
100021c04:     	mov	x19, x0
100021c08:     	ldrsb	w8, [sp, #23]
100021c0c:     	tbz	w8, #31, 0x100021be8 <benchmark::ParseInt32Flag(char const*, char const*, int*)+0x114>
100021c10:     	ldr	x0, [sp]
100021c14:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100021c18:     	mov	x0, x19
100021c1c:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100021c20 <benchmark::ParseDoubleFlag(char const*, char const*, double*)>:
100021c20:     	sub	sp, sp, #112
100021c24:     	stp	x22, x21, [sp, #64]
100021c28:     	stp	x20, x19, [sp, #80]
100021c2c:     	stp	x29, x30, [sp, #96]
100021c30:     	add	x29, sp, #96
100021c34:     	mov	x19, x2
100021c38:     	mov	x21, x1
100021c3c:     	mov	w2, #0
100021c40:     	bl	0x100021808 <benchmark::ParseFlagValue(char const*, char const*, bool)>
100021c44:     	cbz	x0, 0x100021cd4 <benchmark::ParseDoubleFlag(char const*, char const*, double*)+0xb4>
100021c48:     	mov	x20, x0
100021c4c:     	mov	w8, #20
100021c50:     	strb	w8, [sp, #23]
100021c54:     	mov	w8, #8295
100021c58:     	movk	w8, #11565, lsl #16
100021c5c:     	str	w8, [sp, #16]
100021c60:     	adrp	x8, 0x100032000 <benchmark::ParseDoubleFlag(char const*, char const*, double*)+0x84>
100021c64:     	add	x8, x8, #565
100021c68:     	ldr	q0, [x8]
100021c6c:     	str	q0, [sp]
100021c70:     	strb	wzr, [sp, #20]
100021c74:     	mov	x0, sp
100021c78:     	mov	x1, x21
100021c7c:     	bl	0x10002ed2c <_vsnprintf+0x10002ed2c>
100021c80:     	ldr	q0, [x0]
100021c84:     	ldr	x8, [x0, #16]
100021c88:     	str	x8, [sp, #48]
100021c8c:     	str	q0, [sp, #32]
100021c90:     	stp	xzr, xzr, [x0, #8]
100021c94:     	str	xzr, [x0]
100021c98:     	add	x0, sp, #32
100021c9c:     	mov	x1, x20
100021ca0:     	mov	x2, x19
100021ca4:     	bl	0x100021118 <benchmark::(anonymous namespace)::ParseDouble(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*, double*)>
100021ca8:     	mov	x19, x0
100021cac:     	ldrsb	w8, [sp, #55]
100021cb0:     	tbnz	w8, #31, 0x100021cf0 <benchmark::ParseDoubleFlag(char const*, char const*, double*)+0xd0>
100021cb4:     	ldrsb	w8, [sp, #23]
100021cb8:     	tbnz	w8, #31, 0x100021d00 <benchmark::ParseDoubleFlag(char const*, char const*, double*)+0xe0>
100021cbc:     	mov	x0, x19
100021cc0:     	ldp	x29, x30, [sp, #96]
100021cc4:     	ldp	x20, x19, [sp, #80]
100021cc8:     	ldp	x22, x21, [sp, #64]
100021ccc:     	add	sp, sp, #112
100021cd0:     	ret
100021cd4:     	mov	w19, #0
100021cd8:     	mov	x0, x19
100021cdc:     	ldp	x29, x30, [sp, #96]
100021ce0:     	ldp	x20, x19, [sp, #80]
100021ce4:     	ldp	x22, x21, [sp, #64]
100021ce8:     	add	sp, sp, #112
100021cec:     	ret
100021cf0:     	ldr	x0, [sp, #32]
100021cf4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100021cf8:     	ldrsb	w8, [sp, #23]
100021cfc:     	tbz	w8, #31, 0x100021cbc <benchmark::ParseDoubleFlag(char const*, char const*, double*)+0x9c>
100021d00:     	ldr	x0, [sp]
100021d04:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100021d08:     	mov	x0, x19
100021d0c:     	ldp	x29, x30, [sp, #96]
100021d10:     	ldp	x20, x19, [sp, #80]
100021d14:     	ldp	x22, x21, [sp, #64]
100021d18:     	add	sp, sp, #112
100021d1c:     	ret
100021d20:     	mov	x19, x0
100021d24:     	ldrsb	w8, [sp, #55]
100021d28:     	tbnz	w8, #31, 0x100021d3c <benchmark::ParseDoubleFlag(char const*, char const*, double*)+0x11c>
100021d2c:     	ldrsb	w8, [sp, #23]
100021d30:     	tbnz	w8, #31, 0x100021d5c <benchmark::ParseDoubleFlag(char const*, char const*, double*)+0x13c>
100021d34:     	mov	x0, x19
100021d38:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
100021d3c:     	ldr	x0, [sp, #32]
100021d40:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100021d44:     	ldrsb	w8, [sp, #23]
100021d48:     	tbz	w8, #31, 0x100021d34 <benchmark::ParseDoubleFlag(char const*, char const*, double*)+0x114>
100021d4c:     	b	0x100021d5c <benchmark::ParseDoubleFlag(char const*, char const*, double*)+0x13c>
100021d50:     	mov	x19, x0
100021d54:     	ldrsb	w8, [sp, #23]
100021d58:     	tbz	w8, #31, 0x100021d34 <benchmark::ParseDoubleFlag(char const*, char const*, double*)+0x114>
100021d5c:     	ldr	x0, [sp]
100021d60:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100021d64:     	mov	x0, x19
100021d68:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100021d6c <benchmark::ParseStringFlag(char const*, char const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)>:
100021d6c:     	stp	x20, x19, [sp, #-32]!
100021d70:     	stp	x29, x30, [sp, #16]
100021d74:     	add	x29, sp, #16
100021d78:     	mov	x19, x2
100021d7c:     	mov	w2, #0
100021d80:     	bl	0x100021808 <benchmark::ParseFlagValue(char const*, char const*, bool)>
100021d84:     	mov	x20, x0
100021d88:     	cbz	x0, 0x100021d98 <benchmark::ParseStringFlag(char const*, char const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x2c>
100021d8c:     	mov	x0, x19
100021d90:     	mov	x1, x20
100021d94:     	bl	0x10002ed44 <_vsnprintf+0x10002ed44>
100021d98:     	cmp	x20, #0
100021d9c:     	cset	w0, ne
100021da0:     	ldp	x29, x30, [sp, #16]
100021da4:     	ldp	x20, x19, [sp], #32
100021da8:     	ret

0000000100021dac <benchmark::ParseKeyValueFlag(char const*, char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>*)>:
100021dac:     	sub	sp, sp, #112
100021db0:     	stp	x24, x23, [sp, #48]
100021db4:     	stp	x22, x21, [sp, #64]
100021db8:     	stp	x20, x19, [sp, #80]
100021dbc:     	stp	x29, x30, [sp, #96]
100021dc0:     	add	x29, sp, #96
100021dc4:     	mov	x19, x2
100021dc8:     	mov	w2, #0
100021dcc:     	bl	0x100021808 <benchmark::ParseFlagValue(char const*, char const*, bool)>
100021dd0:     	cbz	x0, 0x100021e04 <benchmark::ParseKeyValueFlag(char const*, char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>*)+0x58>
100021dd4:     	mov	x21, x0
100021dd8:     	bl	0x10002f254 <_vsnprintf+0x10002f254>
100021ddc:     	mov	x8, #9223372036854775792
100021de0:     	cmp	x0, x8
100021de4:     	b.hs	0x100021fc0 <benchmark::ParseKeyValueFlag(char const*, char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>*)+0x214>
100021de8:     	mov	x20, x0
100021dec:     	cmp	x0, #23
100021df0:     	b.hs	0x100021e0c <benchmark::ParseKeyValueFlag(char const*, char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>*)+0x60>
100021df4:     	strb	w20, [sp, #23]
100021df8:     	mov	x22, sp
100021dfc:     	cbnz	x20, 0x100021e2c <benchmark::ParseKeyValueFlag(char const*, char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>*)+0x80>
100021e00:     	b	0x100021e3c <benchmark::ParseKeyValueFlag(char const*, char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>*)+0x90>
100021e04:     	mov	w20, #0
100021e08:     	b	0x100021fa4 <benchmark::ParseKeyValueFlag(char const*, char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>*)+0x1f8>
100021e0c:     	orr	x8, x20, #0xf
100021e10:     	add	x23, x8, #1
100021e14:     	mov	x0, x23
100021e18:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100021e1c:     	mov	x22, x0
100021e20:     	orr	x8, x23, #0x8000000000000000
100021e24:     	stp	x20, x8, [sp, #8]
100021e28:     	str	x0, [sp]
100021e2c:     	mov	x0, x22
100021e30:     	mov	x1, x21
100021e34:     	mov	x2, x20
100021e38:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
100021e3c:     	strb	wzr, [x22, x20]
100021e40:     	add	x8, sp, #24
100021e44:     	mov	x0, sp
100021e48:     	mov	w1, #44
100021e4c:     	bl	0x10002c6f8 <benchmark::StrSplit(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char)>
100021e50:     	ldrsb	w8, [sp, #23]
100021e54:     	tbnz	w8, #31, 0x100021e68 <benchmark::ParseKeyValueFlag(char const*, char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>*)+0xbc>
100021e58:     	ldp	x21, x23, [sp, #24]
100021e5c:     	cmp	x21, x23
100021e60:     	b.ne	0x100021ea0 <benchmark::ParseKeyValueFlag(char const*, char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>*)+0xf4>
100021e64:     	b	0x100021e7c <benchmark::ParseKeyValueFlag(char const*, char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>*)+0xd0>
100021e68:     	ldr	x0, [sp]
100021e6c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100021e70:     	ldp	x21, x23, [sp, #24]
100021e74:     	cmp	x21, x23
100021e78:     	b.ne	0x100021ea0 <benchmark::ParseKeyValueFlag(char const*, char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>*)+0xf4>
100021e7c:     	mov	w20, #1
100021e80:     	cbnz	x21, 0x100021f60 <benchmark::ParseKeyValueFlag(char const*, char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>*)+0x1b4>
100021e84:     	b	0x100021fa4 <benchmark::ParseKeyValueFlag(char const*, char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>*)+0x1f8>
100021e88:     	ldr	x0, [sp]
100021e8c:     	str	x22, [sp, #8]
100021e90:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100021e94:     	add	x21, x21, #24
100021e98:     	cmp	x21, x23
100021e9c:     	b.eq	0x100021f58 <benchmark::ParseKeyValueFlag(char const*, char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>*)+0x1ac>
100021ea0:     	mov	x8, sp
100021ea4:     	mov	x0, x21
100021ea8:     	mov	w1, #61
100021eac:     	bl	0x10002c6f8 <benchmark::StrSplit(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char)>
100021eb0:     	ldp	x22, x0, [sp]
100021eb4:     	sub	x8, x0, x22
100021eb8:     	cmp	x8, #48
100021ebc:     	cset	w20, eq
100021ec0:     	b.ne	0x100021f18 <benchmark::ParseKeyValueFlag(char const*, char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>*)+0x16c>
100021ec4:     	add	x3, x22, #24
100021ec8:     	mov	x0, x19
100021ecc:     	mov	x1, x22
100021ed0:     	mov	x2, x22
100021ed4:     	bl	0x10000a7c8 <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
100021ed8:     	ldr	x22, [sp]
100021edc:     	cbz	x22, 0x100021e94 <benchmark::ParseKeyValueFlag(char const*, char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>*)+0xe8>
100021ee0:     	ldr	x8, [sp, #8]
100021ee4:     	mov	x0, x22
100021ee8:     	cmp	x8, x22
100021eec:     	b.ne	0x100021f00 <benchmark::ParseKeyValueFlag(char const*, char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>*)+0x154>
100021ef0:     	b	0x100021e8c <benchmark::ParseKeyValueFlag(char const*, char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>*)+0xe0>
100021ef4:     	mov	x8, x24
100021ef8:     	cmp	x24, x22
100021efc:     	b.eq	0x100021e88 <benchmark::ParseKeyValueFlag(char const*, char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>*)+0xdc>
100021f00:     	sub	x24, x8, #24
100021f04:     	ldursb	w9, [x8, #-1]
100021f08:     	tbz	w9, #31, 0x100021ef4 <benchmark::ParseKeyValueFlag(char const*, char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>*)+0x148>
100021f0c:     	ldur	x0, [x8, #-24]
100021f10:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100021f14:     	b	0x100021ef4 <benchmark::ParseKeyValueFlag(char const*, char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>*)+0x148>
100021f18:     	cbz	x22, 0x100021f58 <benchmark::ParseKeyValueFlag(char const*, char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>*)+0x1ac>
100021f1c:     	cmp	x0, x22
100021f20:     	b.ne	0x100021f34 <benchmark::ParseKeyValueFlag(char const*, char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>*)+0x188>
100021f24:     	b	0x100021f50 <benchmark::ParseKeyValueFlag(char const*, char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>*)+0x1a4>
100021f28:     	mov	x0, x19
100021f2c:     	cmp	x19, x22
100021f30:     	b.eq	0x100021f4c <benchmark::ParseKeyValueFlag(char const*, char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>*)+0x1a0>
100021f34:     	sub	x19, x0, #24
100021f38:     	ldursb	w8, [x0, #-1]
100021f3c:     	tbz	w8, #31, 0x100021f28 <benchmark::ParseKeyValueFlag(char const*, char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>*)+0x17c>
100021f40:     	ldur	x0, [x0, #-24]
100021f44:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100021f48:     	b	0x100021f28 <benchmark::ParseKeyValueFlag(char const*, char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>*)+0x17c>
100021f4c:     	ldr	x0, [sp]
100021f50:     	str	x22, [sp, #8]
100021f54:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100021f58:     	ldr	x21, [sp, #24]
100021f5c:     	cbz	x21, 0x100021fa4 <benchmark::ParseKeyValueFlag(char const*, char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>*)+0x1f8>
100021f60:     	ldr	x8, [sp, #32]
100021f64:     	mov	x0, x21
100021f68:     	cmp	x8, x21
100021f6c:     	b.ne	0x100021f80 <benchmark::ParseKeyValueFlag(char const*, char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>*)+0x1d4>
100021f70:     	b	0x100021f9c <benchmark::ParseKeyValueFlag(char const*, char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>*)+0x1f0>
100021f74:     	mov	x8, x19
100021f78:     	cmp	x19, x21
100021f7c:     	b.eq	0x100021f98 <benchmark::ParseKeyValueFlag(char const*, char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>*)+0x1ec>
100021f80:     	sub	x19, x8, #24
100021f84:     	ldursb	w9, [x8, #-1]
100021f88:     	tbz	w9, #31, 0x100021f74 <benchmark::ParseKeyValueFlag(char const*, char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>*)+0x1c8>
100021f8c:     	ldur	x0, [x8, #-24]
100021f90:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100021f94:     	b	0x100021f74 <benchmark::ParseKeyValueFlag(char const*, char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>*)+0x1c8>
100021f98:     	ldr	x0, [sp, #24]
100021f9c:     	str	x21, [sp, #32]
100021fa0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100021fa4:     	mov	x0, x20
100021fa8:     	ldp	x29, x30, [sp, #96]
100021fac:     	ldp	x20, x19, [sp, #80]
100021fb0:     	ldp	x22, x21, [sp, #64]
100021fb4:     	ldp	x24, x23, [sp, #48]
100021fb8:     	add	sp, sp, #112
100021fbc:     	ret
100021fc0:     	mov	x0, sp
100021fc4:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
100021fc8:     	mov	x19, x0
100021fcc:     	ldrsb	w8, [sp, #23]
100021fd0:     	tbz	w8, #31, 0x100022000 <benchmark::ParseKeyValueFlag(char const*, char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>*)+0x254>
100021fd4:     	ldr	x0, [sp]
100021fd8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100021fdc:     	mov	x0, x19
100021fe0:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
100021fe4:     	mov	x19, x0
100021fe8:     	mov	x0, sp
100021fec:     	bl	0x100006bdc <std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::~vector[abi:ue170006]()>
100021ff0:     	b	0x100021ff8 <benchmark::ParseKeyValueFlag(char const*, char const*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>*)+0x24c>
100021ff4:     	mov	x19, x0
100021ff8:     	add	x0, sp, #24
100021ffc:     	bl	0x100006bdc <std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::~vector[abi:ue170006]()>
100022000:     	mov	x0, x19
100022004:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100022008 <benchmark::IsFlag(char const*, char const*)>:
100022008:     	stp	x29, x30, [sp, #-16]!
10002200c:     	mov	x29, sp
100022010:     	mov	w2, #1
100022014:     	bl	0x100021808 <benchmark::ParseFlagValue(char const*, char const*, bool)>
100022018:     	cmp	x0, #0
10002201c:     	cset	w0, ne
100022020:     	ldp	x29, x30, [sp], #16
100022024:     	ret

0000000100022028 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)>:
100022028:     	sub	sp, sp, #128
10002202c:     	stp	x28, x27, [sp, #32]
100022030:     	stp	x26, x25, [sp, #48]
100022034:     	stp	x24, x23, [sp, #64]
100022038:     	stp	x22, x21, [sp, #80]
10002203c:     	stp	x20, x19, [sp, #96]
100022040:     	stp	x29, x30, [sp, #112]
100022044:     	add	x29, sp, #112
100022048:     	mov	x19, x2
10002204c:     	mov	x22, x1
100022050:     	mov	x20, x0
100022054:     	ldr	x8, [x0, #16]
100022058:     	cbz	x8, 0x1000222d4 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x2ac>
10002205c:     	ldr	x8, [x20]
100022060:     	mov	x24, x20
100022064:     	ldr	x9, [x24, #8]!
100022068:     	str	x24, [x20]
10002206c:     	str	xzr, [x9, #16]
100022070:     	str	xzr, [x20, #16]
100022074:     	str	xzr, [x24]
100022078:     	ldr	x9, [x8, #8]
10002207c:     	cmp	x9, #0
100022080:     	csel	x21, x8, x9, eq
100022084:     	str	x20, [sp, #8]
100022088:     	str	x21, [sp, #24]
10002208c:     	cbz	x21, 0x100022294 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x26c>
100022090:     	ldr	x23, [x21, #16]
100022094:     	cbz	x23, 0x1000220c0 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x98>
100022098:     	ldr	x8, [x23]
10002209c:     	cmp	x8, x21
1000220a0:     	b.eq	0x100022344 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x31c>
1000220a4:     	str	xzr, [x23, #8]
1000220a8:     	cbz	x8, 0x1000220c0 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x98>
1000220ac:     	mov	x23, x8
1000220b0:     	ldr	x8, [x8]
1000220b4:     	cbnz	x8, 0x1000220ac <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x84>
1000220b8:     	ldr	x8, [x23, #8]
1000220bc:     	cbnz	x8, 0x1000220ac <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x84>
1000220c0:     	str	x23, [sp, #16]
1000220c4:     	cmp	x22, x19
1000220c8:     	b.eq	0x1000222a0 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x278>
1000220cc:     	mov	x25, x22
1000220d0:     	add	x1, x25, #32
1000220d4:     	add	x22, x21, #32
1000220d8:     	mov	x0, x22
1000220dc:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
1000220e0:     	add	x0, x21, #56
1000220e4:     	add	x1, x25, #56
1000220e8:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
1000220ec:     	ldr	x8, [x24]
1000220f0:     	mov	x23, x24
1000220f4:     	mov	x9, x24
1000220f8:     	cbz	x8, 0x100022178 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x150>
1000220fc:     	ldrb	w9, [x21, #55]
100022100:     	sxtb	w10, w9
100022104:     	ldp	x12, x11, [x21, #32]
100022108:     	cmp	w10, #0
10002210c:     	csel	x26, x11, x9, lt
100022110:     	csel	x22, x12, x22, lt
100022114:     	b	0x100022120 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0xf8>
100022118:     	ldr	x8, [x23, #8]
10002211c:     	cbz	x8, 0x100022240 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x218>
100022120:     	mov	x23, x8
100022124:     	ldr	x9, [x8, #32]!
100022128:     	ldrb	w10, [x8, #23]
10002212c:     	sxtb	w11, w10
100022130:     	ldr	x12, [x8, #8]
100022134:     	cmp	w11, #0
100022138:     	csel	x27, x12, x10, lt
10002213c:     	csel	x1, x9, x8, lt
100022140:     	cmp	x27, x26
100022144:     	csel	x2, x27, x26, lo
100022148:     	mov	x0, x22
10002214c:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
100022150:     	cmp	x26, x27
100022154:     	cset	w8, lo
100022158:     	cmp	w0, #0
10002215c:     	cset	w9, lt
100022160:     	csel	w8, w8, w9, eq
100022164:     	cmp	w8, #1
100022168:     	b.ne	0x100022118 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0xf0>
10002216c:     	ldr	x8, [x23]
100022170:     	mov	x9, x23
100022174:     	cbnz	x8, 0x100022120 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0xf8>
100022178:     	stp	xzr, xzr, [x21]
10002217c:     	str	x23, [x21, #16]
100022180:     	str	x21, [x9]
100022184:     	ldr	x8, [x20]
100022188:     	ldr	x8, [x8]
10002218c:     	cbz	x8, 0x100022198 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x170>
100022190:     	str	x8, [x20]
100022194:     	ldr	x21, [x9]
100022198:     	ldr	x0, [x20, #8]
10002219c:     	mov	x1, x21
1000221a0:     	bl	0x100006fe0 <void std::__1::__tree_balance_after_insert[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)>
1000221a4:     	ldr	x8, [x20, #16]
1000221a8:     	add	x8, x8, #1
1000221ac:     	str	x8, [x20, #16]
1000221b0:     	ldr	x21, [sp, #16]
1000221b4:     	str	x21, [sp, #24]
1000221b8:     	cbz	x21, 0x1000221fc <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x1d4>
1000221bc:     	ldr	x23, [x21, #16]
1000221c0:     	cbz	x23, 0x1000221ec <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x1c4>
1000221c4:     	ldr	x8, [x23]
1000221c8:     	cmp	x8, x21
1000221cc:     	b.eq	0x100022260 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x238>
1000221d0:     	str	xzr, [x23, #8]
1000221d4:     	cbz	x8, 0x1000221ec <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x1c4>
1000221d8:     	mov	x23, x8
1000221dc:     	ldr	x8, [x8]
1000221e0:     	cbnz	x8, 0x1000221d8 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x1b0>
1000221e4:     	ldr	x8, [x23, #8]
1000221e8:     	cbnz	x8, 0x1000221d8 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x1b0>
1000221ec:     	str	x23, [sp, #16]
1000221f0:     	ldr	x8, [x25, #8]
1000221f4:     	cbnz	x8, 0x100022208 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x1e0>
1000221f8:     	b	0x100022218 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x1f0>
1000221fc:     	mov	x23, #0
100022200:     	ldr	x8, [x25, #8]
100022204:     	cbz	x8, 0x100022218 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x1f0>
100022208:     	mov	x22, x8
10002220c:     	ldr	x8, [x8]
100022210:     	cbnz	x8, 0x100022208 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x1e0>
100022214:     	b	0x10002222c <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x204>
100022218:     	ldr	x22, [x25, #16]
10002221c:     	ldr	x8, [x22]
100022220:     	cmp	x8, x25
100022224:     	mov	x25, x22
100022228:     	b.ne	0x100022218 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x1f0>
10002222c:     	cbz	x21, 0x10002227c <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x254>
100022230:     	mov	x25, x22
100022234:     	cmp	x22, x19
100022238:     	b.ne	0x1000220d0 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0xa8>
10002223c:     	b	0x10002227c <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x254>
100022240:     	add	x9, x23, #8
100022244:     	stp	xzr, xzr, [x21]
100022248:     	str	x23, [x21, #16]
10002224c:     	str	x21, [x9]
100022250:     	ldr	x8, [x20]
100022254:     	ldr	x8, [x8]
100022258:     	cbnz	x8, 0x100022190 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x168>
10002225c:     	b	0x100022198 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x170>
100022260:     	str	xzr, [x23]
100022264:     	ldr	x8, [x23, #8]
100022268:     	cbz	x8, 0x1000221ec <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x1c4>
10002226c:     	mov	x23, x8
100022270:     	ldr	x8, [x8]
100022274:     	cbnz	x8, 0x10002226c <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x244>
100022278:     	b	0x100022264 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x23c>
10002227c:     	ldr	x24, [sp, #8]
100022280:     	mov	x0, x24
100022284:     	mov	x1, x21
100022288:     	bl	0x10000a254 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*)>
10002228c:     	cbnz	x23, 0x1000222b4 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x28c>
100022290:     	b	0x1000222d4 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x2ac>
100022294:     	mov	x0, x20
100022298:     	mov	x1, x21
10002229c:     	b	0x1000222d0 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x2a8>
1000222a0:     	mov	x24, x20
1000222a4:     	mov	x0, x24
1000222a8:     	mov	x1, x21
1000222ac:     	bl	0x10000a254 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*)>
1000222b0:     	cbz	x23, 0x1000222d4 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x2ac>
1000222b4:     	ldr	x8, [x23, #16]
1000222b8:     	cbz	x8, 0x1000222c8 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x2a0>
1000222bc:     	mov	x23, x8
1000222c0:     	ldr	x8, [x8, #16]
1000222c4:     	cbnz	x8, 0x1000222bc <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x294>
1000222c8:     	mov	x0, x24
1000222cc:     	mov	x1, x23
1000222d0:     	bl	0x10000a254 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*)>
1000222d4:     	cmp	x22, x19
1000222d8:     	b.ne	0x100022308 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x2e0>
1000222dc:     	ldp	x29, x30, [sp, #112]
1000222e0:     	ldp	x20, x19, [sp, #96]
1000222e4:     	ldp	x22, x21, [sp, #80]
1000222e8:     	ldp	x24, x23, [sp, #64]
1000222ec:     	ldp	x26, x25, [sp, #48]
1000222f0:     	ldp	x28, x27, [sp, #32]
1000222f4:     	add	sp, sp, #128
1000222f8:     	ret
1000222fc:     	mov	x22, x8
100022300:     	cmp	x8, x19
100022304:     	b.eq	0x1000222dc <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x2b4>
100022308:     	add	x1, x22, #32
10002230c:     	mov	x0, x20
100022310:     	bl	0x1000223c8 <std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__emplace_multi<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>> const&>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>> const&)>
100022314:     	ldr	x9, [x22, #8]
100022318:     	cbz	x9, 0x10002232c <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x304>
10002231c:     	mov	x8, x9
100022320:     	ldr	x9, [x9]
100022324:     	cbnz	x9, 0x10002231c <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x2f4>
100022328:     	b	0x1000222fc <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x2d4>
10002232c:     	ldr	x8, [x22, #16]
100022330:     	ldr	x9, [x8]
100022334:     	cmp	x9, x22
100022338:     	mov	x22, x8
10002233c:     	b.ne	0x10002232c <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x304>
100022340:     	b	0x1000222fc <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x2d4>
100022344:     	str	xzr, [x23]
100022348:     	ldr	x8, [x23, #8]
10002234c:     	cbz	x8, 0x1000220c0 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x98>
100022350:     	mov	x23, x8
100022354:     	ldr	x8, [x8]
100022358:     	cbnz	x8, 0x100022350 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x328>
10002235c:     	b	0x100022348 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long>)+0x320>
100022360:     	mov	x19, x0
100022364:     	add	x0, sp, #8
100022368:     	bl	0x100022374 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ue170006]()>
10002236c:     	mov	x0, x19
100022370:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100022374 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ue170006]()>:
100022374:     	stp	x20, x19, [sp, #-32]!
100022378:     	stp	x29, x30, [sp, #16]
10002237c:     	add	x29, sp, #16
100022380:     	mov	x19, x0
100022384:     	ldr	x0, [x0]
100022388:     	ldr	x1, [x19, #16]
10002238c:     	bl	0x10000a254 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*)>
100022390:     	ldr	x1, [x19, #8]
100022394:     	cbz	x1, 0x1000223b8 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ue170006]()+0x44>
100022398:     	ldr	x8, [x1, #16]
10002239c:     	cbz	x8, 0x1000223b0 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ue170006]()+0x3c>
1000223a0:     	mov	x1, x8
1000223a4:     	ldr	x8, [x8, #16]
1000223a8:     	cbnz	x8, 0x1000223a0 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ue170006]()+0x2c>
1000223ac:     	str	x1, [x19, #8]
1000223b0:     	ldr	x0, [x19]
1000223b4:     	bl	0x10000a254 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*)>
1000223b8:     	mov	x0, x19
1000223bc:     	ldp	x29, x30, [sp, #16]
1000223c0:     	ldp	x20, x19, [sp], #32
1000223c4:     	ret

00000001000223c8 <std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__emplace_multi<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>> const&>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>> const&)>:
1000223c8:     	sub	sp, sp, #96
1000223cc:     	stp	x24, x23, [sp, #32]
1000223d0:     	stp	x22, x21, [sp, #48]
1000223d4:     	stp	x20, x19, [sp, #64]
1000223d8:     	stp	x29, x30, [sp, #80]
1000223dc:     	add	x29, sp, #80
1000223e0:     	mov	x21, x1
1000223e4:     	mov	x19, x0
1000223e8:     	add	x22, x0, #8
1000223ec:     	mov	w0, #80
1000223f0:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
1000223f4:     	mov	x20, x0
1000223f8:     	stp	x0, x22, [sp, #8]
1000223fc:     	strb	wzr, [sp, #24]
100022400:     	add	x0, x0, #32
100022404:     	mov	x1, x21
100022408:     	bl	0x100022584 <std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>::pair[abi:ue170006](std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>> const&)>
10002240c:     	ldr	x8, [x22]
100022410:     	mov	x9, x22
100022414:     	cbz	x8, 0x100022494 <std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__emplace_multi<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>> const&>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>> const&)+0xcc>
100022418:     	ldrb	w9, [x20, #55]
10002241c:     	sxtb	w10, w9
100022420:     	ldp	x12, x11, [x20, #32]
100022424:     	cmp	w10, #0
100022428:     	csel	x23, x11, x9, lt
10002242c:     	csel	x21, x12, x0, lt
100022430:     	b	0x10002243c <std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__emplace_multi<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>> const&>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>> const&)+0x74>
100022434:     	ldr	x8, [x22, #8]
100022438:     	cbz	x8, 0x1000224e8 <std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__emplace_multi<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>> const&>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>> const&)+0x120>
10002243c:     	mov	x22, x8
100022440:     	ldr	x9, [x8, #32]!
100022444:     	ldrb	w10, [x8, #23]
100022448:     	sxtb	w11, w10
10002244c:     	ldr	x12, [x8, #8]
100022450:     	cmp	w11, #0
100022454:     	csel	x24, x12, x10, lt
100022458:     	csel	x1, x9, x8, lt
10002245c:     	cmp	x24, x23
100022460:     	csel	x2, x24, x23, lo
100022464:     	mov	x0, x21
100022468:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
10002246c:     	cmp	x23, x24
100022470:     	cset	w8, lo
100022474:     	cmp	w0, #0
100022478:     	cset	w9, lt
10002247c:     	csel	w8, w8, w9, eq
100022480:     	cmp	w8, #1
100022484:     	b.ne	0x100022434 <std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__emplace_multi<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>> const&>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>> const&)+0x6c>
100022488:     	ldr	x8, [x22]
10002248c:     	mov	x9, x22
100022490:     	cbnz	x8, 0x10002243c <std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__emplace_multi<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>> const&>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>> const&)+0x74>
100022494:     	stp	xzr, xzr, [x20]
100022498:     	str	x22, [x20, #16]
10002249c:     	str	x20, [x9]
1000224a0:     	ldr	x8, [x19]
1000224a4:     	ldr	x8, [x8]
1000224a8:     	cbz	x8, 0x1000224b4 <std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__emplace_multi<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>> const&>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>> const&)+0xec>
1000224ac:     	str	x8, [x19]
1000224b0:     	ldr	x20, [x9]
1000224b4:     	ldr	x0, [x19, #8]
1000224b8:     	mov	x1, x20
1000224bc:     	bl	0x100006fe0 <void std::__1::__tree_balance_after_insert[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)>
1000224c0:     	ldr	x8, [x19, #16]
1000224c4:     	add	x8, x8, #1
1000224c8:     	str	x8, [x19, #16]
1000224cc:     	ldr	x0, [sp, #8]
1000224d0:     	ldp	x29, x30, [sp, #80]
1000224d4:     	ldp	x20, x19, [sp, #64]
1000224d8:     	ldp	x22, x21, [sp, #48]
1000224dc:     	ldp	x24, x23, [sp, #32]
1000224e0:     	add	sp, sp, #96
1000224e4:     	ret
1000224e8:     	add	x9, x22, #8
1000224ec:     	stp	xzr, xzr, [x20]
1000224f0:     	str	x22, [x20, #16]
1000224f4:     	str	x20, [x9]
1000224f8:     	ldr	x8, [x19]
1000224fc:     	ldr	x8, [x8]
100022500:     	cbnz	x8, 0x1000224ac <std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__emplace_multi<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>> const&>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>> const&)+0xe4>
100022504:     	b	0x1000224b4 <std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>*, long> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>::__emplace_multi<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>> const&>(std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>> const&)+0xec>
100022508:     	mov	x19, x0
10002250c:     	add	x0, sp, #8
100022510:     	bl	0x10002251c <std::__1::unique_ptr<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>, std::__1::__tree_node_destructor<std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>>>>::~unique_ptr[abi:ue170006]()>
100022514:     	mov	x0, x19
100022518:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010002251c <std::__1::unique_ptr<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>, std::__1::__tree_node_destructor<std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>>>>::~unique_ptr[abi:ue170006]()>:
10002251c:     	stp	x20, x19, [sp, #-32]!
100022520:     	stp	x29, x30, [sp, #16]
100022524:     	add	x29, sp, #16
100022528:     	mov	x19, x0
10002252c:     	ldr	x20, [x0]
100022530:     	str	xzr, [x0]
100022534:     	cbz	x20, 0x100022558 <std::__1::unique_ptr<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>, std::__1::__tree_node_destructor<std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>>>>::~unique_ptr[abi:ue170006]()+0x3c>
100022538:     	ldrb	w8, [x19, #16]
10002253c:     	cbz	w8, 0x100022550 <std::__1::unique_ptr<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>, std::__1::__tree_node_destructor<std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>>>>::~unique_ptr[abi:ue170006]()+0x34>
100022540:     	ldrsb	w8, [x20, #79]
100022544:     	tbnz	w8, #31, 0x100022568 <std::__1::unique_ptr<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>, std::__1::__tree_node_destructor<std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>>>>::~unique_ptr[abi:ue170006]()+0x4c>
100022548:     	ldrsb	w8, [x20, #55]
10002254c:     	tbnz	w8, #31, 0x100022578 <std::__1::unique_ptr<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>, std::__1::__tree_node_destructor<std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>>>>::~unique_ptr[abi:ue170006]()+0x5c>
100022550:     	mov	x0, x20
100022554:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100022558:     	mov	x0, x19
10002255c:     	ldp	x29, x30, [sp, #16]
100022560:     	ldp	x20, x19, [sp], #32
100022564:     	ret
100022568:     	ldr	x0, [x20, #56]
10002256c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100022570:     	ldrsb	w8, [x20, #55]
100022574:     	tbz	w8, #31, 0x100022550 <std::__1::unique_ptr<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>, std::__1::__tree_node_destructor<std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>>>>::~unique_ptr[abi:ue170006]()+0x34>
100022578:     	ldr	x0, [x20, #32]
10002257c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100022580:     	b	0x100022550 <std::__1::unique_ptr<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>, std::__1::__tree_node_destructor<std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, void*>>>>::~unique_ptr[abi:ue170006]()+0x34>

0000000100022584 <std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>::pair[abi:ue170006](std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>> const&)>:
100022584:     	stp	x24, x23, [sp, #-64]!
100022588:     	stp	x22, x21, [sp, #16]
10002258c:     	stp	x20, x19, [sp, #32]
100022590:     	stp	x29, x30, [sp, #48]
100022594:     	add	x29, sp, #48
100022598:     	mov	x20, x1
10002259c:     	mov	x19, x0
1000225a0:     	ldrsb	w8, [x1, #23]
1000225a4:     	tbnz	w8, #31, 0x1000225f0 <std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>::pair[abi:ue170006](std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>> const&)+0x6c>
1000225a8:     	ldr	q0, [x20]
1000225ac:     	ldr	x8, [x20, #16]
1000225b0:     	str	x8, [x19, #16]
1000225b4:     	str	q0, [x19]
1000225b8:     	add	x0, x19, #24
1000225bc:     	ldrsb	w8, [x20, #47]
1000225c0:     	tbnz	w8, #31, 0x10002264c <std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>::pair[abi:ue170006](std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>> const&)+0xc8>
1000225c4:     	add	x8, x20, #24
1000225c8:     	ldr	q0, [x8]
1000225cc:     	ldr	x8, [x8, #16]
1000225d0:     	str	x8, [x0, #16]
1000225d4:     	str	q0, [x0]
1000225d8:     	mov	x0, x19
1000225dc:     	ldp	x29, x30, [sp, #48]
1000225e0:     	ldp	x20, x19, [sp, #32]
1000225e4:     	ldp	x22, x21, [sp, #16]
1000225e8:     	ldp	x24, x23, [sp], #64
1000225ec:     	ret
1000225f0:     	ldp	x21, x23, [x20]
1000225f4:     	cmp	x23, #22
1000225f8:     	b.hi	0x100022608 <std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>::pair[abi:ue170006](std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>> const&)+0x84>
1000225fc:     	strb	w23, [x19, #23]
100022600:     	mov	x0, x19
100022604:     	b	0x100022634 <std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>::pair[abi:ue170006](std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>> const&)+0xb0>
100022608:     	mov	x8, #-17
10002260c:     	movk	x8, #32767, lsl #48
100022610:     	cmp	x23, x8
100022614:     	b.hi	0x1000226b0 <std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>::pair[abi:ue170006](std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>> const&)+0x12c>
100022618:     	orr	x8, x23, #0xf
10002261c:     	add	x22, x8, #1
100022620:     	mov	x0, x22
100022624:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100022628:     	orr	x8, x22, #0x8000000000000000
10002262c:     	stp	x23, x8, [x19, #8]
100022630:     	str	x0, [x19]
100022634:     	add	x2, x23, #1
100022638:     	mov	x1, x21
10002263c:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
100022640:     	add	x0, x19, #24
100022644:     	ldrsb	w8, [x20, #47]
100022648:     	tbz	w8, #31, 0x1000225c4 <std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>::pair[abi:ue170006](std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>> const&)+0x40>
10002264c:     	ldp	x21, x22, [x20, #24]
100022650:     	cmp	x22, #22
100022654:     	b.hi	0x100022660 <std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>::pair[abi:ue170006](std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>> const&)+0xdc>
100022658:     	strb	w22, [x19, #47]
10002265c:     	b	0x10002268c <std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>::pair[abi:ue170006](std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>> const&)+0x108>
100022660:     	mov	x8, #-17
100022664:     	movk	x8, #32767, lsl #48
100022668:     	cmp	x22, x8
10002266c:     	b.hi	0x1000226b8 <std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>::pair[abi:ue170006](std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>> const&)+0x134>
100022670:     	orr	x8, x22, #0xf
100022674:     	add	x20, x8, #1
100022678:     	mov	x0, x20
10002267c:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100022680:     	orr	x8, x20, #0x8000000000000000
100022684:     	stp	x22, x8, [x19, #32]
100022688:     	str	x0, [x19, #24]
10002268c:     	add	x2, x22, #1
100022690:     	mov	x1, x21
100022694:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
100022698:     	mov	x0, x19
10002269c:     	ldp	x29, x30, [sp, #48]
1000226a0:     	ldp	x20, x19, [sp, #32]
1000226a4:     	ldp	x22, x21, [sp, #16]
1000226a8:     	ldp	x24, x23, [sp], #64
1000226ac:     	ret
1000226b0:     	mov	x0, x19
1000226b4:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
1000226b8:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
1000226bc:     	brk	#0x1
1000226c0:     	mov	x20, x0
1000226c4:     	ldrsb	w8, [x19, #23]
1000226c8:     	tbz	w8, #31, 0x1000226d4 <std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>::pair[abi:ue170006](std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>> const&)+0x150>
1000226cc:     	ldr	x0, [x19]
1000226d0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000226d4:     	mov	x0, x20
1000226d8:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

00000001000226dc <benchmark::FittingCurve(benchmark::BigO)>:
1000226dc:     	sub	w8, w0, #2
1000226e0:     	cmp	w8, #4
1000226e4:     	b.hi	0x1000226f8 <benchmark::FittingCurve(benchmark::BigO)+0x1c>
1000226e8:     	adrp	x9, 0x100034000 <benchmark::GetBigOString(benchmark::BigO)+0x2c>
1000226ec:     	add	x9, x9, #3224
1000226f0:     	ldr	x0, [x9, w8, sxtw #3]
1000226f4:     	ret
1000226f8:     	adrp	x0, 0x100023000 <benchmark::FittingCurve(benchmark::BigO)+0x20>
1000226fc:     	add	x0, x0, #2752
100022700:     	ret

0000000100022704 <benchmark::GetBigOString(benchmark::BigO)>:
100022704:     	sub	w9, w0, #1
100022708:     	cmp	w9, #5
10002270c:     	b.hi	0x100022740 <benchmark::GetBigOString(benchmark::BigO)+0x3c>
100022710:     	adrp	x10, 0x100033000 <benchmark::GetBigOString(benchmark::BigO)+0x50>
100022714:     	add	x10, x10, #584
100022718:     	adr	x11, #16
10002271c:     	ldrb	w12, [x10, x9]
100022720:     	add	x11, x11, x12, lsl #2
100022724:     	br	x11
100022728:     	mov	w9, #3
10002272c:     	strb	w9, [x8, #23]
100022730:     	mov	w9, #12584
100022734:     	movk	w9, #41, lsl #16
100022738:     	str	w9, [x8]
10002273c:     	ret
100022740:     	mov	w9, #4
100022744:     	strb	w9, [x8, #23]
100022748:     	mov	w9, #10342
10002274c:     	movk	w9, #10574, lsl #16
100022750:     	str	w9, [x8]
100022754:     	strb	wzr, [x8, #4]
100022758:     	ret
10002275c:     	mov	w9, #1
100022760:     	strb	w9, [x8, #23]
100022764:     	mov	w9, #78
100022768:     	strh	w9, [x8]
10002276c:     	ret
100022770:     	mov	w9, #3
100022774:     	strb	w9, [x8, #23]
100022778:     	mov	w9, #24142
10002277c:     	movk	w9, #50, lsl #16
100022780:     	str	w9, [x8]
100022784:     	ret
100022788:     	mov	w9, #3
10002278c:     	strb	w9, [x8, #23]
100022790:     	mov	w9, #24142
100022794:     	movk	w9, #51, lsl #16
100022798:     	str	w9, [x8]
10002279c:     	ret
1000227a0:     	mov	w9, #3
1000227a4:     	strb	w9, [x8, #23]
1000227a8:     	mov	w9, #26476
1000227ac:     	movk	w9, #78, lsl #16
1000227b0:     	str	w9, [x8]
1000227b4:     	ret
1000227b8:     	mov	w9, #4
1000227bc:     	strb	w9, [x8, #23]
1000227c0:     	mov	w9, #27726
1000227c4:     	movk	w9, #20071, lsl #16
1000227c8:     	str	w9, [x8]
1000227cc:     	strb	wzr, [x8, #4]
1000227d0:     	ret

00000001000227d4 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, double (*)(long long))>:
1000227d4:     	stp	d11, d10, [sp, #-96]!
1000227d8:     	stp	d9, d8, [sp, #16]
1000227dc:     	stp	x24, x23, [sp, #32]
1000227e0:     	stp	x22, x21, [sp, #48]
1000227e4:     	stp	x20, x19, [sp, #64]
1000227e8:     	stp	x29, x30, [sp, #80]
1000227ec:     	add	x29, sp, #80
1000227f0:     	mov	x19, x8
1000227f4:     	ldp	x8, x9, [x0]
1000227f8:     	cmp	x9, x8
1000227fc:     	b.eq	0x1000228b8 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, double (*)(long long))+0xe4>
100022800:     	mov	x20, x2
100022804:     	mov	x21, x1
100022808:     	mov	x22, x0
10002280c:     	mov	x23, #0
100022810:     	movi	d9, #0000000000000000
100022814:     	movi	d8, #0000000000000000
100022818:     	movi	d10, #0000000000000000
10002281c:     	lsl	x24, x23, #3
100022820:     	ldr	x0, [x8, x24]
100022824:     	blr	x20
100022828:     	fmadd	d9, d0, d0, d9
10002282c:     	ldr	x8, [x21]
100022830:     	ldr	d1, [x8, x24]
100022834:     	fadd	d8, d8, d1
100022838:     	fmadd	d10, d1, d0, d10
10002283c:     	add	x23, x23, #1
100022840:     	ldp	x8, x10, [x22]
100022844:     	sub	x9, x10, x8
100022848:     	asr	x9, x9, #3
10002284c:     	cmp	x23, x9
100022850:     	b.lo	0x10002281c <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, double (*)(long long))+0x48>
100022854:     	fdiv	d10, d10, d9
100022858:     	str	xzr, [x19, #8]
10002285c:     	mov	w11, #8
100022860:     	str	w11, [x19, #16]
100022864:     	str	d10, [x19]
100022868:     	cmp	x10, x8
10002286c:     	b.eq	0x1000228d0 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, double (*)(long long))+0xfc>
100022870:     	mov	x23, #0
100022874:     	movi	d9, #0000000000000000
100022878:     	lsl	x24, x23, #3
10002287c:     	ldr	x0, [x8, x24]
100022880:     	blr	x20
100022884:     	fmul	d0, d10, d0
100022888:     	ldr	x8, [x21]
10002288c:     	ldr	d1, [x8, x24]
100022890:     	fsub	d0, d1, d0
100022894:     	fmul	d0, d0, d0
100022898:     	fadd	d9, d9, d0
10002289c:     	add	x23, x23, #1
1000228a0:     	ldp	x8, x9, [x22]
1000228a4:     	sub	x9, x9, x8
1000228a8:     	asr	x9, x9, #3
1000228ac:     	cmp	x23, x9
1000228b0:     	b.lo	0x100022878 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, double (*)(long long))+0xa4>
1000228b4:     	b	0x1000228d4 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, double (*)(long long))+0x100>
1000228b8:     	mov	x9, #0
1000228bc:     	mov	w8, #8
1000228c0:     	str	w8, [x19, #16]
1000228c4:     	mov	x8, #9221120237041090560
1000228c8:     	str	x8, [x19]
1000228cc:     	movi	d8, #0000000000000000
1000228d0:     	movi	d9, #0000000000000000
1000228d4:     	ucvtf	d0, x9
1000228d8:     	fdiv	d1, d8, d0
1000228dc:     	fdiv	d0, d9, d0
1000228e0:     	fsqrt	d0, d0
1000228e4:     	fdiv	d0, d0, d1
1000228e8:     	str	d0, [x19, #8]
1000228ec:     	ldp	x29, x30, [sp, #80]
1000228f0:     	ldp	x20, x19, [sp, #64]
1000228f4:     	ldp	x22, x21, [sp, #48]
1000228f8:     	ldp	x24, x23, [sp, #32]
1000228fc:     	ldp	d9, d8, [sp, #16]
100022900:     	ldp	d11, d10, [sp], #96
100022904:     	ret

0000000100022908 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)>:
100022908:     	stp	d11, d10, [sp, #-128]!
10002290c:     	stp	d9, d8, [sp, #16]
100022910:     	stp	x28, x27, [sp, #32]
100022914:     	stp	x26, x25, [sp, #48]
100022918:     	stp	x24, x23, [sp, #64]
10002291c:     	stp	x22, x21, [sp, #80]
100022920:     	stp	x20, x19, [sp, #96]
100022924:     	stp	x29, x30, [sp, #112]
100022928:     	add	x29, sp, #112
10002292c:     	mov	x22, x2
100022930:     	mov	x20, x1
100022934:     	mov	x21, x0
100022938:     	mov	x19, x8
10002293c:     	adrp	x23, 0x100038000 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x8c>
100022940:     	add	x23, x23, #8
100022944:     	ldaprb	w8, [x23]
100022948:     	tbz	w8, #0, 0x100022e24 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x51c>
10002294c:     	ldaprb	w8, [x23]
100022950:     	tbz	w8, #0, 0x100022e4c <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x544>
100022954:     	ldaprb	w8, [x23]
100022958:     	tbz	w8, #0, 0x100022e74 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x56c>
10002295c:     	stp	xzr, xzr, [x19]
100022960:     	str	wzr, [x19, #16]
100022964:     	sub	w8, w22, #2
100022968:     	cmp	w8, #5
10002296c:     	b.hi	0x1000229a8 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0xa0>
100022970:     	adrp	x23, 0x100023000 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x6c>
100022974:     	add	x23, x23, #2612
100022978:     	adrp	x9, 0x100033000 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0xb4>
10002297c:     	add	x9, x9, #590
100022980:     	adr	x10, #16
100022984:     	ldrb	w11, [x9, x8]
100022988:     	add	x10, x10, x11, lsl #2
10002298c:     	br	x10
100022990:     	adrp	x23, 0x100023000 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x8c>
100022994:     	add	x23, x23, #2620
100022998:     	ldp	x8, x9, [x21]
10002299c:     	cmp	x9, x8
1000229a0:     	b.ne	0x1000229ec <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0xe4>
1000229a4:     	b	0x100022a9c <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x194>
1000229a8:     	adrp	x23, 0x100023000 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0xa4>
1000229ac:     	add	x23, x23, #2752
1000229b0:     	ldp	x8, x9, [x21]
1000229b4:     	cmp	x9, x8
1000229b8:     	b.ne	0x1000229ec <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0xe4>
1000229bc:     	b	0x100022a9c <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x194>
1000229c0:     	adrp	x23, 0x100023000 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0xbc>
1000229c4:     	add	x23, x23, #2632
1000229c8:     	ldp	x8, x9, [x21]
1000229cc:     	cmp	x9, x8
1000229d0:     	b.ne	0x1000229ec <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0xe4>
1000229d4:     	b	0x100022a9c <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x194>
1000229d8:     	adrp	x23, 0x100023000 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0xd4>
1000229dc:     	add	x23, x23, #2644
1000229e0:     	ldp	x8, x9, [x21]
1000229e4:     	cmp	x9, x8
1000229e8:     	b.eq	0x100022a9c <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x194>
1000229ec:     	mov	x24, #0
1000229f0:     	movi	d9, #0000000000000000
1000229f4:     	movi	d8, #0000000000000000
1000229f8:     	movi	d10, #0000000000000000
1000229fc:     	lsl	x25, x24, #3
100022a00:     	ldr	x0, [x8, x25]
100022a04:     	blr	x23
100022a08:     	fmadd	d9, d0, d0, d9
100022a0c:     	ldr	x8, [x20]
100022a10:     	ldr	d1, [x8, x25]
100022a14:     	fadd	d8, d8, d1
100022a18:     	fmadd	d10, d1, d0, d10
100022a1c:     	add	x24, x24, #1
100022a20:     	ldp	x8, x10, [x21]
100022a24:     	sub	x9, x10, x8
100022a28:     	asr	x9, x9, #3
100022a2c:     	cmp	x24, x9
100022a30:     	b.lo	0x1000229fc <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0xf4>
100022a34:     	fdiv	d9, d10, d9
100022a38:     	cmp	x10, x8
100022a3c:     	b.eq	0x100022aac <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x1a4>
100022a40:     	mov	x24, #0
100022a44:     	movi	d10, #0000000000000000
100022a48:     	lsl	x25, x24, #3
100022a4c:     	ldr	x0, [x8, x25]
100022a50:     	blr	x23
100022a54:     	fmul	d0, d9, d0
100022a58:     	ldr	x8, [x20]
100022a5c:     	ldr	d1, [x8, x25]
100022a60:     	fsub	d0, d1, d0
100022a64:     	fmul	d0, d0, d0
100022a68:     	fadd	d10, d10, d0
100022a6c:     	add	x24, x24, #1
100022a70:     	ldp	x8, x9, [x21]
100022a74:     	sub	x9, x9, x8
100022a78:     	asr	x9, x9, #3
100022a7c:     	cmp	x24, x9
100022a80:     	b.lo	0x100022a48 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x140>
100022a84:     	b	0x100022ab0 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x1a8>
100022a88:     	adrp	x23, 0x100023000 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x184>
100022a8c:     	add	x23, x23, #2692
100022a90:     	ldp	x8, x9, [x21]
100022a94:     	cmp	x9, x8
100022a98:     	b.ne	0x1000229ec <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0xe4>
100022a9c:     	mov	x9, #0
100022aa0:     	movi	d8, #0000000000000000
100022aa4:     	mov	x8, #9221120237041090560
100022aa8:     	fmov	d9, x8
100022aac:     	movi	d10, #0000000000000000
100022ab0:     	ucvtf	d0, x9
100022ab4:     	fdiv	d1, d8, d0
100022ab8:     	fdiv	d0, d10, d0
100022abc:     	fsqrt	d0, d0
100022ac0:     	fdiv	d0, d0, d1
100022ac4:     	stp	d9, d0, [x19]
100022ac8:     	str	w22, [x19, #16]
100022acc:     	ldp	x29, x30, [sp, #112]
100022ad0:     	ldp	x20, x19, [sp, #96]
100022ad4:     	ldp	x22, x21, [sp, #80]
100022ad8:     	ldp	x24, x23, [sp, #64]
100022adc:     	ldp	x26, x25, [sp, #48]
100022ae0:     	ldp	x28, x27, [sp, #32]
100022ae4:     	ldp	d9, d8, [sp, #16]
100022ae8:     	ldp	d11, d10, [sp], #128
100022aec:     	ret
100022af0:     	mov	w0, #20
100022af4:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100022af8:     	mov	x22, x0
100022afc:     	mov	w8, #4
100022b00:     	adrp	x9, 0x100033000 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x23c>
100022b04:     	add	x9, x9, #596
100022b08:     	str	w8, [x0, #16]
100022b0c:     	ldr	q0, [x9]
100022b10:     	str	q0, [x0]
100022b14:     	ldp	x8, x9, [x21]
100022b18:     	subs	x10, x9, x8
100022b1c:     	b.eq	0x100022b48 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x240>
100022b20:     	ldr	x11, [x20]
100022b24:     	asr	x10, x10, #3
100022b28:     	cmp	x10, #1
100022b2c:     	csinc	x12, x10, xzr, hi
100022b30:     	cmp	x12, #4
100022b34:     	b.hs	0x100022b60 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x258>
100022b38:     	mov	x13, #0
100022b3c:     	movi.2d	v0, #0000000000000000
100022b40:     	movi	d1, #0000000000000000
100022b44:     	b	0x100022bc8 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x2c0>
100022b48:     	movi	d0, #0000000000000000
100022b4c:     	mov	x10, #9221120237041090560
100022b50:     	fmov	d1, x10
100022b54:     	movi	d2, #0000000000000000
100022b58:     	movi	d3, #0000000000000000
100022b5c:     	b	0x100022ca4 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x39c>
100022b60:     	and	x13, x12, #0xfffffffffffffffc
100022b64:     	add	x15, x11, #16
100022b68:     	movi.2d	v0, #0000000000000000
100022b6c:     	movi	d1, #0000000000000000
100022b70:     	fmov	d2, #1.00000000
100022b74:     	mov	x14, x13
100022b78:     	sub	x16, x15, #16
100022b7c:     	sub	x17, x15, #8
100022b80:     	fadd	d1, d1, d2
100022b84:     	fadd	d1, d1, d2
100022b88:     	fadd	d1, d1, d2
100022b8c:     	ld1r.2d	{ v3 }, [x16]
100022b90:     	fadd.2d	v0, v0, v3
100022b94:     	ld1r.2d	{ v3 }, [x17]
100022b98:     	fadd	d1, d1, d2
100022b9c:     	fadd.2d	v0, v0, v3
100022ba0:     	add	x16, x15, #32
100022ba4:     	ld1r.2d	{ v3 }, [x15], #8
100022ba8:     	fadd.2d	v0, v0, v3
100022bac:     	ld1r.2d	{ v3 }, [x15]
100022bb0:     	fadd.2d	v0, v0, v3
100022bb4:     	mov	x15, x16
100022bb8:     	subs	x14, x14, #4
100022bbc:     	b.ne	0x100022b78 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x270>
100022bc0:     	cmp	x12, x13
100022bc4:     	b.eq	0x100022be8 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x2e0>
100022bc8:     	sub	x14, x12, x13
100022bcc:     	add	x13, x11, x13, lsl #3
100022bd0:     	fmov	d2, #1.00000000
100022bd4:     	fadd	d1, d1, d2
100022bd8:     	ld1r.2d	{ v3 }, [x13], #8
100022bdc:     	fadd.2d	v0, v0, v3
100022be0:     	subs	x14, x14, #1
100022be4:     	b.ne	0x100022bd4 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x2cc>
100022be8:     	mov	d2, v0[1]
100022bec:     	fdiv	d1, d2, d1
100022bf0:     	cmp	x12, #8
100022bf4:     	b.hs	0x100022c04 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x2fc>
100022bf8:     	mov	x13, #0
100022bfc:     	movi	d2, #0000000000000000
100022c00:     	b	0x100022c80 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x378>
100022c04:     	and	x13, x12, #0xfffffffffffffff8
100022c08:     	dup.2d	v3, v1[0]
100022c0c:     	add	x14, x11, #32
100022c10:     	movi	d2, #0000000000000000
100022c14:     	mov	x15, x13
100022c18:     	ldp	q4, q5, [x14, #-32]
100022c1c:     	ldp	q6, q7, [x14], #64
100022c20:     	fsub.2d	v4, v4, v3
100022c24:     	fsub.2d	v5, v5, v3
100022c28:     	fsub.2d	v6, v6, v3
100022c2c:     	fsub.2d	v7, v7, v3
100022c30:     	fmul.2d	v4, v4, v4
100022c34:     	mov	d16, v4[1]
100022c38:     	fmul.2d	v5, v5, v5
100022c3c:     	mov	d17, v5[1]
100022c40:     	fmul.2d	v6, v6, v6
100022c44:     	mov	d18, v6[1]
100022c48:     	fmul.2d	v7, v7, v7
100022c4c:     	mov	d19, v7[1]
100022c50:     	fadd	d2, d2, d4
100022c54:     	fadd	d2, d2, d16
100022c58:     	fadd	d2, d2, d5
100022c5c:     	fadd	d2, d2, d17
100022c60:     	fadd	d2, d2, d6
100022c64:     	fadd	d2, d2, d18
100022c68:     	fadd	d2, d2, d7
100022c6c:     	fadd	d2, d2, d19
100022c70:     	subs	x15, x15, #8
100022c74:     	b.ne	0x100022c18 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x310>
100022c78:     	cmp	x12, x13
100022c7c:     	b.eq	0x100022ca0 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x398>
100022c80:     	sub	x12, x12, x13
100022c84:     	add	x11, x11, x13, lsl #3
100022c88:     	ldr	d3, [x11], #8
100022c8c:     	fsub	d3, d3, d1
100022c90:     	fmul	d3, d3, d3
100022c94:     	fadd	d2, d2, d3
100022c98:     	subs	x12, x12, #1
100022c9c:     	b.ne	0x100022c88 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x380>
100022ca0:     	ucvtf	d3, x10
100022ca4:     	mov	x23, #0
100022ca8:     	fdiv	d0, d0, d3
100022cac:     	fdiv	d2, d2, d3
100022cb0:     	fsqrt	d2, d2
100022cb4:     	fdiv	d8, d2, d0
100022cb8:     	stp	d1, d8, [x19]
100022cbc:     	mov	w10, #1
100022cc0:     	str	w10, [x19, #16]
100022cc4:     	adrp	x24, 0x100023000 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x3c0>
100022cc8:     	add	x24, x24, #2752
100022ccc:     	adrp	x25, 0x100034000 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x40c>
100022cd0:     	add	x25, x25, #3224
100022cd4:     	mov	x26, x22
100022cd8:     	b	0x100022cf4 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x3ec>
100022cdc:     	add	x10, x22, x23, lsl #2
100022ce0:     	add	x11, x23, #1
100022ce4:     	add	x26, x10, #4
100022ce8:     	mov	x23, x11
100022cec:     	cmp	x11, #5
100022cf0:     	b.eq	0x100022dfc <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x4f4>
100022cf4:     	ldr	w10, [x26]
100022cf8:     	sub	w10, w10, #2
100022cfc:     	mov	x27, x24
100022d00:     	cmp	w10, #4
100022d04:     	b.hi	0x100022d0c <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x404>
100022d08:     	ldr	x27, [x25, w10, sxtw #3]
100022d0c:     	cmp	x9, x8
100022d10:     	b.eq	0x100022da8 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x4a0>
100022d14:     	mov	x28, #0
100022d18:     	movi	d10, #0000000000000000
100022d1c:     	movi	d9, #0000000000000000
100022d20:     	movi	d11, #0000000000000000
100022d24:     	ldr	x0, [x8, x28, lsl #3]
100022d28:     	blr	x27
100022d2c:     	fmadd	d10, d0, d0, d10
100022d30:     	ldr	x8, [x20]
100022d34:     	ldr	d1, [x8, x28, lsl #3]
100022d38:     	fadd	d9, d9, d1
100022d3c:     	fmadd	d11, d1, d0, d11
100022d40:     	add	x28, x28, #1
100022d44:     	ldp	x8, x9, [x21]
100022d48:     	sub	x10, x9, x8
100022d4c:     	asr	x10, x10, #3
100022d50:     	cmp	x28, x10
100022d54:     	b.lo	0x100022d24 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x41c>
100022d58:     	fdiv	d10, d11, d10
100022d5c:     	cmp	x9, x8
100022d60:     	b.eq	0x100022dc4 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x4bc>
100022d64:     	mov	x28, #0
100022d68:     	movi	d11, #0000000000000000
100022d6c:     	ldr	x0, [x8, x28, lsl #3]
100022d70:     	blr	x27
100022d74:     	fmul	d0, d10, d0
100022d78:     	ldr	x8, [x20]
100022d7c:     	ldr	d1, [x8, x28, lsl #3]
100022d80:     	fsub	d0, d1, d0
100022d84:     	fmul	d0, d0, d0
100022d88:     	fadd	d11, d11, d0
100022d8c:     	add	x28, x28, #1
100022d90:     	ldp	x8, x9, [x21]
100022d94:     	sub	x10, x9, x8
100022d98:     	asr	x10, x10, #3
100022d9c:     	cmp	x28, x10
100022da0:     	b.lo	0x100022d6c <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x464>
100022da4:     	b	0x100022dcc <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x4c4>
100022da8:     	mov	x10, #0
100022dac:     	movi	d9, #0000000000000000
100022db0:     	mov	x9, #9221120237041090560
100022db4:     	fmov	d10, x9
100022db8:     	mov	x9, x8
100022dbc:     	movi	d11, #0000000000000000
100022dc0:     	b	0x100022dcc <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x4c4>
100022dc4:     	movi	d11, #0000000000000000
100022dc8:     	mov	x8, x9
100022dcc:     	ucvtf	d0, x10
100022dd0:     	fdiv	d1, d9, d0
100022dd4:     	fdiv	d0, d11, d0
100022dd8:     	fsqrt	d0, d0
100022ddc:     	fdiv	d0, d0, d1
100022de0:     	fcmp	d0, d8
100022de4:     	b.pl	0x100022cdc <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x3d4>
100022de8:     	stp	d10, d0, [x19]
100022dec:     	ldr	w10, [x26]
100022df0:     	str	w10, [x19, #16]
100022df4:     	fmov	d8, d0
100022df8:     	b	0x100022cdc <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x3d4>
100022dfc:     	mov	x0, x22
100022e00:     	ldp	x29, x30, [sp, #112]
100022e04:     	ldp	x20, x19, [sp, #96]
100022e08:     	ldp	x22, x21, [sp, #80]
100022e0c:     	ldp	x24, x23, [sp, #64]
100022e10:     	ldp	x26, x25, [sp, #48]
100022e14:     	ldp	x28, x27, [sp, #32]
100022e18:     	ldp	d9, d8, [sp, #16]
100022e1c:     	ldp	d11, d10, [sp], #128
100022e20:     	b	0x10002f014 <_vsnprintf+0x10002f014>
100022e24:     	adrp	x0, 0x100038000 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x574>
100022e28:     	add	x0, x0, #8
100022e2c:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
100022e30:     	cbz	w0, 0x10002294c <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x44>
100022e34:     	adrp	x8, 0x100038000 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x584>
100022e38:     	str	xzr, [x8]
100022e3c:     	adrp	x0, 0x100038000 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x58c>
100022e40:     	add	x0, x0, #8
100022e44:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
100022e48:     	b	0x10002294c <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x44>
100022e4c:     	adrp	x0, 0x100038000 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x59c>
100022e50:     	add	x0, x0, #8
100022e54:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
100022e58:     	cbz	w0, 0x100022954 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x4c>
100022e5c:     	adrp	x8, 0x100038000 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)>
100022e60:     	str	xzr, [x8]
100022e64:     	adrp	x0, 0x100038000 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x8>
100022e68:     	add	x0, x0, #8
100022e6c:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
100022e70:     	b	0x100022954 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x4c>
100022e74:     	adrp	x0, 0x100038000 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x18>
100022e78:     	add	x0, x0, #8
100022e7c:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
100022e80:     	cbz	w0, 0x10002295c <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x54>
100022e84:     	adrp	x8, 0x100038000 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x28>
100022e88:     	str	xzr, [x8]
100022e8c:     	adrp	x0, 0x100038000 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x30>
100022e90:     	add	x0, x0, #8
100022e94:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
100022e98:     	b	0x10002295c <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x54>
100022e9c:     	b	0x100022ea0 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)+0x598>
100022ea0:     	mov	x19, x0
100022ea4:     	mov	x0, x22
100022ea8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100022eac:     	mov	x0, x19
100022eb0:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100022eb4 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)>:
100022eb4:     	stp	d15, d14, [sp, #-160]!
100022eb8:     	stp	d13, d12, [sp, #16]
100022ebc:     	stp	d11, d10, [sp, #32]
100022ec0:     	stp	d9, d8, [sp, #48]
100022ec4:     	stp	x28, x27, [sp, #64]
100022ec8:     	stp	x26, x25, [sp, #80]
100022ecc:     	stp	x24, x23, [sp, #96]
100022ed0:     	stp	x22, x21, [sp, #112]
100022ed4:     	stp	x20, x19, [sp, #128]
100022ed8:     	stp	x29, x30, [sp, #144]
100022edc:     	add	x29, sp, #144
100022ee0:     	sub	sp, sp, #1184
100022ee4:     	stp	xzr, xzr, [x8]
100022ee8:     	str	xzr, [x8, #16]
100022eec:     	ldp	x24, x19, [x0]
100022ef0:     	str	x0, [sp, #8]
100022ef4:     	sub	x9, x19, x24
100022ef8:     	asr	x10, x9, #6
100022efc:     	mov	x9, #28087
100022f00:     	movk	x9, #46811, lsl #16
100022f04:     	movk	x9, #56173, lsl #32
100022f08:     	movk	x9, #28086, lsl #48
100022f0c:     	mul	x9, x10, x9
100022f10:     	cmp	x9, #2
100022f14:     	b.lo	0x10002386c <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x9b8>
100022f18:     	stp	xzr, xzr, [x29, #-176]
100022f1c:     	stur	xzr, [x29, #-160]
100022f20:     	stp	xzr, xzr, [x29, #-200]
100022f24:     	stur	xzr, [x29, #-184]
100022f28:     	stp	xzr, xzr, [x29, #-224]
100022f2c:     	stur	xzr, [x29, #-208]
100022f30:     	cmp	x24, x19
100022f34:     	str	x8, [sp]
100022f38:     	b.eq	0x10002347c <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x5c8>
100022f3c:     	mov	x26, #9223372036854775800
100022f40:     	mov	x27, #2305843009213693951
100022f44:     	b	0x100022f5c <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xa8>
100022f48:     	str	d8, [x28], #8
100022f4c:     	stur	x28, [x29, #-216]
100022f50:     	add	x24, x24, #448
100022f54:     	cmp	x24, x19
100022f58:     	b.eq	0x100023358 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x4a4>
100022f5c:     	adrp	x8, 0x100038000 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x100>
100022f60:     	add	x8, x8, #8
100022f64:     	ldaprb	w8, [x8]
100022f68:     	tbz	w8, #0, 0x100023330 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x47c>
100022f6c:     	adrp	x8, 0x100038000 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x110>
100022f70:     	ldr	x0, [x8]
100022f74:     	cbz	x0, 0x100022f88 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xd4>
100022f78:     	adrp	x1, 0x100032000 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x104>
100022f7c:     	add	x1, x1, #891
100022f80:     	mov	w2, #38
100022f84:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100022f88:     	ldp	x28, x8, [x29, #-168]
100022f8c:     	cmp	x28, x8
100022f90:     	b.eq	0x100022fa8 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xf4>
100022f94:     	ldr	x8, [x24, #384]
100022f98:     	str	x8, [x28], #8
100022f9c:     	stur	x28, [x29, #-168]
100022fa0:     	mov	x22, x28
100022fa4:     	b	0x1000230c0 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x20c>
100022fa8:     	ldur	x23, [x29, #-176]
100022fac:     	sub	x21, x28, x23
100022fb0:     	asr	x25, x21, #3
100022fb4:     	add	x8, x25, #1
100022fb8:     	lsr	x9, x8, #61
100022fbc:     	cbnz	x9, 0x100023924 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xa70>
100022fc0:     	asr	x9, x21, #2
100022fc4:     	cmp	x9, x8
100022fc8:     	csel	x8, x9, x8, hi
100022fcc:     	cmp	x21, x26
100022fd0:     	csel	x20, x8, x27, lo
100022fd4:     	cbz	x20, 0x100023004 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x150>
100022fd8:     	lsr	x8, x20, #61
100022fdc:     	cbnz	x8, 0x100023940 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xa8c>
100022fe0:     	lsl	x0, x20, #3
100022fe4:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100022fe8:     	add	x8, x0, x25, lsl #3
100022fec:     	ldr	x9, [x24, #384]
100022ff0:     	mov	x22, x8
100022ff4:     	str	x9, [x22], #8
100022ff8:     	cmp	x28, x23
100022ffc:     	b.ne	0x100023020 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x16c>
100023000:     	b	0x1000230a8 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x1f4>
100023004:     	mov	x0, #0
100023008:     	add	x8, x0, x25, lsl #3
10002300c:     	ldr	x9, [x24, #384]
100023010:     	mov	x22, x8
100023014:     	str	x9, [x22], #8
100023018:     	cmp	x28, x23
10002301c:     	b.eq	0x1000230a8 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x1f4>
100023020:     	sub	x10, x28, #8
100023024:     	sub	x9, x10, x23
100023028:     	cmp	x9, #88
10002302c:     	b.lo	0x100023098 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x1e4>
100023030:     	add	x11, x0, x21
100023034:     	sub	x10, x10, x11
100023038:     	add	x10, x10, #8
10002303c:     	cmp	x10, #64
100023040:     	b.lo	0x100023098 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x1e4>
100023044:     	lsr	x9, x9, #3
100023048:     	add	x9, x9, #1
10002304c:     	and	x10, x9, #0x3ffffffffffffff8
100023050:     	lsl	x12, x10, #3
100023054:     	sub	x11, x28, x12
100023058:     	sub	x8, x8, x12
10002305c:     	sub	x12, x28, #32
100023060:     	add	x13, x0, x25, lsl #3
100023064:     	sub	x13, x13, #32
100023068:     	mov	x14, x10
10002306c:     	ldp	q1, q0, [x12]
100023070:     	ldp	q3, q2, [x12, #-32]
100023074:     	stp	q1, q0, [x13]
100023078:     	stp	q3, q2, [x13, #-32]
10002307c:     	sub	x12, x12, #64
100023080:     	sub	x13, x13, #64
100023084:     	sub	x14, x14, #8
100023088:     	cbnz	x14, 0x10002306c <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x1b8>
10002308c:     	mov	x28, x11
100023090:     	cmp	x9, x10
100023094:     	b.eq	0x1000230a8 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x1f4>
100023098:     	ldr	x9, [x28, #-8]!
10002309c:     	str	x9, [x8, #-8]!
1000230a0:     	cmp	x28, x23
1000230a4:     	b.ne	0x100023098 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x1e4>
1000230a8:     	add	x9, x0, x20, lsl #3
1000230ac:     	stp	x8, x22, [x29, #-176]
1000230b0:     	stur	x9, [x29, #-160]
1000230b4:     	cbz	x23, 0x1000230c0 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x20c>
1000230b8:     	mov	x0, x23
1000230bc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000230c0:     	ldr	d0, [x24, #344]
1000230c4:     	ldr	d1, [x24, #304]
1000230c8:     	scvtf	d1, d1
1000230cc:     	ldp	x28, x8, [x29, #-192]
1000230d0:     	fdiv	d8, d0, d1
1000230d4:     	cmp	x28, x8
1000230d8:     	b.hs	0x1000230e8 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x234>
1000230dc:     	str	d8, [x28], #8
1000230e0:     	stur	x28, [x29, #-192]
1000230e4:     	b	0x1000231fc <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x348>
1000230e8:     	ldur	x23, [x29, #-200]
1000230ec:     	sub	x21, x28, x23
1000230f0:     	asr	x25, x21, #3
1000230f4:     	add	x9, x25, #1
1000230f8:     	lsr	x10, x9, #61
1000230fc:     	cbnz	x10, 0x10002390c <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xa58>
100023100:     	sub	x8, x8, x23
100023104:     	asr	x10, x8, #2
100023108:     	cmp	x10, x9
10002310c:     	csel	x9, x10, x9, hi
100023110:     	cmp	x8, x26
100023114:     	csel	x20, x9, x27, lo
100023118:     	cbz	x20, 0x100023144 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x290>
10002311c:     	lsr	x8, x20, #61
100023120:     	cbnz	x8, 0x100023930 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xa7c>
100023124:     	lsl	x0, x20, #3
100023128:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10002312c:     	add	x8, x0, x25, lsl #3
100023130:     	mov	x9, x8
100023134:     	str	d8, [x9], #8
100023138:     	cmp	x28, x23
10002313c:     	b.ne	0x10002315c <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x2a8>
100023140:     	b	0x1000231e4 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x330>
100023144:     	mov	x0, #0
100023148:     	add	x8, x0, x25, lsl #3
10002314c:     	mov	x9, x8
100023150:     	str	d8, [x9], #8
100023154:     	cmp	x28, x23
100023158:     	b.eq	0x1000231e4 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x330>
10002315c:     	sub	x11, x28, #8
100023160:     	sub	x10, x11, x23
100023164:     	cmp	x10, #88
100023168:     	b.lo	0x1000231d4 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x320>
10002316c:     	add	x12, x0, x21
100023170:     	sub	x11, x11, x12
100023174:     	add	x11, x11, #8
100023178:     	cmp	x11, #64
10002317c:     	b.lo	0x1000231d4 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x320>
100023180:     	lsr	x10, x10, #3
100023184:     	add	x10, x10, #1
100023188:     	and	x11, x10, #0x3ffffffffffffff8
10002318c:     	lsl	x13, x11, #3
100023190:     	sub	x12, x28, x13
100023194:     	sub	x8, x8, x13
100023198:     	sub	x13, x28, #32
10002319c:     	add	x14, x0, x25, lsl #3
1000231a0:     	sub	x14, x14, #32
1000231a4:     	mov	x15, x11
1000231a8:     	ldp	q1, q0, [x13]
1000231ac:     	ldp	q3, q2, [x13, #-32]
1000231b0:     	stp	q1, q0, [x14]
1000231b4:     	stp	q3, q2, [x14, #-32]
1000231b8:     	sub	x13, x13, #64
1000231bc:     	sub	x14, x14, #64
1000231c0:     	sub	x15, x15, #8
1000231c4:     	cbnz	x15, 0x1000231a8 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x2f4>
1000231c8:     	mov	x28, x12
1000231cc:     	cmp	x10, x11
1000231d0:     	b.eq	0x1000231e4 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x330>
1000231d4:     	ldr	d0, [x28, #-8]!
1000231d8:     	str	d0, [x8, #-8]!
1000231dc:     	cmp	x28, x23
1000231e0:     	b.ne	0x1000231d4 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x320>
1000231e4:     	add	x10, x0, x20, lsl #3
1000231e8:     	stp	x8, x9, [x29, #-200]
1000231ec:     	stur	x10, [x29, #-184]
1000231f0:     	cbz	x23, 0x1000231fc <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x348>
1000231f4:     	mov	x0, x23
1000231f8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000231fc:     	ldr	d0, [x24, #352]
100023200:     	ldr	d1, [x24, #304]
100023204:     	scvtf	d1, d1
100023208:     	ldp	x28, x8, [x29, #-216]
10002320c:     	fdiv	d8, d0, d1
100023210:     	cmp	x28, x8
100023214:     	b.lo	0x100022f48 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x94>
100023218:     	ldur	x23, [x29, #-224]
10002321c:     	sub	x21, x28, x23
100023220:     	asr	x25, x21, #3
100023224:     	add	x9, x25, #1
100023228:     	lsr	x10, x9, #61
10002322c:     	cbnz	x10, 0x100023918 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xa64>
100023230:     	sub	x8, x8, x23
100023234:     	asr	x10, x8, #2
100023238:     	cmp	x10, x9
10002323c:     	csel	x9, x10, x9, hi
100023240:     	cmp	x8, x26
100023244:     	csel	x20, x9, x27, lo
100023248:     	cbz	x20, 0x100023274 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x3c0>
10002324c:     	lsr	x8, x20, #61
100023250:     	cbnz	x8, 0x100023938 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xa84>
100023254:     	lsl	x0, x20, #3
100023258:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10002325c:     	add	x8, x0, x25, lsl #3
100023260:     	mov	x9, x8
100023264:     	str	d8, [x9], #8
100023268:     	cmp	x28, x23
10002326c:     	b.ne	0x10002328c <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x3d8>
100023270:     	b	0x100023314 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x460>
100023274:     	mov	x0, #0
100023278:     	add	x8, x0, x25, lsl #3
10002327c:     	mov	x9, x8
100023280:     	str	d8, [x9], #8
100023284:     	cmp	x28, x23
100023288:     	b.eq	0x100023314 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x460>
10002328c:     	sub	x11, x28, #8
100023290:     	sub	x10, x11, x23
100023294:     	cmp	x10, #88
100023298:     	b.lo	0x100023304 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x450>
10002329c:     	add	x12, x0, x21
1000232a0:     	sub	x11, x11, x12
1000232a4:     	add	x11, x11, #8
1000232a8:     	cmp	x11, #64
1000232ac:     	b.lo	0x100023304 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x450>
1000232b0:     	lsr	x10, x10, #3
1000232b4:     	add	x10, x10, #1
1000232b8:     	and	x11, x10, #0x3ffffffffffffff8
1000232bc:     	lsl	x13, x11, #3
1000232c0:     	sub	x12, x28, x13
1000232c4:     	sub	x8, x8, x13
1000232c8:     	sub	x13, x28, #32
1000232cc:     	add	x14, x0, x25, lsl #3
1000232d0:     	sub	x14, x14, #32
1000232d4:     	mov	x15, x11
1000232d8:     	ldp	q1, q0, [x13]
1000232dc:     	ldp	q3, q2, [x13, #-32]
1000232e0:     	stp	q1, q0, [x14]
1000232e4:     	stp	q3, q2, [x14, #-32]
1000232e8:     	sub	x13, x13, #64
1000232ec:     	sub	x14, x14, #64
1000232f0:     	sub	x15, x15, #8
1000232f4:     	cbnz	x15, 0x1000232d8 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x424>
1000232f8:     	mov	x28, x12
1000232fc:     	cmp	x10, x11
100023300:     	b.eq	0x100023314 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x460>
100023304:     	ldr	d0, [x28, #-8]!
100023308:     	str	d0, [x8, #-8]!
10002330c:     	cmp	x28, x23
100023310:     	b.ne	0x100023304 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x450>
100023314:     	add	x10, x0, x20, lsl #3
100023318:     	stp	x8, x9, [x29, #-224]
10002331c:     	stur	x10, [x29, #-208]
100023320:     	cbz	x23, 0x100022f50 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x9c>
100023324:     	mov	x0, x23
100023328:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002332c:     	b	0x100022f50 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x9c>
100023330:     	adrp	x0, 0x100038000 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x4d0>
100023334:     	add	x0, x0, #8
100023338:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10002333c:     	cbz	w0, 0x100022f6c <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xb8>
100023340:     	adrp	x8, 0x100038000 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x4e0>
100023344:     	str	xzr, [x8]
100023348:     	adrp	x0, 0x100038000 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x4e8>
10002334c:     	add	x0, x0, #8
100023350:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
100023354:     	b	0x100022f6c <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xb8>
100023358:     	ldr	x8, [sp, #8]
10002335c:     	ldr	x19, [x8]
100023360:     	ldr	w2, [x19, #368]
100023364:     	cmp	w2, #8
100023368:     	b.ne	0x10002348c <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x5d8>
10002336c:     	ldur	x21, [x29, #-176]
100023370:     	movi	d10, #0000000000000000
100023374:     	subs	x8, x22, x21
100023378:     	b.eq	0x1000234c0 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x60c>
10002337c:     	mov	x23, #0
100023380:     	ldr	x20, [x19, #376]
100023384:     	asr	x19, x8, #3
100023388:     	movi	d8, #0000000000000000
10002338c:     	movi	d9, #0000000000000000
100023390:     	movi	d11, #0000000000000000
100023394:     	ldr	x0, [x21, x23, lsl #3]
100023398:     	blr	x20
10002339c:     	fmadd	d8, d0, d0, d8
1000233a0:     	ldur	x22, [x29, #-224]
1000233a4:     	ldr	d1, [x22, x23, lsl #3]
1000233a8:     	fadd	d9, d9, d1
1000233ac:     	fmadd	d11, d1, d0, d11
1000233b0:     	add	x23, x23, #1
1000233b4:     	cmp	x23, x19
1000233b8:     	b.lo	0x100023394 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x4e0>
1000233bc:     	mov	x23, #0
1000233c0:     	movi	d12, #0000000000000000
1000233c4:     	fdiv	d8, d11, d8
1000233c8:     	ldr	x0, [x21, x23, lsl #3]
1000233cc:     	blr	x20
1000233d0:     	ldr	d1, [x22, x23, lsl #3]
1000233d4:     	fmul	d0, d8, d0
1000233d8:     	fsub	d0, d1, d0
1000233dc:     	fmul	d0, d0, d0
1000233e0:     	fadd	d12, d12, d0
1000233e4:     	add	x23, x23, #1
1000233e8:     	cmp	x23, x19
1000233ec:     	b.lo	0x1000233c8 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x514>
1000233f0:     	ldur	x8, [x29, #-168]
1000233f4:     	subs	x8, x8, x21
1000233f8:     	b.eq	0x1000234e0 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x62c>
1000233fc:     	mov	x24, #0
100023400:     	ldr	x9, [sp, #8]
100023404:     	ldr	x9, [x9]
100023408:     	ldr	x22, [x9, #376]
10002340c:     	asr	x20, x8, #3
100023410:     	movi	d11, #0000000000000000
100023414:     	movi	d10, #0000000000000000
100023418:     	movi	d14, #0000000000000000
10002341c:     	ldr	x0, [x21, x24, lsl #3]
100023420:     	blr	x22
100023424:     	fmadd	d11, d0, d0, d11
100023428:     	ldur	x23, [x29, #-200]
10002342c:     	ldr	d1, [x23, x24, lsl #3]
100023430:     	fadd	d10, d10, d1
100023434:     	fmadd	d14, d1, d0, d14
100023438:     	add	x24, x24, #1
10002343c:     	cmp	x24, x20
100023440:     	b.lo	0x10002341c <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x568>
100023444:     	mov	x24, #0
100023448:     	movi	d13, #0000000000000000
10002344c:     	fdiv	d11, d14, d11
100023450:     	ldr	x0, [x21, x24, lsl #3]
100023454:     	blr	x22
100023458:     	ldr	d1, [x23, x24, lsl #3]
10002345c:     	fmul	d0, d11, d0
100023460:     	fsub	d0, d1, d0
100023464:     	fmul	d0, d0, d0
100023468:     	fadd	d13, d13, d0
10002346c:     	add	x24, x24, #1
100023470:     	cmp	x24, x20
100023474:     	b.lo	0x100023450 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x59c>
100023478:     	b	0x1000234f0 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x63c>
10002347c:     	mov	x22, #0
100023480:     	ldr	w2, [x19, #368]
100023484:     	cmp	w2, #8
100023488:     	b.eq	0x10002336c <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x4b8>
10002348c:     	add	x8, sp, #464
100023490:     	sub	x0, x29, #176
100023494:     	sub	x1, x29, #224
100023498:     	bl	0x100022908 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)>
10002349c:     	ldp	d8, d9, [sp, #464]
1000234a0:     	ldr	w21, [sp, #480]
1000234a4:     	add	x8, sp, #464
1000234a8:     	sub	x0, x29, #176
1000234ac:     	sub	x1, x29, #200
1000234b0:     	mov	x2, x21
1000234b4:     	bl	0x100022908 <benchmark::MinimalLeastSq(std::__1::vector<long long, std::__1::allocator<long long>> const&, std::__1::vector<double, std::__1::allocator<double>> const&, benchmark::BigO)>
1000234b8:     	ldp	d11, d10, [sp, #464]
1000234bc:     	b	0x10002351c <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x668>
1000234c0:     	mov	x19, #0
1000234c4:     	mov	x8, #9221120237041090560
1000234c8:     	fmov	d8, x8
1000234cc:     	movi	d9, #0000000000000000
1000234d0:     	movi	d12, #0000000000000000
1000234d4:     	ldur	x8, [x29, #-168]
1000234d8:     	subs	x8, x8, x21
1000234dc:     	b.ne	0x1000233fc <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x548>
1000234e0:     	mov	x20, #0
1000234e4:     	mov	x8, #9221120237041090560
1000234e8:     	fmov	d11, x8
1000234ec:     	movi	d13, #0000000000000000
1000234f0:     	ucvtf	d0, x19
1000234f4:     	fdiv	d1, d9, d0
1000234f8:     	fdiv	d0, d12, d0
1000234fc:     	fsqrt	d0, d0
100023500:     	ucvtf	d2, x20
100023504:     	fdiv	d9, d0, d1
100023508:     	fdiv	d0, d10, d2
10002350c:     	fdiv	d1, d13, d2
100023510:     	fsqrt	d1, d1
100023514:     	mov	w21, #8
100023518:     	fdiv	d10, d1, d0
10002351c:     	ldr	x8, [sp, #8]
100023520:     	ldr	x1, [x8]
100023524:     	add	x19, sp, #912
100023528:     	add	x0, sp, #912
10002352c:     	bl	0x100008540 <benchmark::BenchmarkName::BenchmarkName(benchmark::BenchmarkName const&)>
100023530:     	ldrsb	w8, [sp, #959]
100023534:     	tbnz	w8, #31, 0x100023544 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x690>
100023538:     	strb	wzr, [sp, #936]
10002353c:     	strb	wzr, [sp, #959]
100023540:     	b	0x100023550 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x69c>
100023544:     	ldr	x8, [sp, #936]
100023548:     	strb	wzr, [x8]
10002354c:     	str	xzr, [sp, #944]
100023550:     	add	x0, sp, #464
100023554:     	bl	0x10001f994 <benchmark::BenchmarkReporter::Run::Run()>
100023558:     	add	x20, sp, #464
10002355c:     	add	x0, sp, #464
100023560:     	add	x1, sp, #912
100023564:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
100023568:     	add	x22, x19, #24
10002356c:     	add	x0, x20, #24
100023570:     	mov	x1, x22
100023574:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
100023578:     	add	x19, sp, #464
10002357c:     	add	x0, x19, #48
100023580:     	add	x20, sp, #912
100023584:     	add	x23, x20, #48
100023588:     	mov	x1, x23
10002358c:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
100023590:     	add	x0, x19, #72
100023594:     	add	x24, x20, #72
100023598:     	mov	x1, x24
10002359c:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
1000235a0:     	add	x19, sp, #464
1000235a4:     	add	x0, x19, #96
1000235a8:     	add	x20, sp, #912
1000235ac:     	add	x25, x20, #96
1000235b0:     	mov	x1, x25
1000235b4:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
1000235b8:     	add	x0, x19, #120
1000235bc:     	add	x26, x20, #120
1000235c0:     	mov	x1, x26
1000235c4:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
1000235c8:     	add	x19, sp, #464
1000235cc:     	add	x0, x19, #144
1000235d0:     	add	x20, sp, #912
1000235d4:     	add	x27, x20, #144
1000235d8:     	mov	x1, x27
1000235dc:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
1000235e0:     	add	x0, x19, #168
1000235e4:     	add	x28, x20, #168
1000235e8:     	mov	x1, x28
1000235ec:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
1000235f0:     	ldr	x8, [sp, #8]
1000235f4:     	ldr	x8, [x8]
1000235f8:     	ldr	q0, [x8, #192]
1000235fc:     	str	q0, [sp, #656]
100023600:     	mov	w9, #1
100023604:     	str	w9, [sp, #672]
100023608:     	ldr	x9, [x8, #328]
10002360c:     	mov	x10, #-1
100023610:     	str	x9, [sp, #792]
100023614:     	str	x10, [sp, #784]
100023618:     	ldr	x8, [x8, #312]
10002361c:     	str	x8, [sp, #776]
100023620:     	add	x19, sp, #464
100023624:     	add	x0, x19, #216
100023628:     	adrp	x1, 0x100032000 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x7b0>
10002362c:     	add	x1, x1, #930
100023630:     	bl	0x10002ed44 <_vsnprintf+0x10002ed44>
100023634:     	str	wzr, [sp, #704]
100023638:     	ldr	x8, [sp, #8]
10002363c:     	ldr	x8, [x8]
100023640:     	add	x1, x8, #248
100023644:     	add	x19, x19, #248
100023648:     	mov	x0, x19
10002364c:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
100023650:     	str	xzr, [sp, #768]
100023654:     	str	d11, [sp, #808]
100023658:     	str	d8, [sp, #816]
10002365c:     	mov	w8, #1
100023660:     	strb	w8, [sp, #864]
100023664:     	str	w21, [sp, #832]
100023668:     	ldr	x8, [sp, #8]
10002366c:     	ldr	x8, [x8]
100023670:     	ldrsw	x8, [x8, #336]
100023674:     	adrp	x9, 0x100033000 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x800>
100023678:     	add	x9, x9, #616
10002367c:     	ldr	d8, [x9, x8, lsl #3]
100023680:     	add	x0, sp, #16
100023684:     	bl	0x10001f994 <benchmark::BenchmarkReporter::Run::Run()>
100023688:     	add	x20, sp, #16
10002368c:     	add	x0, sp, #16
100023690:     	add	x1, sp, #912
100023694:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
100023698:     	add	x0, x20, #24
10002369c:     	mov	x1, x22
1000236a0:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
1000236a4:     	add	x20, sp, #16
1000236a8:     	add	x0, x20, #48
1000236ac:     	mov	x1, x23
1000236b0:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
1000236b4:     	add	x0, x20, #72
1000236b8:     	mov	x1, x24
1000236bc:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
1000236c0:     	add	x20, sp, #16
1000236c4:     	add	x0, x20, #96
1000236c8:     	mov	x1, x25
1000236cc:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
1000236d0:     	add	x0, x20, #120
1000236d4:     	mov	x1, x26
1000236d8:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
1000236dc:     	add	x20, sp, #16
1000236e0:     	add	x0, x20, #144
1000236e4:     	mov	x1, x27
1000236e8:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
1000236ec:     	add	x0, x20, #168
1000236f0:     	mov	x1, x28
1000236f4:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
1000236f8:     	ldr	x8, [sp, #8]
1000236fc:     	ldr	x8, [x8]
100023700:     	ldr	q0, [x8, #192]
100023704:     	str	q0, [sp, #208]
100023708:     	mov	w20, #1
10002370c:     	str	w20, [sp, #224]
100023710:     	add	x22, sp, #16
100023714:     	add	x0, x22, #216
100023718:     	adrp	x1, 0x100032000 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x8a0>
10002371c:     	add	x1, x1, #935
100023720:     	bl	0x10002ed44 <_vsnprintf+0x10002ed44>
100023724:     	str	w20, [sp, #256]
100023728:     	add	x0, x22, #248
10002372c:     	mov	x1, x19
100023730:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
100023734:     	mov	x8, #-1
100023738:     	ldr	x9, [sp, #8]
10002373c:     	ldr	x9, [x9]
100023740:     	ldr	x10, [x9, #328]
100023744:     	stp	x8, x10, [sp, #336]
100023748:     	ldr	x8, [x9, #312]
10002374c:     	stp	xzr, x8, [sp, #320]
100023750:     	fdiv	d0, d10, d8
100023754:     	fdiv	d1, d9, d8
100023758:     	stp	d0, d1, [sp, #360]
10002375c:     	mov	w8, #1
100023760:     	strb	w8, [sp, #417]
100023764:     	str	w21, [sp, #384]
100023768:     	ldr	w8, [x9, #336]
10002376c:     	str	w8, [sp, #352]
100023770:     	ldr	x21, [sp]
100023774:     	ldp	x19, x8, [x21, #8]
100023778:     	cmp	x19, x8
10002377c:     	b.eq	0x1000237b8 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x904>
100023780:     	add	x1, sp, #464
100023784:     	mov	x0, x19
100023788:     	bl	0x1000081f0 <benchmark::BenchmarkReporter::Run::Run(benchmark::BenchmarkReporter::Run const&)>
10002378c:     	add	x19, x19, #448
100023790:     	str	x19, [x21, #8]
100023794:     	ldr	x8, [x21, #16]
100023798:     	cmp	x19, x8
10002379c:     	b.eq	0x1000237d4 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x920>
1000237a0:     	add	x1, sp, #16
1000237a4:     	mov	x0, x19
1000237a8:     	bl	0x1000081f0 <benchmark::BenchmarkReporter::Run::Run(benchmark::BenchmarkReporter::Run const&)>
1000237ac:     	add	x8, x19, #448
1000237b0:     	str	x8, [x21, #8]
1000237b4:     	b	0x1000237e0 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x92c>
1000237b8:     	add	x1, sp, #464
1000237bc:     	mov	x0, x21
1000237c0:     	bl	0x10001fd40 <void std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__push_back_slow_path<benchmark::BenchmarkReporter::Run const&>(benchmark::BenchmarkReporter::Run const&)>
1000237c4:     	ldr	x21, [sp]
1000237c8:     	ldp	x19, x8, [x21, #8]
1000237cc:     	cmp	x19, x8
1000237d0:     	b.ne	0x1000237a0 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x8ec>
1000237d4:     	add	x1, sp, #16
1000237d8:     	mov	x0, x21
1000237dc:     	bl	0x10001fd40 <void std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__push_back_slow_path<benchmark::BenchmarkReporter::Run const&>(benchmark::BenchmarkReporter::Run const&)>
1000237e0:     	add	x8, sp, #16
1000237e4:     	add	x0, x8, #408
1000237e8:     	ldr	x1, [sp, #432]
1000237ec:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
1000237f0:     	ldrsb	w8, [sp, #319]
1000237f4:     	tbnz	w8, #31, 0x10002389c <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x9e8>
1000237f8:     	ldrsb	w8, [sp, #287]
1000237fc:     	tbnz	w8, #31, 0x1000238ac <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x9f8>
100023800:     	ldrsb	w8, [sp, #255]
100023804:     	tbnz	w8, #31, 0x1000238bc <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xa08>
100023808:     	add	x0, sp, #16
10002380c:     	bl	0x1000090c8 <benchmark::BenchmarkName::~BenchmarkName()>
100023810:     	add	x8, sp, #464
100023814:     	add	x0, x8, #408
100023818:     	ldr	x1, [sp, #880]
10002381c:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
100023820:     	ldrsb	w8, [sp, #767]
100023824:     	tbnz	w8, #31, 0x1000238c8 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xa14>
100023828:     	ldrsb	w8, [sp, #735]
10002382c:     	tbnz	w8, #31, 0x1000238d8 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xa24>
100023830:     	ldrsb	w8, [sp, #703]
100023834:     	tbnz	w8, #31, 0x1000238e8 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xa34>
100023838:     	add	x0, sp, #464
10002383c:     	bl	0x1000090c8 <benchmark::BenchmarkName::~BenchmarkName()>
100023840:     	add	x0, sp, #912
100023844:     	bl	0x1000090c8 <benchmark::BenchmarkName::~BenchmarkName()>
100023848:     	ldur	x0, [x29, #-224]
10002384c:     	cbz	x0, 0x100023854 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x9a0>
100023850:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100023854:     	ldur	x0, [x29, #-200]
100023858:     	cbz	x0, 0x100023860 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x9ac>
10002385c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100023860:     	ldur	x0, [x29, #-176]
100023864:     	cbz	x0, 0x10002386c <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x9b8>
100023868:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002386c:     	add	sp, sp, #1184
100023870:     	ldp	x29, x30, [sp, #144]
100023874:     	ldp	x20, x19, [sp, #128]
100023878:     	ldp	x22, x21, [sp, #112]
10002387c:     	ldp	x24, x23, [sp, #96]
100023880:     	ldp	x26, x25, [sp, #80]
100023884:     	ldp	x28, x27, [sp, #64]
100023888:     	ldp	d9, d8, [sp, #48]
10002388c:     	ldp	d11, d10, [sp, #32]
100023890:     	ldp	d13, d12, [sp, #16]
100023894:     	ldp	d15, d14, [sp], #160
100023898:     	ret
10002389c:     	ldr	x0, [sp, #296]
1000238a0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000238a4:     	ldrsb	w8, [sp, #287]
1000238a8:     	tbz	w8, #31, 0x100023800 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x94c>
1000238ac:     	ldr	x0, [sp, #264]
1000238b0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000238b4:     	ldrsb	w8, [sp, #255]
1000238b8:     	tbz	w8, #31, 0x100023808 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x954>
1000238bc:     	ldr	x0, [sp, #232]
1000238c0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000238c4:     	b	0x100023808 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x954>
1000238c8:     	ldr	x0, [sp, #744]
1000238cc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000238d0:     	ldrsb	w8, [sp, #735]
1000238d4:     	tbz	w8, #31, 0x100023830 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x97c>
1000238d8:     	ldr	x0, [sp, #712]
1000238dc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000238e0:     	ldrsb	w8, [sp, #703]
1000238e4:     	tbz	w8, #31, 0x100023838 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x984>
1000238e8:     	ldr	x0, [sp, #680]
1000238ec:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000238f0:     	add	x0, sp, #464
1000238f4:     	bl	0x1000090c8 <benchmark::BenchmarkName::~BenchmarkName()>
1000238f8:     	add	x0, sp, #912
1000238fc:     	bl	0x1000090c8 <benchmark::BenchmarkName::~BenchmarkName()>
100023900:     	ldur	x0, [x29, #-224]
100023904:     	cbnz	x0, 0x100023850 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x99c>
100023908:     	b	0x100023854 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x9a0>
10002390c:     	sub	x0, x29, #200
100023910:     	bl	0x100023ac8 <std::__1::vector<double, std::__1::allocator<double>>::__throw_length_error[abi:ue170006]() const>
100023914:     	b	0x100023944 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xa90>
100023918:     	sub	x0, x29, #224
10002391c:     	bl	0x100023ac8 <std::__1::vector<double, std::__1::allocator<double>>::__throw_length_error[abi:ue170006]() const>
100023920:     	b	0x100023944 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xa90>
100023924:     	sub	x0, x29, #176
100023928:     	bl	0x10000a2cc <std::__1::vector<long long, std::__1::allocator<long long>>::__throw_length_error[abi:ue170006]() const>
10002392c:     	b	0x100023944 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xa90>
100023930:     	bl	0x100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>
100023934:     	b	0x100023944 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xa90>
100023938:     	bl	0x100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>
10002393c:     	b	0x100023944 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xa90>
100023940:     	bl	0x100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>
100023944:     	brk	#0x1
100023948:     	b	0x1000239c0 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xb0c>
10002394c:     	b	0x1000239c0 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xb0c>
100023950:     	b	0x100023954 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xaa0>
100023954:     	mov	x20, x0
100023958:     	str	x19, [x21, #8]
10002395c:     	b	0x100023998 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xae4>
100023960:     	mov	x20, x0
100023964:     	b	0x1000239a0 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xaec>
100023968:     	mov	x20, x0
10002396c:     	b	0x1000239a8 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xaf4>
100023970:     	b	0x1000239c0 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xb0c>
100023974:     	b	0x1000239c0 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xb0c>
100023978:     	b	0x1000239c0 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xb0c>
10002397c:     	b	0x1000239c0 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xb0c>
100023980:     	b	0x1000239c0 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xb0c>
100023984:     	b	0x1000239c0 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xb0c>
100023988:     	mov	x20, x0
10002398c:     	b	0x1000239a0 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xaec>
100023990:     	b	0x1000239c0 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xb0c>
100023994:     	mov	x20, x0
100023998:     	add	x0, sp, #16
10002399c:     	bl	0x10001f8bc <benchmark::BenchmarkReporter::Run::~Run()>
1000239a0:     	add	x0, sp, #464
1000239a4:     	bl	0x10001f8bc <benchmark::BenchmarkReporter::Run::~Run()>
1000239a8:     	add	x0, sp, #912
1000239ac:     	bl	0x1000090c8 <benchmark::BenchmarkName::~BenchmarkName()>
1000239b0:     	b	0x1000239c4 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xb10>
1000239b4:     	b	0x1000239c0 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xb0c>
1000239b8:     	b	0x1000239c0 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xb0c>
1000239bc:     	b	0x1000239c0 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xb0c>
1000239c0:     	mov	x20, x0
1000239c4:     	ldur	x0, [x29, #-224]
1000239c8:     	cbnz	x0, 0x1000239f4 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xb40>
1000239cc:     	ldur	x0, [x29, #-200]
1000239d0:     	cbnz	x0, 0x100023a04 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xb50>
1000239d4:     	ldur	x0, [x29, #-176]
1000239d8:     	cbnz	x0, 0x100023a14 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xb60>
1000239dc:     	ldr	x8, [sp]
1000239e0:     	str	x8, [sp, #464]
1000239e4:     	add	x0, sp, #464
1000239e8:     	bl	0x100009fac <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__destroy_vector::operator()[abi:ue170006]()>
1000239ec:     	mov	x0, x20
1000239f0:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
1000239f4:     	stur	x0, [x29, #-216]
1000239f8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000239fc:     	ldur	x0, [x29, #-200]
100023a00:     	cbz	x0, 0x1000239d4 <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xb20>
100023a04:     	stur	x0, [x29, #-192]
100023a08:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100023a0c:     	ldur	x0, [x29, #-176]
100023a10:     	cbz	x0, 0x1000239dc <benchmark::ComputeBigO(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xb28>
100023a14:     	stur	x0, [x29, #-168]
100023a18:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100023a1c:     	ldr	x8, [sp]
100023a20:     	str	x8, [sp, #464]
100023a24:     	add	x0, sp, #464
100023a28:     	bl	0x100009fac <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__destroy_vector::operator()[abi:ue170006]()>
100023a2c:     	mov	x0, x20
100023a30:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100023a34 <benchmark::FittingCurve(benchmark::BigO)::$_0::__invoke(long long)>:
100023a34:     	scvtf	d0, x0
100023a38:     	ret

0000000100023a3c <benchmark::FittingCurve(benchmark::BigO)::$_1::__invoke(long long)>:
100023a3c:     	scvtf	d0, x0
100023a40:     	fmul	d0, d0, d0
100023a44:     	ret

0000000100023a48 <benchmark::FittingCurve(benchmark::BigO)::$_2::__invoke(long long)>:
100023a48:     	scvtf	d0, x0
100023a4c:     	fmov	d1, #3.00000000
100023a50:     	b	0x10002f1e8 <_vsnprintf+0x10002f1e8>

0000000100023a54 <benchmark::FittingCurve(benchmark::BigO)::$_3::__invoke(long long)>:
100023a54:     	stp	x29, x30, [sp, #-16]!
100023a58:     	mov	x29, sp
100023a5c:     	scvtf	d0, x0
100023a60:     	bl	0x10002f188 <_vsnprintf+0x10002f188>
100023a64:     	mov	x8, #33534
100023a68:     	movk	x8, #25899, lsl #16
100023a6c:     	movk	x8, #5447, lsl #32
100023a70:     	movk	x8, #16375, lsl #48
100023a74:     	fmov	d1, x8
100023a78:     	fmul	d0, d0, d1
100023a7c:     	ldp	x29, x30, [sp], #16
100023a80:     	ret

0000000100023a84 <benchmark::FittingCurve(benchmark::BigO)::$_4::__invoke(long long)>:
100023a84:     	stp	d9, d8, [sp, #-32]!
100023a88:     	stp	x29, x30, [sp, #16]
100023a8c:     	add	x29, sp, #16
100023a90:     	scvtf	d0, x0
100023a94:     	mov	x8, #33534
100023a98:     	movk	x8, #25899, lsl #16
100023a9c:     	movk	x8, #5447, lsl #32
100023aa0:     	movk	x8, #16375, lsl #48
100023aa4:     	fmov	d1, x8
100023aa8:     	fmul	d8, d0, d1
100023aac:     	bl	0x10002f188 <_vsnprintf+0x10002f188>
100023ab0:     	fmul	d0, d8, d0
100023ab4:     	ldp	x29, x30, [sp, #16]
100023ab8:     	ldp	d9, d8, [sp], #32
100023abc:     	ret

0000000100023ac0 <benchmark::FittingCurve(benchmark::BigO)::$_5::__invoke(long long)>:
100023ac0:     	fmov	d0, #1.00000000
100023ac4:     	ret

0000000100023ac8 <std::__1::vector<double, std::__1::allocator<double>>::__throw_length_error[abi:ue170006]() const>:
100023ac8:     	stp	x29, x30, [sp, #-16]!
100023acc:     	mov	x29, sp
100023ad0:     	adrp	x0, 0x100031000 <benchmark::ConsoleReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x28>
100023ad4:     	add	x0, x0, #3485
100023ad8:     	bl	0x100006a48 <std::__1::__throw_length_error[abi:ue170006](char const*)>

0000000100023adc <__GLOBAL__sub_I_complexity.cc>:
100023adc:     	b	0x10000363c <benchmark::internal::InitializeStreams()>

0000000100023ae0 <benchmark::ConsoleReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)>:
100023ae0:     	stp	x20, x19, [sp, #-32]!
100023ae4:     	stp	x29, x30, [sp, #16]
100023ae8:     	add	x29, sp, #16
100023aec:     	mov	x19, x1
100023af0:     	mov	x20, x0
100023af4:     	ldr	x8, [x1, #16]
100023af8:     	ldr	x1, [x20, #48]!
100023afc:     	stur	x8, [x20, #-16]
100023b00:     	strb	wzr, [x20, #16]
100023b04:     	sub	x0, x20, #8
100023b08:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
100023b0c:     	stp	x20, xzr, [x20, #-8]
100023b10:     	str	xzr, [x20, #8]
100023b14:     	ldur	x0, [x20, #-32]
100023b18:     	mov	x1, x19
100023b1c:     	bl	0x1000299c4 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)>
100023b20:     	mov	w0, #1
100023b24:     	ldp	x29, x30, [sp, #16]
100023b28:     	ldp	x20, x19, [sp], #32
100023b2c:     	ret

0000000100023b30 <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)>:
100023b30:     	sub	sp, sp, #160
100023b34:     	stp	x24, x23, [sp, #96]
100023b38:     	stp	x22, x21, [sp, #112]
100023b3c:     	stp	x20, x19, [sp, #128]
100023b40:     	stp	x29, x30, [sp, #144]
100023b44:     	add	x29, sp, #144
100023b48:     	mov	x20, x1
100023b4c:     	mov	x19, x0
100023b50:     	ldr	x8, [x0, #32]
100023b54:     	adrp	x9, 0x100032000 <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0x60>
100023b58:     	add	x11, x9, #978
100023b5c:     	adrp	x9, 0x100032000 <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0x68>
100023b60:     	add	x9, x9, #974
100023b64:     	adrp	x10, 0x100032000 <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0x70>
100023b68:     	add	x10, x10, #969
100023b6c:     	stp	x9, x11, [sp, #24]
100023b70:     	adrp	x9, 0x100032000 <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0x7c>
100023b74:     	add	x9, x9, #959
100023b78:     	stp	x9, x10, [sp, #8]
100023b7c:     	str	x8, [sp]
100023b80:     	adrp	x0, 0x100032000 <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0x8c>
100023b84:     	add	x0, x0, #939
100023b88:     	add	x8, sp, #72
100023b8c:     	bl	0x100020460 <benchmark::FormatString(char const*, ...)>
100023b90:     	ldr	x8, [x20, #424]
100023b94:     	cbz	x8, 0x100023c6c <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0x13c>
100023b98:     	ldrb	w8, [x19, #24]
100023b9c:     	tbnz	w8, #1, 0x100023bb4 <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0x84>
100023ba0:     	adrp	x1, 0x100032000 <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0xac>
100023ba4:     	add	x1, x1, #995
100023ba8:     	add	x0, sp, #72
100023bac:     	bl	0x10002ed2c <_vsnprintf+0x10002ed2c>
100023bb0:     	b	0x100023c6c <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0x13c>
100023bb4:     	ldr	x23, [x20, #408]
100023bb8:     	add	x21, x20, #416
100023bbc:     	cmp	x23, x21
100023bc0:     	b.eq	0x100023c6c <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0x13c>
100023bc4:     	adrp	x20, 0x100032000 <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0xd0>
100023bc8:     	add	x20, x20, #989
100023bcc:     	add	x22, sp, #48
100023bd0:     	b	0x100023be0 <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0xb0>
100023bd4:     	mov	x23, x8
100023bd8:     	cmp	x8, x21
100023bdc:     	b.eq	0x100023c6c <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0x13c>
100023be0:     	add	x8, x23, #32
100023be4:     	ldrsb	w9, [x23, #55]
100023be8:     	tbz	w9, #31, 0x100023bf0 <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0xc0>
100023bec:     	ldr	x8, [x8]
100023bf0:     	str	x8, [sp]
100023bf4:     	add	x8, sp, #48
100023bf8:     	mov	x0, x20
100023bfc:     	bl	0x100020460 <benchmark::FormatString(char const*, ...)>
100023c00:     	ldrb	w8, [sp, #71]
100023c04:     	sxtb	w9, w8
100023c08:     	ldp	x10, x11, [sp, #48]
100023c0c:     	cmp	w9, #0
100023c10:     	csel	x1, x10, x22, lt
100023c14:     	csel	x2, x11, x8, lt
100023c18:     	add	x0, sp, #72
100023c1c:     	bl	0x10002ed38 <_vsnprintf+0x10002ed38>
100023c20:     	ldrsb	w8, [sp, #71]
100023c24:     	tbnz	w8, #31, 0x100023c34 <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0x104>
100023c28:     	ldr	x9, [x23, #8]
100023c2c:     	cbnz	x9, 0x100023c44 <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0x114>
100023c30:     	b	0x100023c54 <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0x124>
100023c34:     	ldr	x0, [sp, #48]
100023c38:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100023c3c:     	ldr	x9, [x23, #8]
100023c40:     	cbz	x9, 0x100023c54 <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0x124>
100023c44:     	mov	x8, x9
100023c48:     	ldr	x9, [x9]
100023c4c:     	cbnz	x9, 0x100023c44 <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0x114>
100023c50:     	b	0x100023bd4 <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0xa4>
100023c54:     	ldr	x8, [x23, #16]
100023c58:     	ldr	x9, [x8]
100023c5c:     	cmp	x9, x23
100023c60:     	mov	x23, x8
100023c64:     	b.ne	0x100023c54 <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0x124>
100023c68:     	b	0x100023bd4 <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0xa4>
100023c6c:     	ldrsb	w8, [sp, #95]
100023c70:     	tbnz	w8, #31, 0x100023c7c <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0x14c>
100023c74:     	and	x20, x8, #0xff
100023c78:     	b	0x100023c8c <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0x15c>
100023c7c:     	ldr	x20, [sp, #80]
100023c80:     	mov	x8, #9223372036854775792
100023c84:     	cmp	x20, x8
100023c88:     	b.hs	0x100023dc4 <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0x294>
100023c8c:     	cmp	x20, #23
100023c90:     	b.hs	0x100023ca4 <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0x174>
100023c94:     	strb	w20, [sp, #71]
100023c98:     	add	x21, sp, #48
100023c9c:     	cbnz	x20, 0x100023cc4 <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0x194>
100023ca0:     	b	0x100023cd4 <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0x1a4>
100023ca4:     	orr	x8, x20, #0xf
100023ca8:     	add	x22, x8, #1
100023cac:     	mov	x0, x22
100023cb0:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100023cb4:     	mov	x21, x0
100023cb8:     	orr	x8, x22, #0x8000000000000000
100023cbc:     	stp	x20, x8, [sp, #56]
100023cc0:     	str	x0, [sp, #48]
100023cc4:     	mov	x0, x21
100023cc8:     	mov	w1, #45
100023ccc:     	mov	x2, x20
100023cd0:     	bl	0x10002f1dc <_vsnprintf+0x10002f1dc>
100023cd4:     	strb	wzr, [x21, x20]
100023cd8:     	ldr	x0, [x19, #8]
100023cdc:     	ldrb	w8, [sp, #71]
100023ce0:     	sxtb	w9, w8
100023ce4:     	ldp	x10, x11, [sp, #48]
100023ce8:     	cmp	w9, #0
100023cec:     	add	x9, sp, #48
100023cf0:     	csel	x1, x10, x9, lt
100023cf4:     	csel	x2, x11, x8, lt
100023cf8:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100023cfc:     	adrp	x1, 0x100031000 <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0x204>
100023d00:     	add	x1, x1, #2523
100023d04:     	mov	w2, #1
100023d08:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100023d0c:     	ldrb	w8, [sp, #95]
100023d10:     	sxtb	w9, w8
100023d14:     	ldp	x10, x11, [sp, #72]
100023d18:     	cmp	w9, #0
100023d1c:     	add	x9, sp, #72
100023d20:     	csel	x1, x10, x9, lt
100023d24:     	csel	x2, x11, x8, lt
100023d28:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100023d2c:     	adrp	x1, 0x100031000 <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0x234>
100023d30:     	add	x1, x1, #2523
100023d34:     	mov	w2, #1
100023d38:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100023d3c:     	ldrb	w8, [sp, #71]
100023d40:     	sxtb	w9, w8
100023d44:     	ldp	x10, x11, [sp, #48]
100023d48:     	cmp	w9, #0
100023d4c:     	add	x9, sp, #48
100023d50:     	csel	x1, x10, x9, lt
100023d54:     	csel	x2, x11, x8, lt
100023d58:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100023d5c:     	adrp	x1, 0x100031000 <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0x264>
100023d60:     	add	x1, x1, #2523
100023d64:     	mov	w2, #1
100023d68:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100023d6c:     	ldrsb	w8, [sp, #71]
100023d70:     	tbnz	w8, #31, 0x100023d94 <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0x264>
100023d74:     	ldrsb	w8, [sp, #95]
100023d78:     	tbnz	w8, #31, 0x100023da4 <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0x274>
100023d7c:     	ldp	x29, x30, [sp, #144]
100023d80:     	ldp	x20, x19, [sp, #128]
100023d84:     	ldp	x22, x21, [sp, #112]
100023d88:     	ldp	x24, x23, [sp, #96]
100023d8c:     	add	sp, sp, #160
100023d90:     	ret
100023d94:     	ldr	x0, [sp, #48]
100023d98:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100023d9c:     	ldrsb	w8, [sp, #95]
100023da0:     	tbz	w8, #31, 0x100023d7c <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0x24c>
100023da4:     	ldr	x0, [sp, #72]
100023da8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100023dac:     	ldp	x29, x30, [sp, #144]
100023db0:     	ldp	x20, x19, [sp, #128]
100023db4:     	ldp	x22, x21, [sp, #112]
100023db8:     	ldp	x24, x23, [sp, #96]
100023dbc:     	add	sp, sp, #160
100023dc0:     	ret
100023dc4:     	add	x0, sp, #48
100023dc8:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
100023dcc:     	brk	#0x1
100023dd0:     	mov	x19, x0
100023dd4:     	ldrsb	w8, [sp, #95]
100023dd8:     	tbz	w8, #31, 0x100023e18 <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0x2e8>
100023ddc:     	b	0x100023e30 <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0x300>
100023de0:     	mov	x19, x0
100023de4:     	ldrsb	w8, [sp, #95]
100023de8:     	tbz	w8, #31, 0x100023e18 <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0x2e8>
100023dec:     	b	0x100023e30 <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0x300>
100023df0:     	b	0x100023e04 <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0x2d4>
100023df4:     	mov	x19, x0
100023df8:     	ldrsb	w8, [sp, #95]
100023dfc:     	tbz	w8, #31, 0x100023e18 <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0x2e8>
100023e00:     	b	0x100023e30 <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0x300>
100023e04:     	mov	x19, x0
100023e08:     	ldrsb	w8, [sp, #71]
100023e0c:     	tbnz	w8, #31, 0x100023e20 <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0x2f0>
100023e10:     	ldrsb	w8, [sp, #95]
100023e14:     	tbnz	w8, #31, 0x100023e30 <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0x300>
100023e18:     	mov	x0, x19
100023e1c:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
100023e20:     	ldr	x0, [sp, #48]
100023e24:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100023e28:     	ldrsb	w8, [sp, #95]
100023e2c:     	tbz	w8, #31, 0x100023e18 <benchmark::ConsoleReporter::PrintHeader(benchmark::BenchmarkReporter::Run const&)+0x2e8>
100023e30:     	ldr	x0, [sp, #72]
100023e34:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100023e38:     	mov	x0, x19
100023e3c:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100023e40 <benchmark::ConsoleReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)>:
100023e40:     	stp	x26, x25, [sp, #-80]!
100023e44:     	stp	x24, x23, [sp, #16]
100023e48:     	stp	x22, x21, [sp, #32]
100023e4c:     	stp	x20, x19, [sp, #48]
100023e50:     	stp	x29, x30, [sp, #64]
100023e54:     	add	x29, sp, #64
100023e58:     	ldp	x8, x24, [x1]
100023e5c:     	cmp	x8, x24
100023e60:     	b.eq	0x100023f18 <benchmark::ConsoleReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xd8>
100023e64:     	mov	x19, x0
100023e68:     	add	x20, x0, #40
100023e6c:     	add	x22, x8, #408
100023e70:     	add	x21, x8, #416
100023e74:     	mov	w25, #1
100023e78:     	b	0x100023eb8 <benchmark::ConsoleReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x78>
100023e7c:     	ldr	x8, [x19]
100023e80:     	ldr	x8, [x8, #56]
100023e84:     	mov	x0, x19
100023e88:     	mov	x1, x23
100023e8c:     	blr	x8
100023e90:     	ldr	x8, [x19]
100023e94:     	ldr	x8, [x8, #48]
100023e98:     	mov	x0, x19
100023e9c:     	mov	x1, x23
100023ea0:     	blr	x8
100023ea4:     	add	x8, x22, #40
100023ea8:     	add	x22, x22, #448
100023eac:     	add	x21, x21, #448
100023eb0:     	cmp	x8, x24
100023eb4:     	b.eq	0x100023f18 <benchmark::ConsoleReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xd8>
100023eb8:     	sub	x23, x22, #408
100023ebc:     	ldrb	w26, [x19, #64]
100023ec0:     	ldrb	w8, [x19, #24]
100023ec4:     	tbnz	w8, #1, 0x100023edc <benchmark::ConsoleReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x9c>
100023ec8:     	mov	w8, #0
100023ecc:     	eor	w9, w26, #0x1
100023ed0:     	orr	w8, w9, w8
100023ed4:     	cbnz	w8, 0x100023ef8 <benchmark::ConsoleReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xb8>
100023ed8:     	b	0x100023e90 <benchmark::ConsoleReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x50>
100023edc:     	mov	x0, x22
100023ee0:     	mov	x1, x20
100023ee4:     	bl	0x100024ae8 <benchmark::internal::SameNames(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)>
100023ee8:     	eor	w8, w0, #0x1
100023eec:     	eor	w9, w26, #0x1
100023ef0:     	orr	w8, w9, w8
100023ef4:     	cbz	w8, 0x100023e90 <benchmark::ConsoleReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x50>
100023ef8:     	strb	w25, [x19, #64]
100023efc:     	cmp	x22, x20
100023f00:     	b.eq	0x100023e7c <benchmark::ConsoleReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x3c>
100023f04:     	ldr	x1, [x22]
100023f08:     	mov	x0, x20
100023f0c:     	mov	x2, x21
100023f10:     	bl	0x1000095b0 <void std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__assign_multi<std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>>(std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, std::__1::__tree_const_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>)>
100023f14:     	b	0x100023e7c <benchmark::ConsoleReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x3c>
100023f18:     	ldp	x29, x30, [sp, #64]
100023f1c:     	ldp	x20, x19, [sp, #48]
100023f20:     	ldp	x22, x21, [sp, #32]
100023f24:     	ldp	x24, x23, [sp, #16]
100023f28:     	ldp	x26, x25, [sp], #80
100023f2c:     	ret

0000000100023f30 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)>:
100023f30:     	sub	sp, sp, #272
100023f34:     	stp	d11, d10, [sp, #144]
100023f38:     	stp	d9, d8, [sp, #160]
100023f3c:     	stp	x28, x27, [sp, #176]
100023f40:     	stp	x26, x25, [sp, #192]
100023f44:     	stp	x24, x23, [sp, #208]
100023f48:     	stp	x22, x21, [sp, #224]
100023f4c:     	stp	x20, x19, [sp, #240]
100023f50:     	stp	x29, x30, [sp, #256]
100023f54:     	add	x29, sp, #256
100023f58:     	mov	x20, x1
100023f5c:     	mov	x21, x0
100023f60:     	ldr	x19, [x0, #8]
100023f64:     	ldr	w8, [x0, #24]
100023f68:     	adrp	x9, 0x100020000 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x2c>
100023f6c:     	add	x9, x9, #1160
100023f70:     	adrp	x10, 0x100024000 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x44>
100023f74:     	add	x10, x10, #1488
100023f78:     	tst	w8, #0x1
100023f7c:     	csel	x26, x10, x9, eq
100023f80:     	ldrb	w8, [x1, #400]
100023f84:     	ldrb	w9, [x1, #401]
100023f88:     	orr	w8, w8, w9
100023f8c:     	mov	w9, #2
100023f90:     	mov	w10, #4
100023f94:     	cmp	w8, #0
100023f98:     	csel	w22, w10, w9, ne
100023f9c:     	ldr	x23, [x0, #32]
100023fa0:     	add	x24, sp, #112
100023fa4:     	add	x8, sp, #112
100023fa8:     	mov	x0, x1
100023fac:     	bl	0x100029ed4 <benchmark::BenchmarkReporter::Run::benchmark_name() const>
100023fb0:     	ldrsb	w8, [sp, #135]
100023fb4:     	ldr	x9, [sp, #112]
100023fb8:     	cmp	w8, #0
100023fbc:     	csel	x8, x9, x24, lt
100023fc0:     	stp	x23, x8, [sp]
100023fc4:     	adrp	x2, 0x100032000 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xd0>
100023fc8:     	add	x2, x2, #1012
100023fcc:     	mov	x0, x19
100023fd0:     	mov	x1, x22
100023fd4:     	blr	x26
100023fd8:     	ldrsb	w8, [sp, #135]
100023fdc:     	tbnz	w8, #31, 0x100024020 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xf0>
100023fe0:     	ldr	w8, [x20, #272]
100023fe4:     	cmp	w8, #1
100023fe8:     	b.eq	0x100024034 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x104>
100023fec:     	cmp	w8, #2
100023ff0:     	b.ne	0x100024078 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x148>
100023ff4:     	add	x8, x20, #280
100023ff8:     	ldrsb	w9, [x20, #303]
100023ffc:     	ldr	x10, [x20, #280]
100024000:     	cmp	w9, #0
100024004:     	csel	x8, x10, x8, lt
100024008:     	str	x8, [sp]
10002400c:     	adrp	x2, 0x100032000 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x114>
100024010:     	add	x2, x2, #1018
100024014:     	mov	x0, x19
100024018:     	mov	w1, #1
10002401c:     	b	0x10002405c <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x12c>
100024020:     	ldr	x0, [sp, #112]
100024024:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100024028:     	ldr	w8, [x20, #272]
10002402c:     	cmp	w8, #1
100024030:     	b.ne	0x100023fec <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xbc>
100024034:     	add	x8, x20, #280
100024038:     	ldrsb	w9, [x20, #303]
10002403c:     	ldr	x10, [x20, #280]
100024040:     	cmp	w9, #0
100024044:     	csel	x8, x10, x8, lt
100024048:     	str	x8, [sp]
10002404c:     	adrp	x2, 0x100032000 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x154>
100024050:     	add	x2, x2, #1039
100024054:     	mov	x0, x19
100024058:     	mov	w1, #7
10002405c:     	blr	x26
100024060:     	adrp	x2, 0x100031000 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x164>
100024064:     	add	x2, x2, #2523
100024068:     	mov	x0, x19
10002406c:     	mov	w1, #0
100024070:     	blr	x26
100024074:     	b	0x10002449c <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x56c>
100024078:     	mov	x0, x20
10002407c:     	bl	0x100029fb0 <benchmark::BenchmarkReporter::Run::GetAdjustedRealTime() const>
100024080:     	fmov	d8, d0
100024084:     	mov	x0, x20
100024088:     	bl	0x100029fdc <benchmark::BenchmarkReporter::Run::GetAdjustedCPUTime() const>
10002408c:     	fmov	d9, d0
100024090:     	adrp	x8, 0x100032000 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x198>
100024094:     	add	x8, x8, #1159
100024098:     	fmov	d11, #1.00000000
10002409c:     	adrp	x9, 0x100032000 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1a4>
1000240a0:     	add	x9, x9, #1166
1000240a4:     	fmov	d10, #10.00000000
1000240a8:     	adrp	x10, 0x100032000 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1b0>
1000240ac:     	add	x10, x10, #1173
1000240b0:     	mov	x11, #4636737291354636288
1000240b4:     	fmov	d0, x11
1000240b8:     	adrp	x22, 0x100032000 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1c0>
1000240bc:     	add	x22, x22, #1186
1000240c0:     	adrp	x23, 0x100032000 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1c8>
1000240c4:     	add	x23, x23, #1180
1000240c8:     	mov	x11, #536346624
1000240cc:     	movk	x11, #41055, lsl #32
1000240d0:     	movk	x11, #16898, lsl #48
1000240d4:     	fmov	d1, x11
1000240d8:     	fcmp	d8, d1
1000240dc:     	csel	x11, x23, x22, gt
1000240e0:     	fcmp	d8, d0
1000240e4:     	csel	x10, x10, x11, mi
1000240e8:     	fcmp	d8, d10
1000240ec:     	csel	x9, x9, x10, mi
1000240f0:     	fcmp	d8, d11
1000240f4:     	csel	x0, x8, x9, mi
1000240f8:     	str	d8, [sp]
1000240fc:     	add	x8, sp, #112
100024100:     	bl	0x100020460 <benchmark::FormatString(char const*, ...)>
100024104:     	fcmp	d9, d11
100024108:     	b.pl	0x100024118 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1e8>
10002410c:     	adrp	x0, 0x100032000 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x214>
100024110:     	add	x0, x0, #1159
100024114:     	b	0x100024160 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x230>
100024118:     	fcmp	d9, d10
10002411c:     	b.pl	0x10002412c <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1fc>
100024120:     	adrp	x0, 0x100032000 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x228>
100024124:     	add	x0, x0, #1166
100024128:     	b	0x100024160 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x230>
10002412c:     	mov	x8, #4636737291354636288
100024130:     	fmov	d0, x8
100024134:     	fcmp	d9, d0
100024138:     	b.pl	0x100024148 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x218>
10002413c:     	adrp	x0, 0x100032000 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x244>
100024140:     	add	x0, x0, #1173
100024144:     	b	0x100024160 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x230>
100024148:     	mov	x8, #536346624
10002414c:     	movk	x8, #41055, lsl #32
100024150:     	movk	x8, #16898, lsl #48
100024154:     	fmov	d0, x8
100024158:     	fcmp	d9, d0
10002415c:     	csel	x0, x23, x22, gt
100024160:     	str	d9, [sp]
100024164:     	add	x8, sp, #88
100024168:     	bl	0x100020460 <benchmark::FormatString(char const*, ...)>
10002416c:     	ldrb	w8, [x20, #400]
100024170:     	cbz	w8, 0x1000241cc <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x29c>
100024174:     	ldr	w0, [x20, #368]
100024178:     	add	x22, sp, #64
10002417c:     	add	x8, sp, #64
100024180:     	bl	0x100022704 <benchmark::GetBigOString(benchmark::BigO)>
100024184:     	ldrsb	w8, [sp, #87]
100024188:     	ldr	x9, [sp, #64]
10002418c:     	cmp	w8, #0
100024190:     	csel	x8, x9, x22, lt
100024194:     	str	x8, [sp, #24]
100024198:     	str	d9, [sp, #16]
10002419c:     	str	x8, [sp, #8]
1000241a0:     	str	d8, [sp]
1000241a4:     	adrp	x2, 0x100032000 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x2ac>
1000241a8:     	add	x2, x2, #1053
1000241ac:     	mov	x0, x19
1000241b0:     	mov	w1, #3
1000241b4:     	blr	x26
1000241b8:     	ldrsb	w8, [sp, #87]
1000241bc:     	tbz	w8, #31, 0x100024234 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x304>
1000241c0:     	ldr	x0, [sp, #64]
1000241c4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000241c8:     	b	0x100024234 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x304>
1000241cc:     	ldrb	w8, [x20, #401]
1000241d0:     	cbz	w8, 0x1000241e0 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x2b0>
1000241d4:     	adrp	x2, 0x100032000 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x2dc>
1000241d8:     	add	x2, x2, #1078
1000241dc:     	b	0x100024200 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x2d0>
1000241e0:     	ldr	w8, [x20, #208]
1000241e4:     	cmp	w8, #1
1000241e8:     	b.ne	0x1000244e0 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x5b0>
1000241ec:     	ldr	w8, [x20, #240]
1000241f0:     	cbz	w8, 0x1000244e0 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x5b0>
1000241f4:     	ldp	d8, d9, [x20, #344]
1000241f8:     	adrp	x2, 0x100032000 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x300>
1000241fc:     	add	x2, x2, #1053
100024200:     	mov	x8, #4636737291354636288
100024204:     	fmov	d0, x8
100024208:     	fmul	d1, d8, d0
10002420c:     	fmul	d0, d9, d0
100024210:     	adrp	x8, 0x100032000 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x318>
100024214:     	add	x8, x8, #1103
100024218:     	str	x8, [sp, #24]
10002421c:     	str	d0, [sp, #16]
100024220:     	str	x8, [sp, #8]
100024224:     	str	d1, [sp]
100024228:     	mov	x0, x19
10002422c:     	mov	w1, #3
100024230:     	blr	x26
100024234:     	ldrb	w8, [x20, #400]
100024238:     	ldrb	w9, [x20, #401]
10002423c:     	orr	w8, w8, w9
100024240:     	cbnz	w8, 0x100024260 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x330>
100024244:     	ldr	x8, [x20, #304]
100024248:     	str	x8, [sp]
10002424c:     	adrp	x2, 0x100032000 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x354>
100024250:     	add	x2, x2, #1122
100024254:     	mov	x0, x19
100024258:     	mov	w1, #6
10002425c:     	blr	x26
100024260:     	ldr	x22, [x20, #408]
100024264:     	add	x27, x20, #416
100024268:     	cmp	x22, x27
10002426c:     	b.eq	0x100024440 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x510>
100024270:     	mov	w28, #10
100024274:     	add	x23, sp, #64
100024278:     	b	0x100024288 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x358>
10002427c:     	mov	x22, x8
100024280:     	cmp	x8, x27
100024284:     	b.eq	0x100024440 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x510>
100024288:     	ldrsb	w8, [x22, #55]
10002428c:     	tbnz	w8, #31, 0x100024298 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x368>
100024290:     	and	x8, x8, #0xff
100024294:     	b	0x10002429c <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x36c>
100024298:     	ldr	x8, [x22, #40]
10002429c:     	cmp	x8, #10
1000242a0:     	csel	x24, x8, x28, hi
1000242a4:     	stp	xzr, xzr, [sp, #64]
1000242a8:     	str	xzr, [sp, #80]
1000242ac:     	ldr	w8, [x20, #208]
1000242b0:     	ldr	w9, [x20, #240]
1000242b4:     	cmp	w8, #1
1000242b8:     	ccmp	w9, #1, #0, eq
1000242bc:     	b.eq	0x100024364 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x434>
1000242c0:     	ldr	d0, [x22, #56]
1000242c4:     	ldr	s1, [x22, #68]
1000242c8:     	ucvtf	d1, d1
1000242cc:     	add	x8, sp, #40
1000242d0:     	bl	0x10002c504 <benchmark::HumanReadableNumber(double, double)>
1000242d4:     	ldrsb	w8, [sp, #87]
1000242d8:     	tbz	w8, #31, 0x1000242e4 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x3b4>
1000242dc:     	ldr	x0, [sp, #64]
1000242e0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000242e4:     	ldur	q0, [sp, #40]
1000242e8:     	str	q0, [sp, #64]
1000242ec:     	ldr	x8, [sp, #56]
1000242f0:     	str	x8, [sp, #80]
1000242f4:     	ldr	w8, [x22, #64]
1000242f8:     	cmp	w8, #0
1000242fc:     	adrp	x9, 0x100032000 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x404>
100024300:     	add	x9, x9, #1134
100024304:     	adrp	x10, 0x100032000 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x40c>
100024308:     	add	x10, x10, #1136
10002430c:     	csel	x9, x10, x9, ge
100024310:     	tst	w8, #0x1
100024314:     	adrp	x8, 0x100031000 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x418>
100024318:     	add	x8, x8, #1905
10002431c:     	csel	x25, x8, x9, eq
100024320:     	ldrb	w8, [x21, #24]
100024324:     	tbz	w8, #1, 0x1000243b8 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x488>
100024328:     	mov	x0, x25
10002432c:     	bl	0x10002f254 <_vsnprintf+0x10002f254>
100024330:     	sub	x8, x24, x0
100024334:     	ldrsb	w9, [sp, #87]
100024338:     	ldr	x10, [sp, #64]
10002433c:     	cmp	w9, #0
100024340:     	csel	x9, x10, x23, lt
100024344:     	stp	x9, x25, [sp, #8]
100024348:     	str	x8, [sp]
10002434c:     	mov	x0, x19
100024350:     	mov	w1, #0
100024354:     	adrp	x2, 0x100032000 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x45c>
100024358:     	add	x2, x2, #1139
10002435c:     	blr	x26
100024360:     	b	0x1000243f4 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x4c4>
100024364:     	ldr	d0, [x22, #56]
100024368:     	mov	x8, #4636737291354636288
10002436c:     	fmov	d1, x8
100024370:     	fmul	d0, d0, d1
100024374:     	str	d0, [sp]
100024378:     	add	x8, sp, #40
10002437c:     	adrp	x0, 0x100032000 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x484>
100024380:     	add	x0, x0, #1129
100024384:     	bl	0x10002c6d0 <benchmark::StrFormat(char const*, ...)>
100024388:     	ldrsb	w8, [sp, #87]
10002438c:     	tbz	w8, #31, 0x100024398 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x468>
100024390:     	ldr	x0, [sp, #64]
100024394:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100024398:     	ldur	q0, [sp, #40]
10002439c:     	str	q0, [sp, #64]
1000243a0:     	ldr	x8, [sp, #56]
1000243a4:     	str	x8, [sp, #80]
1000243a8:     	adrp	x25, 0x100032000 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x4b0>
1000243ac:     	add	x25, x25, #1103
1000243b0:     	ldrb	w8, [x21, #24]
1000243b4:     	tbnz	w8, #1, 0x100024328 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x3f8>
1000243b8:     	add	x8, x22, #32
1000243bc:     	ldrsb	w9, [x22, #55]
1000243c0:     	tbz	w9, #31, 0x1000243c8 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x498>
1000243c4:     	ldr	x8, [x8]
1000243c8:     	ldrsb	w9, [sp, #87]
1000243cc:     	ldr	x10, [sp, #64]
1000243d0:     	cmp	w9, #0
1000243d4:     	csel	x9, x10, x23, lt
1000243d8:     	stp	x9, x25, [sp, #8]
1000243dc:     	str	x8, [sp]
1000243e0:     	mov	x0, x19
1000243e4:     	mov	w1, #0
1000243e8:     	adrp	x2, 0x100032000 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x4f0>
1000243ec:     	add	x2, x2, #1146
1000243f0:     	blr	x26
1000243f4:     	ldrsb	w8, [sp, #87]
1000243f8:     	tbnz	w8, #31, 0x100024408 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x4d8>
1000243fc:     	ldr	x9, [x22, #8]
100024400:     	cbnz	x9, 0x100024418 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x4e8>
100024404:     	b	0x100024428 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x4f8>
100024408:     	ldr	x0, [sp, #64]
10002440c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100024410:     	ldr	x9, [x22, #8]
100024414:     	cbz	x9, 0x100024428 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x4f8>
100024418:     	mov	x8, x9
10002441c:     	ldr	x9, [x9]
100024420:     	cbnz	x9, 0x100024418 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x4e8>
100024424:     	b	0x10002427c <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x34c>
100024428:     	ldr	x8, [x22, #16]
10002442c:     	ldr	x9, [x8]
100024430:     	cmp	x9, x22
100024434:     	mov	x22, x8
100024438:     	b.ne	0x100024428 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x4f8>
10002443c:     	b	0x10002427c <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x34c>
100024440:     	add	x8, x20, #248
100024444:     	ldrsb	w9, [x20, #271]
100024448:     	tbnz	w9, #31, 0x100024454 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x524>
10002444c:     	cbnz	w9, 0x100024460 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x530>
100024450:     	b	0x100024478 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x548>
100024454:     	ldr	x9, [x20, #256]
100024458:     	cbz	x9, 0x100024478 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x548>
10002445c:     	ldr	x8, [x8]
100024460:     	str	x8, [sp]
100024464:     	adrp	x2, 0x100032000 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x56c>
100024468:     	add	x2, x2, #1155
10002446c:     	mov	x0, x19
100024470:     	mov	w1, #0
100024474:     	blr	x26
100024478:     	adrp	x2, 0x100031000 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x57c>
10002447c:     	add	x2, x2, #2523
100024480:     	mov	x0, x19
100024484:     	mov	w1, #0
100024488:     	blr	x26
10002448c:     	ldrsb	w8, [sp, #111]
100024490:     	tbnz	w8, #31, 0x1000244c4 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x594>
100024494:     	ldrsb	w8, [sp, #135]
100024498:     	tbnz	w8, #31, 0x1000244d4 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x5a4>
10002449c:     	ldp	x29, x30, [sp, #256]
1000244a0:     	ldp	x20, x19, [sp, #240]
1000244a4:     	ldp	x22, x21, [sp, #224]
1000244a8:     	ldp	x24, x23, [sp, #208]
1000244ac:     	ldp	x26, x25, [sp, #192]
1000244b0:     	ldp	x28, x27, [sp, #176]
1000244b4:     	ldp	d9, d8, [sp, #160]
1000244b8:     	ldp	d11, d10, [sp, #144]
1000244bc:     	add	sp, sp, #272
1000244c0:     	ret
1000244c4:     	ldr	x0, [sp, #88]
1000244c8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000244cc:     	ldrsb	w8, [sp, #135]
1000244d0:     	tbz	w8, #31, 0x10002449c <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x56c>
1000244d4:     	ldr	x0, [sp, #112]
1000244d8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000244dc:     	b	0x10002449c <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x56c>
1000244e0:     	ldrsw	x8, [x20, #336]
1000244e4:     	adrp	x9, 0x100034000 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x5f4>
1000244e8:     	add	x9, x9, #3368
1000244ec:     	ldr	x8, [x9, x8, lsl #3]
1000244f0:     	ldrsb	w9, [sp, #135]
1000244f4:     	ldr	x10, [sp, #112]
1000244f8:     	cmp	w9, #0
1000244fc:     	add	x9, sp, #112
100024500:     	csel	x9, x10, x9, lt
100024504:     	ldrsb	w10, [sp, #111]
100024508:     	ldr	x11, [sp, #88]
10002450c:     	cmp	w10, #0
100024510:     	add	x10, sp, #88
100024514:     	csel	x10, x11, x10, lt
100024518:     	stp	x10, x8, [sp, #16]
10002451c:     	stp	x9, x8, [sp]
100024520:     	adrp	x2, 0x100032000 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x628>
100024524:     	add	x2, x2, #1105
100024528:     	mov	x0, x19
10002452c:     	mov	w1, #3
100024530:     	blr	x26
100024534:     	b	0x100024234 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x304>
100024538:     	b	0x100024554 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x624>
10002453c:     	b	0x10002457c <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x64c>
100024540:     	b	0x100024554 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x624>
100024544:     	mov	x19, x0
100024548:     	ldrsb	w8, [sp, #135]
10002454c:     	tbz	w8, #31, 0x100024598 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x668>
100024550:     	b	0x1000245c0 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x690>
100024554:     	mov	x19, x0
100024558:     	ldrsb	w8, [sp, #111]
10002455c:     	tbz	w8, #31, 0x100024590 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x660>
100024560:     	b	0x1000245b0 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x680>
100024564:     	mov	x19, x0
100024568:     	ldrsb	w8, [sp, #135]
10002456c:     	tbz	w8, #31, 0x100024598 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x668>
100024570:     	b	0x1000245c0 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x690>
100024574:     	b	0x10002457c <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x64c>
100024578:     	b	0x10002457c <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x64c>
10002457c:     	mov	x19, x0
100024580:     	ldrsb	w8, [sp, #87]
100024584:     	tbnz	w8, #31, 0x1000245a0 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x670>
100024588:     	ldrsb	w8, [sp, #111]
10002458c:     	tbnz	w8, #31, 0x1000245b0 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x680>
100024590:     	ldrsb	w8, [sp, #135]
100024594:     	tbnz	w8, #31, 0x1000245c0 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x690>
100024598:     	mov	x0, x19
10002459c:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
1000245a0:     	ldr	x0, [sp, #64]
1000245a4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000245a8:     	ldrsb	w8, [sp, #111]
1000245ac:     	tbz	w8, #31, 0x100024590 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x660>
1000245b0:     	ldr	x0, [sp, #88]
1000245b4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000245b8:     	ldrsb	w8, [sp, #135]
1000245bc:     	tbz	w8, #31, 0x100024598 <benchmark::ConsoleReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x668>
1000245c0:     	ldr	x0, [sp, #112]
1000245c4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000245c8:     	mov	x0, x19
1000245cc:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

00000001000245d0 <benchmark::IgnoreColorPrint(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, benchmark::LogColor, char const*, ...)>:
1000245d0:     	sub	sp, sp, #64
1000245d4:     	stp	x20, x19, [sp, #32]
1000245d8:     	stp	x29, x30, [sp, #48]
1000245dc:     	add	x29, sp, #48
1000245e0:     	mov	x19, x0
1000245e4:     	add	x8, x29, #16
1000245e8:     	str	x8, [sp, #24]
1000245ec:     	mov	x20, sp
1000245f0:     	mov	x8, sp
1000245f4:     	add	x1, x29, #16
1000245f8:     	mov	x0, x2
1000245fc:     	bl	0x100020240 <benchmark::FormatString(char const*, char*)>
100024600:     	ldrb	w8, [sp, #23]
100024604:     	sxtb	w9, w8
100024608:     	ldp	x10, x11, [sp]
10002460c:     	cmp	w9, #0
100024610:     	csel	x1, x10, x20, lt
100024614:     	csel	x2, x11, x8, lt
100024618:     	mov	x0, x19
10002461c:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100024620:     	ldrsb	w8, [sp, #23]
100024624:     	tbnz	w8, #31, 0x100024638 <benchmark::IgnoreColorPrint(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, benchmark::LogColor, char const*, ...)+0x68>
100024628:     	ldp	x29, x30, [sp, #48]
10002462c:     	ldp	x20, x19, [sp, #32]
100024630:     	add	sp, sp, #64
100024634:     	ret
100024638:     	ldr	x0, [sp]
10002463c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100024640:     	ldp	x29, x30, [sp, #48]
100024644:     	ldp	x20, x19, [sp, #32]
100024648:     	add	sp, sp, #64
10002464c:     	ret
100024650:     	mov	x19, x0
100024654:     	ldrsb	w8, [sp, #23]
100024658:     	tbz	w8, #31, 0x100024664 <benchmark::IgnoreColorPrint(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, benchmark::LogColor, char const*, ...)+0x94>
10002465c:     	ldr	x0, [sp]
100024660:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100024664:     	mov	x0, x19
100024668:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010002466c <benchmark::BenchmarkReporter::ReportRunsConfig(double, bool, long long)>:
10002466c:     	ret

0000000100024670 <benchmark::BenchmarkReporter::Finalize()>:
100024670:     	ret

0000000100024674 <benchmark::ConsoleReporter::~ConsoleReporter()>:
100024674:     	stp	x20, x19, [sp, #-32]!
100024678:     	stp	x29, x30, [sp, #16]
10002467c:     	add	x29, sp, #16
100024680:     	mov	x19, x0
100024684:     	adrp	x8, 0x100034000 <benchmark::ConsoleReporter::~ConsoleReporter()+0x1c>
100024688:     	add	x8, x8, #3280
10002468c:     	str	x8, [x0], #40
100024690:     	ldr	x1, [x19, #48]
100024694:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
100024698:     	mov	x0, x19
10002469c:     	ldp	x29, x30, [sp, #16]
1000246a0:     	ldp	x20, x19, [sp], #32
1000246a4:     	b	0x1000299b8 <benchmark::BenchmarkReporter::~BenchmarkReporter()>

00000001000246a8 <benchmark::ConsoleReporter::~ConsoleReporter()>:
1000246a8:     	stp	x20, x19, [sp, #-32]!
1000246ac:     	stp	x29, x30, [sp, #16]
1000246b0:     	add	x29, sp, #16
1000246b4:     	mov	x19, x0
1000246b8:     	adrp	x8, 0x100034000 <benchmark::internal::Finish(benchmark::Counter const&, long long, double, double)+0x14>
1000246bc:     	add	x8, x8, #3280
1000246c0:     	str	x8, [x0], #40
1000246c4:     	ldr	x1, [x19, #48]
1000246c8:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
1000246cc:     	mov	x0, x19
1000246d0:     	bl	0x1000299b8 <benchmark::BenchmarkReporter::~BenchmarkReporter()>
1000246d4:     	ldp	x29, x30, [sp, #16]
1000246d8:     	ldp	x20, x19, [sp], #32
1000246dc:     	b	0x10002f014 <_vsnprintf+0x10002f014>

00000001000246e0 <__GLOBAL__sub_I_console_reporter.cc>:
1000246e0:     	b	0x10000363c <benchmark::internal::InitializeStreams()>

00000001000246e4 <benchmark::internal::Finish(benchmark::Counter const&, long long, double, double)>:
1000246e4:     	ldr	d2, [x0]
1000246e8:     	ldr	w8, [x0, #8]
1000246ec:     	tst	w8, #0x1
1000246f0:     	fmov	d3, #1.00000000
1000246f4:     	fcsel	d0, d3, d0, eq
1000246f8:     	fdiv	d0, d2, d0
1000246fc:     	tst	w8, #0x2
100024700:     	fcsel	d1, d3, d1, eq
100024704:     	fdiv	d0, d0, d1
100024708:     	scvtf	d1, x1
10002470c:     	tst	w8, #0x4
100024710:     	fcsel	d2, d3, d1, eq
100024714:     	fmul	d0, d2, d0
100024718:     	tst	w8, #0x8
10002471c:     	fcsel	d1, d3, d1, eq
100024720:     	fdiv	d0, d0, d1
100024724:     	fdiv	d1, d3, d0
100024728:     	cmp	w8, #0
10002472c:     	fcsel	d0, d1, d0, lt
100024730:     	ret

0000000100024734 <benchmark::internal::Finish(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>>*, long long, double, double)>:
100024734:     	ldr	x8, [x0], #8
100024738:     	cmp	x8, x0
10002473c:     	b.eq	0x1000247d0 <benchmark::internal::Finish(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>>*, long long, double, double)+0x9c>
100024740:     	scvtf	d2, x1
100024744:     	fmov	d3, #1.00000000
100024748:     	b	0x100024758 <benchmark::internal::Finish(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>>*, long long, double, double)+0x24>
10002474c:     	mov	x8, x9
100024750:     	cmp	x9, x0
100024754:     	b.eq	0x1000247d0 <benchmark::internal::Finish(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>>*, long long, double, double)+0x9c>
100024758:     	ldr	d4, [x8, #56]
10002475c:     	ldr	w9, [x8, #64]
100024760:     	tst	w9, #0x1
100024764:     	fcsel	d5, d3, d0, eq
100024768:     	fdiv	d4, d4, d5
10002476c:     	tst	w9, #0x2
100024770:     	fcsel	d5, d3, d1, eq
100024774:     	fdiv	d4, d4, d5
100024778:     	tst	w9, #0x4
10002477c:     	fcsel	d5, d3, d2, eq
100024780:     	fmul	d4, d5, d4
100024784:     	tst	w9, #0x8
100024788:     	fcsel	d5, d3, d2, eq
10002478c:     	fdiv	d4, d4, d5
100024790:     	fdiv	d5, d3, d4
100024794:     	cmp	w9, #0
100024798:     	fcsel	d4, d5, d4, lt
10002479c:     	str	d4, [x8, #56]
1000247a0:     	ldr	x10, [x8, #8]
1000247a4:     	cbz	x10, 0x1000247b8 <benchmark::internal::Finish(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>>*, long long, double, double)+0x84>
1000247a8:     	mov	x9, x10
1000247ac:     	ldr	x10, [x10]
1000247b0:     	cbnz	x10, 0x1000247a8 <benchmark::internal::Finish(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>>*, long long, double, double)+0x74>
1000247b4:     	b	0x10002474c <benchmark::internal::Finish(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>>*, long long, double, double)+0x18>
1000247b8:     	ldr	x9, [x8, #16]
1000247bc:     	ldr	x10, [x9]
1000247c0:     	cmp	x10, x8
1000247c4:     	mov	x8, x9
1000247c8:     	b.ne	0x1000247b8 <benchmark::internal::Finish(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>>*, long long, double, double)+0x84>
1000247cc:     	b	0x10002474c <benchmark::internal::Finish(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>>*, long long, double, double)+0x18>
1000247d0:     	ret

00000001000247d4 <benchmark::internal::Increment(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>>*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)>:
1000247d4:     	sub	sp, sp, #128
1000247d8:     	stp	x28, x27, [sp, #32]
1000247dc:     	stp	x26, x25, [sp, #48]
1000247e0:     	stp	x24, x23, [sp, #64]
1000247e4:     	stp	x22, x21, [sp, #80]
1000247e8:     	stp	x20, x19, [sp, #96]
1000247ec:     	stp	x29, x30, [sp, #112]
1000247f0:     	add	x29, sp, #112
1000247f4:     	mov	x19, x1
1000247f8:     	str	x0, [sp, #8]
1000247fc:     	mov	x24, x0
100024800:     	ldr	x22, [x24], #8
100024804:     	cmp	x22, x24
100024808:     	b.eq	0x10002497c <benchmark::internal::Increment(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>>*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x1a8>
10002480c:     	mov	x23, x19
100024810:     	ldr	x25, [x23, #8]!
100024814:     	cbnz	x25, 0x100024828 <benchmark::internal::Increment(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>>*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x54>
100024818:     	b	0x10002494c <benchmark::internal::Increment(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>>*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x178>
10002481c:     	mov	x22, x8
100024820:     	cmp	x8, x24
100024824:     	b.eq	0x10002497c <benchmark::internal::Increment(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>>*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x1a8>
100024828:     	mov	x8, x22
10002482c:     	ldr	x9, [x8, #32]!
100024830:     	ldrb	w10, [x8, #23]
100024834:     	sxtb	w11, w10
100024838:     	cmp	w11, #0
10002483c:     	ldr	x11, [x8, #8]
100024840:     	csel	x27, x11, x10, lt
100024844:     	csel	x21, x9, x8, lt
100024848:     	mov	x26, x23
10002484c:     	mov	x28, x25
100024850:     	ldrb	w8, [x28, #55]
100024854:     	sxtb	w9, w8
100024858:     	mov	x10, x28
10002485c:     	ldr	x11, [x10, #32]!
100024860:     	ldr	x12, [x28, #40]
100024864:     	cmp	w9, #0
100024868:     	csel	x20, x12, x8, lt
10002486c:     	csel	x0, x11, x10, lt
100024870:     	cmp	x27, x20
100024874:     	csel	x2, x27, x20, lo
100024878:     	mov	x1, x21
10002487c:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
100024880:     	cmp	x20, x27
100024884:     	cset	w8, lo
100024888:     	cmp	w0, #0
10002488c:     	cset	w9, lt
100024890:     	csel	w8, w8, w9, eq
100024894:     	add	x9, x28, #8
100024898:     	cmp	w8, #0
10002489c:     	csel	x8, x9, x28, ne
1000248a0:     	csel	x26, x26, x28, ne
1000248a4:     	ldr	x28, [x8]
1000248a8:     	cbnz	x28, 0x100024850 <benchmark::internal::Increment(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>>*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x7c>
1000248ac:     	cmp	x26, x23
1000248b0:     	b.eq	0x100024910 <benchmark::internal::Increment(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>>*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x13c>
1000248b4:     	mov	x8, x26
1000248b8:     	ldr	x9, [x8, #32]!
1000248bc:     	ldrb	w10, [x8, #23]
1000248c0:     	sxtb	w11, w10
1000248c4:     	ldr	x12, [x8, #8]
1000248c8:     	cmp	w11, #0
1000248cc:     	csel	x20, x12, x10, lt
1000248d0:     	csel	x1, x9, x8, lt
1000248d4:     	cmp	x20, x27
1000248d8:     	csel	x2, x20, x27, lo
1000248dc:     	mov	x0, x21
1000248e0:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
1000248e4:     	cmp	x27, x20
1000248e8:     	cset	w8, hs
1000248ec:     	cmp	w0, #0
1000248f0:     	cset	w9, ge
1000248f4:     	csel	w8, w8, w9, eq
1000248f8:     	cmp	w8, #1
1000248fc:     	b.ne	0x100024910 <benchmark::internal::Increment(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>>*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x13c>
100024900:     	ldr	d0, [x22, #56]
100024904:     	ldr	d1, [x26, #56]
100024908:     	fadd	d0, d0, d1
10002490c:     	str	d0, [x22, #56]
100024910:     	ldr	x9, [x22, #8]
100024914:     	cbz	x9, 0x100024928 <benchmark::internal::Increment(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>>*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x154>
100024918:     	mov	x8, x9
10002491c:     	ldr	x9, [x9]
100024920:     	cbnz	x9, 0x100024918 <benchmark::internal::Increment(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>>*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x144>
100024924:     	b	0x10002481c <benchmark::internal::Increment(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>>*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x48>
100024928:     	ldr	x8, [x22, #16]
10002492c:     	ldr	x9, [x8]
100024930:     	cmp	x9, x22
100024934:     	mov	x22, x8
100024938:     	b.ne	0x100024928 <benchmark::internal::Increment(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>>*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x154>
10002493c:     	b	0x10002481c <benchmark::internal::Increment(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>>*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x48>
100024940:     	mov	x22, x8
100024944:     	cmp	x8, x24
100024948:     	b.eq	0x10002497c <benchmark::internal::Increment(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>>*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x1a8>
10002494c:     	ldr	x9, [x22, #8]
100024950:     	cbz	x9, 0x100024964 <benchmark::internal::Increment(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>>*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x190>
100024954:     	mov	x8, x9
100024958:     	ldr	x9, [x9]
10002495c:     	cbnz	x9, 0x100024954 <benchmark::internal::Increment(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>>*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x180>
100024960:     	b	0x100024940 <benchmark::internal::Increment(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>>*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x16c>
100024964:     	ldr	x8, [x22, #16]
100024968:     	ldr	x9, [x8]
10002496c:     	cmp	x9, x22
100024970:     	mov	x22, x8
100024974:     	b.ne	0x100024964 <benchmark::internal::Increment(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>>*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x190>
100024978:     	b	0x100024940 <benchmark::internal::Increment(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>>*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x16c>
10002497c:     	ldr	x25, [x19], #8
100024980:     	cmp	x25, x19
100024984:     	b.eq	0x100024ac8 <benchmark::internal::Increment(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>>*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x2f4>
100024988:     	adrp	x21, 0x100033000 <benchmark::internal::Increment(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>>*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x1f0>
10002498c:     	add	x21, x21, #678
100024990:     	b	0x1000249a0 <benchmark::internal::Increment(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>>*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x1cc>
100024994:     	mov	x25, x8
100024998:     	cmp	x8, x19
10002499c:     	b.eq	0x100024ac8 <benchmark::internal::Increment(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>>*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x2f4>
1000249a0:     	add	x22, x25, #32
1000249a4:     	ldr	x28, [x24]
1000249a8:     	cbz	x28, 0x100024a74 <benchmark::internal::Increment(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>>*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x2a0>
1000249ac:     	ldrb	w8, [x25, #55]
1000249b0:     	sxtb	w9, w8
1000249b4:     	ldp	x10, x11, [x25, #32]
1000249b8:     	cmp	w9, #0
1000249bc:     	csel	x26, x11, x8, lt
1000249c0:     	csel	x23, x10, x22, lt
1000249c4:     	mov	x27, x24
1000249c8:     	ldrb	w8, [x28, #55]
1000249cc:     	sxtb	w9, w8
1000249d0:     	mov	x10, x28
1000249d4:     	ldr	x11, [x10, #32]!
1000249d8:     	ldr	x12, [x28, #40]
1000249dc:     	cmp	w9, #0
1000249e0:     	csel	x20, x12, x8, lt
1000249e4:     	csel	x0, x11, x10, lt
1000249e8:     	cmp	x26, x20
1000249ec:     	csel	x2, x26, x20, lo
1000249f0:     	mov	x1, x23
1000249f4:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
1000249f8:     	cmp	x20, x26
1000249fc:     	cset	w8, lo
100024a00:     	cmp	w0, #0
100024a04:     	cset	w9, lt
100024a08:     	csel	w8, w8, w9, eq
100024a0c:     	add	x9, x28, #8
100024a10:     	cmp	w8, #0
100024a14:     	csel	x8, x9, x28, ne
100024a18:     	csel	x27, x27, x28, ne
100024a1c:     	ldr	x28, [x8]
100024a20:     	cbnz	x28, 0x1000249c8 <benchmark::internal::Increment(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>>*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x1f4>
100024a24:     	cmp	x27, x24
100024a28:     	b.eq	0x100024a74 <benchmark::internal::Increment(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>>*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x2a0>
100024a2c:     	ldr	x8, [x27, #32]!
100024a30:     	ldrb	w9, [x27, #23]
100024a34:     	sxtb	w10, w9
100024a38:     	ldr	x11, [x27, #8]
100024a3c:     	cmp	w10, #0
100024a40:     	csel	x20, x11, x9, lt
100024a44:     	csel	x1, x8, x27, lt
100024a48:     	cmp	x20, x26
100024a4c:     	csel	x2, x20, x26, lo
100024a50:     	mov	x0, x23
100024a54:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
100024a58:     	cmp	x26, x20
100024a5c:     	cset	w8, lo
100024a60:     	cmp	w0, #0
100024a64:     	cset	w9, lt
100024a68:     	csel	w8, w8, w9, eq
100024a6c:     	cmp	w8, #1
100024a70:     	b.ne	0x100024a98 <benchmark::internal::Increment(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>>*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x2c4>
100024a74:     	str	x22, [sp, #24]
100024a78:     	add	x3, sp, #24
100024a7c:     	add	x4, sp, #16
100024a80:     	ldr	x0, [sp, #8]
100024a84:     	mov	x1, x22
100024a88:     	mov	x2, x21
100024a8c:     	bl	0x10000a2e0 <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>, std::__1::tuple<>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>&&, std::__1::tuple<>&&)>
100024a90:     	ldur	q0, [x25, #56]
100024a94:     	stur	q0, [x0, #56]
100024a98:     	ldr	x9, [x25, #8]
100024a9c:     	cbz	x9, 0x100024ab0 <benchmark::internal::Increment(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>>*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x2dc>
100024aa0:     	mov	x8, x9
100024aa4:     	ldr	x9, [x9]
100024aa8:     	cbnz	x9, 0x100024aa0 <benchmark::internal::Increment(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>>*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x2cc>
100024aac:     	b	0x100024994 <benchmark::internal::Increment(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>>*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x1c0>
100024ab0:     	ldr	x8, [x25, #16]
100024ab4:     	ldr	x9, [x8]
100024ab8:     	cmp	x9, x25
100024abc:     	mov	x25, x8
100024ac0:     	b.ne	0x100024ab0 <benchmark::internal::Increment(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>>*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x2dc>
100024ac4:     	b	0x100024994 <benchmark::internal::Increment(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>>*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x1c0>
100024ac8:     	ldp	x29, x30, [sp, #112]
100024acc:     	ldp	x20, x19, [sp, #96]
100024ad0:     	ldp	x22, x21, [sp, #80]
100024ad4:     	ldp	x24, x23, [sp, #64]
100024ad8:     	ldp	x26, x25, [sp, #48]
100024adc:     	ldp	x28, x27, [sp, #32]
100024ae0:     	add	sp, sp, #128
100024ae4:     	ret

0000000100024ae8 <benchmark::internal::SameNames(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)>:
100024ae8:     	stp	x28, x27, [sp, #-96]!
100024aec:     	stp	x26, x25, [sp, #16]
100024af0:     	stp	x24, x23, [sp, #32]
100024af4:     	stp	x22, x21, [sp, #48]
100024af8:     	stp	x20, x19, [sp, #64]
100024afc:     	stp	x29, x30, [sp, #80]
100024b00:     	add	x29, sp, #80
100024b04:     	cmp	x0, x1
100024b08:     	b.eq	0x100024c4c <benchmark::internal::SameNames(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x164>
100024b0c:     	mov	x19, x0
100024b10:     	ldr	x8, [x0, #16]
100024b14:     	ldr	x9, [x1, #16]
100024b18:     	cmp	x8, x9
100024b1c:     	b.ne	0x100024b38 <benchmark::internal::SameNames(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x50>
100024b20:     	ldr	x23, [x19], #8
100024b24:     	cmp	x23, x19
100024b28:     	b.eq	0x100024c4c <benchmark::internal::SameNames(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x164>
100024b2c:     	add	x21, x1, #8
100024b30:     	ldr	x22, [x21]
100024b34:     	cbnz	x22, 0x100024b4c <benchmark::internal::SameNames(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x64>
100024b38:     	mov	w0, #0
100024b3c:     	b	0x100024c50 <benchmark::internal::SameNames(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x168>
100024b40:     	mov	x23, x8
100024b44:     	cmp	x8, x19
100024b48:     	b.eq	0x100024c4c <benchmark::internal::SameNames(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x164>
100024b4c:     	mov	x8, x23
100024b50:     	ldr	x9, [x8, #32]!
100024b54:     	ldrb	w10, [x8, #23]
100024b58:     	sxtb	w11, w10
100024b5c:     	cmp	w11, #0
100024b60:     	ldr	x11, [x8, #8]
100024b64:     	csel	x24, x11, x10, lt
100024b68:     	csel	x20, x9, x8, lt
100024b6c:     	mov	x25, x21
100024b70:     	mov	x26, x22
100024b74:     	ldrb	w8, [x26, #55]
100024b78:     	sxtb	w9, w8
100024b7c:     	mov	x10, x26
100024b80:     	ldr	x11, [x10, #32]!
100024b84:     	ldr	x12, [x26, #40]
100024b88:     	cmp	w9, #0
100024b8c:     	csel	x27, x12, x8, lt
100024b90:     	csel	x0, x11, x10, lt
100024b94:     	cmp	x24, x27
100024b98:     	csel	x2, x24, x27, lo
100024b9c:     	mov	x1, x20
100024ba0:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
100024ba4:     	cmp	x27, x24
100024ba8:     	cset	w8, lo
100024bac:     	cmp	w0, #0
100024bb0:     	cset	w9, lt
100024bb4:     	csel	w8, w8, w9, eq
100024bb8:     	add	x9, x26, #8
100024bbc:     	cmp	w8, #0
100024bc0:     	csel	x8, x9, x26, ne
100024bc4:     	csel	x25, x25, x26, ne
100024bc8:     	ldr	x26, [x8]
100024bcc:     	cbnz	x26, 0x100024b74 <benchmark::internal::SameNames(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x8c>
100024bd0:     	cmp	x25, x21
100024bd4:     	b.eq	0x100024b38 <benchmark::internal::SameNames(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x50>
100024bd8:     	ldr	x8, [x25, #32]!
100024bdc:     	ldrb	w9, [x25, #23]
100024be0:     	sxtb	w10, w9
100024be4:     	ldr	x11, [x25, #8]
100024be8:     	cmp	w10, #0
100024bec:     	csel	x26, x11, x9, lt
100024bf0:     	csel	x1, x8, x25, lt
100024bf4:     	cmp	x26, x24
100024bf8:     	csel	x2, x26, x24, lo
100024bfc:     	mov	x0, x20
100024c00:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
100024c04:     	cmp	x24, x26
100024c08:     	cset	w8, lo
100024c0c:     	cmp	w0, #0
100024c10:     	cset	w9, lt
100024c14:     	csel	w8, w8, w9, eq
100024c18:     	tbnz	w8, #0, 0x100024b38 <benchmark::internal::SameNames(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x50>
100024c1c:     	ldr	x9, [x23, #8]
100024c20:     	cbz	x9, 0x100024c34 <benchmark::internal::SameNames(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x14c>
100024c24:     	mov	x8, x9
100024c28:     	ldr	x9, [x9]
100024c2c:     	cbnz	x9, 0x100024c24 <benchmark::internal::SameNames(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x13c>
100024c30:     	b	0x100024b40 <benchmark::internal::SameNames(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x58>
100024c34:     	ldr	x8, [x23, #16]
100024c38:     	ldr	x9, [x8]
100024c3c:     	cmp	x9, x23
100024c40:     	mov	x23, x8
100024c44:     	b.ne	0x100024c34 <benchmark::internal::SameNames(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x14c>
100024c48:     	b	0x100024b40 <benchmark::internal::SameNames(std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::Counter>>> const&)+0x58>
100024c4c:     	mov	w0, #1
100024c50:     	ldp	x29, x30, [sp, #80]
100024c54:     	ldp	x20, x19, [sp, #64]
100024c58:     	ldp	x22, x21, [sp, #48]
100024c5c:     	ldp	x24, x23, [sp, #32]
100024c60:     	ldp	x26, x25, [sp, #16]
100024c64:     	ldp	x28, x27, [sp], #96
100024c68:     	ret

0000000100024c6c <__GLOBAL__sub_I_counter.cc>:
100024c6c:     	b	0x10000363c <benchmark::internal::InitializeStreams()>

0000000100024c70 <benchmark::CsvEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>:
100024c70:     	sub	sp, sp, #112
100024c74:     	stp	x24, x23, [sp, #48]
100024c78:     	stp	x22, x21, [sp, #64]
100024c7c:     	stp	x20, x19, [sp, #80]
100024c80:     	stp	x29, x30, [sp, #96]
100024c84:     	add	x29, sp, #96
100024c88:     	mov	x20, x0
100024c8c:     	mov	x19, x8
100024c90:     	stp	xzr, xzr, [sp, #24]
100024c94:     	str	xzr, [sp, #40]
100024c98:     	ldrb	w8, [x0, #23]
100024c9c:     	sxtb	w9, w8
100024ca0:     	ldr	x10, [x0, #8]
100024ca4:     	cmp	w9, #0
100024ca8:     	csel	x8, x10, x8, lt
100024cac:     	add	x1, x8, #2
100024cb0:     	add	x0, sp, #24
100024cb4:     	bl	0x10002ed68 <_vsnprintf+0x10002ed68>
100024cb8:     	ldrb	w8, [x20, #23]
100024cbc:     	sxtb	w9, w8
100024cc0:     	ldp	x10, x11, [x20]
100024cc4:     	cmp	w9, #0
100024cc8:     	csel	x21, x10, x20, lt
100024ccc:     	csel	x22, x11, x8, lt
100024cd0:     	cbz	x22, 0x100024d14 <benchmark::CsvEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xa4>
100024cd4:     	adrp	x20, 0x100032000 <benchmark::CsvEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x9c>
100024cd8:     	add	x20, x20, #1227
100024cdc:     	b	0x100024cf8 <benchmark::CsvEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x88>
100024ce0:     	sxtb	w1, w8
100024ce4:     	add	x0, sp, #24
100024ce8:     	bl	0x10002ed74 <_vsnprintf+0x10002ed74>
100024cec:     	add	x21, x21, #1
100024cf0:     	subs	x22, x22, #1
100024cf4:     	b.eq	0x100024d14 <benchmark::CsvEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xa4>
100024cf8:     	ldrb	w8, [x21]
100024cfc:     	cmp	w8, #34
100024d00:     	b.ne	0x100024ce0 <benchmark::CsvEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x70>
100024d04:     	add	x0, sp, #24
100024d08:     	mov	x1, x20
100024d0c:     	bl	0x10002ed2c <_vsnprintf+0x10002ed2c>
100024d10:     	b	0x100024cec <benchmark::CsvEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x7c>
100024d14:     	ldrb	w8, [sp, #47]
100024d18:     	sxtb	w23, w8
100024d1c:     	ldr	x9, [sp, #32]
100024d20:     	cmp	w23, #0
100024d24:     	csel	x20, x9, x8, lt
100024d28:     	add	x24, x20, #1
100024d2c:     	mov	x8, #9223372036854775792
100024d30:     	cmp	x24, x8
100024d34:     	b.hs	0x100024e08 <benchmark::CsvEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x198>
100024d38:     	cmp	x24, #23
100024d3c:     	b.hs	0x100024d64 <benchmark::CsvEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xf4>
100024d40:     	stp	xzr, xzr, [sp, #8]
100024d44:     	str	xzr, [sp]
100024d48:     	strb	w24, [sp, #23]
100024d4c:     	mov	w8, #34
100024d50:     	mov	x9, sp
100024d54:     	orr	x21, x9, #0x1
100024d58:     	strb	w8, [sp]
100024d5c:     	cbnz	x20, 0x100024d8c <benchmark::CsvEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x11c>
100024d60:     	b	0x100024da8 <benchmark::CsvEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x138>
100024d64:     	orr	x8, x24, #0xf
100024d68:     	add	x22, x8, #1
100024d6c:     	mov	x0, x22
100024d70:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100024d74:     	mov	x21, x0
100024d78:     	orr	x8, x22, #0x8000000000000000
100024d7c:     	stp	x24, x8, [sp, #8]
100024d80:     	str	x0, [sp]
100024d84:     	mov	w8, #34
100024d88:     	strb	w8, [x21], #1
100024d8c:     	ldr	x8, [sp, #24]
100024d90:     	cmp	w23, #0
100024d94:     	add	x9, sp, #24
100024d98:     	csel	x1, x8, x9, lt
100024d9c:     	mov	x0, x21
100024da0:     	mov	x2, x20
100024da4:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
100024da8:     	strb	wzr, [x21, x20]
100024dac:     	mov	x0, sp
100024db0:     	mov	w1, #34
100024db4:     	bl	0x10002ed74 <_vsnprintf+0x10002ed74>
100024db8:     	ldr	q0, [sp]
100024dbc:     	str	q0, [x19]
100024dc0:     	ldr	x8, [sp, #16]
100024dc4:     	str	x8, [x19, #16]
100024dc8:     	ldrsb	w8, [sp, #47]
100024dcc:     	tbnz	w8, #31, 0x100024de8 <benchmark::CsvEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x178>
100024dd0:     	ldp	x29, x30, [sp, #96]
100024dd4:     	ldp	x20, x19, [sp, #80]
100024dd8:     	ldp	x22, x21, [sp, #64]
100024ddc:     	ldp	x24, x23, [sp, #48]
100024de0:     	add	sp, sp, #112
100024de4:     	ret
100024de8:     	ldr	x0, [sp, #24]
100024dec:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100024df0:     	ldp	x29, x30, [sp, #96]
100024df4:     	ldp	x20, x19, [sp, #80]
100024df8:     	ldp	x22, x21, [sp, #64]
100024dfc:     	ldp	x24, x23, [sp, #48]
100024e00:     	add	sp, sp, #112
100024e04:     	ret
100024e08:     	mov	x0, sp
100024e0c:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
100024e10:     	brk	#0x1
100024e14:     	mov	x19, x0
100024e18:     	ldrsb	w8, [sp, #23]
100024e1c:     	tbnz	w8, #31, 0x100024e30 <benchmark::CsvEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x1c0>
100024e20:     	ldrsb	w8, [sp, #47]
100024e24:     	tbnz	w8, #31, 0x100024e70 <benchmark::CsvEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x200>
100024e28:     	mov	x0, x19
100024e2c:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
100024e30:     	ldr	x0, [sp]
100024e34:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100024e38:     	ldrsb	w8, [sp, #47]
100024e3c:     	tbz	w8, #31, 0x100024e28 <benchmark::CsvEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x1b8>
100024e40:     	b	0x100024e70 <benchmark::CsvEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x200>
100024e44:     	mov	x19, x0
100024e48:     	ldrsb	w8, [sp, #47]
100024e4c:     	tbz	w8, #31, 0x100024e28 <benchmark::CsvEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x1b8>
100024e50:     	b	0x100024e70 <benchmark::CsvEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x200>
100024e54:     	mov	x19, x0
100024e58:     	ldrsb	w8, [sp, #47]
100024e5c:     	tbz	w8, #31, 0x100024e28 <benchmark::CsvEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x1b8>
100024e60:     	b	0x100024e70 <benchmark::CsvEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x200>
100024e64:     	mov	x19, x0
100024e68:     	ldrsb	w8, [sp, #47]
100024e6c:     	tbz	w8, #31, 0x100024e28 <benchmark::CsvEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x1b8>
100024e70:     	ldr	x0, [sp, #24]
100024e74:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100024e78:     	mov	x0, x19
100024e7c:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100024e80 <benchmark::CSVReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)>:
100024e80:     	stp	x29, x30, [sp, #-16]!
100024e84:     	mov	x29, sp
100024e88:     	ldr	x0, [x0, #16]
100024e8c:     	bl	0x1000299c4 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)>
100024e90:     	mov	w0, #1
100024e94:     	ldp	x29, x30, [sp], #16
100024e98:     	ret

0000000100024e9c <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)>:
100024e9c:     	sub	sp, sp, #128
100024ea0:     	stp	x28, x27, [sp, #32]
100024ea4:     	stp	x26, x25, [sp, #48]
100024ea8:     	stp	x24, x23, [sp, #64]
100024eac:     	stp	x22, x21, [sp, #80]
100024eb0:     	stp	x20, x19, [sp, #96]
100024eb4:     	stp	x29, x30, [sp, #112]
100024eb8:     	add	x29, sp, #112
100024ebc:     	ldrb	w8, [x0, #24]
100024ec0:     	ldp	x25, x28, [x1]
100024ec4:     	stp	x1, x0, [sp, #8]
100024ec8:     	cbz	w8, 0x100025074 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x1d8>
100024ecc:     	str	x28, [sp, #24]
100024ed0:     	cmp	x25, x28
100024ed4:     	b.eq	0x1000252b8 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x41c>
100024ed8:     	mov	x27, #29801
100024edc:     	movk	x27, #28005, lsl #16
100024ee0:     	movk	x27, #24435, lsl #32
100024ee4:     	movk	x27, #25968, lsl #48
100024ee8:     	mov	x28, #31074
100024eec:     	movk	x28, #25972, lsl #16
100024ef0:     	movk	x28, #24435, lsl #32
100024ef4:     	movk	x28, #25968, lsl #48
100024ef8:     	mov	x20, #24434
100024efc:     	movk	x20, #25971, lsl #16
100024f00:     	movk	x20, #28515, lsl #32
100024f04:     	movk	x20, #25710, lsl #48
100024f08:     	adrp	x21, 0x100038000 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xbc>
100024f0c:     	add	x21, x21, #8
100024f10:     	adrp	x19, 0x100038000 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xc4>
100024f14:     	adrp	x22, 0x100032000 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xb0>
100024f18:     	add	x22, x22, #1237
100024f1c:     	b	0x100024f30 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x94>
100024f20:     	add	x25, x25, #448
100024f24:     	ldr	x8, [sp, #24]
100024f28:     	cmp	x25, x8
100024f2c:     	b.eq	0x1000252b8 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x41c>
100024f30:     	ldr	x24, [x25, #408]
100024f34:     	add	x26, x25, #416
100024f38:     	cmp	x24, x26
100024f3c:     	b.ne	0x100024f50 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xb4>
100024f40:     	b	0x100024f20 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x84>
100024f44:     	mov	x24, x8
100024f48:     	cmp	x8, x26
100024f4c:     	b.eq	0x100024f20 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x84>
100024f50:     	add	x23, x24, #32
100024f54:     	ldrsb	w8, [x24, #55]
100024f58:     	tbnz	w8, #31, 0x100024f80 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xe4>
100024f5c:     	cmp	w8, #16
100024f60:     	b.ne	0x100024fb8 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x11c>
100024f64:     	ldp	x8, x9, [x23]
100024f68:     	eor	x10, x8, x28
100024f6c:     	eor	x9, x9, x20
100024f70:     	mov	x8, x23
100024f74:     	orr	x9, x10, x9
100024f78:     	cbnz	x9, 0x100024fa4 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x108>
100024f7c:     	b	0x100025028 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x18c>
100024f80:     	ldr	x8, [x24, #40]
100024f84:     	cmp	x8, #16
100024f88:     	b.ne	0x100024fb8 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x11c>
100024f8c:     	ldr	x8, [x23]
100024f90:     	ldp	x9, x10, [x8]
100024f94:     	eor	x9, x9, x28
100024f98:     	eor	x10, x10, x20
100024f9c:     	orr	x9, x9, x10
100024fa0:     	cbz	x9, 0x100025028 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x18c>
100024fa4:     	ldp	x9, x8, [x8]
100024fa8:     	eor	x9, x9, x27
100024fac:     	eor	x8, x8, x20
100024fb0:     	orr	x8, x9, x8
100024fb4:     	cbz	x8, 0x100025028 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x18c>
100024fb8:     	ldaprb	w8, [x21]
100024fbc:     	tbz	w8, #0, 0x100025058 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x1bc>
100024fc0:     	ldr	x0, [x19]
100024fc4:     	cbz	x0, 0x100025028 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x18c>
100024fc8:     	mov	x1, x22
100024fcc:     	mov	w2, #42
100024fd0:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100024fd4:     	ldr	x0, [x19]
100024fd8:     	cbz	x0, 0x100025028 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x18c>
100024fdc:     	adrp	x1, 0x100032000 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x178>
100024fe0:     	add	x1, x1, #1280
100024fe4:     	mov	w2, #15
100024fe8:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100024fec:     	ldr	x0, [x19]
100024ff0:     	cbz	x0, 0x100025028 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x18c>
100024ff4:     	ldrb	w8, [x24, #55]
100024ff8:     	sxtb	w9, w8
100024ffc:     	ldp	x10, x11, [x24, #32]
100025000:     	cmp	w9, #0
100025004:     	csel	x1, x10, x23, lt
100025008:     	csel	x2, x11, x8, lt
10002500c:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100025010:     	ldr	x0, [x19]
100025014:     	cbz	x0, 0x100025028 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x18c>
100025018:     	adrp	x1, 0x100032000 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x1b0>
10002501c:     	add	x1, x1, #1296
100025020:     	mov	w2, #50
100025024:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100025028:     	ldr	x9, [x24, #8]
10002502c:     	cbz	x9, 0x100025040 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x1a4>
100025030:     	mov	x8, x9
100025034:     	ldr	x9, [x9]
100025038:     	cbnz	x9, 0x100025030 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x194>
10002503c:     	b	0x100024f44 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xa8>
100025040:     	ldr	x8, [x24, #16]
100025044:     	ldr	x9, [x8]
100025048:     	cmp	x9, x24
10002504c:     	mov	x24, x8
100025050:     	b.ne	0x100025040 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x1a4>
100025054:     	b	0x100024f44 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xa8>
100025058:     	mov	x0, x21
10002505c:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
100025060:     	cbz	w0, 0x100024fc0 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x124>
100025064:     	str	xzr, [x19]
100025068:     	mov	x0, x21
10002506c:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
100025070:     	b	0x100024fc0 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x124>
100025074:     	mov	x27, x0
100025078:     	ldr	x21, [x0, #8]
10002507c:     	cmp	x25, x28
100025080:     	b.eq	0x10002518c <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x2f0>
100025084:     	mov	x19, #29801
100025088:     	movk	x19, #28005, lsl #16
10002508c:     	movk	x19, #24435, lsl #32
100025090:     	movk	x19, #25968, lsl #48
100025094:     	mov	x20, #31074
100025098:     	movk	x20, #25972, lsl #16
10002509c:     	movk	x20, #24435, lsl #32
1000250a0:     	movk	x20, #25968, lsl #48
1000250a4:     	mov	x23, #24434
1000250a8:     	movk	x23, #25971, lsl #16
1000250ac:     	movk	x23, #28515, lsl #32
1000250b0:     	movk	x23, #25710, lsl #48
1000250b4:     	add	x22, x27, #32
1000250b8:     	b	0x1000250c8 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x22c>
1000250bc:     	add	x25, x25, #448
1000250c0:     	cmp	x25, x28
1000250c4:     	b.eq	0x10002518c <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x2f0>
1000250c8:     	ldr	x26, [x25, #408]
1000250cc:     	add	x24, x25, #416
1000250d0:     	cmp	x26, x24
1000250d4:     	b.ne	0x1000250e8 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x24c>
1000250d8:     	b	0x1000250bc <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x220>
1000250dc:     	mov	x26, x8
1000250e0:     	cmp	x8, x24
1000250e4:     	b.eq	0x1000250bc <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x220>
1000250e8:     	add	x1, x26, #32
1000250ec:     	ldrsb	w8, [x26, #55]
1000250f0:     	tbnz	w8, #31, 0x100025118 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x27c>
1000250f4:     	cmp	w8, #16
1000250f8:     	b.ne	0x100025150 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x2b4>
1000250fc:     	ldp	x8, x9, [x1]
100025100:     	eor	x10, x8, x20
100025104:     	eor	x9, x9, x23
100025108:     	mov	x8, x1
10002510c:     	orr	x9, x10, x9
100025110:     	cbnz	x9, 0x10002513c <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x2a0>
100025114:     	b	0x10002515c <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x2c0>
100025118:     	ldr	x8, [x26, #40]
10002511c:     	cmp	x8, #16
100025120:     	b.ne	0x100025150 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x2b4>
100025124:     	ldr	x8, [x1]
100025128:     	ldp	x9, x10, [x8]
10002512c:     	eor	x9, x9, x20
100025130:     	eor	x10, x10, x23
100025134:     	orr	x9, x9, x10
100025138:     	cbz	x9, 0x10002515c <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x2c0>
10002513c:     	ldp	x9, x8, [x8]
100025140:     	eor	x9, x9, x19
100025144:     	eor	x8, x8, x23
100025148:     	orr	x8, x9, x8
10002514c:     	cbz	x8, 0x10002515c <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x2c0>
100025150:     	mov	x0, x22
100025154:     	mov	x2, x1
100025158:     	bl	0x100025ce0 <std::__1::pair<std::__1::__tree_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, void*>*, long>, bool> std::__1::__tree<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
10002515c:     	ldr	x9, [x26, #8]
100025160:     	cbz	x9, 0x100025174 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x2d8>
100025164:     	mov	x8, x9
100025168:     	ldr	x9, [x9]
10002516c:     	cbnz	x9, 0x100025164 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x2c8>
100025170:     	b	0x1000250dc <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x240>
100025174:     	ldr	x8, [x26, #16]
100025178:     	ldr	x9, [x8]
10002517c:     	cmp	x9, x26
100025180:     	mov	x26, x8
100025184:     	b.ne	0x100025174 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x2d8>
100025188:     	b	0x1000250dc <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x240>
10002518c:     	adrp	x9, 0x100038000 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x33c>
100025190:     	add	x9, x9, #192
100025194:     	ldp	x8, x9, [x9]
100025198:     	cmp	x8, x9
10002519c:     	b.eq	0x1000251fc <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x360>
1000251a0:     	adrp	x19, 0x100038000 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x350>
1000251a4:     	adrp	x22, 0x100032000 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x33c>
1000251a8:     	add	x22, x22, #1230
1000251ac:     	add	x20, x8, #24
1000251b0:     	ldrb	w9, [x8, #23]
1000251b4:     	sxtb	w10, w9
1000251b8:     	ldp	x11, x12, [x8]
1000251bc:     	cmp	w10, #0
1000251c0:     	csel	x1, x11, x8, lt
1000251c4:     	csel	x2, x12, x9, lt
1000251c8:     	mov	x0, x21
1000251cc:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000251d0:     	ldr	x8, [x19, #200]
1000251d4:     	cmp	x20, x8
1000251d8:     	b.eq	0x1000251fc <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x360>
1000251dc:     	mov	x0, x21
1000251e0:     	mov	x1, x22
1000251e4:     	mov	w2, #1
1000251e8:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000251ec:     	ldr	x9, [x19, #200]
1000251f0:     	mov	x8, x20
1000251f4:     	cmp	x20, x9
1000251f8:     	b.ne	0x1000251ac <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x310>
1000251fc:     	ldr	x20, [x27, #32]
100025200:     	add	x19, x27, #40
100025204:     	cmp	x20, x19
100025208:     	b.eq	0x10002529c <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x400>
10002520c:     	adrp	x22, 0x100032000 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x3a4>
100025210:     	add	x22, x22, #1232
100025214:     	adrp	x23, 0x100032000 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x3ac>
100025218:     	add	x23, x23, #1235
10002521c:     	b	0x100025258 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x3bc>
100025220:     	ldr	x8, [x20, #32]!
100025224:     	ldrb	w9, [x20, #23]
100025228:     	sxtb	w10, w9
10002522c:     	ldr	x11, [x20, #8]
100025230:     	cmp	w10, #0
100025234:     	csel	x1, x8, x20, lt
100025238:     	csel	x2, x11, x9, lt
10002523c:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100025240:     	mov	x1, x23
100025244:     	mov	w2, #1
100025248:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10002524c:     	mov	x20, x24
100025250:     	cmp	x24, x19
100025254:     	b.eq	0x10002529c <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x400>
100025258:     	mov	x0, x21
10002525c:     	mov	x1, x22
100025260:     	mov	w2, #2
100025264:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100025268:     	ldr	x8, [x20, #8]
10002526c:     	mov	x9, x20
100025270:     	cbz	x8, 0x100025284 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x3e8>
100025274:     	mov	x24, x8
100025278:     	ldr	x8, [x8]
10002527c:     	cbnz	x8, 0x100025274 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x3d8>
100025280:     	b	0x100025220 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x384>
100025284:     	ldr	x24, [x9, #16]
100025288:     	ldr	x8, [x24]
10002528c:     	cmp	x8, x9
100025290:     	mov	x9, x24
100025294:     	b.ne	0x100025284 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x3e8>
100025298:     	b	0x100025220 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x384>
10002529c:     	adrp	x1, 0x100031000 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x430>
1000252a0:     	add	x1, x1, #2523
1000252a4:     	mov	w19, #1
1000252a8:     	mov	x0, x21
1000252ac:     	mov	w2, #1
1000252b0:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000252b4:     	strb	w19, [x27, #24]
1000252b8:     	ldp	x8, x20, [sp, #8]
1000252bc:     	ldp	x21, x19, [x8]
1000252c0:     	cmp	x21, x19
1000252c4:     	b.eq	0x1000252e0 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x444>
1000252c8:     	mov	x0, x20
1000252cc:     	mov	x1, x21
1000252d0:     	bl	0x100025300 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)>
1000252d4:     	add	x21, x21, #448
1000252d8:     	cmp	x21, x19
1000252dc:     	b.ne	0x1000252c8 <benchmark::CSVReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x42c>
1000252e0:     	ldp	x29, x30, [sp, #112]
1000252e4:     	ldp	x20, x19, [sp, #96]
1000252e8:     	ldp	x22, x21, [sp, #80]
1000252ec:     	ldp	x24, x23, [sp, #64]
1000252f0:     	ldp	x26, x25, [sp, #48]
1000252f4:     	ldp	x28, x27, [sp, #32]
1000252f8:     	add	sp, sp, #128
1000252fc:     	ret

0000000100025300 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)>:
100025300:     	sub	sp, sp, #176
100025304:     	stp	x28, x27, [sp, #80]
100025308:     	stp	x26, x25, [sp, #96]
10002530c:     	stp	x24, x23, [sp, #112]
100025310:     	stp	x22, x21, [sp, #128]
100025314:     	stp	x20, x19, [sp, #144]
100025318:     	stp	x29, x30, [sp, #160]
10002531c:     	add	x29, sp, #160
100025320:     	mov	x20, x1
100025324:     	mov	x21, x0
100025328:     	ldr	x19, [x0, #8]
10002532c:     	add	x8, sp, #24
100025330:     	mov	x0, x1
100025334:     	bl	0x100029ed4 <benchmark::BenchmarkReporter::Run::benchmark_name() const>
100025338:     	add	x22, sp, #48
10002533c:     	add	x8, sp, #48
100025340:     	add	x0, sp, #24
100025344:     	bl	0x100024c70 <benchmark::CsvEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
100025348:     	ldrb	w8, [sp, #71]
10002534c:     	sxtb	w9, w8
100025350:     	ldp	x10, x11, [sp, #48]
100025354:     	cmp	w9, #0
100025358:     	csel	x1, x10, x22, lt
10002535c:     	csel	x2, x11, x8, lt
100025360:     	mov	x0, x19
100025364:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100025368:     	adrp	x1, 0x100032000 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x9c>
10002536c:     	add	x1, x1, #1230
100025370:     	mov	w2, #1
100025374:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100025378:     	ldrsb	w8, [sp, #71]
10002537c:     	tbnz	w8, #31, 0x1000253d8 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xd8>
100025380:     	ldrsb	w8, [sp, #47]
100025384:     	tbnz	w8, #31, 0x1000253e8 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xe8>
100025388:     	ldr	w8, [x20, #272]
10002538c:     	cbz	w8, 0x1000253f8 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xf8>
100025390:     	adrp	x8, 0x100038000 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xdc>
100025394:     	add	x8, x8, #192
100025398:     	ldp	x8, x9, [x8]
10002539c:     	sub	x8, x9, x8
1000253a0:     	asr	x8, x8, #3
1000253a4:     	mov	x9, #-6148914691236517206
1000253a8:     	movk	x9, #43691
1000253ac:     	mul	x24, x8, x9
1000253b0:     	sub	x21, x24, #3
1000253b4:     	mov	x8, #9223372036854775792
1000253b8:     	cmp	x21, x8
1000253bc:     	b.hs	0x100025b44 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x844>
1000253c0:     	cmp	x21, #23
1000253c4:     	b.hs	0x1000254b0 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1b0>
1000253c8:     	strb	w21, [sp, #71]
1000253cc:     	add	x22, sp, #48
1000253d0:     	cbnz	x21, 0x1000254d0 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1d0>
1000253d4:     	b	0x1000254e0 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1e0>
1000253d8:     	ldr	x0, [sp, #48]
1000253dc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000253e0:     	ldrsb	w8, [sp, #47]
1000253e4:     	tbz	w8, #31, 0x100025388 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x88>
1000253e8:     	ldr	x0, [sp, #24]
1000253ec:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000253f0:     	ldr	w8, [x20, #272]
1000253f4:     	cbnz	w8, 0x100025390 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x90>
1000253f8:     	ldrb	w8, [x20, #400]
1000253fc:     	ldrb	w9, [x20, #401]
100025400:     	orr	w8, w8, w9
100025404:     	cbnz	w8, 0x100025414 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x114>
100025408:     	ldr	x1, [x20, #304]
10002540c:     	mov	x0, x19
100025410:     	bl	0x10002ee40 <_vsnprintf+0x10002ee40>
100025414:     	adrp	x22, 0x100032000 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x148>
100025418:     	add	x22, x22, #1230
10002541c:     	mov	x0, x19
100025420:     	mov	x1, x22
100025424:     	mov	w2, #1
100025428:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10002542c:     	mov	x0, x20
100025430:     	bl	0x100029fb0 <benchmark::BenchmarkReporter::Run::GetAdjustedRealTime() const>
100025434:     	mov	x0, x19
100025438:     	bl	0x10002ee1c <_vsnprintf+0x10002ee1c>
10002543c:     	mov	x1, x22
100025440:     	mov	w2, #1
100025444:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100025448:     	mov	x0, x20
10002544c:     	bl	0x100029fdc <benchmark::BenchmarkReporter::Run::GetAdjustedCPUTime() const>
100025450:     	mov	x0, x19
100025454:     	bl	0x10002ee1c <_vsnprintf+0x10002ee1c>
100025458:     	mov	x1, x22
10002545c:     	mov	w2, #1
100025460:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100025464:     	ldrb	w8, [x20, #400]
100025468:     	cbz	w8, 0x1000255ac <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x2ac>
10002546c:     	ldr	w0, [x20, #368]
100025470:     	add	x22, sp, #48
100025474:     	add	x8, sp, #48
100025478:     	bl	0x100022704 <benchmark::GetBigOString(benchmark::BigO)>
10002547c:     	ldrb	w8, [sp, #71]
100025480:     	sxtb	w9, w8
100025484:     	ldp	x10, x11, [sp, #48]
100025488:     	cmp	w9, #0
10002548c:     	csel	x1, x10, x22, lt
100025490:     	csel	x2, x11, x8, lt
100025494:     	mov	x0, x19
100025498:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10002549c:     	ldrsb	w8, [sp, #71]
1000254a0:     	tbz	w8, #31, 0x1000255dc <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x2dc>
1000254a4:     	ldr	x0, [sp, #48]
1000254a8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000254ac:     	b	0x1000255dc <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x2dc>
1000254b0:     	orr	x8, x21, #0xf
1000254b4:     	add	x23, x8, #1
1000254b8:     	mov	x0, x23
1000254bc:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
1000254c0:     	mov	x22, x0
1000254c4:     	orr	x8, x23, #0x8000000000000000
1000254c8:     	stp	x21, x8, [sp, #56]
1000254cc:     	str	x0, [sp, #48]
1000254d0:     	mov	x0, x22
1000254d4:     	mov	w1, #44
1000254d8:     	mov	x2, x21
1000254dc:     	bl	0x10002f1dc <_vsnprintf+0x10002f1dc>
1000254e0:     	add	x8, x22, x24
1000254e4:     	sturb	wzr, [x8, #-3]
1000254e8:     	ldrb	w8, [sp, #71]
1000254ec:     	sxtb	w9, w8
1000254f0:     	ldp	x10, x11, [sp, #48]
1000254f4:     	cmp	w9, #0
1000254f8:     	add	x9, sp, #48
1000254fc:     	csel	x1, x10, x9, lt
100025500:     	csel	x2, x11, x8, lt
100025504:     	mov	x0, x19
100025508:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10002550c:     	ldrsb	w8, [sp, #71]
100025510:     	tbz	w8, #31, 0x10002551c <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x21c>
100025514:     	ldr	x0, [sp, #48]
100025518:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002551c:     	ldr	x8, [x19]
100025520:     	ldur	x8, [x8, #-24]
100025524:     	add	x8, x19, x8
100025528:     	ldr	w9, [x8, #8]
10002552c:     	orr	w9, w9, #0x1
100025530:     	str	w9, [x8, #8]
100025534:     	ldr	w8, [x20, #272]
100025538:     	cmp	w8, #2
10002553c:     	cset	w1, eq
100025540:     	mov	x0, x19
100025544:     	bl	0x10002ee10 <_vsnprintf+0x10002ee10>
100025548:     	adrp	x1, 0x100032000 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x27c>
10002554c:     	add	x1, x1, #1230
100025550:     	mov	w2, #1
100025554:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100025558:     	add	x0, x20, #280
10002555c:     	add	x20, sp, #48
100025560:     	add	x8, sp, #48
100025564:     	bl	0x100024c70 <benchmark::CsvEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
100025568:     	ldrb	w8, [sp, #71]
10002556c:     	sxtb	w9, w8
100025570:     	ldp	x10, x11, [sp, #48]
100025574:     	cmp	w9, #0
100025578:     	csel	x1, x10, x20, lt
10002557c:     	csel	x2, x11, x8, lt
100025580:     	mov	x0, x19
100025584:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100025588:     	adrp	x1, 0x100031000 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x2b8>
10002558c:     	add	x1, x1, #2523
100025590:     	mov	w2, #1
100025594:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100025598:     	ldrsb	w8, [sp, #71]
10002559c:     	tbz	w8, #31, 0x100025b24 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x824>
1000255a0:     	ldr	x0, [sp, #48]
1000255a4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000255a8:     	b	0x100025b24 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x824>
1000255ac:     	ldrb	w8, [x20, #401]
1000255b0:     	cbnz	w8, 0x1000255dc <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x2dc>
1000255b4:     	ldrsw	x8, [x20, #336]
1000255b8:     	adrp	x9, 0x100034000 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x2f4>
1000255bc:     	add	x9, x9, #3488
1000255c0:     	ldr	x22, [x9, x8, lsl #3]
1000255c4:     	mov	x0, x22
1000255c8:     	bl	0x10002f254 <_vsnprintf+0x10002f254>
1000255cc:     	mov	x2, x0
1000255d0:     	mov	x0, x19
1000255d4:     	mov	x1, x22
1000255d8:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000255dc:     	adrp	x1, 0x100032000 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x310>
1000255e0:     	add	x1, x1, #1230
1000255e4:     	mov	x0, x19
1000255e8:     	mov	w2, #1
1000255ec:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000255f0:     	mov	w8, #16
1000255f4:     	adrp	x9, 0x100032000 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x328>
1000255f8:     	add	x9, x9, #1193
1000255fc:     	strb	w8, [sp, #71]
100025600:     	ldr	q0, [x9]
100025604:     	str	q0, [sp]
100025608:     	str	q0, [sp, #48]
10002560c:     	strb	wzr, [sp, #64]
100025610:     	add	x24, x20, #416
100025614:     	ldr	x25, [x20, #416]
100025618:     	cbz	x25, 0x100025780 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x480>
10002561c:     	mov	w23, #16
100025620:     	mov	x22, x24
100025624:     	mov	x26, x25
100025628:     	ldrb	w8, [x26, #55]
10002562c:     	sxtb	w9, w8
100025630:     	mov	x10, x26
100025634:     	ldr	x11, [x10, #32]!
100025638:     	ldr	x12, [x26, #40]
10002563c:     	cmp	w9, #0
100025640:     	csel	x8, x12, x8, lt
100025644:     	csel	x0, x11, x10, lt
100025648:     	cmp	x8, #16
10002564c:     	csel	x2, x8, x23, lo
100025650:     	cset	w27, lo
100025654:     	add	x1, sp, #48
100025658:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
10002565c:     	cmp	w0, #0
100025660:     	cset	w8, lt
100025664:     	csel	w8, w27, w8, eq
100025668:     	add	x9, x26, #8
10002566c:     	cmp	w8, #0
100025670:     	csel	x8, x9, x26, ne
100025674:     	csel	x22, x22, x26, ne
100025678:     	ldr	x26, [x8]
10002567c:     	cbnz	x26, 0x100025628 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x328>
100025680:     	cmp	x22, x24
100025684:     	b.eq	0x100025780 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x480>
100025688:     	ldr	x8, [x22, #32]!
10002568c:     	ldrb	w9, [x22, #23]
100025690:     	sxtb	w10, w9
100025694:     	ldr	x11, [x22, #8]
100025698:     	cmp	w10, #0
10002569c:     	csel	x9, x11, x9, lt
1000256a0:     	csel	x1, x8, x22, lt
1000256a4:     	mov	w26, #16
1000256a8:     	cmp	x9, #16
1000256ac:     	csel	x2, x9, x26, lo
1000256b0:     	cset	w22, hi
1000256b4:     	add	x0, sp, #48
1000256b8:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
1000256bc:     	cmp	w0, #0
1000256c0:     	cset	w8, lt
1000256c4:     	csel	w8, w22, w8, eq
1000256c8:     	cmp	w8, #1
1000256cc:     	b.eq	0x100025780 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x480>
1000256d0:     	strb	w26, [sp, #71]
1000256d4:     	ldr	q0, [sp]
1000256d8:     	str	q0, [sp, #48]
1000256dc:     	strb	wzr, [sp, #64]
1000256e0:     	b	0x1000256ec <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x3ec>
1000256e4:     	ldr	x25, [x25]
1000256e8:     	cbz	x25, 0x100025910 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x610>
1000256ec:     	mov	x8, x25
1000256f0:     	ldr	x9, [x8, #32]!
1000256f4:     	ldrb	w10, [x8, #23]
1000256f8:     	sxtb	w11, w10
1000256fc:     	ldr	x12, [x8, #8]
100025700:     	cmp	w11, #0
100025704:     	csel	x27, x12, x10, lt
100025708:     	csel	x22, x9, x8, lt
10002570c:     	cmp	x27, #16
100025710:     	csel	x23, x27, x26, lo
100025714:     	cset	w28, hi
100025718:     	add	x0, sp, #48
10002571c:     	mov	x1, x22
100025720:     	mov	x2, x23
100025724:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
100025728:     	cmp	w0, #0
10002572c:     	cset	w8, lt
100025730:     	csel	w8, w28, w8, eq
100025734:     	cmp	w8, #1
100025738:     	b.eq	0x1000256e4 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x3e4>
10002573c:     	add	x1, sp, #48
100025740:     	mov	x0, x22
100025744:     	mov	x2, x23
100025748:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
10002574c:     	cmp	x27, #16
100025750:     	cset	w8, lo
100025754:     	cmp	w0, #0
100025758:     	cset	w9, lt
10002575c:     	csel	w8, w8, w9, eq
100025760:     	cmp	w8, #1
100025764:     	b.ne	0x100025774 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x474>
100025768:     	ldr	x25, [x25, #8]
10002576c:     	cbnz	x25, 0x1000256ec <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x3ec>
100025770:     	b	0x100025910 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x610>
100025774:     	ldr	d0, [x25, #56]
100025778:     	mov	x0, x19
10002577c:     	bl	0x10002ee1c <_vsnprintf+0x10002ee1c>
100025780:     	adrp	x1, 0x100032000 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x4b4>
100025784:     	add	x1, x1, #1230
100025788:     	mov	x0, x19
10002578c:     	mov	w2, #1
100025790:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100025794:     	mov	w8, #16
100025798:     	strb	w8, [sp, #71]
10002579c:     	adrp	x8, 0x100032000 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x4d0>
1000257a0:     	add	x8, x8, #1210
1000257a4:     	ldr	q0, [x8]
1000257a8:     	str	q0, [sp]
1000257ac:     	str	q0, [sp, #48]
1000257b0:     	strb	wzr, [sp, #64]
1000257b4:     	ldr	x25, [x24]
1000257b8:     	cbz	x25, 0x100025928 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x628>
1000257bc:     	mov	w23, #16
1000257c0:     	mov	x22, x24
1000257c4:     	mov	x26, x25
1000257c8:     	ldrb	w8, [x26, #55]
1000257cc:     	sxtb	w9, w8
1000257d0:     	mov	x10, x26
1000257d4:     	ldr	x11, [x10, #32]!
1000257d8:     	ldr	x12, [x26, #40]
1000257dc:     	cmp	w9, #0
1000257e0:     	csel	x8, x12, x8, lt
1000257e4:     	csel	x0, x11, x10, lt
1000257e8:     	cmp	x8, #16
1000257ec:     	csel	x2, x8, x23, lo
1000257f0:     	cset	w27, lo
1000257f4:     	add	x1, sp, #48
1000257f8:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
1000257fc:     	cmp	w0, #0
100025800:     	cset	w8, lt
100025804:     	csel	w8, w27, w8, eq
100025808:     	add	x9, x26, #8
10002580c:     	cmp	w8, #0
100025810:     	csel	x8, x9, x26, ne
100025814:     	csel	x22, x22, x26, ne
100025818:     	ldr	x26, [x8]
10002581c:     	cbnz	x26, 0x1000257c8 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x4c8>
100025820:     	cmp	x22, x24
100025824:     	b.eq	0x100025928 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x628>
100025828:     	ldr	x8, [x22, #32]!
10002582c:     	ldrb	w9, [x22, #23]
100025830:     	sxtb	w10, w9
100025834:     	ldr	x11, [x22, #8]
100025838:     	cmp	w10, #0
10002583c:     	csel	x9, x11, x9, lt
100025840:     	csel	x1, x8, x22, lt
100025844:     	mov	w26, #16
100025848:     	cmp	x9, #16
10002584c:     	csel	x2, x9, x26, lo
100025850:     	cset	w22, hi
100025854:     	add	x0, sp, #48
100025858:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
10002585c:     	cmp	w0, #0
100025860:     	cset	w8, lt
100025864:     	csel	w8, w22, w8, eq
100025868:     	cmp	w8, #1
10002586c:     	b.eq	0x100025928 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x628>
100025870:     	strb	w26, [sp, #71]
100025874:     	ldr	q0, [sp]
100025878:     	str	q0, [sp, #48]
10002587c:     	strb	wzr, [sp, #64]
100025880:     	b	0x10002588c <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x58c>
100025884:     	ldr	x25, [x25]
100025888:     	cbz	x25, 0x100025910 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x610>
10002588c:     	mov	x8, x25
100025890:     	ldr	x9, [x8, #32]!
100025894:     	ldrb	w10, [x8, #23]
100025898:     	sxtb	w11, w10
10002589c:     	ldr	x12, [x8, #8]
1000258a0:     	cmp	w11, #0
1000258a4:     	csel	x27, x12, x10, lt
1000258a8:     	csel	x22, x9, x8, lt
1000258ac:     	cmp	x27, #16
1000258b0:     	csel	x23, x27, x26, lo
1000258b4:     	cset	w28, hi
1000258b8:     	add	x0, sp, #48
1000258bc:     	mov	x1, x22
1000258c0:     	mov	x2, x23
1000258c4:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
1000258c8:     	cmp	w0, #0
1000258cc:     	cset	w8, lt
1000258d0:     	csel	w8, w28, w8, eq
1000258d4:     	cmp	w8, #1
1000258d8:     	b.eq	0x100025884 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x584>
1000258dc:     	add	x1, sp, #48
1000258e0:     	mov	x0, x22
1000258e4:     	mov	x2, x23
1000258e8:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
1000258ec:     	cmp	x27, #16
1000258f0:     	cset	w8, lo
1000258f4:     	cmp	w0, #0
1000258f8:     	cset	w9, lt
1000258fc:     	csel	w8, w8, w9, eq
100025900:     	cmp	w8, #1
100025904:     	b.ne	0x10002591c <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x61c>
100025908:     	ldr	x25, [x25, #8]
10002590c:     	cbnz	x25, 0x10002588c <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x58c>
100025910:     	adrp	x0, 0x100032000 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x644>
100025914:     	add	x0, x0, #1350
100025918:     	bl	0x100025c6c <std::__1::__throw_out_of_range[abi:ue170006](char const*)>
10002591c:     	ldr	d0, [x25, #56]
100025920:     	mov	x0, x19
100025924:     	bl	0x10002ee1c <_vsnprintf+0x10002ee1c>
100025928:     	adrp	x1, 0x100032000 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x65c>
10002592c:     	add	x1, x1, #1230
100025930:     	mov	x0, x19
100025934:     	mov	w2, #1
100025938:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10002593c:     	ldrb	w8, [x20, #271]
100025940:     	sxtb	w9, w8
100025944:     	ldr	x10, [x20, #256]
100025948:     	cmp	w9, #0
10002594c:     	csel	x8, x10, x8, lt
100025950:     	cbz	x8, 0x100025994 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x694>
100025954:     	add	x0, x20, #248
100025958:     	add	x20, sp, #48
10002595c:     	add	x8, sp, #48
100025960:     	bl	0x100024c70 <benchmark::CsvEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
100025964:     	ldrb	w8, [sp, #71]
100025968:     	sxtb	w9, w8
10002596c:     	ldp	x10, x11, [sp, #48]
100025970:     	cmp	w9, #0
100025974:     	csel	x1, x10, x20, lt
100025978:     	csel	x2, x11, x8, lt
10002597c:     	mov	x0, x19
100025980:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100025984:     	ldrsb	w8, [sp, #71]
100025988:     	tbz	w8, #31, 0x100025994 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x694>
10002598c:     	ldr	x0, [sp, #48]
100025990:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100025994:     	adrp	x1, 0x100032000 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x6c8>
100025998:     	add	x1, x1, #1347
10002599c:     	mov	x0, x19
1000259a0:     	mov	w2, #2
1000259a4:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000259a8:     	ldr	x23, [x21, #32]
1000259ac:     	add	x22, x21, #40
1000259b0:     	cmp	x23, x22
1000259b4:     	b.eq	0x100025b0c <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x80c>
1000259b8:     	adrp	x20, 0x100032000 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x6ec>
1000259bc:     	add	x20, x20, #1230
1000259c0:     	b	0x1000259d0 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x6d0>
1000259c4:     	mov	x23, x8
1000259c8:     	cmp	x8, x22
1000259cc:     	b.eq	0x100025b0c <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x80c>
1000259d0:     	ldr	x27, [x24]
1000259d4:     	cbz	x27, 0x100025aac <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x7ac>
1000259d8:     	mov	x8, x23
1000259dc:     	ldr	x9, [x8, #32]!
1000259e0:     	ldrb	w10, [x8, #23]
1000259e4:     	sxtb	w11, w10
1000259e8:     	ldr	x12, [x8, #8]
1000259ec:     	cmp	w11, #0
1000259f0:     	csel	x26, x12, x10, lt
1000259f4:     	csel	x21, x9, x8, lt
1000259f8:     	mov	x25, x24
1000259fc:     	ldrb	w8, [x27, #55]
100025a00:     	sxtb	w9, w8
100025a04:     	mov	x10, x27
100025a08:     	ldr	x11, [x10, #32]!
100025a0c:     	ldr	x12, [x27, #40]
100025a10:     	cmp	w9, #0
100025a14:     	csel	x28, x12, x8, lt
100025a18:     	csel	x0, x11, x10, lt
100025a1c:     	cmp	x26, x28
100025a20:     	csel	x2, x26, x28, lo
100025a24:     	mov	x1, x21
100025a28:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
100025a2c:     	cmp	x28, x26
100025a30:     	cset	w8, lo
100025a34:     	cmp	w0, #0
100025a38:     	cset	w9, lt
100025a3c:     	csel	w8, w8, w9, eq
100025a40:     	add	x9, x27, #8
100025a44:     	cmp	w8, #0
100025a48:     	csel	x8, x9, x27, ne
100025a4c:     	csel	x25, x25, x27, ne
100025a50:     	ldr	x27, [x8]
100025a54:     	cbnz	x27, 0x1000259fc <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x6fc>
100025a58:     	cmp	x25, x24
100025a5c:     	b.eq	0x100025aac <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x7ac>
100025a60:     	mov	x8, x25
100025a64:     	ldr	x9, [x8, #32]!
100025a68:     	ldrb	w10, [x8, #23]
100025a6c:     	sxtb	w11, w10
100025a70:     	ldr	x12, [x8, #8]
100025a74:     	cmp	w11, #0
100025a78:     	csel	x27, x12, x10, lt
100025a7c:     	csel	x1, x9, x8, lt
100025a80:     	cmp	x27, x26
100025a84:     	csel	x2, x27, x26, lo
100025a88:     	mov	x0, x21
100025a8c:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
100025a90:     	cmp	x26, x27
100025a94:     	cset	w8, lo
100025a98:     	cmp	w0, #0
100025a9c:     	cset	w9, lt
100025aa0:     	csel	w8, w8, w9, eq
100025aa4:     	cmp	w8, #1
100025aa8:     	b.ne	0x100025ad4 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x7d4>
100025aac:     	mov	x0, x19
100025ab0:     	mov	x1, x20
100025ab4:     	mov	w2, #1
100025ab8:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100025abc:     	ldr	x9, [x23, #8]
100025ac0:     	cbz	x9, 0x100025af4 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x7f4>
100025ac4:     	mov	x8, x9
100025ac8:     	ldr	x9, [x9]
100025acc:     	cbnz	x9, 0x100025ac4 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x7c4>
100025ad0:     	b	0x1000259c4 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x6c4>
100025ad4:     	mov	x0, x19
100025ad8:     	mov	x1, x20
100025adc:     	mov	w2, #1
100025ae0:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100025ae4:     	ldr	d0, [x25, #56]
100025ae8:     	bl	0x10002ee1c <_vsnprintf+0x10002ee1c>
100025aec:     	ldr	x9, [x23, #8]
100025af0:     	cbnz	x9, 0x100025ac4 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x7c4>
100025af4:     	ldr	x8, [x23, #16]
100025af8:     	ldr	x9, [x8]
100025afc:     	cmp	x9, x23
100025b00:     	mov	x23, x8
100025b04:     	b.ne	0x100025af4 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x7f4>
100025b08:     	b	0x1000259c4 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x6c4>
100025b0c:     	mov	w8, #10
100025b10:     	strb	w8, [sp, #48]
100025b14:     	add	x1, sp, #48
100025b18:     	mov	x0, x19
100025b1c:     	mov	w2, #1
100025b20:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100025b24:     	ldp	x29, x30, [sp, #160]
100025b28:     	ldp	x20, x19, [sp, #144]
100025b2c:     	ldp	x22, x21, [sp, #128]
100025b30:     	ldp	x24, x23, [sp, #112]
100025b34:     	ldp	x26, x25, [sp, #96]
100025b38:     	ldp	x28, x27, [sp, #80]
100025b3c:     	add	sp, sp, #176
100025b40:     	ret
100025b44:     	add	x0, sp, #48
100025b48:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
100025b4c:     	b	0x100025b60 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x860>
100025b50:     	b	0x100025b60 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x860>
100025b54:     	b	0x100025b60 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x860>
100025b58:     	mov	x19, x0
100025b5c:     	b	0x100025b88 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x888>
100025b60:     	mov	x19, x0
100025b64:     	ldrsb	w8, [sp, #71]
100025b68:     	tbz	w8, #31, 0x100025b98 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x898>
100025b6c:     	ldr	x0, [sp, #48]
100025b70:     	b	0x100025b94 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x894>
100025b74:     	mov	x19, x0
100025b78:     	ldrsb	w8, [sp, #71]
100025b7c:     	tbz	w8, #31, 0x100025b88 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x888>
100025b80:     	ldr	x0, [sp, #48]
100025b84:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100025b88:     	ldrsb	w8, [sp, #47]
100025b8c:     	tbz	w8, #31, 0x100025b98 <benchmark::CSVReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x898>
100025b90:     	ldr	x0, [sp, #24]
100025b94:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100025b98:     	mov	x0, x19
100025b9c:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100025ba0 <benchmark::CSVReporter::~CSVReporter()>:
100025ba0:     	stp	x20, x19, [sp, #-32]!
100025ba4:     	stp	x29, x30, [sp, #16]
100025ba8:     	add	x29, sp, #16
100025bac:     	mov	x19, x0
100025bb0:     	adrp	x8, 0x100034000 <benchmark::CSVReporter::~CSVReporter()+0x18>
100025bb4:     	add	x8, x8, #3416
100025bb8:     	str	x8, [x0], #32
100025bbc:     	ldr	x1, [x19, #40]
100025bc0:     	bl	0x100025c0c <std::__1::__tree<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::destroy(std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, void*>*)>
100025bc4:     	mov	x0, x19
100025bc8:     	ldp	x29, x30, [sp, #16]
100025bcc:     	ldp	x20, x19, [sp], #32
100025bd0:     	b	0x1000299b8 <benchmark::BenchmarkReporter::~BenchmarkReporter()>

0000000100025bd4 <benchmark::CSVReporter::~CSVReporter()>:
100025bd4:     	stp	x20, x19, [sp, #-32]!
100025bd8:     	stp	x29, x30, [sp, #16]
100025bdc:     	add	x29, sp, #16
100025be0:     	mov	x19, x0
100025be4:     	adrp	x8, 0x100034000 <std::__1::__tree<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::destroy(std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, void*>*)+0x14>
100025be8:     	add	x8, x8, #3416
100025bec:     	str	x8, [x0], #32
100025bf0:     	ldr	x1, [x19, #40]
100025bf4:     	bl	0x100025c0c <std::__1::__tree<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::destroy(std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, void*>*)>
100025bf8:     	mov	x0, x19
100025bfc:     	bl	0x1000299b8 <benchmark::BenchmarkReporter::~BenchmarkReporter()>
100025c00:     	ldp	x29, x30, [sp, #16]
100025c04:     	ldp	x20, x19, [sp], #32
100025c08:     	b	0x10002f014 <_vsnprintf+0x10002f014>

0000000100025c0c <std::__1::__tree<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::destroy(std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, void*>*)>:
100025c0c:     	cbz	x1, 0x100025c50 <std::__1::__tree<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::destroy(std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, void*>*)+0x44>
100025c10:     	stp	x20, x19, [sp, #-32]!
100025c14:     	stp	x29, x30, [sp, #16]
100025c18:     	add	x29, sp, #16
100025c1c:     	mov	x19, x1
100025c20:     	mov	x20, x0
100025c24:     	ldr	x1, [x1]
100025c28:     	bl	0x100025c0c <std::__1::__tree<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::destroy(std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, void*>*)>
100025c2c:     	ldr	x1, [x19, #8]
100025c30:     	mov	x0, x20
100025c34:     	bl	0x100025c0c <std::__1::__tree<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::destroy(std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, void*>*)>
100025c38:     	ldrsb	w8, [x19, #55]
100025c3c:     	tbnz	w8, #31, 0x100025c54 <std::__1::__tree<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::destroy(std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, void*>*)+0x48>
100025c40:     	mov	x0, x19
100025c44:     	ldp	x29, x30, [sp, #16]
100025c48:     	ldp	x20, x19, [sp], #32
100025c4c:     	b	0x10002f014 <_vsnprintf+0x10002f014>
100025c50:     	ret
100025c54:     	ldr	x0, [x19, #32]
100025c58:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100025c5c:     	mov	x0, x19
100025c60:     	ldp	x29, x30, [sp, #16]
100025c64:     	ldp	x20, x19, [sp], #32
100025c68:     	b	0x10002f014 <_vsnprintf+0x10002f014>

0000000100025c6c <std::__1::__throw_out_of_range[abi:ue170006](char const*)>:
100025c6c:     	stp	x20, x19, [sp, #-32]!
100025c70:     	stp	x29, x30, [sp, #16]
100025c74:     	add	x29, sp, #16
100025c78:     	mov	x20, x0
100025c7c:     	mov	w0, #16
100025c80:     	bl	0x10002f038 <_vsnprintf+0x10002f038>
100025c84:     	mov	x19, x0
100025c88:     	mov	x1, x20
100025c8c:     	bl	0x100025cbc <std::out_of_range::out_of_range[abi:ue170006](char const*)>
100025c90:     	adrp	x1, 0x100034000 <std::out_of_range::out_of_range[abi:ue170006](char const*)+0x10>
100025c94:     	ldr	x1, [x1, #672]
100025c98:     	adrp	x2, 0x100034000 <std::out_of_range::out_of_range[abi:ue170006](char const*)+0x18>
100025c9c:     	ldr	x2, [x2, #72]
100025ca0:     	mov	x0, x19
100025ca4:     	bl	0x10002f0a4 <_vsnprintf+0x10002f0a4>
100025ca8:     	mov	x20, x0
100025cac:     	mov	x0, x19
100025cb0:     	bl	0x10002f068 <_vsnprintf+0x10002f068>
100025cb4:     	mov	x0, x20
100025cb8:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100025cbc <std::out_of_range::out_of_range[abi:ue170006](char const*)>:
100025cbc:     	stp	x29, x30, [sp, #-16]!
100025cc0:     	mov	x29, sp
100025cc4:     	bl	0x10002ed08 <_vsnprintf+0x10002ed08>
100025cc8:     	adrp	x8, 0x100034000 <std::__1::pair<std::__1::__tree_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, void*>*, long>, bool> std::__1::__tree<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x24>
100025ccc:     	ldr	x8, [x8, #768]
100025cd0:     	add	x8, x8, #16
100025cd4:     	str	x8, [x0]
100025cd8:     	ldp	x29, x30, [sp], #16
100025cdc:     	ret

0000000100025ce0 <std::__1::pair<std::__1::__tree_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, void*>*, long>, bool> std::__1::__tree<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>:
100025ce0:     	stp	x26, x25, [sp, #-80]!
100025ce4:     	stp	x24, x23, [sp, #16]
100025ce8:     	stp	x22, x21, [sp, #32]
100025cec:     	stp	x20, x19, [sp, #48]
100025cf0:     	stp	x29, x30, [sp, #64]
100025cf4:     	add	x29, sp, #64
100025cf8:     	mov	x20, x2
100025cfc:     	mov	x19, x0
100025d00:     	mov	x23, x0
100025d04:     	ldr	x8, [x23, #8]!
100025d08:     	cbz	x8, 0x100025dec <std::__1::pair<std::__1::__tree_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, void*>*, long>, bool> std::__1::__tree<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x10c>
100025d0c:     	ldrb	w9, [x1, #23]
100025d10:     	sxtb	w10, w9
100025d14:     	ldp	x12, x11, [x1]
100025d18:     	cmp	w10, #0
100025d1c:     	csel	x25, x11, x9, lt
100025d20:     	csel	x21, x12, x1, lt
100025d24:     	b	0x100025d34 <std::__1::pair<std::__1::__tree_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, void*>*, long>, bool> std::__1::__tree<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x54>
100025d28:     	ldr	x8, [x24]
100025d2c:     	mov	x23, x24
100025d30:     	cbz	x8, 0x100025dc0 <std::__1::pair<std::__1::__tree_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, void*>*, long>, bool> std::__1::__tree<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xe0>
100025d34:     	mov	x24, x8
100025d38:     	ldr	x9, [x8, #32]!
100025d3c:     	ldrb	w10, [x8, #23]
100025d40:     	sxtb	w11, w10
100025d44:     	ldr	x12, [x8, #8]
100025d48:     	cmp	w11, #0
100025d4c:     	csel	x26, x12, x10, lt
100025d50:     	csel	x22, x9, x8, lt
100025d54:     	cmp	x26, x25
100025d58:     	csel	x23, x26, x25, lo
100025d5c:     	mov	x0, x21
100025d60:     	mov	x1, x22
100025d64:     	mov	x2, x23
100025d68:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
100025d6c:     	cmp	x25, x26
100025d70:     	cset	w8, lo
100025d74:     	cmp	w0, #0
100025d78:     	cset	w9, lt
100025d7c:     	csel	w8, w8, w9, eq
100025d80:     	cmp	w8, #1
100025d84:     	b.eq	0x100025d28 <std::__1::pair<std::__1::__tree_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, void*>*, long>, bool> std::__1::__tree<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x48>
100025d88:     	mov	x0, x22
100025d8c:     	mov	x1, x21
100025d90:     	mov	x2, x23
100025d94:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
100025d98:     	cmp	x26, x25
100025d9c:     	cset	w8, lo
100025da0:     	cmp	w0, #0
100025da4:     	cset	w9, lt
100025da8:     	csel	w8, w8, w9, eq
100025dac:     	cmp	w8, #1
100025db0:     	b.ne	0x100025e1c <std::__1::pair<std::__1::__tree_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, void*>*, long>, bool> std::__1::__tree<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x13c>
100025db4:     	ldr	x8, [x24, #8]
100025db8:     	cbnz	x8, 0x100025d34 <std::__1::pair<std::__1::__tree_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, void*>*, long>, bool> std::__1::__tree<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x54>
100025dbc:     	add	x23, x24, #8
100025dc0:     	mov	w0, #56
100025dc4:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100025dc8:     	mov	x21, x0
100025dcc:     	add	x0, x0, #32
100025dd0:     	ldrsb	w8, [x20, #23]
100025dd4:     	tbnz	w8, #31, 0x100025e08 <std::__1::pair<std::__1::__tree_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, void*>*, long>, bool> std::__1::__tree<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x128>
100025dd8:     	ldr	q0, [x20]
100025ddc:     	str	q0, [x0]
100025de0:     	ldr	x8, [x20, #16]
100025de4:     	str	x8, [x0, #16]
100025de8:     	b	0x100025e5c <std::__1::pair<std::__1::__tree_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, void*>*, long>, bool> std::__1::__tree<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x17c>
100025dec:     	mov	x24, x23
100025df0:     	mov	w0, #56
100025df4:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100025df8:     	mov	x21, x0
100025dfc:     	add	x0, x0, #32
100025e00:     	ldrsb	w8, [x20, #23]
100025e04:     	tbz	w8, #31, 0x100025dd8 <std::__1::pair<std::__1::__tree_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, void*>*, long>, bool> std::__1::__tree<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xf8>
100025e08:     	ldp	x22, x25, [x20]
100025e0c:     	cmp	x25, #22
100025e10:     	b.hi	0x100025e28 <std::__1::pair<std::__1::__tree_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, void*>*, long>, bool> std::__1::__tree<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x148>
100025e14:     	strb	w25, [x21, #55]
100025e18:     	b	0x100025e50 <std::__1::pair<std::__1::__tree_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, void*>*, long>, bool> std::__1::__tree<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x170>
100025e1c:     	mov	x1, #0
100025e20:     	mov	x21, x24
100025e24:     	b	0x100025e98 <std::__1::pair<std::__1::__tree_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, void*>*, long>, bool> std::__1::__tree<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x1b8>
100025e28:     	mov	x8, #9223372036854775792
100025e2c:     	cmp	x25, x8
100025e30:     	b.hs	0x100025eb4 <std::__1::pair<std::__1::__tree_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, void*>*, long>, bool> std::__1::__tree<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x1d4>
100025e34:     	orr	x8, x25, #0xf
100025e38:     	add	x20, x8, #1
100025e3c:     	mov	x0, x20
100025e40:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100025e44:     	orr	x8, x20, #0x8000000000000000
100025e48:     	stp	x25, x8, [x21, #40]
100025e4c:     	str	x0, [x21, #32]
100025e50:     	add	x2, x25, #1
100025e54:     	mov	x1, x22
100025e58:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
100025e5c:     	stp	xzr, xzr, [x21]
100025e60:     	str	x24, [x21, #16]
100025e64:     	str	x21, [x23]
100025e68:     	ldr	x8, [x19]
100025e6c:     	ldr	x8, [x8]
100025e70:     	mov	x1, x21
100025e74:     	cbz	x8, 0x100025e80 <std::__1::pair<std::__1::__tree_iterator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__tree_node<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, void*>*, long>, bool> std::__1::__tree<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x1a0>
100025e78:     	str	x8, [x19]
100025e7c:     	ldr	x1, [x23]
100025e80:     	ldr	x0, [x19, #8]
100025e84:     	bl	0x100006fe0 <void std::__1::__tree_balance_after_insert[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)>
100025e88:     	ldr	x8, [x19, #16]
100025e8c:     	add	x8, x8, #1
100025e90:     	str	x8, [x19, #16]
100025e94:     	mov	w1, #1
100025e98:     	mov	x0, x21
100025e9c:     	ldp	x29, x30, [sp, #64]
100025ea0:     	ldp	x20, x19, [sp, #48]
100025ea4:     	ldp	x22, x21, [sp, #32]
100025ea8:     	ldp	x24, x23, [sp, #16]
100025eac:     	ldp	x26, x25, [sp], #80
100025eb0:     	ret
100025eb4:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
100025eb8:     	brk	#0x1
100025ebc:     	mov	x19, x0
100025ec0:     	mov	x0, x21
100025ec4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100025ec8:     	mov	x0, x19
100025ecc:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100025ed0 <__GLOBAL__sub_I_csv_reporter.cc>:
100025ed0:     	stp	x20, x19, [sp, #-32]!
100025ed4:     	stp	x29, x30, [sp, #16]
100025ed8:     	add	x29, sp, #16
100025edc:     	bl	0x10000363c <benchmark::internal::InitializeStreams()>
100025ee0:     	adrp	x19, 0x100038000 <__GLOBAL__sub_I_csv_reporter.cc+0x5c>
100025ee4:     	add	x19, x19, #192
100025ee8:     	stp	xzr, xzr, [x19, #8]
100025eec:     	str	xzr, [x19]
100025ef0:     	mov	w0, #240
100025ef4:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100025ef8:     	add	x9, x0, #240
100025efc:     	str	x9, [x19, #16]
100025f00:     	mov	w8, #24942
100025f04:     	movk	w8, #25965, lsl #16
100025f08:     	str	x8, [x0]
100025f0c:     	mov	w8, #4
100025f10:     	strb	w8, [x0, #23]
100025f14:     	mov	x8, #29801
100025f18:     	movk	x8, #29285, lsl #16
100025f1c:     	movk	x8, #29793, lsl #32
100025f20:     	movk	x8, #28521, lsl #48
100025f24:     	mov	w10, #29550
100025f28:     	stp	x8, x10, [x0, #24]
100025f2c:     	mov	w8, #10
100025f30:     	strb	w8, [x0, #47]
100025f34:     	mov	x8, #25970
100025f38:     	movk	x8, #27745, lsl #16
100025f3c:     	movk	x8, #29791, lsl #32
100025f40:     	movk	x8, #28009, lsl #48
100025f44:     	mov	w10, #101
100025f48:     	stp	x8, x10, [x0, #48]
100025f4c:     	mov	w8, #9
100025f50:     	strb	w8, [x0, #71]
100025f54:     	mov	x10, #28771
100025f58:     	movk	x10, #24437, lsl #16
100025f5c:     	movk	x10, #26996, lsl #32
100025f60:     	movk	x10, #25965, lsl #48
100025f64:     	stp	x10, xzr, [x0, #72]
100025f68:     	mov	w10, #8
100025f6c:     	strb	w10, [x0, #95]
100025f70:     	mov	x10, #26996
100025f74:     	movk	x10, #25965, lsl #16
100025f78:     	movk	x10, #30047, lsl #32
100025f7c:     	movk	x10, #26990, lsl #48
100025f80:     	mov	w11, #116
100025f84:     	stp	x10, x11, [x0, #96]
100025f88:     	strb	w8, [x0, #119]
100025f8c:     	mov	x8, #31074
100025f90:     	movk	x8, #25972, lsl #16
100025f94:     	movk	x8, #24435, lsl #32
100025f98:     	movk	x8, #25968, lsl #48
100025f9c:     	mov	x10, #24434
100025fa0:     	movk	x10, #25971, lsl #16
100025fa4:     	movk	x10, #28515, lsl #32
100025fa8:     	movk	x10, #25710, lsl #48
100025fac:     	stp	x8, x10, [x0, #120]
100025fb0:     	strb	wzr, [x0, #136]
100025fb4:     	mov	w8, #16
100025fb8:     	strb	w8, [x0, #143]
100025fbc:     	mov	x11, #29801
100025fc0:     	movk	x11, #28005, lsl #16
100025fc4:     	movk	x11, #24435, lsl #32
100025fc8:     	movk	x11, #25968, lsl #48
100025fcc:     	stp	x11, x10, [x0, #144]
100025fd0:     	strb	wzr, [x0, #160]
100025fd4:     	strb	w8, [x0, #167]
100025fd8:     	mov	x8, #24940
100025fdc:     	movk	x8, #25954, lsl #16
100025fe0:     	movk	x8, #108, lsl #32
100025fe4:     	str	x8, [x0, #168]
100025fe8:     	mov	w8, #5
100025fec:     	strb	w8, [x0, #191]
100025ff0:     	mov	x8, #29285
100025ff4:     	movk	x8, #28530, lsl #16
100025ff8:     	movk	x8, #24434, lsl #32
100025ffc:     	movk	x8, #25455, lsl #48
100026000:     	mov	x10, #30051
100026004:     	movk	x10, #29298, lsl #16
100026008:     	movk	x10, #25701, lsl #32
10002600c:     	stp	x8, x10, [x0, #192]
100026010:     	mov	w8, #14
100026014:     	strb	w8, [x0, #215]
100026018:     	mov	x8, #29285
10002601c:     	movk	x8, #28530, lsl #16
100026020:     	movk	x8, #24434, lsl #32
100026024:     	movk	x8, #25965, lsl #48
100026028:     	mov	x10, #29555
10002602c:     	movk	x10, #26465, lsl #16
100026030:     	movk	x10, #101, lsl #32
100026034:     	stp	x8, x10, [x0, #216]
100026038:     	mov	w10, #13
10002603c:     	adrp	x8, 0x100006000 <__GLOBAL__sub_I_csv_reporter.cc+0xec>
100026040:     	add	x8, x8, #3036
100026044:     	adrp	x2, 0x100000000 <__GLOBAL__sub_I_csv_reporter.cc+0xdc>
100026048:     	add	x2, x2, #0
10002604c:     	strb	w10, [x0, #239]
100026050:     	stp	x0, x9, [x19]
100026054:     	mov	x0, x8
100026058:     	mov	x1, x19
10002605c:     	ldp	x29, x30, [sp, #16]
100026060:     	ldp	x20, x19, [sp], #32
100026064:     	b	0x10002f044 <_vsnprintf+0x10002f044>

0000000100026068 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)>:
100026068:     	sub	sp, sp, #288
10002606c:     	stp	x28, x27, [sp, #192]
100026070:     	stp	x26, x25, [sp, #208]
100026074:     	stp	x24, x23, [sp, #224]
100026078:     	stp	x22, x21, [sp, #240]
10002607c:     	stp	x20, x19, [sp, #256]
100026080:     	stp	x29, x30, [sp, #272]
100026084:     	add	x29, sp, #272
100026088:     	mov	x20, x1
10002608c:     	adrp	x8, 0x100034000 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x5c>
100026090:     	ldr	x8, [x8, #928]
100026094:     	ldr	x8, [x8]
100026098:     	stur	x8, [x29, #-104]
10002609c:     	ldr	x19, [x0, #8]
1000260a0:     	adrp	x1, 0x100032000 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x68>
1000260a4:     	add	x1, x1, #1374
1000260a8:     	mov	w21, #2
1000260ac:     	mov	x0, x19
1000260b0:     	mov	w2, #2
1000260b4:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000260b8:     	strb	w21, [sp, #111]
1000260bc:     	mov	w8, #8224
1000260c0:     	strh	w8, [sp, #88]
1000260c4:     	strb	wzr, [sp, #90]
1000260c8:     	add	x1, sp, #88
1000260cc:     	mov	x0, x19
1000260d0:     	mov	w2, #2
1000260d4:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000260d8:     	adrp	x1, 0x100032000 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xa0>
1000260dc:     	add	x1, x1, #1377
1000260e0:     	mov	w2, #13
1000260e4:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000260e8:     	mov	w8, #4
1000260ec:     	strb	w8, [sp, #87]
1000260f0:     	mov	w8, #538976288
1000260f4:     	str	w8, [sp, #64]
1000260f8:     	strb	wzr, [sp, #68]
1000260fc:     	add	x8, sp, #40
100026100:     	bl	0x10002e88c <benchmark::LocalDateTimeString()>
100026104:     	ldrb	w8, [sp, #87]
100026108:     	sxtb	w9, w8
10002610c:     	add	x23, sp, #64
100026110:     	ldp	x10, x11, [sp, #64]
100026114:     	cmp	w9, #0
100026118:     	csel	x1, x10, x23, lt
10002611c:     	csel	x2, x11, x8, lt
100026120:     	mov	x0, x19
100026124:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100026128:     	mov	x21, x0
10002612c:     	mov	w8, #4
100026130:     	sturb	w8, [x29, #-105]
100026134:     	mov	w8, #24932
100026138:     	movk	w8, #25972, lsl #16
10002613c:     	stur	w8, [x29, #-128]
100026140:     	sturb	wzr, [x29, #-124]
100026144:     	add	x22, sp, #112
100026148:     	add	x0, sp, #112
10002614c:     	sub	x1, x29, #128
100026150:     	add	x2, sp, #40
100026154:     	bl	0x100026fa4 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
100026158:     	ldrb	w8, [sp, #135]
10002615c:     	sxtb	w9, w8
100026160:     	ldp	x10, x11, [sp, #112]
100026164:     	cmp	w9, #0
100026168:     	csel	x1, x10, x22, lt
10002616c:     	csel	x2, x11, x8, lt
100026170:     	mov	x0, x21
100026174:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100026178:     	adrp	x1, 0x100032000 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x140>
10002617c:     	add	x1, x1, #1391
100026180:     	mov	w2, #2
100026184:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100026188:     	ldrsb	w8, [sp, #135]
10002618c:     	tbnz	w8, #31, 0x100026248 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x1e0>
100026190:     	ldursb	w8, [x29, #-105]
100026194:     	tbnz	w8, #31, 0x100026258 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x1f0>
100026198:     	ldrb	w8, [sp, #87]
10002619c:     	sxtb	w9, w8
1000261a0:     	ldp	x10, x11, [sp, #64]
1000261a4:     	cmp	w9, #0
1000261a8:     	add	x9, sp, #64
1000261ac:     	csel	x1, x10, x9, lt
1000261b0:     	csel	x2, x11, x8, lt
1000261b4:     	mov	x0, x19
1000261b8:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000261bc:     	mov	x21, x0
1000261c0:     	mov	w8, #9
1000261c4:     	adrp	x9, 0x100032000 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x18c>
1000261c8:     	add	x9, x9, #1394
1000261cc:     	sturb	w8, [x29, #-105]
1000261d0:     	ldr	x8, [x9]
1000261d4:     	stur	x8, [x29, #-128]
1000261d8:     	mov	w8, #101
1000261dc:     	sturh	w8, [x29, #-120]
1000261e0:     	ldr	x2, [x20, #8]
1000261e4:     	add	x22, sp, #112
1000261e8:     	add	x0, sp, #112
1000261ec:     	sub	x1, x29, #128
1000261f0:     	bl	0x100026fa4 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
1000261f4:     	ldrb	w8, [sp, #135]
1000261f8:     	sxtb	w9, w8
1000261fc:     	ldp	x10, x11, [sp, #112]
100026200:     	cmp	w9, #0
100026204:     	csel	x1, x10, x22, lt
100026208:     	csel	x2, x11, x8, lt
10002620c:     	mov	x0, x21
100026210:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100026214:     	adrp	x1, 0x100032000 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x1dc>
100026218:     	add	x1, x1, #1391
10002621c:     	mov	w2, #2
100026220:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100026224:     	ldrsb	w8, [sp, #135]
100026228:     	tbnz	w8, #31, 0x100026264 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x1fc>
10002622c:     	ldursb	w8, [x29, #-105]
100026230:     	tbnz	w8, #31, 0x100026274 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x20c>
100026234:     	adrp	x22, 0x100038000 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x214>
100026238:     	add	x22, x22, #528
10002623c:     	ldr	x8, [x22]
100026240:     	cbnz	x8, 0x10002628c <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x224>
100026244:     	b	0x10002632c <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x2c4>
100026248:     	ldr	x0, [sp, #112]
10002624c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100026250:     	ldursb	w8, [x29, #-105]
100026254:     	tbz	w8, #31, 0x100026198 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x130>
100026258:     	ldur	x0, [x29, #-128]
10002625c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100026260:     	b	0x100026198 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x130>
100026264:     	ldr	x0, [sp, #112]
100026268:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002626c:     	ldursb	w8, [x29, #-105]
100026270:     	tbz	w8, #31, 0x100026234 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x1cc>
100026274:     	ldur	x0, [x29, #-128]
100026278:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002627c:     	adrp	x22, 0x100038000 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x25c>
100026280:     	add	x22, x22, #528
100026284:     	ldr	x8, [x22]
100026288:     	cbz	x8, 0x10002632c <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x2c4>
10002628c:     	ldrb	w8, [sp, #87]
100026290:     	sxtb	w9, w8
100026294:     	ldp	x10, x11, [sp, #64]
100026298:     	cmp	w9, #0
10002629c:     	add	x9, sp, #64
1000262a0:     	csel	x1, x10, x9, lt
1000262a4:     	csel	x2, x11, x8, lt
1000262a8:     	mov	x0, x19
1000262ac:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000262b0:     	mov	x21, x0
1000262b4:     	mov	w8, #10
1000262b8:     	sturb	w8, [x29, #-105]
1000262bc:     	mov	w8, #25964
1000262c0:     	sturh	w8, [x29, #-120]
1000262c4:     	adrp	x8, 0x100032000 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x28c>
1000262c8:     	add	x8, x8, #1404
1000262cc:     	ldr	x8, [x8]
1000262d0:     	stur	x8, [x29, #-128]
1000262d4:     	sturb	wzr, [x29, #-118]
1000262d8:     	ldr	x2, [x22]
1000262dc:     	add	x22, sp, #112
1000262e0:     	add	x0, sp, #112
1000262e4:     	sub	x1, x29, #128
1000262e8:     	bl	0x1000270b8 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*)>
1000262ec:     	ldrb	w8, [sp, #135]
1000262f0:     	sxtb	w9, w8
1000262f4:     	ldp	x10, x11, [sp, #112]
1000262f8:     	cmp	w9, #0
1000262fc:     	csel	x1, x10, x22, lt
100026300:     	csel	x2, x11, x8, lt
100026304:     	mov	x0, x21
100026308:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10002630c:     	adrp	x1, 0x100032000 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x2d4>
100026310:     	add	x1, x1, #1391
100026314:     	mov	w2, #2
100026318:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10002631c:     	ldrsb	w8, [sp, #135]
100026320:     	tbnz	w8, #31, 0x100026da8 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xd40>
100026324:     	ldursb	w8, [x29, #-105]
100026328:     	tbnz	w8, #31, 0x100026db8 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xd50>
10002632c:     	ldr	x27, [x20]
100026330:     	ldrb	w8, [sp, #87]
100026334:     	sxtb	w9, w8
100026338:     	ldp	x10, x11, [sp, #64]
10002633c:     	cmp	w9, #0
100026340:     	add	x9, sp, #64
100026344:     	csel	x1, x10, x9, lt
100026348:     	csel	x2, x11, x8, lt
10002634c:     	mov	x0, x19
100026350:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100026354:     	mov	x20, x0
100026358:     	mov	w8, #8
10002635c:     	sturb	w8, [x29, #-105]
100026360:     	mov	x8, #30062
100026364:     	movk	x8, #24429, lsl #16
100026368:     	movk	x8, #28771, lsl #32
10002636c:     	movk	x8, #29557, lsl #48
100026370:     	stur	x8, [x29, #-128]
100026374:     	sturb	wzr, [x29, #-120]
100026378:     	ldrsw	x2, [x27]
10002637c:     	add	x21, sp, #112
100026380:     	add	x0, sp, #112
100026384:     	sub	x1, x29, #128
100026388:     	bl	0x10002727c <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, long long)>
10002638c:     	ldrb	w8, [sp, #135]
100026390:     	sxtb	w9, w8
100026394:     	ldp	x10, x11, [sp, #112]
100026398:     	cmp	w9, #0
10002639c:     	csel	x1, x10, x21, lt
1000263a0:     	csel	x2, x11, x8, lt
1000263a4:     	mov	x0, x20
1000263a8:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000263ac:     	adrp	x1, 0x100032000 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x374>
1000263b0:     	add	x1, x1, #1391
1000263b4:     	mov	w2, #2
1000263b8:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000263bc:     	ldrsb	w8, [sp, #135]
1000263c0:     	tbnz	w8, #31, 0x100026494 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x42c>
1000263c4:     	ldursb	w8, [x29, #-105]
1000263c8:     	tbnz	w8, #31, 0x1000264a4 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x43c>
1000263cc:     	ldrb	w8, [sp, #87]
1000263d0:     	sxtb	w9, w8
1000263d4:     	ldp	x10, x11, [sp, #64]
1000263d8:     	cmp	w9, #0
1000263dc:     	add	x9, sp, #64
1000263e0:     	csel	x1, x10, x9, lt
1000263e4:     	csel	x2, x11, x8, lt
1000263e8:     	mov	x0, x19
1000263ec:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000263f0:     	mov	x20, x0
1000263f4:     	sub	x24, x29, #128
1000263f8:     	mov	w8, #11
1000263fc:     	sturb	w8, [x29, #-105]
100026400:     	mov	w8, #25439
100026404:     	movk	w8, #30064, lsl #16
100026408:     	stur	w8, [x24, #7]
10002640c:     	adrp	x8, 0x100032000 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x3d4>
100026410:     	add	x8, x8, #1415
100026414:     	ldr	x8, [x8]
100026418:     	stur	x8, [x29, #-128]
10002641c:     	sturb	wzr, [x29, #-117]
100026420:     	ldr	d0, [x27, #8]
100026424:     	mov	x8, #145685290680320
100026428:     	movk	x8, #16686, lsl #48
10002642c:     	fmov	d1, x8
100026430:     	fdiv	d0, d0, d1
100026434:     	fcvtas	x2, d0
100026438:     	add	x21, sp, #112
10002643c:     	add	x0, sp, #112
100026440:     	sub	x1, x29, #128
100026444:     	bl	0x10002727c <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, long long)>
100026448:     	ldrb	w8, [sp, #135]
10002644c:     	sxtb	w9, w8
100026450:     	ldp	x10, x11, [sp, #112]
100026454:     	cmp	w9, #0
100026458:     	csel	x1, x10, x21, lt
10002645c:     	csel	x2, x11, x8, lt
100026460:     	mov	x0, x20
100026464:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100026468:     	adrp	x1, 0x100032000 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x430>
10002646c:     	add	x1, x1, #1391
100026470:     	mov	w2, #2
100026474:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100026478:     	ldrsb	w8, [sp, #135]
10002647c:     	tbnz	w8, #31, 0x1000264b0 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x448>
100026480:     	ldursb	w8, [x29, #-105]
100026484:     	tbnz	w8, #31, 0x1000264c0 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x458>
100026488:     	ldr	w8, [x27, #4]
10002648c:     	cbnz	w8, 0x1000264d0 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x468>
100026490:     	b	0x1000265c4 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x55c>
100026494:     	ldr	x0, [sp, #112]
100026498:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002649c:     	ldursb	w8, [x29, #-105]
1000264a0:     	tbz	w8, #31, 0x1000263cc <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x364>
1000264a4:     	ldur	x0, [x29, #-128]
1000264a8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000264ac:     	b	0x1000263cc <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x364>
1000264b0:     	ldr	x0, [sp, #112]
1000264b4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000264b8:     	ldursb	w8, [x29, #-105]
1000264bc:     	tbz	w8, #31, 0x100026488 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x420>
1000264c0:     	ldur	x0, [x29, #-128]
1000264c4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000264c8:     	ldr	w8, [x27, #4]
1000264cc:     	cbz	w8, 0x1000265c4 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x55c>
1000264d0:     	ldrb	w8, [sp, #87]
1000264d4:     	sxtb	w9, w8
1000264d8:     	ldp	x10, x11, [sp, #64]
1000264dc:     	cmp	w9, #0
1000264e0:     	add	x9, sp, #64
1000264e4:     	csel	x1, x10, x9, lt
1000264e8:     	csel	x2, x11, x8, lt
1000264ec:     	mov	x0, x19
1000264f0:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000264f4:     	mov	x20, x0
1000264f8:     	mov	w8, #19
1000264fc:     	strb	w8, [sp, #39]
100026500:     	mov	w8, #27746
100026504:     	movk	w8, #25701, lsl #16
100026508:     	stur	w8, [sp, #31]
10002650c:     	adrp	x8, 0x100032000 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x4d4>
100026510:     	add	x8, x8, #1427
100026514:     	ldr	q0, [x8]
100026518:     	str	q0, [sp, #16]
10002651c:     	strb	wzr, [sp, #35]
100026520:     	ldr	w21, [x27, #4]
100026524:     	add	x22, sp, #112
100026528:     	add	x0, sp, #112
10002652c:     	add	x1, sp, #16
100026530:     	bl	0x10002920c <benchmark::(anonymous namespace)::StrEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
100026534:     	ldrsb	w8, [sp, #135]
100026538:     	ldr	x9, [sp, #112]
10002653c:     	cmp	w8, #0
100026540:     	csel	x8, x9, x22, lt
100026544:     	adrp	x9, 0x100032000 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x50c>
100026548:     	add	x9, x9, #586
10002654c:     	adrp	x10, 0x100032000 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x514>
100026550:     	add	x10, x10, #1886
100026554:     	cmp	w21, #1
100026558:     	csel	x9, x10, x9, eq
10002655c:     	stp	x8, x9, [sp]
100026560:     	adrp	x0, 0x100032000 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x528>
100026564:     	add	x0, x0, #1877
100026568:     	sub	x8, x29, #128
10002656c:     	bl	0x10002c6d0 <benchmark::StrFormat(char const*, ...)>
100026570:     	ldrsb	w8, [sp, #135]
100026574:     	tbz	w8, #31, 0x100026580 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x518>
100026578:     	ldr	x0, [sp, #112]
10002657c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100026580:     	ldurb	w8, [x29, #-105]
100026584:     	sxtb	w9, w8
100026588:     	ldp	x10, x11, [x29, #-128]
10002658c:     	cmp	w9, #0
100026590:     	sub	x9, x29, #128
100026594:     	csel	x1, x10, x9, lt
100026598:     	csel	x2, x11, x8, lt
10002659c:     	mov	x0, x20
1000265a0:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000265a4:     	adrp	x1, 0x100032000 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x56c>
1000265a8:     	add	x1, x1, #1391
1000265ac:     	mov	w2, #2
1000265b0:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000265b4:     	ldursb	w8, [x29, #-105]
1000265b8:     	tbnz	w8, #31, 0x100026dc4 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xd5c>
1000265bc:     	ldrsb	w8, [sp, #39]
1000265c0:     	tbnz	w8, #31, 0x100026dd4 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xd6c>
1000265c4:     	ldrb	w8, [sp, #87]
1000265c8:     	sxtb	w9, w8
1000265cc:     	ldp	x10, x11, [sp, #64]
1000265d0:     	cmp	w9, #0
1000265d4:     	add	x9, sp, #64
1000265d8:     	csel	x1, x10, x9, lt
1000265dc:     	csel	x2, x11, x8, lt
1000265e0:     	mov	x0, x19
1000265e4:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000265e8:     	adrp	x1, 0x100032000 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x5b0>
1000265ec:     	add	x1, x1, #1447
1000265f0:     	mov	w2, #12
1000265f4:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000265f8:     	ldrsb	w8, [sp, #87]
1000265fc:     	tbz	w8, #31, 0x100026608 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x5a0>
100026600:     	ldr	x0, [sp, #64]
100026604:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100026608:     	mov	x8, #2314885530818453536
10002660c:     	movk	x8, #0, lsl #48
100026610:     	str	x8, [sp, #64]
100026614:     	mov	w8, #6
100026618:     	strb	w8, [sp, #87]
10002661c:     	mov	w8, #8
100026620:     	strb	w8, [sp, #135]
100026624:     	mov	x8, #2314885530818453536
100026628:     	str	x8, [sp, #112]
10002662c:     	strb	wzr, [sp, #120]
100026630:     	ldp	x22, x8, [x27, #16]
100026634:     	cmp	x8, x22
100026638:     	b.eq	0x100026a00 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x998>
10002663c:     	mov	x26, #0
100026640:     	mov	x28, #0
100026644:     	add	x20, sp, #112
100026648:     	sub	x24, x29, #128
10002664c:     	adrp	x21, 0x100032000 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x614>
100026650:     	add	x21, x21, #1391
100026654:     	mov	x23, #-1
100026658:     	ldrb	w8, [sp, #87]
10002665c:     	sxtb	w9, w8
100026660:     	ldp	x10, x11, [sp, #64]
100026664:     	cmp	w9, #0
100026668:     	add	x9, sp, #64
10002666c:     	csel	x1, x10, x9, lt
100026670:     	csel	x2, x11, x8, lt
100026674:     	mov	x0, x19
100026678:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10002667c:     	adrp	x1, 0x100032000 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x644>
100026680:     	add	x1, x1, #1374
100026684:     	mov	w2, #2
100026688:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10002668c:     	ldrb	w8, [sp, #135]
100026690:     	sxtb	w9, w8
100026694:     	ldp	x10, x11, [sp, #112]
100026698:     	cmp	w9, #0
10002669c:     	csel	x1, x10, x20, lt
1000266a0:     	csel	x2, x11, x8, lt
1000266a4:     	mov	x0, x19
1000266a8:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000266ac:     	mov	x25, x0
1000266b0:     	add	x2, x22, x26
1000266b4:     	mov	w8, #4
1000266b8:     	strb	w8, [sp, #39]
1000266bc:     	mov	w8, #31092
1000266c0:     	movk	w8, #25968, lsl #16
1000266c4:     	str	w8, [sp, #16]
1000266c8:     	strb	wzr, [sp, #20]
1000266cc:     	sub	x0, x29, #128
1000266d0:     	add	x1, sp, #16
1000266d4:     	bl	0x100026fa4 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
1000266d8:     	ldurb	w8, [x29, #-105]
1000266dc:     	sxtb	w9, w8
1000266e0:     	ldp	x10, x11, [x29, #-128]
1000266e4:     	cmp	w9, #0
1000266e8:     	csel	x1, x10, x24, lt
1000266ec:     	csel	x2, x11, x8, lt
1000266f0:     	mov	x0, x25
1000266f4:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000266f8:     	mov	x1, x21
1000266fc:     	mov	w2, #2
100026700:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100026704:     	ldursb	w8, [x29, #-105]
100026708:     	tbnz	w8, #31, 0x100026978 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x910>
10002670c:     	ldrsb	w8, [sp, #39]
100026710:     	tbnz	w8, #31, 0x100026988 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x920>
100026714:     	ldrb	w8, [sp, #135]
100026718:     	sxtb	w9, w8
10002671c:     	ldp	x10, x11, [sp, #112]
100026720:     	cmp	w9, #0
100026724:     	csel	x1, x10, x20, lt
100026728:     	csel	x2, x11, x8, lt
10002672c:     	mov	x0, x19
100026730:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100026734:     	mov	x25, x0
100026738:     	mov	w8, #5
10002673c:     	strb	w8, [sp, #39]
100026740:     	mov	w8, #25964
100026744:     	movk	w8, #25974, lsl #16
100026748:     	str	w8, [sp, #16]
10002674c:     	mov	w8, #108
100026750:     	strh	w8, [sp, #20]
100026754:     	add	x8, x22, x26
100026758:     	ldrsw	x2, [x8, #24]
10002675c:     	sub	x0, x29, #128
100026760:     	add	x1, sp, #16
100026764:     	bl	0x10002727c <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, long long)>
100026768:     	ldurb	w8, [x29, #-105]
10002676c:     	sxtb	w9, w8
100026770:     	ldp	x10, x11, [x29, #-128]
100026774:     	cmp	w9, #0
100026778:     	csel	x1, x10, x24, lt
10002677c:     	csel	x2, x11, x8, lt
100026780:     	mov	x0, x25
100026784:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100026788:     	mov	x1, x21
10002678c:     	mov	w2, #2
100026790:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100026794:     	ldursb	w8, [x29, #-105]
100026798:     	tbnz	w8, #31, 0x100026994 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x92c>
10002679c:     	ldrsb	w8, [sp, #39]
1000267a0:     	tbnz	w8, #31, 0x1000269a4 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x93c>
1000267a4:     	ldrb	w8, [sp, #135]
1000267a8:     	sxtb	w9, w8
1000267ac:     	ldp	x10, x11, [sp, #112]
1000267b0:     	cmp	w9, #0
1000267b4:     	csel	x1, x10, x20, lt
1000267b8:     	csel	x2, x11, x8, lt
1000267bc:     	mov	x0, x19
1000267c0:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000267c4:     	mov	x25, x0
1000267c8:     	mov	w8, #4
1000267cc:     	strb	w8, [sp, #39]
1000267d0:     	mov	w8, #26995
1000267d4:     	movk	w8, #25978, lsl #16
1000267d8:     	str	w8, [sp, #16]
1000267dc:     	strb	wzr, [sp, #20]
1000267e0:     	add	x8, x22, x26
1000267e4:     	ldrsw	x2, [x8, #28]
1000267e8:     	sub	x0, x29, #128
1000267ec:     	add	x1, sp, #16
1000267f0:     	bl	0x10002727c <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, long long)>
1000267f4:     	ldurb	w8, [x29, #-105]
1000267f8:     	sxtb	w9, w8
1000267fc:     	ldp	x10, x11, [x29, #-128]
100026800:     	cmp	w9, #0
100026804:     	csel	x1, x10, x24, lt
100026808:     	csel	x2, x11, x8, lt
10002680c:     	mov	x0, x25
100026810:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100026814:     	mov	x1, x21
100026818:     	mov	w2, #2
10002681c:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100026820:     	ldursb	w8, [x29, #-105]
100026824:     	tbnz	w8, #31, 0x1000269b0 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x948>
100026828:     	ldrsb	w8, [sp, #39]
10002682c:     	tbnz	w8, #31, 0x1000269c0 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x958>
100026830:     	ldrb	w8, [sp, #135]
100026834:     	sxtb	w9, w8
100026838:     	ldp	x10, x11, [sp, #112]
10002683c:     	cmp	w9, #0
100026840:     	csel	x1, x10, x20, lt
100026844:     	csel	x2, x11, x8, lt
100026848:     	mov	x0, x19
10002684c:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100026850:     	mov	x25, x0
100026854:     	mov	w8, #11
100026858:     	strb	w8, [sp, #39]
10002685c:     	mov	w8, #26994
100026860:     	movk	w8, #26478, lsl #16
100026864:     	stur	w8, [sp, #23]
100026868:     	adrp	x8, 0x100032000 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x830>
10002686c:     	add	x8, x8, #1466
100026870:     	ldr	x8, [x8]
100026874:     	str	x8, [sp, #16]
100026878:     	strb	wzr, [sp, #27]
10002687c:     	add	x8, x22, x26
100026880:     	ldrsw	x2, [x8, #32]
100026884:     	sub	x0, x29, #128
100026888:     	add	x1, sp, #16
10002688c:     	bl	0x10002727c <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, long long)>
100026890:     	ldurb	w8, [x29, #-105]
100026894:     	sxtb	w9, w8
100026898:     	ldp	x10, x11, [x29, #-128]
10002689c:     	cmp	w9, #0
1000268a0:     	csel	x1, x10, x24, lt
1000268a4:     	csel	x2, x11, x8, lt
1000268a8:     	mov	x0, x25
1000268ac:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000268b0:     	adrp	x1, 0x100031000 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x874>
1000268b4:     	add	x1, x1, #2523
1000268b8:     	mov	w2, #1
1000268bc:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000268c0:     	ldursb	w8, [x29, #-105]
1000268c4:     	tbnz	w8, #31, 0x1000269cc <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x964>
1000268c8:     	ldrsb	w8, [sp, #39]
1000268cc:     	tbnz	w8, #31, 0x1000269dc <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x974>
1000268d0:     	ldrb	w8, [sp, #87]
1000268d4:     	sxtb	w9, w8
1000268d8:     	ldp	x10, x11, [sp, #64]
1000268dc:     	cmp	w9, #0
1000268e0:     	add	x9, sp, #64
1000268e4:     	csel	x1, x10, x9, lt
1000268e8:     	csel	x2, x11, x8, lt
1000268ec:     	mov	x0, x19
1000268f0:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000268f4:     	adrp	x1, 0x100032000 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x8bc>
1000268f8:     	add	x1, x1, #1478
1000268fc:     	mov	w2, #1
100026900:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100026904:     	ldp	x9, x8, [x27, #16]
100026908:     	sub	x8, x8, x9
10002690c:     	asr	x8, x8, #3
100026910:     	mov	x9, #-3689348814741910324
100026914:     	movk	x9, #52429
100026918:     	madd	x8, x8, x9, x23
10002691c:     	cmp	x28, x8
100026920:     	b.eq	0x100026938 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x8d0>
100026924:     	mov	x0, x19
100026928:     	adrp	x1, 0x100032000 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x8f0>
10002692c:     	add	x1, x1, #1230
100026930:     	mov	w2, #1
100026934:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100026938:     	mov	x0, x19
10002693c:     	adrp	x1, 0x100031000 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x900>
100026940:     	add	x1, x1, #2523
100026944:     	mov	w2, #1
100026948:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10002694c:     	add	x28, x28, #1
100026950:     	ldp	x22, x8, [x27, #16]
100026954:     	sub	x8, x8, x22
100026958:     	asr	x8, x8, #3
10002695c:     	mov	x9, #-3689348814741910324
100026960:     	movk	x9, #52429
100026964:     	mul	x8, x8, x9
100026968:     	add	x26, x26, #40
10002696c:     	cmp	x28, x8
100026970:     	b.lo	0x100026658 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x5f0>
100026974:     	b	0x1000269e8 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x980>
100026978:     	ldur	x0, [x29, #-128]
10002697c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100026980:     	ldrsb	w8, [sp, #39]
100026984:     	tbz	w8, #31, 0x100026714 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x6ac>
100026988:     	ldr	x0, [sp, #16]
10002698c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100026990:     	b	0x100026714 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x6ac>
100026994:     	ldur	x0, [x29, #-128]
100026998:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002699c:     	ldrsb	w8, [sp, #39]
1000269a0:     	tbz	w8, #31, 0x1000267a4 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x73c>
1000269a4:     	ldr	x0, [sp, #16]
1000269a8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000269ac:     	b	0x1000267a4 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x73c>
1000269b0:     	ldur	x0, [x29, #-128]
1000269b4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000269b8:     	ldrsb	w8, [sp, #39]
1000269bc:     	tbz	w8, #31, 0x100026830 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x7c8>
1000269c0:     	ldr	x0, [sp, #16]
1000269c4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000269c8:     	b	0x100026830 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x7c8>
1000269cc:     	ldur	x0, [x29, #-128]
1000269d0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000269d4:     	ldrsb	w8, [sp, #39]
1000269d8:     	tbz	w8, #31, 0x1000268d0 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x868>
1000269dc:     	ldr	x0, [sp, #16]
1000269e0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000269e4:     	b	0x1000268d0 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x868>
1000269e8:     	ldrsb	w8, [sp, #87]
1000269ec:     	add	x23, sp, #64
1000269f0:     	sub	x24, x29, #128
1000269f4:     	tbz	w8, #31, 0x100026a00 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x998>
1000269f8:     	ldr	x0, [sp, #64]
1000269fc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100026a00:     	add	x8, x23, #8
100026a04:     	mov	w9, #538976288
100026a08:     	str	x9, [sp, #64]
100026a0c:     	ldur	x9, [x29, #-128]
100026a10:     	str	x9, [x8]
100026a14:     	ldur	x9, [x24, #7]
100026a18:     	stur	x9, [x8, #7]
100026a1c:     	mov	w8, #4
100026a20:     	strb	w8, [sp, #87]
100026a24:     	add	x1, sp, #64
100026a28:     	mov	x0, x19
100026a2c:     	mov	w2, #4
100026a30:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100026a34:     	adrp	x1, 0x100032000 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x9fc>
100026a38:     	add	x1, x1, #1480
100026a3c:     	mov	w2, #3
100026a40:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100026a44:     	ldrb	w8, [sp, #87]
100026a48:     	sxtb	w9, w8
100026a4c:     	ldp	x10, x11, [sp, #64]
100026a50:     	cmp	w9, #0
100026a54:     	add	x9, sp, #64
100026a58:     	csel	x1, x10, x9, lt
100026a5c:     	csel	x2, x11, x8, lt
100026a60:     	mov	x0, x19
100026a64:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100026a68:     	adrp	x1, 0x100032000 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xa30>
100026a6c:     	add	x1, x1, #1484
100026a70:     	mov	w2, #13
100026a74:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100026a78:     	ldp	x21, x8, [x27, #40]
100026a7c:     	cmp	x21, x8
100026a80:     	b.eq	0x100026ac0 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xa58>
100026a84:     	adrp	x20, 0x100032000 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xa4c>
100026a88:     	add	x20, x20, #1230
100026a8c:     	ldr	d0, [x21], #8
100026a90:     	mov	x0, x19
100026a94:     	bl	0x10002ee1c <_vsnprintf+0x10002ee1c>
100026a98:     	ldr	x8, [x27, #48]
100026a9c:     	cmp	x21, x8
100026aa0:     	b.eq	0x100026ac0 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xa58>
100026aa4:     	mov	x0, x19
100026aa8:     	mov	x1, x20
100026aac:     	mov	w2, #1
100026ab0:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100026ab4:     	ldr	x8, [x27, #48]
100026ab8:     	cmp	x21, x8
100026abc:     	b.ne	0x100026a8c <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xa24>
100026ac0:     	adrp	x1, 0x100032000 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xa88>
100026ac4:     	add	x1, x1, #1480
100026ac8:     	mov	x0, x19
100026acc:     	mov	w2, #3
100026ad0:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100026ad4:     	mov	x8, #25970
100026ad8:     	movk	x8, #25964, lsl #16
100026adc:     	movk	x8, #29537, lsl #32
100026ae0:     	movk	x8, #101, lsl #48
100026ae4:     	str	x8, [sp, #136]
100026ae8:     	ldrb	w8, [sp, #87]
100026aec:     	sxtb	w9, w8
100026af0:     	ldp	x10, x11, [sp, #64]
100026af4:     	cmp	w9, #0
100026af8:     	add	x9, sp, #64
100026afc:     	csel	x1, x10, x9, lt
100026b00:     	csel	x2, x11, x8, lt
100026b04:     	mov	x0, x19
100026b08:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100026b0c:     	mov	x20, x0
100026b10:     	mov	w8, #18
100026b14:     	strb	w8, [sp, #39]
100026b18:     	mov	w8, #25968
100026b1c:     	strh	w8, [sp, #32]
100026b20:     	adrp	x8, 0x100032000 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xae8>
100026b24:     	add	x8, x8, #1498
100026b28:     	ldr	q0, [x8]
100026b2c:     	str	q0, [sp, #16]
100026b30:     	strb	wzr, [sp, #34]
100026b34:     	sub	x21, x29, #128
100026b38:     	sub	x0, x29, #128
100026b3c:     	add	x1, sp, #16
100026b40:     	add	x2, sp, #136
100026b44:     	bl	0x1000270b8 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*)>
100026b48:     	ldurb	w8, [x29, #-105]
100026b4c:     	sxtb	w9, w8
100026b50:     	ldp	x10, x11, [x29, #-128]
100026b54:     	cmp	w9, #0
100026b58:     	csel	x1, x10, x21, lt
100026b5c:     	csel	x2, x11, x8, lt
100026b60:     	mov	x0, x20
100026b64:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100026b68:     	ldursb	w8, [x29, #-105]
100026b6c:     	tbnz	w8, #31, 0x100026d38 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xcd0>
100026b70:     	ldrsb	w8, [sp, #39]
100026b74:     	tbnz	w8, #31, 0x100026d48 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xce0>
100026b78:     	bl	0x1000036f8 <benchmark::internal::GetGlobalContext()>
100026b7c:     	ldr	x22, [x0]
100026b80:     	cbz	x22, 0x100026c60 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xbf8>
100026b84:     	ldr	x25, [x22], #8
100026b88:     	cmp	x25, x22
100026b8c:     	b.eq	0x100026c60 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xbf8>
100026b90:     	adrp	x20, 0x100032000 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xb58>
100026b94:     	add	x20, x20, #1391
100026b98:     	add	x23, sp, #64
100026b9c:     	sub	x24, x29, #128
100026ba0:     	b	0x100026bb0 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xb48>
100026ba4:     	mov	x25, x8
100026ba8:     	cmp	x8, x22
100026bac:     	b.eq	0x100026c60 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xbf8>
100026bb0:     	mov	x0, x19
100026bb4:     	mov	x1, x20
100026bb8:     	mov	w2, #2
100026bbc:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100026bc0:     	ldrb	w8, [sp, #87]
100026bc4:     	sxtb	w9, w8
100026bc8:     	ldp	x10, x11, [sp, #64]
100026bcc:     	cmp	w9, #0
100026bd0:     	csel	x1, x10, x23, lt
100026bd4:     	csel	x2, x11, x8, lt
100026bd8:     	mov	x0, x19
100026bdc:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100026be0:     	mov	x21, x0
100026be4:     	add	x1, x25, #32
100026be8:     	add	x2, x25, #56
100026bec:     	sub	x0, x29, #128
100026bf0:     	bl	0x100026fa4 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
100026bf4:     	ldurb	w8, [x29, #-105]
100026bf8:     	sxtb	w9, w8
100026bfc:     	ldp	x10, x11, [x29, #-128]
100026c00:     	cmp	w9, #0
100026c04:     	csel	x1, x10, x24, lt
100026c08:     	csel	x2, x11, x8, lt
100026c0c:     	mov	x0, x21
100026c10:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100026c14:     	ldursb	w8, [x29, #-105]
100026c18:     	tbnz	w8, #31, 0x100026c28 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xbc0>
100026c1c:     	ldr	x9, [x25, #8]
100026c20:     	cbnz	x9, 0x100026c38 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xbd0>
100026c24:     	b	0x100026c48 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xbe0>
100026c28:     	ldur	x0, [x29, #-128]
100026c2c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100026c30:     	ldr	x9, [x25, #8]
100026c34:     	cbz	x9, 0x100026c48 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xbe0>
100026c38:     	mov	x8, x9
100026c3c:     	ldr	x9, [x9]
100026c40:     	cbnz	x9, 0x100026c38 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xbd0>
100026c44:     	b	0x100026ba4 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xb3c>
100026c48:     	ldr	x8, [x25, #16]
100026c4c:     	ldr	x9, [x8]
100026c50:     	cmp	x9, x25
100026c54:     	mov	x25, x8
100026c58:     	b.ne	0x100026c48 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xbe0>
100026c5c:     	b	0x100026ba4 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xb3c>
100026c60:     	adrp	x1, 0x100031000 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xc24>
100026c64:     	add	x1, x1, #2523
100026c68:     	mov	x0, x19
100026c6c:     	mov	w2, #1
100026c70:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100026c74:     	ldrb	w8, [sp, #111]
100026c78:     	sxtb	w9, w8
100026c7c:     	ldp	x10, x11, [sp, #88]
100026c80:     	cmp	w9, #0
100026c84:     	add	x9, sp, #88
100026c88:     	csel	x1, x10, x9, lt
100026c8c:     	csel	x2, x11, x8, lt
100026c90:     	mov	x0, x19
100026c94:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100026c98:     	adrp	x1, 0x100032000 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xc60>
100026c9c:     	add	x1, x1, #1517
100026ca0:     	mov	w2, #3
100026ca4:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100026ca8:     	ldrb	w8, [sp, #111]
100026cac:     	sxtb	w9, w8
100026cb0:     	ldp	x10, x11, [sp, #88]
100026cb4:     	cmp	w9, #0
100026cb8:     	add	x9, sp, #88
100026cbc:     	csel	x1, x10, x9, lt
100026cc0:     	csel	x2, x11, x8, lt
100026cc4:     	mov	x0, x19
100026cc8:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100026ccc:     	adrp	x1, 0x100032000 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xc94>
100026cd0:     	add	x1, x1, #1521
100026cd4:     	mov	w2, #16
100026cd8:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100026cdc:     	ldrsb	w8, [sp, #135]
100026ce0:     	tbnz	w8, #31, 0x100026d54 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xcec>
100026ce4:     	ldrsb	w8, [sp, #63]
100026ce8:     	tbnz	w8, #31, 0x100026d64 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xcfc>
100026cec:     	ldrsb	w8, [sp, #87]
100026cf0:     	tbnz	w8, #31, 0x100026d74 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xd0c>
100026cf4:     	ldrsb	w8, [sp, #111]
100026cf8:     	tbnz	w8, #31, 0x100026d84 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xd1c>
100026cfc:     	ldur	x8, [x29, #-104]
100026d00:     	adrp	x9, 0x100034000 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xcd0>
100026d04:     	ldr	x9, [x9, #928]
100026d08:     	ldr	x9, [x9]
100026d0c:     	cmp	x9, x8
100026d10:     	b.ne	0x100026da4 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xd3c>
100026d14:     	mov	w0, #1
100026d18:     	ldp	x29, x30, [sp, #272]
100026d1c:     	ldp	x20, x19, [sp, #256]
100026d20:     	ldp	x22, x21, [sp, #240]
100026d24:     	ldp	x24, x23, [sp, #224]
100026d28:     	ldp	x26, x25, [sp, #208]
100026d2c:     	ldp	x28, x27, [sp, #192]
100026d30:     	add	sp, sp, #288
100026d34:     	ret
100026d38:     	ldur	x0, [x29, #-128]
100026d3c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100026d40:     	ldrsb	w8, [sp, #39]
100026d44:     	tbz	w8, #31, 0x100026b78 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xb10>
100026d48:     	ldr	x0, [sp, #16]
100026d4c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100026d50:     	b	0x100026b78 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xb10>
100026d54:     	ldr	x0, [sp, #112]
100026d58:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100026d5c:     	ldrsb	w8, [sp, #63]
100026d60:     	tbz	w8, #31, 0x100026cec <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xc84>
100026d64:     	ldr	x0, [sp, #40]
100026d68:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100026d6c:     	ldrsb	w8, [sp, #87]
100026d70:     	tbz	w8, #31, 0x100026cf4 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xc8c>
100026d74:     	ldr	x0, [sp, #64]
100026d78:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100026d7c:     	ldrsb	w8, [sp, #111]
100026d80:     	tbz	w8, #31, 0x100026cfc <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xc94>
100026d84:     	ldr	x0, [sp, #88]
100026d88:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100026d8c:     	ldur	x8, [x29, #-104]
100026d90:     	adrp	x9, 0x100034000 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xd60>
100026d94:     	ldr	x9, [x9, #928]
100026d98:     	ldr	x9, [x9]
100026d9c:     	cmp	x9, x8
100026da0:     	b.eq	0x100026d14 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xcac>
100026da4:     	bl	0x10002f0d4 <_vsnprintf+0x10002f0d4>
100026da8:     	ldr	x0, [sp, #112]
100026dac:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100026db0:     	ldursb	w8, [x29, #-105]
100026db4:     	tbz	w8, #31, 0x10002632c <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x2c4>
100026db8:     	ldur	x0, [x29, #-128]
100026dbc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100026dc0:     	b	0x10002632c <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x2c4>
100026dc4:     	ldur	x0, [x29, #-128]
100026dc8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100026dcc:     	ldrsb	w8, [sp, #39]
100026dd0:     	tbz	w8, #31, 0x1000265c4 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x55c>
100026dd4:     	ldr	x0, [sp, #16]
100026dd8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100026ddc:     	b	0x1000265c4 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0x55c>
100026de0:     	mov	x19, x0
100026de4:     	ldrsb	w8, [sp, #135]
100026de8:     	tbz	w8, #31, 0x100026e58 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xdf0>
100026dec:     	ldr	x0, [sp, #112]
100026df0:     	b	0x100026e54 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xdec>
100026df4:     	mov	x19, x0
100026df8:     	b	0x100026e58 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xdf0>
100026dfc:     	mov	x19, x0
100026e00:     	b	0x100026e8c <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xe24>
100026e04:     	b	0x100026f18 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xeb0>
100026e08:     	mov	x19, x0
100026e0c:     	b	0x100026f2c <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xec4>
100026e10:     	b	0x100026f40 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xed8>
100026e14:     	mov	x19, x0
100026e18:     	b	0x100026e8c <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xe24>
100026e1c:     	mov	x19, x0
100026e20:     	b	0x100026e8c <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xe24>
100026e24:     	mov	x19, x0
100026e28:     	b	0x100026e8c <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xe24>
100026e2c:     	mov	x19, x0
100026e30:     	b	0x100026e8c <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xe24>
100026e34:     	mov	x19, x0
100026e38:     	ldrsb	w8, [sp, #87]
100026e3c:     	tbz	w8, #31, 0x100026f64 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xefc>
100026e40:     	b	0x100026f84 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xf1c>
100026e44:     	mov	x19, x0
100026e48:     	ldursb	w8, [x29, #-105]
100026e4c:     	tbz	w8, #31, 0x100026e58 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xdf0>
100026e50:     	ldur	x0, [x29, #-128]
100026e54:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100026e58:     	ldrsb	w8, [sp, #39]
100026e5c:     	tbz	w8, #31, 0x100026f54 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xeec>
100026e60:     	ldr	x0, [sp, #16]
100026e64:     	b	0x100026f50 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xee8>
100026e68:     	b	0x100026e78 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xe10>
100026e6c:     	b	0x100026e78 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xe10>
100026e70:     	b	0x100026e78 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xe10>
100026e74:     	b	0x100026e78 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xe10>
100026e78:     	mov	x19, x0
100026e7c:     	ldrsb	w8, [sp, #135]
100026e80:     	tbz	w8, #31, 0x100026e8c <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xe24>
100026e84:     	ldr	x0, [sp, #112]
100026e88:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100026e8c:     	ldursb	w8, [x29, #-105]
100026e90:     	tbz	w8, #31, 0x100026f54 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xeec>
100026e94:     	ldur	x0, [x29, #-128]
100026e98:     	b	0x100026f50 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xee8>
100026e9c:     	mov	x19, x0
100026ea0:     	ldrsb	w8, [sp, #111]
100026ea4:     	tbz	w8, #31, 0x100026f6c <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xf04>
100026ea8:     	b	0x100026f94 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xf2c>
100026eac:     	mov	x19, x0
100026eb0:     	b	0x100026f54 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xeec>
100026eb4:     	mov	x19, x0
100026eb8:     	b	0x100026f54 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xeec>
100026ebc:     	b	0x100026f40 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xed8>
100026ec0:     	b	0x100026f40 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xed8>
100026ec4:     	b	0x100026f40 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xed8>
100026ec8:     	b	0x100026f40 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xed8>
100026ecc:     	mov	x19, x0
100026ed0:     	ldursb	w8, [x29, #-105]
100026ed4:     	tbz	w8, #31, 0x100026f44 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xedc>
100026ed8:     	ldur	x0, [x29, #-128]
100026edc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100026ee0:     	b	0x100026f44 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xedc>
100026ee4:     	b	0x100026f40 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xed8>
100026ee8:     	mov	x19, x0
100026eec:     	b	0x100026f2c <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xec4>
100026ef0:     	mov	x19, x0
100026ef4:     	b	0x100026f2c <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xec4>
100026ef8:     	mov	x19, x0
100026efc:     	b	0x100026f2c <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xec4>
100026f00:     	mov	x19, x0
100026f04:     	b	0x100026f2c <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xec4>
100026f08:     	b	0x100026f40 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xed8>
100026f0c:     	b	0x100026f18 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xeb0>
100026f10:     	b	0x100026f18 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xeb0>
100026f14:     	b	0x100026f18 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xeb0>
100026f18:     	mov	x19, x0
100026f1c:     	ldursb	w8, [x29, #-105]
100026f20:     	tbz	w8, #31, 0x100026f2c <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xec4>
100026f24:     	ldur	x0, [x29, #-128]
100026f28:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100026f2c:     	ldrsb	w8, [sp, #39]
100026f30:     	tbz	w8, #31, 0x100026f44 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xedc>
100026f34:     	ldr	x0, [sp, #16]
100026f38:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100026f3c:     	b	0x100026f44 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xedc>
100026f40:     	mov	x19, x0
100026f44:     	ldrsb	w8, [sp, #135]
100026f48:     	tbz	w8, #31, 0x100026f54 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xeec>
100026f4c:     	ldr	x0, [sp, #112]
100026f50:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100026f54:     	ldrsb	w8, [sp, #63]
100026f58:     	tbnz	w8, #31, 0x100026f74 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xf0c>
100026f5c:     	ldrsb	w8, [sp, #87]
100026f60:     	tbnz	w8, #31, 0x100026f84 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xf1c>
100026f64:     	ldrsb	w8, [sp, #111]
100026f68:     	tbnz	w8, #31, 0x100026f94 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xf2c>
100026f6c:     	mov	x0, x19
100026f70:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
100026f74:     	ldr	x0, [sp, #40]
100026f78:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100026f7c:     	ldrsb	w8, [sp, #87]
100026f80:     	tbz	w8, #31, 0x100026f64 <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xefc>
100026f84:     	ldr	x0, [sp, #64]
100026f88:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100026f8c:     	ldrsb	w8, [sp, #111]
100026f90:     	tbz	w8, #31, 0x100026f6c <benchmark::JSONReporter::ReportContext(benchmark::BenchmarkReporter::Context const&)+0xf04>
100026f94:     	ldr	x0, [sp, #88]
100026f98:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100026f9c:     	mov	x0, x19
100026fa0:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100026fa4 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>:
100026fa4:     	sub	sp, sp, #128
100026fa8:     	stp	x24, x23, [sp, #64]
100026fac:     	stp	x22, x21, [sp, #80]
100026fb0:     	stp	x20, x19, [sp, #96]
100026fb4:     	stp	x29, x30, [sp, #112]
100026fb8:     	add	x29, sp, #112
100026fbc:     	mov	x20, x2
100026fc0:     	mov	x19, x0
100026fc4:     	add	x21, sp, #40
100026fc8:     	add	x0, sp, #40
100026fcc:     	bl	0x10002920c <benchmark::(anonymous namespace)::StrEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
100026fd0:     	ldrsb	w23, [sp, #63]
100026fd4:     	ldr	x24, [sp, #40]
100026fd8:     	add	x22, sp, #16
100026fdc:     	add	x0, sp, #16
100026fe0:     	mov	x1, x20
100026fe4:     	bl	0x10002920c <benchmark::(anonymous namespace)::StrEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
100026fe8:     	cmp	w23, #0
100026fec:     	csel	x8, x24, x21, lt
100026ff0:     	ldrsb	w9, [sp, #39]
100026ff4:     	ldr	x10, [sp, #16]
100026ff8:     	cmp	w9, #0
100026ffc:     	csel	x9, x10, x22, lt
100027000:     	stp	x8, x9, [sp]
100027004:     	adrp	x0, 0x100032000 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x8c>
100027008:     	add	x0, x0, #1841
10002700c:     	mov	x8, x19
100027010:     	bl	0x10002c6d0 <benchmark::StrFormat(char const*, ...)>
100027014:     	ldrsb	w8, [sp, #39]
100027018:     	tbnz	w8, #31, 0x10002703c <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x98>
10002701c:     	ldrsb	w8, [sp, #63]
100027020:     	tbnz	w8, #31, 0x10002704c <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xa8>
100027024:     	ldp	x29, x30, [sp, #112]
100027028:     	ldp	x20, x19, [sp, #96]
10002702c:     	ldp	x22, x21, [sp, #80]
100027030:     	ldp	x24, x23, [sp, #64]
100027034:     	add	sp, sp, #128
100027038:     	ret
10002703c:     	ldr	x0, [sp, #16]
100027040:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100027044:     	ldrsb	w8, [sp, #63]
100027048:     	tbz	w8, #31, 0x100027024 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x80>
10002704c:     	ldr	x0, [sp, #40]
100027050:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100027054:     	ldp	x29, x30, [sp, #112]
100027058:     	ldp	x20, x19, [sp, #96]
10002705c:     	ldp	x22, x21, [sp, #80]
100027060:     	ldp	x24, x23, [sp, #64]
100027064:     	add	sp, sp, #128
100027068:     	ret
10002706c:     	mov	x19, x0
100027070:     	ldrsb	w8, [sp, #39]
100027074:     	tbnz	w8, #31, 0x100027088 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xe4>
100027078:     	ldrsb	w8, [sp, #63]
10002707c:     	tbnz	w8, #31, 0x1000270a8 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x104>
100027080:     	mov	x0, x19
100027084:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
100027088:     	ldr	x0, [sp, #16]
10002708c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100027090:     	ldrsb	w8, [sp, #63]
100027094:     	tbz	w8, #31, 0x100027080 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xdc>
100027098:     	b	0x1000270a8 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x104>
10002709c:     	mov	x19, x0
1000270a0:     	ldrsb	w8, [sp, #63]
1000270a4:     	tbz	w8, #31, 0x100027080 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xdc>
1000270a8:     	ldr	x0, [sp, #40]
1000270ac:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000270b0:     	mov	x0, x19
1000270b4:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

00000001000270b8 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*)>:
1000270b8:     	sub	sp, sp, #160
1000270bc:     	stp	x24, x23, [sp, #96]
1000270c0:     	stp	x22, x21, [sp, #112]
1000270c4:     	stp	x20, x19, [sp, #128]
1000270c8:     	stp	x29, x30, [sp, #144]
1000270cc:     	add	x29, sp, #144
1000270d0:     	mov	x20, x2
1000270d4:     	mov	x19, x0
1000270d8:     	add	x21, sp, #72
1000270dc:     	add	x0, sp, #72
1000270e0:     	bl	0x10002920c <benchmark::(anonymous namespace)::StrEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
1000270e4:     	ldrsb	w8, [sp, #95]
1000270e8:     	ldr	x9, [sp, #72]
1000270ec:     	cmp	w8, #0
1000270f0:     	csel	x24, x9, x21, lt
1000270f4:     	mov	x0, x20
1000270f8:     	bl	0x10002f254 <_vsnprintf+0x10002f254>
1000270fc:     	mov	x8, #9223372036854775792
100027100:     	cmp	x0, x8
100027104:     	b.hs	0x1000271fc <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*)+0x144>
100027108:     	mov	x21, x0
10002710c:     	cmp	x0, #23
100027110:     	b.hs	0x100027124 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*)+0x6c>
100027114:     	strb	w21, [sp, #47]
100027118:     	add	x22, sp, #24
10002711c:     	cbnz	x21, 0x100027144 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*)+0x8c>
100027120:     	b	0x100027154 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*)+0x9c>
100027124:     	orr	x8, x21, #0xf
100027128:     	add	x23, x8, #1
10002712c:     	mov	x0, x23
100027130:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100027134:     	mov	x22, x0
100027138:     	orr	x8, x23, #0x8000000000000000
10002713c:     	stp	x21, x8, [sp, #32]
100027140:     	str	x0, [sp, #24]
100027144:     	mov	x0, x22
100027148:     	mov	x1, x20
10002714c:     	mov	x2, x21
100027150:     	bl	0x10002f1c4 <_vsnprintf+0x10002f1c4>
100027154:     	strb	wzr, [x22, x21]
100027158:     	add	x20, sp, #48
10002715c:     	add	x0, sp, #48
100027160:     	add	x1, sp, #24
100027164:     	bl	0x10002920c <benchmark::(anonymous namespace)::StrEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
100027168:     	ldrsb	w8, [sp, #71]
10002716c:     	ldr	x9, [sp, #48]
100027170:     	cmp	w8, #0
100027174:     	csel	x8, x9, x20, lt
100027178:     	stp	x24, x8, [sp]
10002717c:     	adrp	x0, 0x100032000 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*)+0xf0>
100027180:     	add	x0, x0, #1841
100027184:     	mov	x8, x19
100027188:     	bl	0x10002c6d0 <benchmark::StrFormat(char const*, ...)>
10002718c:     	ldrsb	w8, [sp, #71]
100027190:     	tbnz	w8, #31, 0x1000271bc <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*)+0x104>
100027194:     	ldrsb	w8, [sp, #47]
100027198:     	tbnz	w8, #31, 0x1000271cc <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*)+0x114>
10002719c:     	ldrsb	w8, [sp, #95]
1000271a0:     	tbnz	w8, #31, 0x1000271dc <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*)+0x124>
1000271a4:     	ldp	x29, x30, [sp, #144]
1000271a8:     	ldp	x20, x19, [sp, #128]
1000271ac:     	ldp	x22, x21, [sp, #112]
1000271b0:     	ldp	x24, x23, [sp, #96]
1000271b4:     	add	sp, sp, #160
1000271b8:     	ret
1000271bc:     	ldr	x0, [sp, #48]
1000271c0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000271c4:     	ldrsb	w8, [sp, #47]
1000271c8:     	tbz	w8, #31, 0x10002719c <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*)+0xe4>
1000271cc:     	ldr	x0, [sp, #24]
1000271d0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000271d4:     	ldrsb	w8, [sp, #95]
1000271d8:     	tbz	w8, #31, 0x1000271a4 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*)+0xec>
1000271dc:     	ldr	x0, [sp, #72]
1000271e0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000271e4:     	ldp	x29, x30, [sp, #144]
1000271e8:     	ldp	x20, x19, [sp, #128]
1000271ec:     	ldp	x22, x21, [sp, #112]
1000271f0:     	ldp	x24, x23, [sp, #96]
1000271f4:     	add	sp, sp, #160
1000271f8:     	ret
1000271fc:     	add	x0, sp, #24
100027200:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
100027204:     	brk	#0x1
100027208:     	mov	x19, x0
10002720c:     	ldrsb	w8, [sp, #71]
100027210:     	tbnz	w8, #31, 0x10002722c <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*)+0x174>
100027214:     	ldrsb	w8, [sp, #47]
100027218:     	tbnz	w8, #31, 0x10002724c <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*)+0x194>
10002721c:     	ldrsb	w8, [sp, #95]
100027220:     	tbnz	w8, #31, 0x10002726c <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*)+0x1b4>
100027224:     	mov	x0, x19
100027228:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
10002722c:     	ldr	x0, [sp, #48]
100027230:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100027234:     	ldrsb	w8, [sp, #47]
100027238:     	tbz	w8, #31, 0x10002721c <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*)+0x164>
10002723c:     	b	0x10002724c <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*)+0x194>
100027240:     	mov	x19, x0
100027244:     	ldrsb	w8, [sp, #47]
100027248:     	tbz	w8, #31, 0x10002721c <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*)+0x164>
10002724c:     	ldr	x0, [sp, #24]
100027250:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100027254:     	ldrsb	w8, [sp, #95]
100027258:     	tbz	w8, #31, 0x100027224 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*)+0x16c>
10002725c:     	b	0x10002726c <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*)+0x1b4>
100027260:     	mov	x19, x0
100027264:     	ldrsb	w8, [sp, #95]
100027268:     	tbz	w8, #31, 0x100027224 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*)+0x16c>
10002726c:     	ldr	x0, [sp, #72]
100027270:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100027274:     	mov	x0, x19
100027278:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010002727c <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, long long)>:
10002727c:     	sub	sp, sp, #368
100027280:     	stp	x24, x23, [sp, #304]
100027284:     	stp	x22, x21, [sp, #320]
100027288:     	stp	x20, x19, [sp, #336]
10002728c:     	stp	x29, x30, [sp, #352]
100027290:     	add	x29, sp, #352
100027294:     	mov	x20, x2
100027298:     	mov	x21, x1
10002729c:     	mov	x19, x0
1000272a0:     	add	x22, sp, #24
1000272a4:     	add	x0, sp, #24
1000272a8:     	bl	0x10002936c <std::__1::basic_stringstream<char, std::__1::char_traits<char>, std::__1::allocator<char>>::basic_stringstream[abi:ue170006]()>
1000272ac:     	add	x0, x22, #16
1000272b0:     	mov	w8, #34
1000272b4:     	strb	w8, [sp]
1000272b8:     	mov	x1, sp
1000272bc:     	mov	w2, #1
1000272c0:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000272c4:     	mov	x22, x0
1000272c8:     	mov	x23, sp
1000272cc:     	mov	x0, sp
1000272d0:     	mov	x1, x21
1000272d4:     	bl	0x10002920c <benchmark::(anonymous namespace)::StrEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
1000272d8:     	ldrb	w8, [sp, #23]
1000272dc:     	sxtb	w9, w8
1000272e0:     	ldp	x10, x11, [sp]
1000272e4:     	cmp	w9, #0
1000272e8:     	csel	x1, x10, x23, lt
1000272ec:     	csel	x2, x11, x8, lt
1000272f0:     	mov	x0, x22
1000272f4:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000272f8:     	adrp	x1, 0x100032000 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, long long)+0xa8>
1000272fc:     	add	x1, x1, #1873
100027300:     	mov	w2, #3
100027304:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100027308:     	mov	x1, x20
10002730c:     	bl	0x10002ee40 <_vsnprintf+0x10002ee40>
100027310:     	ldrsb	w8, [sp, #23]
100027314:     	tbz	w8, #31, 0x100027320 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, long long)+0xa4>
100027318:     	ldr	x0, [sp]
10002731c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100027320:     	add	x21, sp, #24
100027324:     	add	x20, x21, #24
100027328:     	mov	x8, x19
10002732c:     	mov	x0, x20
100027330:     	bl	0x10002ecd8 <_vsnprintf+0x10002ecd8>
100027334:     	adrp	x19, 0x100034000 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, long long)+0xec>
100027338:     	ldr	x19, [x19, #704]
10002733c:     	ldr	x8, [x19]
100027340:     	str	x8, [sp, #24]
100027344:     	ldur	x8, [x8, #-24]
100027348:     	ldp	x9, x10, [x19, #64]
10002734c:     	str	x9, [x21, x8]
100027350:     	adrp	x8, 0x100034000 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, long long)+0x108>
100027354:     	ldr	x8, [x8, #736]
100027358:     	add	x8, x8, #16
10002735c:     	stp	x10, x8, [sp, #40]
100027360:     	ldrsb	w8, [sp, #135]
100027364:     	tbz	w8, #31, 0x100027370 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, long long)+0xf4>
100027368:     	ldr	x0, [sp, #112]
10002736c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100027370:     	mov	x0, x20
100027374:     	bl	0x10002eeb8 <_vsnprintf+0x10002eeb8>
100027378:     	add	x1, x19, #8
10002737c:     	add	x19, sp, #24
100027380:     	add	x0, sp, #24
100027384:     	bl	0x10002ee70 <_vsnprintf+0x10002ee70>
100027388:     	add	x0, x19, #128
10002738c:     	bl	0x10002efe4 <_vsnprintf+0x10002efe4>
100027390:     	ldp	x29, x30, [sp, #352]
100027394:     	ldp	x20, x19, [sp, #336]
100027398:     	ldp	x22, x21, [sp, #320]
10002739c:     	ldp	x24, x23, [sp, #304]
1000273a0:     	add	sp, sp, #368
1000273a4:     	ret
1000273a8:     	mov	x19, x0
1000273ac:     	b	0x1000273cc <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, long long)+0x150>
1000273b0:     	mov	x19, x0
1000273b4:     	b	0x1000273cc <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, long long)+0x150>
1000273b8:     	mov	x19, x0
1000273bc:     	ldrsb	w8, [sp, #23]
1000273c0:     	tbz	w8, #31, 0x1000273cc <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, long long)+0x150>
1000273c4:     	ldr	x0, [sp]
1000273c8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000273cc:     	add	x0, sp, #24
1000273d0:     	bl	0x100029498 <std::__1::basic_stringstream<char, std::__1::char_traits<char>, std::__1::allocator<char>>::~basic_stringstream()>
1000273d4:     	mov	x0, x19
1000273d8:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

00000001000273dc <benchmark::JSONReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)>:
1000273dc:     	sub	sp, sp, #112
1000273e0:     	stp	x26, x25, [sp, #32]
1000273e4:     	stp	x24, x23, [sp, #48]
1000273e8:     	stp	x22, x21, [sp, #64]
1000273ec:     	stp	x20, x19, [sp, #80]
1000273f0:     	stp	x29, x30, [sp, #96]
1000273f4:     	add	x29, sp, #96
1000273f8:     	ldp	x22, x8, [x1]
1000273fc:     	cmp	x22, x8
100027400:     	b.eq	0x10002751c <benchmark::JSONReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x140>
100027404:     	mov	x19, x1
100027408:     	mov	x20, x0
10002740c:     	mov	w9, #4
100027410:     	strb	w9, [sp, #23]
100027414:     	mov	w9, #538976288
100027418:     	str	w9, [sp]
10002741c:     	strb	wzr, [sp, #4]
100027420:     	ldr	x21, [x0, #8]
100027424:     	ldrb	w9, [x0, #24]
100027428:     	cbz	w9, 0x10002743c <benchmark::JSONReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x60>
10002742c:     	strb	wzr, [x20, #24]
100027430:     	cmp	x22, x8
100027434:     	b.ne	0x100027460 <benchmark::JSONReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x84>
100027438:     	b	0x10002751c <benchmark::JSONReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x140>
10002743c:     	adrp	x1, 0x100032000 <benchmark::JSONReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x8c>
100027440:     	add	x1, x1, #1391
100027444:     	mov	x0, x21
100027448:     	mov	w2, #2
10002744c:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100027450:     	ldp	x22, x8, [x19]
100027454:     	strb	wzr, [x20, #24]
100027458:     	cmp	x22, x8
10002745c:     	b.eq	0x10002751c <benchmark::JSONReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x140>
100027460:     	mov	x25, sp
100027464:     	adrp	x23, 0x100032000 <benchmark::JSONReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xb4>
100027468:     	add	x23, x23, #1374
10002746c:     	mov	w26, #125
100027470:     	adrp	x24, 0x100032000 <benchmark::JSONReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xc0>
100027474:     	add	x24, x24, #1391
100027478:     	ldrb	w8, [sp, #23]
10002747c:     	sxtb	w9, w8
100027480:     	ldp	x10, x11, [sp]
100027484:     	cmp	w9, #0
100027488:     	csel	x1, x10, x25, lt
10002748c:     	csel	x2, x11, x8, lt
100027490:     	mov	x0, x21
100027494:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100027498:     	mov	x1, x23
10002749c:     	mov	w2, #2
1000274a0:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000274a4:     	mov	x0, x20
1000274a8:     	mov	x1, x22
1000274ac:     	bl	0x10002755c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)>
1000274b0:     	ldrb	w8, [sp, #23]
1000274b4:     	sxtb	w9, w8
1000274b8:     	ldp	x10, x11, [sp]
1000274bc:     	cmp	w9, #0
1000274c0:     	csel	x1, x10, x25, lt
1000274c4:     	csel	x2, x11, x8, lt
1000274c8:     	mov	x0, x21
1000274cc:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000274d0:     	strb	w26, [sp, #31]
1000274d4:     	add	x1, sp, #31
1000274d8:     	mov	w2, #1
1000274dc:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000274e0:     	add	x22, x22, #448
1000274e4:     	ldr	x8, [x19, #8]
1000274e8:     	cmp	x22, x8
1000274ec:     	b.eq	0x10002750c <benchmark::JSONReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x130>
1000274f0:     	mov	x0, x21
1000274f4:     	mov	x1, x24
1000274f8:     	mov	w2, #2
1000274fc:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100027500:     	ldr	x8, [x19, #8]
100027504:     	cmp	x22, x8
100027508:     	b.ne	0x100027478 <benchmark::JSONReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x9c>
10002750c:     	ldrsb	w8, [sp, #23]
100027510:     	tbz	w8, #31, 0x10002751c <benchmark::JSONReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x140>
100027514:     	ldr	x0, [sp]
100027518:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002751c:     	ldp	x29, x30, [sp, #96]
100027520:     	ldp	x20, x19, [sp, #80]
100027524:     	ldp	x22, x21, [sp, #64]
100027528:     	ldp	x24, x23, [sp, #48]
10002752c:     	ldp	x26, x25, [sp, #32]
100027530:     	add	sp, sp, #112
100027534:     	ret
100027538:     	b	0x100027540 <benchmark::JSONReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x164>
10002753c:     	b	0x100027540 <benchmark::JSONReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x164>
100027540:     	mov	x19, x0
100027544:     	ldrsb	w8, [sp, #23]
100027548:     	tbz	w8, #31, 0x100027554 <benchmark::JSONReporter::ReportRuns(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x178>
10002754c:     	ldr	x0, [sp]
100027550:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100027554:     	mov	x0, x19
100027558:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010002755c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)>:
10002755c:     	sub	sp, sp, #208
100027560:     	stp	x26, x25, [sp, #128]
100027564:     	stp	x24, x23, [sp, #144]
100027568:     	stp	x22, x21, [sp, #160]
10002756c:     	stp	x20, x19, [sp, #176]
100027570:     	stp	x29, x30, [sp, #192]
100027574:     	add	x29, sp, #192
100027578:     	mov	x20, x1
10002757c:     	mov	w8, #6
100027580:     	strb	w8, [sp, #95]
100027584:     	mov	w8, #538976288
100027588:     	str	w8, [sp, #72]
10002758c:     	strh	w8, [sp, #76]
100027590:     	strb	wzr, [sp, #78]
100027594:     	ldr	x19, [x0, #8]
100027598:     	add	x1, sp, #72
10002759c:     	mov	x0, x19
1000275a0:     	mov	w2, #6
1000275a4:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000275a8:     	mov	x21, x0
1000275ac:     	mov	w8, #4
1000275b0:     	strb	w8, [sp, #71]
1000275b4:     	mov	w8, #24942
1000275b8:     	movk	w8, #25965, lsl #16
1000275bc:     	str	w8, [sp, #48]
1000275c0:     	strb	wzr, [sp, #52]
1000275c4:     	add	x8, sp, #24
1000275c8:     	mov	x0, x20
1000275cc:     	bl	0x100029ed4 <benchmark::BenchmarkReporter::Run::benchmark_name() const>
1000275d0:     	add	x22, sp, #96
1000275d4:     	add	x0, sp, #96
1000275d8:     	add	x1, sp, #48
1000275dc:     	add	x2, sp, #24
1000275e0:     	bl	0x100026fa4 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
1000275e4:     	ldrb	w8, [sp, #119]
1000275e8:     	sxtb	w9, w8
1000275ec:     	ldp	x10, x11, [sp, #96]
1000275f0:     	cmp	w9, #0
1000275f4:     	csel	x1, x10, x22, lt
1000275f8:     	csel	x2, x11, x8, lt
1000275fc:     	mov	x0, x21
100027600:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100027604:     	adrp	x1, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xd4>
100027608:     	add	x1, x1, #1391
10002760c:     	mov	w2, #2
100027610:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100027614:     	ldrsb	w8, [sp, #119]
100027618:     	tbnz	w8, #31, 0x100027998 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x43c>
10002761c:     	ldrsb	w8, [sp, #47]
100027620:     	tbnz	w8, #31, 0x1000279a8 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x44c>
100027624:     	ldrsb	w8, [sp, #71]
100027628:     	tbnz	w8, #31, 0x1000279b8 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x45c>
10002762c:     	ldrb	w8, [sp, #95]
100027630:     	sxtb	w9, w8
100027634:     	ldp	x10, x11, [sp, #72]
100027638:     	cmp	w9, #0
10002763c:     	add	x9, sp, #72
100027640:     	csel	x1, x10, x9, lt
100027644:     	csel	x2, x11, x8, lt
100027648:     	mov	x0, x19
10002764c:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100027650:     	mov	x21, x0
100027654:     	mov	w8, #12
100027658:     	strb	w8, [sp, #71]
10002765c:     	mov	w8, #25710
100027660:     	movk	w8, #30821, lsl #16
100027664:     	str	w8, [sp, #56]
100027668:     	adrp	x8, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x138>
10002766c:     	add	x8, x8, #1546
100027670:     	ldr	x8, [x8]
100027674:     	str	x8, [sp, #48]
100027678:     	strb	wzr, [sp, #60]
10002767c:     	ldr	x2, [x20, #192]
100027680:     	add	x22, sp, #96
100027684:     	add	x0, sp, #96
100027688:     	add	x1, sp, #48
10002768c:     	bl	0x10002727c <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, long long)>
100027690:     	ldrb	w8, [sp, #119]
100027694:     	sxtb	w9, w8
100027698:     	ldp	x10, x11, [sp, #96]
10002769c:     	cmp	w9, #0
1000276a0:     	csel	x1, x10, x22, lt
1000276a4:     	csel	x2, x11, x8, lt
1000276a8:     	mov	x0, x21
1000276ac:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000276b0:     	adrp	x1, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x180>
1000276b4:     	add	x1, x1, #1391
1000276b8:     	mov	w2, #2
1000276bc:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000276c0:     	ldrsb	w8, [sp, #119]
1000276c4:     	tbnz	w8, #31, 0x1000279c4 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x468>
1000276c8:     	ldrsb	w8, [sp, #71]
1000276cc:     	tbnz	w8, #31, 0x1000279d4 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x478>
1000276d0:     	ldrb	w8, [sp, #95]
1000276d4:     	sxtb	w9, w8
1000276d8:     	ldp	x10, x11, [sp, #72]
1000276dc:     	cmp	w9, #0
1000276e0:     	add	x9, sp, #72
1000276e4:     	csel	x1, x10, x9, lt
1000276e8:     	csel	x2, x11, x8, lt
1000276ec:     	mov	x0, x19
1000276f0:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000276f4:     	mov	x21, x0
1000276f8:     	mov	w0, #32
1000276fc:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
100027700:     	str	x0, [sp, #48]
100027704:     	adrp	x8, 0x100033000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1d8>
100027708:     	ldr	q0, [x8, #720]
10002770c:     	stur	q0, [sp, #56]
100027710:     	adrp	x8, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1e0>
100027714:     	add	x8, x8, #1559
100027718:     	ldr	q0, [x8]
10002771c:     	str	q0, [x0]
100027720:     	ldur	q0, [x8, #9]
100027724:     	stur	q0, [x0, #9]
100027728:     	strb	wzr, [x0, #25]
10002772c:     	ldr	x2, [x20, #200]
100027730:     	add	x22, sp, #96
100027734:     	add	x0, sp, #96
100027738:     	add	x1, sp, #48
10002773c:     	bl	0x10002727c <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, long long)>
100027740:     	ldrb	w8, [sp, #119]
100027744:     	sxtb	w9, w8
100027748:     	ldp	x10, x11, [sp, #96]
10002774c:     	cmp	w9, #0
100027750:     	csel	x1, x10, x22, lt
100027754:     	csel	x2, x11, x8, lt
100027758:     	mov	x0, x21
10002775c:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100027760:     	adrp	x1, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x230>
100027764:     	add	x1, x1, #1391
100027768:     	mov	w2, #2
10002776c:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100027770:     	ldrsb	w8, [sp, #119]
100027774:     	tbnz	w8, #31, 0x1000279e0 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x484>
100027778:     	ldrsb	w8, [sp, #71]
10002777c:     	tbnz	w8, #31, 0x1000279f0 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x494>
100027780:     	ldrb	w8, [sp, #95]
100027784:     	sxtb	w9, w8
100027788:     	ldp	x10, x11, [sp, #72]
10002778c:     	cmp	w9, #0
100027790:     	add	x9, sp, #72
100027794:     	csel	x1, x10, x9, lt
100027798:     	csel	x2, x11, x8, lt
10002779c:     	mov	x0, x19
1000277a0:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000277a4:     	mov	x21, x0
1000277a8:     	mov	w8, #8
1000277ac:     	strb	w8, [sp, #71]
1000277b0:     	mov	x8, #30066
1000277b4:     	movk	x8, #24430, lsl #16
1000277b8:     	movk	x8, #24942, lsl #32
1000277bc:     	movk	x8, #25965, lsl #48
1000277c0:     	str	x8, [sp, #48]
1000277c4:     	strb	wzr, [sp, #56]
1000277c8:     	add	x8, sp, #24
1000277cc:     	mov	x0, x20
1000277d0:     	bl	0x10000ba9c <benchmark::BenchmarkName::str() const>
1000277d4:     	add	x22, sp, #96
1000277d8:     	add	x0, sp, #96
1000277dc:     	add	x1, sp, #48
1000277e0:     	add	x2, sp, #24
1000277e4:     	bl	0x100026fa4 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
1000277e8:     	ldrb	w8, [sp, #119]
1000277ec:     	sxtb	w9, w8
1000277f0:     	ldp	x10, x11, [sp, #96]
1000277f4:     	cmp	w9, #0
1000277f8:     	csel	x1, x10, x22, lt
1000277fc:     	csel	x2, x11, x8, lt
100027800:     	mov	x0, x21
100027804:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100027808:     	adrp	x1, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x2d8>
10002780c:     	add	x1, x1, #1391
100027810:     	mov	w2, #2
100027814:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100027818:     	ldrsb	w8, [sp, #119]
10002781c:     	tbnz	w8, #31, 0x1000279fc <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x4a0>
100027820:     	ldrsb	w8, [sp, #47]
100027824:     	tbnz	w8, #31, 0x100027a0c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x4b0>
100027828:     	ldrsb	w8, [sp, #71]
10002782c:     	tbnz	w8, #31, 0x100027a1c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x4c0>
100027830:     	ldrb	w8, [sp, #95]
100027834:     	sxtb	w9, w8
100027838:     	ldp	x10, x11, [sp, #72]
10002783c:     	cmp	w9, #0
100027840:     	add	x9, sp, #72
100027844:     	csel	x1, x10, x9, lt
100027848:     	csel	x2, x11, x8, lt
10002784c:     	mov	x0, x19
100027850:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100027854:     	mov	x21, x0
100027858:     	mov	w8, #8
10002785c:     	strb	w8, [sp, #71]
100027860:     	mov	x8, #30066
100027864:     	movk	x8, #24430, lsl #16
100027868:     	movk	x8, #31092, lsl #32
10002786c:     	movk	x8, #25968, lsl #48
100027870:     	str	x8, [sp, #48]
100027874:     	strb	wzr, [sp, #56]
100027878:     	ldr	w8, [x20, #208]
10002787c:     	adrp	x9, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x34c>
100027880:     	add	x9, x9, #1901
100027884:     	adrp	x10, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x354>
100027888:     	add	x10, x10, #1891
10002788c:     	cmp	w8, #0
100027890:     	csel	x2, x10, x9, eq
100027894:     	add	x22, sp, #96
100027898:     	add	x0, sp, #96
10002789c:     	add	x1, sp, #48
1000278a0:     	bl	0x1000270b8 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*)>
1000278a4:     	ldrb	w8, [sp, #119]
1000278a8:     	sxtb	w9, w8
1000278ac:     	ldp	x10, x11, [sp, #96]
1000278b0:     	cmp	w9, #0
1000278b4:     	csel	x1, x10, x22, lt
1000278b8:     	csel	x2, x11, x8, lt
1000278bc:     	mov	x0, x21
1000278c0:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000278c4:     	adrp	x1, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x394>
1000278c8:     	add	x1, x1, #1391
1000278cc:     	mov	w2, #2
1000278d0:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000278d4:     	ldrsb	w8, [sp, #119]
1000278d8:     	tbnz	w8, #31, 0x100027a28 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x4cc>
1000278dc:     	ldrsb	w8, [sp, #71]
1000278e0:     	tbnz	w8, #31, 0x100027a38 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x4dc>
1000278e4:     	ldrb	w8, [sp, #95]
1000278e8:     	sxtb	w9, w8
1000278ec:     	ldp	x10, x11, [sp, #72]
1000278f0:     	cmp	w9, #0
1000278f4:     	add	x9, sp, #72
1000278f8:     	csel	x1, x10, x9, lt
1000278fc:     	csel	x2, x11, x8, lt
100027900:     	mov	x0, x19
100027904:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100027908:     	mov	x21, x0
10002790c:     	mov	w8, #11
100027910:     	strb	w8, [sp, #71]
100027914:     	mov	w8, #28521
100027918:     	movk	w8, #29550, lsl #16
10002791c:     	stur	w8, [sp, #55]
100027920:     	adrp	x8, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x3f0>
100027924:     	add	x8, x8, #1585
100027928:     	ldr	x8, [x8]
10002792c:     	str	x8, [sp, #48]
100027930:     	strb	wzr, [sp, #59]
100027934:     	ldr	x2, [x20, #328]
100027938:     	add	x22, sp, #96
10002793c:     	add	x0, sp, #96
100027940:     	add	x1, sp, #48
100027944:     	bl	0x10002727c <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, long long)>
100027948:     	ldrb	w8, [sp, #119]
10002794c:     	sxtb	w9, w8
100027950:     	ldp	x10, x11, [sp, #96]
100027954:     	cmp	w9, #0
100027958:     	csel	x1, x10, x22, lt
10002795c:     	csel	x2, x11, x8, lt
100027960:     	mov	x0, x21
100027964:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100027968:     	adrp	x1, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x438>
10002796c:     	add	x1, x1, #1391
100027970:     	mov	w2, #2
100027974:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100027978:     	ldrsb	w8, [sp, #119]
10002797c:     	tbnz	w8, #31, 0x100027a44 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x4e8>
100027980:     	ldrsb	w8, [sp, #71]
100027984:     	tbnz	w8, #31, 0x100027a54 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x4f8>
100027988:     	ldr	w8, [x20, #208]
10002798c:     	cmp	w8, #1
100027990:     	b.ne	0x100027a68 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x50c>
100027994:     	b	0x100027b00 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x5a4>
100027998:     	ldr	x0, [sp, #96]
10002799c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000279a0:     	ldrsb	w8, [sp, #47]
1000279a4:     	tbz	w8, #31, 0x100027624 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xc8>
1000279a8:     	ldr	x0, [sp, #24]
1000279ac:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000279b0:     	ldrsb	w8, [sp, #71]
1000279b4:     	tbz	w8, #31, 0x10002762c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xd0>
1000279b8:     	ldr	x0, [sp, #48]
1000279bc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000279c0:     	b	0x10002762c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xd0>
1000279c4:     	ldr	x0, [sp, #96]
1000279c8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000279cc:     	ldrsb	w8, [sp, #71]
1000279d0:     	tbz	w8, #31, 0x1000276d0 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x174>
1000279d4:     	ldr	x0, [sp, #48]
1000279d8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000279dc:     	b	0x1000276d0 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x174>
1000279e0:     	ldr	x0, [sp, #96]
1000279e4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000279e8:     	ldrsb	w8, [sp, #71]
1000279ec:     	tbz	w8, #31, 0x100027780 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x224>
1000279f0:     	ldr	x0, [sp, #48]
1000279f4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000279f8:     	b	0x100027780 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x224>
1000279fc:     	ldr	x0, [sp, #96]
100027a00:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100027a04:     	ldrsb	w8, [sp, #47]
100027a08:     	tbz	w8, #31, 0x100027828 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x2cc>
100027a0c:     	ldr	x0, [sp, #24]
100027a10:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100027a14:     	ldrsb	w8, [sp, #71]
100027a18:     	tbz	w8, #31, 0x100027830 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x2d4>
100027a1c:     	ldr	x0, [sp, #48]
100027a20:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100027a24:     	b	0x100027830 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x2d4>
100027a28:     	ldr	x0, [sp, #96]
100027a2c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100027a30:     	ldrsb	w8, [sp, #71]
100027a34:     	tbz	w8, #31, 0x1000278e4 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x388>
100027a38:     	ldr	x0, [sp, #48]
100027a3c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100027a40:     	b	0x1000278e4 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x388>
100027a44:     	ldr	x0, [sp, #96]
100027a48:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100027a4c:     	ldrsb	w8, [sp, #71]
100027a50:     	tbz	w8, #31, 0x100027988 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x42c>
100027a54:     	ldr	x0, [sp, #48]
100027a58:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100027a5c:     	ldr	w8, [x20, #208]
100027a60:     	cmp	w8, #1
100027a64:     	b.eq	0x100027b00 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x5a4>
100027a68:     	ldrb	w8, [sp, #95]
100027a6c:     	sxtb	w9, w8
100027a70:     	ldp	x10, x11, [sp, #72]
100027a74:     	cmp	w9, #0
100027a78:     	add	x9, sp, #72
100027a7c:     	csel	x1, x10, x9, lt
100027a80:     	csel	x2, x11, x8, lt
100027a84:     	mov	x0, x19
100027a88:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100027a8c:     	mov	x21, x0
100027a90:     	mov	w8, #16
100027a94:     	strb	w8, [sp, #71]
100027a98:     	adrp	x8, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x568>
100027a9c:     	add	x8, x8, #1597
100027aa0:     	ldr	q0, [x8]
100027aa4:     	str	q0, [sp, #48]
100027aa8:     	strb	wzr, [sp, #64]
100027aac:     	ldr	x2, [x20, #320]
100027ab0:     	add	x22, sp, #96
100027ab4:     	add	x0, sp, #96
100027ab8:     	add	x1, sp, #48
100027abc:     	bl	0x10002727c <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, long long)>
100027ac0:     	ldrb	w8, [sp, #119]
100027ac4:     	sxtb	w9, w8
100027ac8:     	ldp	x10, x11, [sp, #96]
100027acc:     	cmp	w9, #0
100027ad0:     	csel	x1, x10, x22, lt
100027ad4:     	csel	x2, x11, x8, lt
100027ad8:     	mov	x0, x21
100027adc:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100027ae0:     	adrp	x1, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x5b0>
100027ae4:     	add	x1, x1, #1391
100027ae8:     	mov	w2, #2
100027aec:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100027af0:     	ldrsb	w8, [sp, #119]
100027af4:     	tbnz	w8, #31, 0x100027eb0 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x954>
100027af8:     	ldrsb	w8, [sp, #71]
100027afc:     	tbnz	w8, #31, 0x100027ec0 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x964>
100027b00:     	ldrb	w8, [sp, #95]
100027b04:     	sxtb	w9, w8
100027b08:     	ldp	x10, x11, [sp, #72]
100027b0c:     	cmp	w9, #0
100027b10:     	add	x9, sp, #72
100027b14:     	csel	x1, x10, x9, lt
100027b18:     	csel	x2, x11, x8, lt
100027b1c:     	mov	x0, x19
100027b20:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100027b24:     	mov	x21, x0
100027b28:     	mov	w8, #7
100027b2c:     	strb	w8, [sp, #71]
100027b30:     	mov	w8, #26740
100027b34:     	movk	w8, #25970, lsl #16
100027b38:     	str	w8, [sp, #48]
100027b3c:     	mov	w8, #24933
100027b40:     	movk	w8, #29540, lsl #16
100027b44:     	stur	w8, [sp, #51]
100027b48:     	strb	wzr, [sp, #55]
100027b4c:     	ldr	x2, [x20, #312]
100027b50:     	add	x22, sp, #96
100027b54:     	add	x0, sp, #96
100027b58:     	add	x1, sp, #48
100027b5c:     	bl	0x10002727c <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, long long)>
100027b60:     	ldrb	w8, [sp, #119]
100027b64:     	sxtb	w9, w8
100027b68:     	ldp	x10, x11, [sp, #96]
100027b6c:     	cmp	w9, #0
100027b70:     	csel	x1, x10, x22, lt
100027b74:     	csel	x2, x11, x8, lt
100027b78:     	mov	x0, x21
100027b7c:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100027b80:     	adrp	x1, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x650>
100027b84:     	add	x1, x1, #1391
100027b88:     	mov	w2, #2
100027b8c:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100027b90:     	ldrsb	w8, [sp, #119]
100027b94:     	tbnz	w8, #31, 0x100027bb0 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x654>
100027b98:     	ldrsb	w8, [sp, #71]
100027b9c:     	tbnz	w8, #31, 0x100027bc0 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x664>
100027ba0:     	ldr	w8, [x20, #208]
100027ba4:     	cmp	w8, #1
100027ba8:     	b.eq	0x100027bd4 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x678>
100027bac:     	b	0x100027d2c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x7d0>
100027bb0:     	ldr	x0, [sp, #96]
100027bb4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100027bb8:     	ldrsb	w8, [sp, #71]
100027bbc:     	tbz	w8, #31, 0x100027ba0 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x644>
100027bc0:     	ldr	x0, [sp, #48]
100027bc4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100027bc8:     	ldr	w8, [x20, #208]
100027bcc:     	cmp	w8, #1
100027bd0:     	b.ne	0x100027d2c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x7d0>
100027bd4:     	ldrb	w8, [sp, #95]
100027bd8:     	sxtb	w9, w8
100027bdc:     	ldp	x10, x11, [sp, #72]
100027be0:     	cmp	w9, #0
100027be4:     	add	x9, sp, #72
100027be8:     	csel	x1, x10, x9, lt
100027bec:     	csel	x2, x11, x8, lt
100027bf0:     	mov	x0, x19
100027bf4:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100027bf8:     	mov	x21, x0
100027bfc:     	mov	w8, #14
100027c00:     	strb	w8, [sp, #71]
100027c04:     	adrp	x8, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x6d4>
100027c08:     	add	x8, x8, #1622
100027c0c:     	ldr	x9, [x8]
100027c10:     	str	x9, [sp, #48]
100027c14:     	ldur	x8, [x8, #6]
100027c18:     	stur	x8, [sp, #54]
100027c1c:     	strb	wzr, [sp, #62]
100027c20:     	add	x2, x20, #216
100027c24:     	add	x22, sp, #96
100027c28:     	add	x0, sp, #96
100027c2c:     	add	x1, sp, #48
100027c30:     	bl	0x100026fa4 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
100027c34:     	ldrb	w8, [sp, #119]
100027c38:     	sxtb	w9, w8
100027c3c:     	ldp	x10, x11, [sp, #96]
100027c40:     	cmp	w9, #0
100027c44:     	csel	x1, x10, x22, lt
100027c48:     	csel	x2, x11, x8, lt
100027c4c:     	mov	x0, x21
100027c50:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100027c54:     	adrp	x1, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x724>
100027c58:     	add	x1, x1, #1391
100027c5c:     	mov	w2, #2
100027c60:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100027c64:     	ldrsb	w8, [sp, #119]
100027c68:     	tbnz	w8, #31, 0x100027ecc <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x970>
100027c6c:     	ldrsb	w8, [sp, #71]
100027c70:     	tbnz	w8, #31, 0x100027edc <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x980>
100027c74:     	ldrb	w8, [sp, #95]
100027c78:     	sxtb	w9, w8
100027c7c:     	ldp	x10, x11, [sp, #72]
100027c80:     	cmp	w9, #0
100027c84:     	add	x9, sp, #72
100027c88:     	csel	x1, x10, x9, lt
100027c8c:     	csel	x2, x11, x8, lt
100027c90:     	mov	x0, x19
100027c94:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100027c98:     	mov	x21, x0
100027c9c:     	mov	w8, #14
100027ca0:     	strb	w8, [sp, #71]
100027ca4:     	adrp	x8, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x774>
100027ca8:     	add	x8, x8, #1637
100027cac:     	ldr	x9, [x8]
100027cb0:     	str	x9, [sp, #48]
100027cb4:     	ldur	x8, [x8, #6]
100027cb8:     	stur	x8, [sp, #54]
100027cbc:     	strb	wzr, [sp, #62]
100027cc0:     	ldr	w8, [x20, #240]
100027cc4:     	adrp	x9, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x794>
100027cc8:     	add	x9, x9, #1916
100027ccc:     	adrp	x10, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x79c>
100027cd0:     	add	x10, x10, #1911
100027cd4:     	cmp	w8, #0
100027cd8:     	csel	x2, x10, x9, eq
100027cdc:     	add	x22, sp, #96
100027ce0:     	add	x0, sp, #96
100027ce4:     	add	x1, sp, #48
100027ce8:     	bl	0x1000270b8 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*)>
100027cec:     	ldrb	w8, [sp, #119]
100027cf0:     	sxtb	w9, w8
100027cf4:     	ldp	x10, x11, [sp, #96]
100027cf8:     	cmp	w9, #0
100027cfc:     	csel	x1, x10, x22, lt
100027d00:     	csel	x2, x11, x8, lt
100027d04:     	mov	x0, x21
100027d08:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100027d0c:     	adrp	x1, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x7dc>
100027d10:     	add	x1, x1, #1391
100027d14:     	mov	w2, #2
100027d18:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100027d1c:     	ldrsb	w8, [sp, #119]
100027d20:     	tbnz	w8, #31, 0x100027ee8 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x98c>
100027d24:     	ldrsb	w8, [sp, #71]
100027d28:     	tbnz	w8, #31, 0x100027ef8 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x99c>
100027d2c:     	ldr	w8, [x20, #272]
100027d30:     	cmp	w8, #1
100027d34:     	b.eq	0x100027f0c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x9b0>
100027d38:     	cmp	w8, #2
100027d3c:     	b.ne	0x10002808c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xb30>
100027d40:     	ldrb	w8, [sp, #95]
100027d44:     	sxtb	w9, w8
100027d48:     	ldp	x10, x11, [sp, #72]
100027d4c:     	cmp	w9, #0
100027d50:     	add	x9, sp, #72
100027d54:     	csel	x1, x10, x9, lt
100027d58:     	csel	x2, x11, x8, lt
100027d5c:     	mov	x0, x19
100027d60:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100027d64:     	mov	x21, x0
100027d68:     	mov	w8, #14
100027d6c:     	adrp	x9, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x83c>
100027d70:     	add	x9, x9, #1652
100027d74:     	strb	w8, [sp, #47]
100027d78:     	ldr	x8, [x9]
100027d7c:     	str	x8, [sp, #24]
100027d80:     	ldur	x8, [x9, #6]
100027d84:     	stur	x8, [sp, #30]
100027d88:     	strb	wzr, [sp, #38]
100027d8c:     	add	x22, sp, #96
100027d90:     	add	x0, sp, #96
100027d94:     	add	x1, sp, #24
100027d98:     	bl	0x10002920c <benchmark::(anonymous namespace)::StrEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
100027d9c:     	ldrsb	w8, [sp, #119]
100027da0:     	ldr	x9, [sp, #96]
100027da4:     	cmp	w8, #0
100027da8:     	csel	x8, x9, x22, lt
100027dac:     	adrp	x9, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x87c>
100027db0:     	add	x9, x9, #1886
100027db4:     	stp	x8, x9, [sp]
100027db8:     	adrp	x0, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x888>
100027dbc:     	add	x0, x0, #1877
100027dc0:     	add	x8, sp, #48
100027dc4:     	bl	0x10002c6d0 <benchmark::StrFormat(char const*, ...)>
100027dc8:     	ldrsb	w8, [sp, #119]
100027dcc:     	tbz	w8, #31, 0x100027dd8 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x87c>
100027dd0:     	ldr	x0, [sp, #96]
100027dd4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100027dd8:     	ldrb	w8, [sp, #71]
100027ddc:     	sxtb	w9, w8
100027de0:     	ldp	x10, x11, [sp, #48]
100027de4:     	cmp	w9, #0
100027de8:     	add	x9, sp, #48
100027dec:     	csel	x1, x10, x9, lt
100027df0:     	csel	x2, x11, x8, lt
100027df4:     	mov	x0, x21
100027df8:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100027dfc:     	adrp	x1, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x8cc>
100027e00:     	add	x1, x1, #1391
100027e04:     	mov	w2, #2
100027e08:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100027e0c:     	ldrsb	w8, [sp, #71]
100027e10:     	tbnz	w8, #31, 0x100028bbc <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1660>
100027e14:     	ldrsb	w8, [sp, #47]
100027e18:     	tbnz	w8, #31, 0x100028bcc <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1670>
100027e1c:     	ldrb	w8, [sp, #95]
100027e20:     	sxtb	w9, w8
100027e24:     	ldp	x10, x11, [sp, #72]
100027e28:     	cmp	w9, #0
100027e2c:     	add	x9, sp, #72
100027e30:     	csel	x1, x10, x9, lt
100027e34:     	csel	x2, x11, x8, lt
100027e38:     	mov	x0, x19
100027e3c:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100027e40:     	mov	x21, x0
100027e44:     	mov	w8, #13
100027e48:     	strb	w8, [sp, #71]
100027e4c:     	adrp	x8, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x91c>
100027e50:     	add	x8, x8, #1667
100027e54:     	ldr	x9, [x8]
100027e58:     	str	x9, [sp, #48]
100027e5c:     	ldur	x8, [x8, #5]
100027e60:     	stur	x8, [sp, #53]
100027e64:     	strb	wzr, [sp, #61]
100027e68:     	add	x2, x20, #280
100027e6c:     	add	x22, sp, #96
100027e70:     	add	x0, sp, #96
100027e74:     	add	x1, sp, #48
100027e78:     	bl	0x100026fa4 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
100027e7c:     	ldrb	w8, [sp, #119]
100027e80:     	sxtb	w9, w8
100027e84:     	ldp	x10, x11, [sp, #96]
100027e88:     	cmp	w9, #0
100027e8c:     	csel	x1, x10, x22, lt
100027e90:     	csel	x2, x11, x8, lt
100027e94:     	mov	x0, x21
100027e98:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100027e9c:     	adrp	x1, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x96c>
100027ea0:     	add	x1, x1, #1391
100027ea4:     	mov	w2, #2
100027ea8:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100027eac:     	b	0x10002807c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xb20>
100027eb0:     	ldr	x0, [sp, #96]
100027eb4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100027eb8:     	ldrsb	w8, [sp, #71]
100027ebc:     	tbz	w8, #31, 0x100027b00 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x5a4>
100027ec0:     	ldr	x0, [sp, #48]
100027ec4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100027ec8:     	b	0x100027b00 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x5a4>
100027ecc:     	ldr	x0, [sp, #96]
100027ed0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100027ed4:     	ldrsb	w8, [sp, #71]
100027ed8:     	tbz	w8, #31, 0x100027c74 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x718>
100027edc:     	ldr	x0, [sp, #48]
100027ee0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100027ee4:     	b	0x100027c74 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x718>
100027ee8:     	ldr	x0, [sp, #96]
100027eec:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100027ef0:     	ldrsb	w8, [sp, #71]
100027ef4:     	tbz	w8, #31, 0x100027d2c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x7d0>
100027ef8:     	ldr	x0, [sp, #48]
100027efc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100027f00:     	ldr	w8, [x20, #272]
100027f04:     	cmp	w8, #1
100027f08:     	b.ne	0x100027d38 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x7dc>
100027f0c:     	ldrb	w8, [sp, #95]
100027f10:     	sxtb	w9, w8
100027f14:     	ldp	x10, x11, [sp, #72]
100027f18:     	cmp	w9, #0
100027f1c:     	add	x9, sp, #72
100027f20:     	csel	x1, x10, x9, lt
100027f24:     	csel	x2, x11, x8, lt
100027f28:     	mov	x0, x19
100027f2c:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100027f30:     	mov	x21, x0
100027f34:     	mov	w8, #7
100027f38:     	strb	w8, [sp, #47]
100027f3c:     	mov	w8, #27507
100027f40:     	movk	w8, #28777, lsl #16
100027f44:     	str	w8, [sp, #24]
100027f48:     	mov	w8, #28784
100027f4c:     	movk	w8, #25701, lsl #16
100027f50:     	stur	w8, [sp, #27]
100027f54:     	strb	wzr, [sp, #31]
100027f58:     	add	x22, sp, #96
100027f5c:     	add	x0, sp, #96
100027f60:     	add	x1, sp, #24
100027f64:     	bl	0x10002920c <benchmark::(anonymous namespace)::StrEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
100027f68:     	ldrsb	w8, [sp, #119]
100027f6c:     	ldr	x9, [sp, #96]
100027f70:     	cmp	w8, #0
100027f74:     	csel	x8, x9, x22, lt
100027f78:     	adrp	x9, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xa48>
100027f7c:     	add	x9, x9, #1886
100027f80:     	stp	x8, x9, [sp]
100027f84:     	adrp	x0, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xa54>
100027f88:     	add	x0, x0, #1877
100027f8c:     	add	x8, sp, #48
100027f90:     	bl	0x10002c6d0 <benchmark::StrFormat(char const*, ...)>
100027f94:     	ldrsb	w8, [sp, #119]
100027f98:     	tbz	w8, #31, 0x100027fa4 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xa48>
100027f9c:     	ldr	x0, [sp, #96]
100027fa0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100027fa4:     	ldrb	w8, [sp, #71]
100027fa8:     	sxtb	w9, w8
100027fac:     	ldp	x10, x11, [sp, #48]
100027fb0:     	cmp	w9, #0
100027fb4:     	add	x9, sp, #48
100027fb8:     	csel	x1, x10, x9, lt
100027fbc:     	csel	x2, x11, x8, lt
100027fc0:     	mov	x0, x21
100027fc4:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100027fc8:     	adrp	x1, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xa98>
100027fcc:     	add	x1, x1, #1391
100027fd0:     	mov	w2, #2
100027fd4:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100027fd8:     	ldrsb	w8, [sp, #71]
100027fdc:     	tbnz	w8, #31, 0x100028bd8 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x167c>
100027fe0:     	ldrsb	w8, [sp, #47]
100027fe4:     	tbnz	w8, #31, 0x100028be8 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x168c>
100027fe8:     	ldrb	w8, [sp, #95]
100027fec:     	sxtb	w9, w8
100027ff0:     	ldp	x10, x11, [sp, #72]
100027ff4:     	cmp	w9, #0
100027ff8:     	add	x9, sp, #72
100027ffc:     	csel	x1, x10, x9, lt
100028000:     	csel	x2, x11, x8, lt
100028004:     	mov	x0, x19
100028008:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10002800c:     	mov	x21, x0
100028010:     	mov	w8, #12
100028014:     	strb	w8, [sp, #71]
100028018:     	mov	w8, #24947
10002801c:     	movk	w8, #25959, lsl #16
100028020:     	str	w8, [sp, #56]
100028024:     	adrp	x8, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xaf0>
100028028:     	add	x8, x8, #1689
10002802c:     	ldr	x8, [x8]
100028030:     	str	x8, [sp, #48]
100028034:     	strb	wzr, [sp, #60]
100028038:     	add	x2, x20, #280
10002803c:     	add	x22, sp, #96
100028040:     	add	x0, sp, #96
100028044:     	add	x1, sp, #48
100028048:     	bl	0x100026fa4 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
10002804c:     	ldrb	w8, [sp, #119]
100028050:     	sxtb	w9, w8
100028054:     	ldp	x10, x11, [sp, #96]
100028058:     	cmp	w9, #0
10002805c:     	csel	x1, x10, x22, lt
100028060:     	csel	x2, x11, x8, lt
100028064:     	mov	x0, x21
100028068:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10002806c:     	adrp	x1, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xb38>
100028070:     	add	x1, x1, #1391
100028074:     	mov	w2, #2
100028078:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10002807c:     	ldrsb	w8, [sp, #119]
100028080:     	tbnz	w8, #31, 0x10002826c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xd10>
100028084:     	ldrsb	w8, [sp, #71]
100028088:     	tbnz	w8, #31, 0x10002827c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xd20>
10002808c:     	ldrb	w9, [x20, #400]
100028090:     	ldrb	w8, [x20, #401]
100028094:     	orr	w10, w9, w8
100028098:     	cbnz	w10, 0x100028294 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xd38>
10002809c:     	ldrb	w8, [sp, #95]
1000280a0:     	sxtb	w9, w8
1000280a4:     	ldp	x10, x11, [sp, #72]
1000280a8:     	cmp	w9, #0
1000280ac:     	add	x9, sp, #72
1000280b0:     	csel	x1, x10, x9, lt
1000280b4:     	csel	x2, x11, x8, lt
1000280b8:     	mov	x0, x19
1000280bc:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000280c0:     	mov	x21, x0
1000280c4:     	mov	w8, #10
1000280c8:     	strb	w8, [sp, #71]
1000280cc:     	mov	w8, #29550
1000280d0:     	strh	w8, [sp, #56]
1000280d4:     	adrp	x8, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xba0>
1000280d8:     	add	x8, x8, #1702
1000280dc:     	ldr	x8, [x8]
1000280e0:     	str	x8, [sp, #48]
1000280e4:     	strb	wzr, [sp, #58]
1000280e8:     	ldr	x2, [x20, #304]
1000280ec:     	add	x22, sp, #96
1000280f0:     	add	x0, sp, #96
1000280f4:     	add	x1, sp, #48
1000280f8:     	bl	0x10002727c <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, long long)>
1000280fc:     	ldrb	w8, [sp, #119]
100028100:     	sxtb	w9, w8
100028104:     	ldp	x10, x11, [sp, #96]
100028108:     	cmp	w9, #0
10002810c:     	csel	x1, x10, x22, lt
100028110:     	csel	x2, x11, x8, lt
100028114:     	mov	x0, x21
100028118:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10002811c:     	adrp	x1, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xbe8>
100028120:     	add	x1, x1, #1391
100028124:     	mov	w2, #2
100028128:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10002812c:     	ldrsb	w8, [sp, #119]
100028130:     	tbnz	w8, #31, 0x100028b84 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1628>
100028134:     	ldrsb	w8, [sp, #71]
100028138:     	tbnz	w8, #31, 0x100028b94 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1638>
10002813c:     	ldr	w8, [x20, #208]
100028140:     	ldrb	w9, [sp, #95]
100028144:     	sxtb	w10, w9
100028148:     	ldp	x11, x12, [sp, #72]
10002814c:     	cmp	w10, #0
100028150:     	add	x10, sp, #72
100028154:     	csel	x1, x11, x10, lt
100028158:     	csel	x2, x12, x9, lt
10002815c:     	cmp	w8, #1
100028160:     	b.ne	0x100028510 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xfb4>
100028164:     	ldr	w8, [x20, #240]
100028168:     	cbz	w8, 0x100028510 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xfb4>
10002816c:     	mov	x0, x19
100028170:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100028174:     	mov	x21, x0
100028178:     	mov	w8, #9
10002817c:     	adrp	x9, 0x100031000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xc44>
100028180:     	add	x9, x9, #3801
100028184:     	strb	w8, [sp, #71]
100028188:     	ldr	x8, [x9]
10002818c:     	str	x8, [sp, #48]
100028190:     	mov	w8, #101
100028194:     	strh	w8, [sp, #56]
100028198:     	ldr	d0, [x20, #344]
10002819c:     	add	x22, sp, #96
1000281a0:     	add	x0, sp, #96
1000281a4:     	add	x1, sp, #48
1000281a8:     	bl	0x100028ee4 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double)>
1000281ac:     	ldrb	w8, [sp, #119]
1000281b0:     	sxtb	w9, w8
1000281b4:     	ldp	x10, x11, [sp, #96]
1000281b8:     	cmp	w9, #0
1000281bc:     	csel	x1, x10, x22, lt
1000281c0:     	csel	x2, x11, x8, lt
1000281c4:     	mov	x0, x21
1000281c8:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000281cc:     	adrp	x1, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xc98>
1000281d0:     	add	x1, x1, #1391
1000281d4:     	mov	w2, #2
1000281d8:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000281dc:     	ldrsb	w8, [sp, #119]
1000281e0:     	tbnz	w8, #31, 0x100028c58 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x16fc>
1000281e4:     	ldrsb	w8, [sp, #71]
1000281e8:     	tbnz	w8, #31, 0x100028c68 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x170c>
1000281ec:     	ldrb	w8, [sp, #95]
1000281f0:     	sxtb	w9, w8
1000281f4:     	ldp	x10, x11, [sp, #72]
1000281f8:     	cmp	w9, #0
1000281fc:     	add	x9, sp, #72
100028200:     	csel	x1, x10, x9, lt
100028204:     	csel	x2, x11, x8, lt
100028208:     	mov	x0, x19
10002820c:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100028210:     	mov	x21, x0
100028214:     	mov	w8, #8
100028218:     	strb	w8, [sp, #71]
10002821c:     	mov	x8, #28771
100028220:     	movk	x8, #24437, lsl #16
100028224:     	movk	x8, #26996, lsl #32
100028228:     	movk	x8, #25965, lsl #48
10002822c:     	str	x8, [sp, #48]
100028230:     	strb	wzr, [sp, #56]
100028234:     	ldr	d0, [x20, #352]
100028238:     	add	x22, sp, #96
10002823c:     	add	x0, sp, #96
100028240:     	add	x1, sp, #48
100028244:     	bl	0x100028ee4 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double)>
100028248:     	ldrb	w8, [sp, #119]
10002824c:     	sxtb	w9, w8
100028250:     	ldp	x10, x11, [sp, #96]
100028254:     	cmp	w9, #0
100028258:     	csel	x1, x10, x22, lt
10002825c:     	csel	x2, x11, x8, lt
100028260:     	mov	x0, x21
100028264:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100028268:     	b	0x100028614 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x10b8>
10002826c:     	ldr	x0, [sp, #96]
100028270:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100028274:     	ldrsb	w8, [sp, #71]
100028278:     	tbz	w8, #31, 0x10002808c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xb30>
10002827c:     	ldr	x0, [sp, #48]
100028280:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100028284:     	ldrb	w9, [x20, #400]
100028288:     	ldrb	w8, [x20, #401]
10002828c:     	orr	w10, w9, w8
100028290:     	cbz	w10, 0x10002809c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xb40>
100028294:     	cbz	w9, 0x100028b08 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x15ac>
100028298:     	ldrb	w8, [sp, #95]
10002829c:     	sxtb	w9, w8
1000282a0:     	ldp	x10, x11, [sp, #72]
1000282a4:     	cmp	w9, #0
1000282a8:     	add	x9, sp, #72
1000282ac:     	csel	x1, x10, x9, lt
1000282b0:     	csel	x2, x11, x8, lt
1000282b4:     	mov	x0, x19
1000282b8:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000282bc:     	mov	x21, x0
1000282c0:     	mov	w8, #15
1000282c4:     	adrp	x9, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xd90>
1000282c8:     	add	x9, x9, #1723
1000282cc:     	strb	w8, [sp, #71]
1000282d0:     	ldr	x8, [x9]
1000282d4:     	str	x8, [sp, #48]
1000282d8:     	ldur	x8, [x9, #7]
1000282dc:     	stur	x8, [sp, #55]
1000282e0:     	strb	wzr, [sp, #63]
1000282e4:     	mov	x0, x20
1000282e8:     	bl	0x100029fdc <benchmark::BenchmarkReporter::Run::GetAdjustedCPUTime() const>
1000282ec:     	add	x22, sp, #96
1000282f0:     	add	x0, sp, #96
1000282f4:     	add	x1, sp, #48
1000282f8:     	bl	0x100028ee4 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double)>
1000282fc:     	ldrb	w8, [sp, #119]
100028300:     	sxtb	w9, w8
100028304:     	ldp	x10, x11, [sp, #96]
100028308:     	cmp	w9, #0
10002830c:     	csel	x1, x10, x22, lt
100028310:     	csel	x2, x11, x8, lt
100028314:     	mov	x0, x21
100028318:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10002831c:     	adrp	x1, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xde8>
100028320:     	add	x1, x1, #1391
100028324:     	mov	w2, #2
100028328:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10002832c:     	ldrsb	w8, [sp, #119]
100028330:     	tbnz	w8, #31, 0x100028bf4 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1698>
100028334:     	ldrsb	w8, [sp, #71]
100028338:     	tbnz	w8, #31, 0x100028c04 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x16a8>
10002833c:     	ldrb	w8, [sp, #95]
100028340:     	sxtb	w9, w8
100028344:     	ldp	x10, x11, [sp, #72]
100028348:     	cmp	w9, #0
10002834c:     	add	x9, sp, #72
100028350:     	csel	x1, x10, x9, lt
100028354:     	csel	x2, x11, x8, lt
100028358:     	mov	x0, x19
10002835c:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100028360:     	mov	x21, x0
100028364:     	mov	w8, #16
100028368:     	strb	w8, [sp, #71]
10002836c:     	adrp	x8, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xe38>
100028370:     	add	x8, x8, #1739
100028374:     	ldr	q0, [x8]
100028378:     	str	q0, [sp, #48]
10002837c:     	strb	wzr, [sp, #64]
100028380:     	mov	x0, x20
100028384:     	bl	0x100029fb0 <benchmark::BenchmarkReporter::Run::GetAdjustedRealTime() const>
100028388:     	add	x22, sp, #96
10002838c:     	add	x0, sp, #96
100028390:     	add	x1, sp, #48
100028394:     	bl	0x100028ee4 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double)>
100028398:     	ldrb	w8, [sp, #119]
10002839c:     	sxtb	w9, w8
1000283a0:     	ldp	x10, x11, [sp, #96]
1000283a4:     	cmp	w9, #0
1000283a8:     	csel	x1, x10, x22, lt
1000283ac:     	csel	x2, x11, x8, lt
1000283b0:     	mov	x0, x21
1000283b4:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000283b8:     	adrp	x1, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xe84>
1000283bc:     	add	x1, x1, #1391
1000283c0:     	mov	w2, #2
1000283c4:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000283c8:     	ldrsb	w8, [sp, #119]
1000283cc:     	tbnz	w8, #31, 0x100028c10 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x16b4>
1000283d0:     	ldrsb	w8, [sp, #71]
1000283d4:     	tbnz	w8, #31, 0x100028c20 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x16c4>
1000283d8:     	ldrb	w8, [sp, #95]
1000283dc:     	sxtb	w9, w8
1000283e0:     	ldp	x10, x11, [sp, #72]
1000283e4:     	cmp	w9, #0
1000283e8:     	add	x9, sp, #72
1000283ec:     	csel	x1, x10, x9, lt
1000283f0:     	csel	x2, x11, x8, lt
1000283f4:     	mov	x0, x19
1000283f8:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000283fc:     	mov	x21, x0
100028400:     	mov	w8, #5
100028404:     	strb	w8, [sp, #71]
100028408:     	mov	w8, #26978
10002840c:     	movk	w8, #24423, lsl #16
100028410:     	str	w8, [sp, #48]
100028414:     	mov	w8, #111
100028418:     	strh	w8, [sp, #52]
10002841c:     	ldr	w0, [x20, #368]
100028420:     	add	x8, sp, #24
100028424:     	bl	0x100022704 <benchmark::GetBigOString(benchmark::BigO)>
100028428:     	add	x22, sp, #96
10002842c:     	add	x0, sp, #96
100028430:     	add	x1, sp, #48
100028434:     	add	x2, sp, #24
100028438:     	bl	0x100026fa4 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
10002843c:     	ldrb	w8, [sp, #119]
100028440:     	sxtb	w9, w8
100028444:     	ldp	x10, x11, [sp, #96]
100028448:     	cmp	w9, #0
10002844c:     	csel	x1, x10, x22, lt
100028450:     	csel	x2, x11, x8, lt
100028454:     	mov	x0, x21
100028458:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10002845c:     	adrp	x1, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xf28>
100028460:     	add	x1, x1, #1391
100028464:     	mov	w2, #2
100028468:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10002846c:     	ldrsb	w8, [sp, #119]
100028470:     	tbnz	w8, #31, 0x100028c2c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x16d0>
100028474:     	ldrsb	w8, [sp, #47]
100028478:     	tbnz	w8, #31, 0x100028c3c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x16e0>
10002847c:     	ldrsb	w8, [sp, #71]
100028480:     	tbnz	w8, #31, 0x100028c4c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x16f0>
100028484:     	ldrb	w8, [sp, #95]
100028488:     	sxtb	w9, w8
10002848c:     	ldp	x10, x11, [sp, #72]
100028490:     	cmp	w9, #0
100028494:     	add	x9, sp, #72
100028498:     	csel	x1, x10, x9, lt
10002849c:     	csel	x2, x11, x8, lt
1000284a0:     	mov	x0, x19
1000284a4:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000284a8:     	mov	x21, x0
1000284ac:     	mov	w8, #9
1000284b0:     	strb	w8, [sp, #71]
1000284b4:     	adrp	x8, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xf80>
1000284b8:     	add	x8, x8, #1713
1000284bc:     	ldr	x8, [x8]
1000284c0:     	str	x8, [sp, #48]
1000284c4:     	mov	w8, #116
1000284c8:     	strh	w8, [sp, #56]
1000284cc:     	ldrsw	x8, [x20, #336]
1000284d0:     	adrp	x9, 0x100034000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xfa4>
1000284d4:     	add	x9, x9, #3608
1000284d8:     	ldr	x2, [x9, x8, lsl #3]
1000284dc:     	add	x22, sp, #96
1000284e0:     	add	x0, sp, #96
1000284e4:     	add	x1, sp, #48
1000284e8:     	bl	0x1000270b8 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*)>
1000284ec:     	ldrb	w8, [sp, #119]
1000284f0:     	sxtb	w9, w8
1000284f4:     	ldp	x10, x11, [sp, #96]
1000284f8:     	cmp	w9, #0
1000284fc:     	csel	x1, x10, x22, lt
100028500:     	csel	x2, x11, x8, lt
100028504:     	mov	x0, x21
100028508:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10002850c:     	b	0x1000286bc <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1160>
100028510:     	mov	x0, x19
100028514:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100028518:     	mov	x21, x0
10002851c:     	mov	w8, #9
100028520:     	strb	w8, [sp, #71]
100028524:     	adrp	x8, 0x100031000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xfec>
100028528:     	add	x8, x8, #3801
10002852c:     	ldr	x8, [x8]
100028530:     	str	x8, [sp, #48]
100028534:     	mov	w8, #101
100028538:     	strh	w8, [sp, #56]
10002853c:     	mov	x0, x20
100028540:     	bl	0x100029fb0 <benchmark::BenchmarkReporter::Run::GetAdjustedRealTime() const>
100028544:     	add	x22, sp, #96
100028548:     	add	x0, sp, #96
10002854c:     	add	x1, sp, #48
100028550:     	bl	0x100028ee4 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double)>
100028554:     	ldrb	w8, [sp, #119]
100028558:     	sxtb	w9, w8
10002855c:     	ldp	x10, x11, [sp, #96]
100028560:     	cmp	w9, #0
100028564:     	csel	x1, x10, x22, lt
100028568:     	csel	x2, x11, x8, lt
10002856c:     	mov	x0, x21
100028570:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100028574:     	adrp	x1, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1040>
100028578:     	add	x1, x1, #1391
10002857c:     	mov	w2, #2
100028580:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100028584:     	ldrsb	w8, [sp, #119]
100028588:     	tbnz	w8, #31, 0x100028c74 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1718>
10002858c:     	ldrsb	w8, [sp, #71]
100028590:     	tbnz	w8, #31, 0x100028c84 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1728>
100028594:     	ldrb	w8, [sp, #95]
100028598:     	sxtb	w9, w8
10002859c:     	ldp	x10, x11, [sp, #72]
1000285a0:     	cmp	w9, #0
1000285a4:     	add	x9, sp, #72
1000285a8:     	csel	x1, x10, x9, lt
1000285ac:     	csel	x2, x11, x8, lt
1000285b0:     	mov	x0, x19
1000285b4:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000285b8:     	mov	x21, x0
1000285bc:     	mov	w8, #8
1000285c0:     	strb	w8, [sp, #71]
1000285c4:     	mov	x8, #28771
1000285c8:     	movk	x8, #24437, lsl #16
1000285cc:     	movk	x8, #26996, lsl #32
1000285d0:     	movk	x8, #25965, lsl #48
1000285d4:     	str	x8, [sp, #48]
1000285d8:     	strb	wzr, [sp, #56]
1000285dc:     	mov	x0, x20
1000285e0:     	bl	0x100029fdc <benchmark::BenchmarkReporter::Run::GetAdjustedCPUTime() const>
1000285e4:     	add	x22, sp, #96
1000285e8:     	add	x0, sp, #96
1000285ec:     	add	x1, sp, #48
1000285f0:     	bl	0x100028ee4 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double)>
1000285f4:     	ldrb	w8, [sp, #119]
1000285f8:     	sxtb	w9, w8
1000285fc:     	ldp	x10, x11, [sp, #96]
100028600:     	cmp	w9, #0
100028604:     	csel	x1, x10, x22, lt
100028608:     	csel	x2, x11, x8, lt
10002860c:     	mov	x0, x21
100028610:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100028614:     	ldrsb	w8, [sp, #119]
100028618:     	tbnz	w8, #31, 0x100028ba0 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1644>
10002861c:     	ldrsb	w8, [sp, #71]
100028620:     	tbnz	w8, #31, 0x100028bb0 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1654>
100028624:     	adrp	x1, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x10f0>
100028628:     	add	x1, x1, #1391
10002862c:     	mov	x0, x19
100028630:     	mov	w2, #2
100028634:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100028638:     	ldrb	w8, [sp, #95]
10002863c:     	sxtb	w9, w8
100028640:     	ldp	x10, x11, [sp, #72]
100028644:     	cmp	w9, #0
100028648:     	add	x9, sp, #72
10002864c:     	csel	x1, x10, x9, lt
100028650:     	csel	x2, x11, x8, lt
100028654:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100028658:     	mov	x21, x0
10002865c:     	mov	w8, #9
100028660:     	strb	w8, [sp, #71]
100028664:     	adrp	x8, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1130>
100028668:     	add	x8, x8, #1713
10002866c:     	ldr	x8, [x8]
100028670:     	str	x8, [sp, #48]
100028674:     	mov	w8, #116
100028678:     	strh	w8, [sp, #56]
10002867c:     	ldrsw	x8, [x20, #336]
100028680:     	adrp	x9, 0x100034000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1154>
100028684:     	add	x9, x9, #3608
100028688:     	ldr	x2, [x9, x8, lsl #3]
10002868c:     	add	x22, sp, #96
100028690:     	add	x0, sp, #96
100028694:     	add	x1, sp, #48
100028698:     	bl	0x1000270b8 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char const*)>
10002869c:     	ldrb	w8, [sp, #119]
1000286a0:     	sxtb	w9, w8
1000286a4:     	ldp	x10, x11, [sp, #96]
1000286a8:     	cmp	w9, #0
1000286ac:     	csel	x1, x10, x22, lt
1000286b0:     	csel	x2, x11, x8, lt
1000286b4:     	mov	x0, x21
1000286b8:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000286bc:     	ldrsb	w8, [sp, #119]
1000286c0:     	tbnz	w8, #31, 0x1000286d0 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1174>
1000286c4:     	ldrsb	w8, [sp, #71]
1000286c8:     	tbz	w8, #31, 0x1000286e8 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x118c>
1000286cc:     	b	0x1000286e0 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1184>
1000286d0:     	ldr	x0, [sp, #96]
1000286d4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000286d8:     	ldrsb	w8, [sp, #71]
1000286dc:     	tbz	w8, #31, 0x1000286e8 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x118c>
1000286e0:     	ldr	x0, [sp, #48]
1000286e4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000286e8:     	ldr	x26, [x20, #408]
1000286ec:     	add	x23, x20, #416
1000286f0:     	cmp	x26, x23
1000286f4:     	b.eq	0x1000287c4 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1268>
1000286f8:     	adrp	x21, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x11c4>
1000286fc:     	add	x21, x21, #1391
100028700:     	add	x24, sp, #72
100028704:     	add	x25, sp, #96
100028708:     	b	0x100028718 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x11bc>
10002870c:     	mov	x26, x8
100028710:     	cmp	x8, x23
100028714:     	b.eq	0x1000287c4 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1268>
100028718:     	mov	x0, x19
10002871c:     	mov	x1, x21
100028720:     	mov	w2, #2
100028724:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100028728:     	ldrb	w8, [sp, #95]
10002872c:     	sxtb	w9, w8
100028730:     	ldp	x10, x11, [sp, #72]
100028734:     	cmp	w9, #0
100028738:     	csel	x1, x10, x24, lt
10002873c:     	csel	x2, x11, x8, lt
100028740:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100028744:     	mov	x22, x0
100028748:     	add	x1, x26, #32
10002874c:     	ldr	d0, [x26, #56]
100028750:     	add	x0, sp, #96
100028754:     	bl	0x100028ee4 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double)>
100028758:     	ldrb	w8, [sp, #119]
10002875c:     	sxtb	w9, w8
100028760:     	ldp	x10, x11, [sp, #96]
100028764:     	cmp	w9, #0
100028768:     	csel	x1, x10, x25, lt
10002876c:     	csel	x2, x11, x8, lt
100028770:     	mov	x0, x22
100028774:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100028778:     	ldrsb	w8, [sp, #119]
10002877c:     	tbnz	w8, #31, 0x10002878c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1230>
100028780:     	ldr	x9, [x26, #8]
100028784:     	cbnz	x9, 0x10002879c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1240>
100028788:     	b	0x1000287ac <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1250>
10002878c:     	ldr	x0, [sp, #96]
100028790:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100028794:     	ldr	x9, [x26, #8]
100028798:     	cbz	x9, 0x1000287ac <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1250>
10002879c:     	mov	x8, x9
1000287a0:     	ldr	x9, [x9]
1000287a4:     	cbnz	x9, 0x10002879c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1240>
1000287a8:     	b	0x10002870c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x11b0>
1000287ac:     	ldr	x8, [x26, #16]
1000287b0:     	ldr	x9, [x8]
1000287b4:     	cmp	x9, x26
1000287b8:     	mov	x26, x8
1000287bc:     	b.ne	0x1000287ac <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1250>
1000287c0:     	b	0x10002870c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x11b0>
1000287c4:     	ldr	x8, [x20, #432]
1000287c8:     	cbz	x8, 0x10002899c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1440>
1000287cc:     	ldp	x23, x22, [x8, #8]
1000287d0:     	ldr	x21, [x8, #24]
1000287d4:     	adrp	x1, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x12a0>
1000287d8:     	add	x1, x1, #1391
1000287dc:     	mov	x0, x19
1000287e0:     	mov	w2, #2
1000287e4:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000287e8:     	ldrb	w8, [sp, #95]
1000287ec:     	sxtb	w9, w8
1000287f0:     	ldp	x10, x11, [sp, #72]
1000287f4:     	cmp	w9, #0
1000287f8:     	add	x9, sp, #72
1000287fc:     	csel	x1, x10, x9, lt
100028800:     	csel	x2, x11, x8, lt
100028804:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100028808:     	mov	x24, x0
10002880c:     	mov	w8, #15
100028810:     	strb	w8, [sp, #71]
100028814:     	adrp	x8, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x12e0>
100028818:     	add	x8, x8, #1766
10002881c:     	ldr	x9, [x8]
100028820:     	str	x9, [sp, #48]
100028824:     	ldur	x8, [x8, #7]
100028828:     	stur	x8, [sp, #55]
10002882c:     	strb	wzr, [sp, #63]
100028830:     	ldr	d0, [x20, #440]
100028834:     	add	x25, sp, #96
100028838:     	add	x0, sp, #96
10002883c:     	add	x1, sp, #48
100028840:     	bl	0x100028ee4 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double)>
100028844:     	ldrb	w8, [sp, #119]
100028848:     	sxtb	w9, w8
10002884c:     	ldp	x10, x11, [sp, #96]
100028850:     	cmp	w9, #0
100028854:     	csel	x1, x10, x25, lt
100028858:     	csel	x2, x11, x8, lt
10002885c:     	mov	x0, x24
100028860:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100028864:     	ldrsb	w8, [sp, #119]
100028868:     	tbnz	w8, #31, 0x100028a50 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x14f4>
10002886c:     	ldrsb	w8, [sp, #71]
100028870:     	tbnz	w8, #31, 0x100028a60 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1504>
100028874:     	adrp	x1, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1340>
100028878:     	add	x1, x1, #1391
10002887c:     	mov	x0, x19
100028880:     	mov	w2, #2
100028884:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100028888:     	ldrb	w8, [sp, #95]
10002888c:     	sxtb	w9, w8
100028890:     	ldp	x10, x11, [sp, #72]
100028894:     	cmp	w9, #0
100028898:     	add	x9, sp, #72
10002889c:     	csel	x1, x10, x9, lt
1000288a0:     	csel	x2, x11, x8, lt
1000288a4:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000288a8:     	mov	x24, x0
1000288ac:     	mov	w8, #14
1000288b0:     	adrp	x9, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x137c>
1000288b4:     	add	x9, x9, #1782
1000288b8:     	strb	w8, [sp, #71]
1000288bc:     	ldr	x8, [x9]
1000288c0:     	str	x8, [sp, #48]
1000288c4:     	ldur	x8, [x9, #6]
1000288c8:     	stur	x8, [sp, #54]
1000288cc:     	strb	wzr, [sp, #62]
1000288d0:     	add	x25, sp, #96
1000288d4:     	add	x0, sp, #96
1000288d8:     	add	x1, sp, #48
1000288dc:     	mov	x2, x23
1000288e0:     	bl	0x10002727c <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, long long)>
1000288e4:     	ldrb	w8, [sp, #119]
1000288e8:     	sxtb	w9, w8
1000288ec:     	ldp	x10, x11, [sp, #96]
1000288f0:     	cmp	w9, #0
1000288f4:     	csel	x1, x10, x25, lt
1000288f8:     	csel	x2, x11, x8, lt
1000288fc:     	mov	x0, x24
100028900:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100028904:     	ldrsb	w8, [sp, #119]
100028908:     	tbnz	w8, #31, 0x100028a6c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1510>
10002890c:     	ldrsb	w8, [sp, #71]
100028910:     	tbnz	w8, #31, 0x100028a7c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1520>
100028914:     	add	x8, sp, #72
100028918:     	stp	x19, x8, [sp, #48]
10002891c:     	mov	w8, #21
100028920:     	adrp	x9, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x13ec>
100028924:     	add	x9, x9, #1797
100028928:     	strb	w8, [sp, #119]
10002892c:     	ldr	q0, [x9]
100028930:     	str	q0, [sp, #96]
100028934:     	ldur	x8, [x9, #13]
100028938:     	stur	x8, [sp, #109]
10002893c:     	strb	wzr, [sp, #117]
100028940:     	add	x0, sp, #48
100028944:     	add	x1, sp, #96
100028948:     	mov	x2, x22
10002894c:     	bl	0x100029108 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)::$_2::operator()(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, long long) const>
100028950:     	ldrsb	w8, [sp, #119]
100028954:     	tbz	w8, #31, 0x100028960 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1404>
100028958:     	ldr	x0, [sp, #96]
10002895c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100028960:     	mov	w8, #15
100028964:     	adrp	x9, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1430>
100028968:     	add	x9, x9, #1819
10002896c:     	strb	w8, [sp, #119]
100028970:     	ldr	x8, [x9]
100028974:     	str	x8, [sp, #96]
100028978:     	ldur	x8, [x9, #7]
10002897c:     	stur	x8, [sp, #103]
100028980:     	strb	wzr, [sp, #111]
100028984:     	add	x0, sp, #48
100028988:     	add	x1, sp, #96
10002898c:     	mov	x2, x21
100028990:     	bl	0x100029108 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)::$_2::operator()(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, long long) const>
100028994:     	ldrsb	w8, [sp, #119]
100028998:     	tbnz	w8, #31, 0x100028a88 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x152c>
10002899c:     	ldrb	w8, [x20, #271]
1000289a0:     	sxtb	w9, w8
1000289a4:     	ldr	x10, [x20, #256]
1000289a8:     	cmp	w9, #0
1000289ac:     	csel	x8, x10, x8, lt
1000289b0:     	cbz	x8, 0x100028ac4 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1568>
1000289b4:     	adrp	x1, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1480>
1000289b8:     	add	x1, x1, #1391
1000289bc:     	mov	x0, x19
1000289c0:     	mov	w2, #2
1000289c4:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000289c8:     	ldrb	w8, [sp, #95]
1000289cc:     	sxtb	w9, w8
1000289d0:     	ldp	x10, x11, [sp, #72]
1000289d4:     	cmp	w9, #0
1000289d8:     	add	x9, sp, #72
1000289dc:     	csel	x1, x10, x9, lt
1000289e0:     	csel	x2, x11, x8, lt
1000289e4:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000289e8:     	mov	x21, x0
1000289ec:     	add	x2, x20, #248
1000289f0:     	mov	w8, #5
1000289f4:     	strb	w8, [sp, #71]
1000289f8:     	mov	w8, #24940
1000289fc:     	movk	w8, #25954, lsl #16
100028a00:     	str	w8, [sp, #48]
100028a04:     	mov	w8, #108
100028a08:     	strh	w8, [sp, #52]
100028a0c:     	add	x20, sp, #96
100028a10:     	add	x0, sp, #96
100028a14:     	add	x1, sp, #48
100028a18:     	bl	0x100026fa4 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
100028a1c:     	ldrb	w8, [sp, #119]
100028a20:     	sxtb	w9, w8
100028a24:     	ldp	x10, x11, [sp, #96]
100028a28:     	cmp	w9, #0
100028a2c:     	csel	x1, x10, x20, lt
100028a30:     	csel	x2, x11, x8, lt
100028a34:     	mov	x0, x21
100028a38:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100028a3c:     	ldrsb	w8, [sp, #119]
100028a40:     	tbnz	w8, #31, 0x100028aac <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1550>
100028a44:     	ldrsb	w8, [sp, #71]
100028a48:     	tbz	w8, #31, 0x100028ac4 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1568>
100028a4c:     	b	0x100028abc <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1560>
100028a50:     	ldr	x0, [sp, #96]
100028a54:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100028a58:     	ldrsb	w8, [sp, #71]
100028a5c:     	tbz	w8, #31, 0x100028874 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1318>
100028a60:     	ldr	x0, [sp, #48]
100028a64:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100028a68:     	b	0x100028874 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1318>
100028a6c:     	ldr	x0, [sp, #96]
100028a70:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100028a74:     	ldrsb	w8, [sp, #71]
100028a78:     	tbz	w8, #31, 0x100028914 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x13b8>
100028a7c:     	ldr	x0, [sp, #48]
100028a80:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100028a84:     	b	0x100028914 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x13b8>
100028a88:     	ldr	x0, [sp, #96]
100028a8c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100028a90:     	ldrb	w8, [x20, #271]
100028a94:     	sxtb	w9, w8
100028a98:     	ldr	x10, [x20, #256]
100028a9c:     	cmp	w9, #0
100028aa0:     	csel	x8, x10, x8, lt
100028aa4:     	cbnz	x8, 0x1000289b4 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1458>
100028aa8:     	b	0x100028ac4 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1568>
100028aac:     	ldr	x0, [sp, #96]
100028ab0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100028ab4:     	ldrsb	w8, [sp, #71]
100028ab8:     	tbz	w8, #31, 0x100028ac4 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1568>
100028abc:     	ldr	x0, [sp, #48]
100028ac0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100028ac4:     	mov	w8, #10
100028ac8:     	strb	w8, [sp, #96]
100028acc:     	add	x1, sp, #96
100028ad0:     	mov	x0, x19
100028ad4:     	mov	w2, #1
100028ad8:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100028adc:     	ldrsb	w8, [sp, #95]
100028ae0:     	tbz	w8, #31, 0x100028aec <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1590>
100028ae4:     	ldr	x0, [sp, #72]
100028ae8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100028aec:     	ldp	x29, x30, [sp, #192]
100028af0:     	ldp	x20, x19, [sp, #176]
100028af4:     	ldp	x22, x21, [sp, #160]
100028af8:     	ldp	x24, x23, [sp, #144]
100028afc:     	ldp	x26, x25, [sp, #128]
100028b00:     	add	sp, sp, #208
100028b04:     	ret
100028b08:     	cbz	w8, 0x1000286e8 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x118c>
100028b0c:     	ldrb	w8, [sp, #95]
100028b10:     	sxtb	w9, w8
100028b14:     	ldp	x10, x11, [sp, #72]
100028b18:     	cmp	w9, #0
100028b1c:     	add	x9, sp, #72
100028b20:     	csel	x1, x10, x9, lt
100028b24:     	csel	x2, x11, x8, lt
100028b28:     	mov	x0, x19
100028b2c:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100028b30:     	mov	x21, x0
100028b34:     	mov	w8, #3
100028b38:     	strb	w8, [sp, #71]
100028b3c:     	mov	w8, #28018
100028b40:     	movk	w8, #115, lsl #16
100028b44:     	str	w8, [sp, #48]
100028b48:     	mov	x0, x20
100028b4c:     	bl	0x100029fdc <benchmark::BenchmarkReporter::Run::GetAdjustedCPUTime() const>
100028b50:     	add	x22, sp, #96
100028b54:     	add	x0, sp, #96
100028b58:     	add	x1, sp, #48
100028b5c:     	bl	0x100028ee4 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double)>
100028b60:     	ldrb	w8, [sp, #119]
100028b64:     	sxtb	w9, w8
100028b68:     	ldp	x10, x11, [sp, #96]
100028b6c:     	cmp	w9, #0
100028b70:     	csel	x1, x10, x22, lt
100028b74:     	csel	x2, x11, x8, lt
100028b78:     	mov	x0, x21
100028b7c:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100028b80:     	b	0x1000286bc <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1160>
100028b84:     	ldr	x0, [sp, #96]
100028b88:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100028b8c:     	ldrsb	w8, [sp, #71]
100028b90:     	tbz	w8, #31, 0x10002813c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xbe0>
100028b94:     	ldr	x0, [sp, #48]
100028b98:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100028b9c:     	b	0x10002813c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xbe0>
100028ba0:     	ldr	x0, [sp, #96]
100028ba4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100028ba8:     	ldrsb	w8, [sp, #71]
100028bac:     	tbz	w8, #31, 0x100028624 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x10c8>
100028bb0:     	ldr	x0, [sp, #48]
100028bb4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100028bb8:     	b	0x100028624 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x10c8>
100028bbc:     	ldr	x0, [sp, #48]
100028bc0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100028bc4:     	ldrsb	w8, [sp, #47]
100028bc8:     	tbz	w8, #31, 0x100027e1c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x8c0>
100028bcc:     	ldr	x0, [sp, #24]
100028bd0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100028bd4:     	b	0x100027e1c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x8c0>
100028bd8:     	ldr	x0, [sp, #48]
100028bdc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100028be0:     	ldrsb	w8, [sp, #47]
100028be4:     	tbz	w8, #31, 0x100027fe8 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xa8c>
100028be8:     	ldr	x0, [sp, #24]
100028bec:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100028bf0:     	b	0x100027fe8 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xa8c>
100028bf4:     	ldr	x0, [sp, #96]
100028bf8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100028bfc:     	ldrsb	w8, [sp, #71]
100028c00:     	tbz	w8, #31, 0x10002833c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xde0>
100028c04:     	ldr	x0, [sp, #48]
100028c08:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100028c0c:     	b	0x10002833c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xde0>
100028c10:     	ldr	x0, [sp, #96]
100028c14:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100028c18:     	ldrsb	w8, [sp, #71]
100028c1c:     	tbz	w8, #31, 0x1000283d8 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xe7c>
100028c20:     	ldr	x0, [sp, #48]
100028c24:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100028c28:     	b	0x1000283d8 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xe7c>
100028c2c:     	ldr	x0, [sp, #96]
100028c30:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100028c34:     	ldrsb	w8, [sp, #47]
100028c38:     	tbz	w8, #31, 0x10002847c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xf20>
100028c3c:     	ldr	x0, [sp, #24]
100028c40:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100028c44:     	ldrsb	w8, [sp, #71]
100028c48:     	tbz	w8, #31, 0x100028484 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xf28>
100028c4c:     	ldr	x0, [sp, #48]
100028c50:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100028c54:     	b	0x100028484 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xf28>
100028c58:     	ldr	x0, [sp, #96]
100028c5c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100028c60:     	ldrsb	w8, [sp, #71]
100028c64:     	tbz	w8, #31, 0x1000281ec <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xc90>
100028c68:     	ldr	x0, [sp, #48]
100028c6c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100028c70:     	b	0x1000281ec <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0xc90>
100028c74:     	ldr	x0, [sp, #96]
100028c78:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100028c7c:     	ldrsb	w8, [sp, #71]
100028c80:     	tbz	w8, #31, 0x100028594 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1038>
100028c84:     	ldr	x0, [sp, #48]
100028c88:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100028c8c:     	b	0x100028594 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1038>
100028c90:     	b	0x100028e44 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x18e8>
100028c94:     	mov	x19, x0
100028c98:     	b	0x100028e7c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1920>
100028c9c:     	b	0x100028e44 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x18e8>
100028ca0:     	b	0x100028e44 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x18e8>
100028ca4:     	mov	x19, x0
100028ca8:     	b	0x100028e7c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1920>
100028cac:     	mov	x19, x0
100028cb0:     	b	0x100028e7c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1920>
100028cb4:     	b	0x100028e44 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x18e8>
100028cb8:     	mov	x19, x0
100028cbc:     	b	0x100028e7c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1920>
100028cc0:     	mov	x19, x0
100028cc4:     	b	0x100028e6c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1910>
100028cc8:     	mov	x19, x0
100028ccc:     	b	0x100028e7c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1920>
100028cd0:     	mov	x19, x0
100028cd4:     	b	0x100028e7c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1920>
100028cd8:     	mov	x19, x0
100028cdc:     	ldrsb	w8, [sp, #119]
100028ce0:     	tbnz	w8, #31, 0x100028d04 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x17a8>
100028ce4:     	b	0x100028dc0 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1864>
100028ce8:     	mov	x19, x0
100028cec:     	b	0x100028dc0 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1864>
100028cf0:     	mov	x19, x0
100028cf4:     	b	0x100028e7c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1920>
100028cf8:     	mov	x19, x0
100028cfc:     	ldrsb	w8, [sp, #119]
100028d00:     	tbz	w8, #31, 0x100028dc0 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1864>
100028d04:     	ldr	x0, [sp, #96]
100028d08:     	b	0x100028dbc <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1860>
100028d0c:     	mov	x19, x0
100028d10:     	b	0x100028dc0 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1864>
100028d14:     	b	0x100028e44 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x18e8>
100028d18:     	mov	x19, x0
100028d1c:     	b	0x100028e7c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1920>
100028d20:     	mov	x19, x0
100028d24:     	b	0x100028e7c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1920>
100028d28:     	b	0x100028e44 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x18e8>
100028d2c:     	mov	x19, x0
100028d30:     	b	0x100028e7c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1920>
100028d34:     	b	0x100028e44 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x18e8>
100028d38:     	mov	x19, x0
100028d3c:     	b	0x100028e7c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1920>
100028d40:     	mov	x19, x0
100028d44:     	b	0x100028e7c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1920>
100028d48:     	mov	x19, x0
100028d4c:     	b	0x100028e7c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1920>
100028d50:     	mov	x19, x0
100028d54:     	b	0x100028e7c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1920>
100028d58:     	b	0x100028e44 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x18e8>
100028d5c:     	mov	x19, x0
100028d60:     	b	0x100028e7c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1920>
100028d64:     	b	0x100028e98 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x193c>
100028d68:     	b	0x100028e98 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x193c>
100028d6c:     	b	0x100028e44 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x18e8>
100028d70:     	mov	x19, x0
100028d74:     	b	0x100028e7c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1920>
100028d78:     	b	0x100028e44 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x18e8>
100028d7c:     	mov	x19, x0
100028d80:     	b	0x100028e7c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1920>
100028d84:     	b	0x100028e58 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x18fc>
100028d88:     	b	0x100028e44 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x18e8>
100028d8c:     	mov	x19, x0
100028d90:     	b	0x100028e7c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1920>
100028d94:     	b	0x100028e44 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x18e8>
100028d98:     	mov	x19, x0
100028d9c:     	b	0x100028e7c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1920>
100028da0:     	b	0x100028e44 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x18e8>
100028da4:     	b	0x100028dac <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1850>
100028da8:     	b	0x100028e44 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x18e8>
100028dac:     	mov	x19, x0
100028db0:     	ldrsb	w8, [sp, #71]
100028db4:     	tbz	w8, #31, 0x100028dc0 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1864>
100028db8:     	ldr	x0, [sp, #48]
100028dbc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100028dc0:     	ldrsb	w8, [sp, #47]
100028dc4:     	tbz	w8, #31, 0x100028eb8 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x195c>
100028dc8:     	ldr	x0, [sp, #24]
100028dcc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100028dd0:     	b	0x100028eb8 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x195c>
100028dd4:     	b	0x100028e44 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x18e8>
100028dd8:     	b	0x100028e44 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x18e8>
100028ddc:     	b	0x100028e44 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x18e8>
100028de0:     	mov	x19, x0
100028de4:     	b	0x100028e7c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1920>
100028de8:     	b	0x100028e44 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x18e8>
100028dec:     	mov	x19, x0
100028df0:     	b	0x100028e7c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1920>
100028df4:     	mov	x19, x0
100028df8:     	b	0x100028e7c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1920>
100028dfc:     	mov	x19, x0
100028e00:     	b	0x100028e6c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1910>
100028e04:     	mov	x19, x0
100028e08:     	b	0x100028e7c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1920>
100028e0c:     	mov	x19, x0
100028e10:     	b	0x100028e7c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1920>
100028e14:     	b	0x100028eb4 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1958>
100028e18:     	mov	x19, x0
100028e1c:     	b	0x100028e7c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1920>
100028e20:     	mov	x19, x0
100028e24:     	b	0x100028e6c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1910>
100028e28:     	mov	x19, x0
100028e2c:     	b	0x100028e7c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1920>
100028e30:     	b	0x100028e44 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x18e8>
100028e34:     	b	0x100028e44 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x18e8>
100028e38:     	b	0x100028e44 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x18e8>
100028e3c:     	b	0x100028e58 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x18fc>
100028e40:     	b	0x100028e44 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x18e8>
100028e44:     	mov	x19, x0
100028e48:     	ldrsb	w8, [sp, #119]
100028e4c:     	tbz	w8, #31, 0x100028e7c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1920>
100028e50:     	ldr	x0, [sp, #96]
100028e54:     	b	0x100028e78 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x191c>
100028e58:     	mov	x19, x0
100028e5c:     	ldrsb	w8, [sp, #119]
100028e60:     	tbz	w8, #31, 0x100028e6c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1910>
100028e64:     	ldr	x0, [sp, #96]
100028e68:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100028e6c:     	ldrsb	w8, [sp, #47]
100028e70:     	tbz	w8, #31, 0x100028e7c <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1920>
100028e74:     	ldr	x0, [sp, #24]
100028e78:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100028e7c:     	ldrsb	w8, [sp, #71]
100028e80:     	tbz	w8, #31, 0x100028eb8 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x195c>
100028e84:     	ldr	x0, [sp, #48]
100028e88:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100028e8c:     	b	0x100028eb8 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x195c>
100028e90:     	b	0x100028eb4 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1958>
100028e94:     	b	0x100028eb4 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1958>
100028e98:     	mov	x19, x0
100028e9c:     	ldrsb	w8, [sp, #119]
100028ea0:     	tbz	w8, #31, 0x100028eb8 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x195c>
100028ea4:     	ldr	x0, [sp, #96]
100028ea8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100028eac:     	b	0x100028eb8 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x195c>
100028eb0:     	b	0x100028eb4 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x1958>
100028eb4:     	mov	x19, x0
100028eb8:     	ldrsb	w8, [sp, #95]
100028ebc:     	tbz	w8, #31, 0x100028ec8 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)+0x196c>
100028ec0:     	ldr	x0, [sp, #72]
100028ec4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100028ec8:     	mov	x0, x19
100028ecc:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100028ed0 <benchmark::JSONReporter::Finalize()>:
100028ed0:     	ldr	x0, [x0, #8]
100028ed4:     	adrp	x1, 0x100032000 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double)+0x18>
100028ed8:     	add	x1, x1, #1538
100028edc:     	mov	w2, #7
100028ee0:     	b	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>

0000000100028ee4 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double)>:
100028ee4:     	sub	sp, sp, #384
100028ee8:     	stp	d9, d8, [sp, #304]
100028eec:     	stp	x24, x23, [sp, #320]
100028ef0:     	stp	x22, x21, [sp, #336]
100028ef4:     	stp	x20, x19, [sp, #352]
100028ef8:     	stp	x29, x30, [sp, #368]
100028efc:     	add	x29, sp, #368
100028f00:     	fmov	d8, d0
100028f04:     	mov	x21, x1
100028f08:     	mov	x19, x0
100028f0c:     	add	x20, sp, #24
100028f10:     	add	x0, sp, #24
100028f14:     	bl	0x10002936c <std::__1::basic_stringstream<char, std::__1::char_traits<char>, std::__1::allocator<char>>::basic_stringstream[abi:ue170006]()>
100028f18:     	add	x20, x20, #16
100028f1c:     	mov	w8, #34
100028f20:     	strb	w8, [sp]
100028f24:     	mov	x1, sp
100028f28:     	mov	x0, x20
100028f2c:     	mov	w2, #1
100028f30:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100028f34:     	mov	x22, x0
100028f38:     	mov	x23, sp
100028f3c:     	mov	x0, sp
100028f40:     	mov	x1, x21
100028f44:     	bl	0x10002920c <benchmark::(anonymous namespace)::StrEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
100028f48:     	ldrb	w8, [sp, #23]
100028f4c:     	sxtb	w9, w8
100028f50:     	ldp	x10, x11, [sp]
100028f54:     	cmp	w9, #0
100028f58:     	csel	x1, x10, x23, lt
100028f5c:     	csel	x2, x11, x8, lt
100028f60:     	mov	x0, x22
100028f64:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100028f68:     	adrp	x1, 0x100032000 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double)+0xac>
100028f6c:     	add	x1, x1, #1873
100028f70:     	mov	w2, #3
100028f74:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100028f78:     	ldrsb	w8, [sp, #23]
100028f7c:     	tbz	w8, #31, 0x100028f88 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double)+0xa4>
100028f80:     	ldr	x0, [sp]
100028f84:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100028f88:     	fcmp	d8, d8
100028f8c:     	b.vs	0x1000290a0 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double)+0x1bc>
100028f90:     	fabs	d0, d8
100028f94:     	mov	x8, #9218868437227405312
100028f98:     	fmov	d1, x8
100028f9c:     	fcmp	d0, d1
100028fa0:     	b.ne	0x100028fdc <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double)+0xf8>
100028fa4:     	fcmp	d8, #0.0
100028fa8:     	cset	w2, mi
100028fac:     	adrp	x8, 0x100031000 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double)+0xec>
100028fb0:     	add	x8, x8, #1905
100028fb4:     	adrp	x9, 0x100032000 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double)+0xf8>
100028fb8:     	add	x9, x9, #1927
100028fbc:     	csel	x1, x9, x8, mi
100028fc0:     	mov	x0, x20
100028fc4:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100028fc8:     	adrp	x1, 0x100032000 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double)+0x10c>
100028fcc:     	add	x1, x1, #1933
100028fd0:     	mov	w2, #8
100028fd4:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100028fd8:     	b	0x100029014 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double)+0x130>
100028fdc:     	ldr	x8, [sp, #40]
100028fe0:     	ldur	x9, [x8, #-24]
100028fe4:     	add	x9, x20, x9
100028fe8:     	ldr	w10, [x9, #8]
100028fec:     	and	w10, w10, #0xfffffffb
100028ff0:     	orr	w10, w10, #0x100
100028ff4:     	str	w10, [x9, #8]
100028ff8:     	ldur	x8, [x8, #-24]
100028ffc:     	add	x8, x20, x8
100029000:     	mov	w9, #16
100029004:     	str	x9, [x8, #16]
100029008:     	mov	x0, x20
10002900c:     	fmov	d0, d8
100029010:     	bl	0x10002ee1c <_vsnprintf+0x10002ee1c>
100029014:     	add	x21, sp, #24
100029018:     	add	x20, x21, #24
10002901c:     	mov	x8, x19
100029020:     	mov	x0, x20
100029024:     	bl	0x10002ecd8 <_vsnprintf+0x10002ecd8>
100029028:     	adrp	x19, 0x100034000 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double)+0x170>
10002902c:     	ldr	x19, [x19, #704]
100029030:     	ldr	x8, [x19]
100029034:     	str	x8, [sp, #24]
100029038:     	ldur	x8, [x8, #-24]
10002903c:     	ldp	x9, x10, [x19, #64]
100029040:     	str	x9, [x21, x8]
100029044:     	adrp	x8, 0x100034000 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double)+0x18c>
100029048:     	ldr	x8, [x8, #736]
10002904c:     	add	x8, x8, #16
100029050:     	stp	x10, x8, [sp, #40]
100029054:     	ldrsb	w8, [sp, #135]
100029058:     	tbz	w8, #31, 0x100029064 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double)+0x180>
10002905c:     	ldr	x0, [sp, #112]
100029060:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100029064:     	mov	x0, x20
100029068:     	bl	0x10002eeb8 <_vsnprintf+0x10002eeb8>
10002906c:     	add	x1, x19, #8
100029070:     	add	x19, sp, #24
100029074:     	add	x0, sp, #24
100029078:     	bl	0x10002ee70 <_vsnprintf+0x10002ee70>
10002907c:     	add	x0, x19, #128
100029080:     	bl	0x10002efe4 <_vsnprintf+0x10002efe4>
100029084:     	ldp	x29, x30, [sp, #368]
100029088:     	ldp	x20, x19, [sp, #352]
10002908c:     	ldp	x22, x21, [sp, #336]
100029090:     	ldp	x24, x23, [sp, #320]
100029094:     	ldp	d9, d8, [sp, #304]
100029098:     	add	sp, sp, #384
10002909c:     	ret
1000290a0:     	fcmp	d8, #0.0
1000290a4:     	cset	w2, mi
1000290a8:     	adrp	x8, 0x100031000 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double)+0x1e4>
1000290ac:     	add	x8, x8, #1905
1000290b0:     	adrp	x9, 0x100032000 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double)+0x1f0>
1000290b4:     	add	x9, x9, #1927
1000290b8:     	csel	x1, x9, x8, mi
1000290bc:     	mov	x0, x20
1000290c0:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000290c4:     	adrp	x1, 0x100032000 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double)+0x204>
1000290c8:     	add	x1, x1, #1929
1000290cc:     	mov	w2, #3
1000290d0:     	b	0x100028fd4 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double)+0xf0>
1000290d4:     	b	0x1000290f4 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double)+0x210>
1000290d8:     	b	0x1000290f4 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double)+0x210>
1000290dc:     	mov	x19, x0
1000290e0:     	ldrsb	w8, [sp, #23]
1000290e4:     	tbz	w8, #31, 0x1000290f8 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double)+0x214>
1000290e8:     	ldr	x0, [sp]
1000290ec:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000290f0:     	b	0x1000290f8 <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, double)+0x214>
1000290f4:     	mov	x19, x0
1000290f8:     	add	x0, sp, #24
1000290fc:     	bl	0x100029498 <std::__1::basic_stringstream<char, std::__1::char_traits<char>, std::__1::allocator<char>>::~basic_stringstream()>
100029100:     	mov	x0, x19
100029104:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100029108 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)::$_2::operator()(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, long long) const>:
100029108:     	sub	sp, sp, #80
10002910c:     	stp	x22, x21, [sp, #32]
100029110:     	stp	x20, x19, [sp, #48]
100029114:     	stp	x29, x30, [sp, #64]
100029118:     	add	x29, sp, #64
10002911c:     	mov	x8, #9223372036854775807
100029120:     	cmp	x2, x8
100029124:     	b.eq	0x1000291a8 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)::$_2::operator()(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, long long) const+0xa0>
100029128:     	mov	x19, x2
10002912c:     	mov	x20, x1
100029130:     	mov	x21, x0
100029134:     	ldr	x0, [x0]
100029138:     	adrp	x1, 0x100032000 <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)::$_2::operator()(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, long long) const+0x54>
10002913c:     	add	x1, x1, #1391
100029140:     	mov	w2, #2
100029144:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100029148:     	ldr	x8, [x21, #8]
10002914c:     	ldrb	w9, [x8, #23]
100029150:     	sxtb	w10, w9
100029154:     	ldp	x11, x12, [x8]
100029158:     	cmp	w10, #0
10002915c:     	csel	x1, x11, x8, lt
100029160:     	csel	x2, x12, x9, lt
100029164:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100029168:     	mov	x21, x0
10002916c:     	add	x22, sp, #8
100029170:     	add	x0, sp, #8
100029174:     	mov	x1, x20
100029178:     	mov	x2, x19
10002917c:     	bl	0x10002727c <benchmark::(anonymous namespace)::FormatKV(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, long long)>
100029180:     	ldrb	w8, [sp, #31]
100029184:     	sxtb	w9, w8
100029188:     	ldp	x10, x11, [sp, #8]
10002918c:     	cmp	w9, #0
100029190:     	csel	x1, x10, x22, lt
100029194:     	csel	x2, x11, x8, lt
100029198:     	mov	x0, x21
10002919c:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
1000291a0:     	ldrsb	w8, [sp, #31]
1000291a4:     	tbnz	w8, #31, 0x1000291bc <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)::$_2::operator()(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, long long) const+0xb4>
1000291a8:     	ldp	x29, x30, [sp, #64]
1000291ac:     	ldp	x20, x19, [sp, #48]
1000291b0:     	ldp	x22, x21, [sp, #32]
1000291b4:     	add	sp, sp, #80
1000291b8:     	ret
1000291bc:     	ldr	x0, [sp, #8]
1000291c0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000291c4:     	ldp	x29, x30, [sp, #64]
1000291c8:     	ldp	x20, x19, [sp, #48]
1000291cc:     	ldp	x22, x21, [sp, #32]
1000291d0:     	add	sp, sp, #80
1000291d4:     	ret
1000291d8:     	mov	x19, x0
1000291dc:     	ldrsb	w8, [sp, #31]
1000291e0:     	tbz	w8, #31, 0x1000291ec <benchmark::JSONReporter::PrintRunData(benchmark::BenchmarkReporter::Run const&)::$_2::operator()(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, long long) const+0xe4>
1000291e4:     	ldr	x0, [sp, #8]
1000291e8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000291ec:     	mov	x0, x19
1000291f0:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

00000001000291f4 <benchmark::JSONReporter::~JSONReporter()>:
1000291f4:     	b	0x1000299b8 <benchmark::BenchmarkReporter::~BenchmarkReporter()>

00000001000291f8 <benchmark::JSONReporter::~JSONReporter()>:
1000291f8:     	stp	x29, x30, [sp, #-16]!
1000291fc:     	mov	x29, sp
100029200:     	bl	0x1000299b8 <benchmark::BenchmarkReporter::~BenchmarkReporter()>
100029204:     	ldp	x29, x30, [sp], #16
100029208:     	b	0x10002f014 <_vsnprintf+0x10002f014>

000000010002920c <benchmark::(anonymous namespace)::StrEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>:
10002920c:     	stp	x28, x27, [sp, #-96]!
100029210:     	stp	x26, x25, [sp, #16]
100029214:     	stp	x24, x23, [sp, #32]
100029218:     	stp	x22, x21, [sp, #48]
10002921c:     	stp	x20, x19, [sp, #64]
100029220:     	stp	x29, x30, [sp, #80]
100029224:     	add	x29, sp, #80
100029228:     	mov	x20, x1
10002922c:     	mov	x19, x0
100029230:     	stp	xzr, xzr, [x0]
100029234:     	str	xzr, [x0, #16]
100029238:     	ldrb	w8, [x1, #23]
10002923c:     	sxtb	w9, w8
100029240:     	ldr	x10, [x1, #8]
100029244:     	cmp	w9, #0
100029248:     	csel	x1, x10, x8, lt
10002924c:     	bl	0x10002ed68 <_vsnprintf+0x10002ed68>
100029250:     	ldrb	w8, [x20, #23]
100029254:     	sxtb	w9, w8
100029258:     	ldp	x10, x11, [x20]
10002925c:     	cmp	w9, #0
100029260:     	csel	x20, x10, x20, lt
100029264:     	csel	x21, x11, x8, lt
100029268:     	cbz	x21, 0x100029330 <benchmark::(anonymous namespace)::StrEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x124>
10002926c:     	adrp	x22, 0x100032000 <benchmark::(anonymous namespace)::StrEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x84>
100029270:     	add	x22, x22, #1855
100029274:     	adrp	x24, 0x100033000 <benchmark::(anonymous namespace)::StrEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x90>
100029278:     	add	x24, x24, #736
10002927c:     	adrp	x25, 0x100032000 <benchmark::(anonymous namespace)::StrEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x94>
100029280:     	add	x25, x25, #1852
100029284:     	adrp	x26, 0x100032000 <benchmark::(anonymous namespace)::StrEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x9c>
100029288:     	add	x26, x26, #1864
10002928c:     	adrp	x27, 0x100032000 <benchmark::(anonymous namespace)::StrEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xa4>
100029290:     	add	x27, x27, #1858
100029294:     	adrp	x28, 0x100032000 <benchmark::(anonymous namespace)::StrEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xac>
100029298:     	add	x28, x28, #1861
10002929c:     	adrp	x23, 0x100032000 <benchmark::(anonymous namespace)::StrEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xb4>
1000292a0:     	add	x23, x23, #1870
1000292a4:     	b	0x1000292c4 <benchmark::(anonymous namespace)::StrEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xb8>
1000292a8:     	mov	x2, x23
1000292ac:     	mov	x0, x19
1000292b0:     	mov	x1, x2
1000292b4:     	bl	0x10002ed2c <_vsnprintf+0x10002ed2c>
1000292b8:     	add	x20, x20, #1
1000292bc:     	subs	x21, x21, #1
1000292c0:     	b.eq	0x100029330 <benchmark::(anonymous namespace)::StrEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x124>
1000292c4:     	ldrsb	w8, [x20]
1000292c8:     	sub	w9, w8, #8
1000292cc:     	cmp	w9, #26
1000292d0:     	b.hi	0x1000292f0 <benchmark::(anonymous namespace)::StrEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xe4>
1000292d4:     	adr	x10, #-44
1000292d8:     	ldrb	w11, [x24, x9]
1000292dc:     	add	x10, x10, x11, lsl #2
1000292e0:     	mov	x2, x22
1000292e4:     	br	x10
1000292e8:     	mov	x2, x25
1000292ec:     	b	0x1000292ac <benchmark::(anonymous namespace)::StrEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xa0>
1000292f0:     	cmp	w8, #92
1000292f4:     	b.ne	0x100029304 <benchmark::(anonymous namespace)::StrEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xf8>
1000292f8:     	adrp	x2, 0x100032000 <benchmark::(anonymous namespace)::StrEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x110>
1000292fc:     	add	x2, x2, #1867
100029300:     	b	0x1000292ac <benchmark::(anonymous namespace)::StrEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xa0>
100029304:     	and	w8, w8, #0xff
100029308:     	sxtb	w1, w8
10002930c:     	mov	x0, x19
100029310:     	bl	0x10002ed74 <_vsnprintf+0x10002ed74>
100029314:     	b	0x1000292b8 <benchmark::(anonymous namespace)::StrEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xac>
100029318:     	mov	x2, x26
10002931c:     	b	0x1000292ac <benchmark::(anonymous namespace)::StrEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xa0>
100029320:     	mov	x2, x27
100029324:     	b	0x1000292ac <benchmark::(anonymous namespace)::StrEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xa0>
100029328:     	mov	x2, x28
10002932c:     	b	0x1000292ac <benchmark::(anonymous namespace)::StrEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xa0>
100029330:     	ldp	x29, x30, [sp, #80]
100029334:     	ldp	x20, x19, [sp, #64]
100029338:     	ldp	x22, x21, [sp, #48]
10002933c:     	ldp	x24, x23, [sp, #32]
100029340:     	ldp	x26, x25, [sp, #16]
100029344:     	ldp	x28, x27, [sp], #96
100029348:     	ret
10002934c:     	b	0x100029350 <benchmark::(anonymous namespace)::StrEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x144>
100029350:     	mov	x20, x0
100029354:     	ldrsb	w8, [x19, #23]
100029358:     	tbz	w8, #31, 0x100029364 <benchmark::(anonymous namespace)::StrEscape(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x158>
10002935c:     	ldr	x0, [x19]
100029360:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100029364:     	mov	x0, x20
100029368:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010002936c <std::__1::basic_stringstream<char, std::__1::char_traits<char>, std::__1::allocator<char>>::basic_stringstream[abi:ue170006]()>:
10002936c:     	stp	x28, x27, [sp, #-96]!
100029370:     	stp	x26, x25, [sp, #16]
100029374:     	stp	x24, x23, [sp, #32]
100029378:     	stp	x22, x21, [sp, #48]
10002937c:     	stp	x20, x19, [sp, #64]
100029380:     	stp	x29, x30, [sp, #80]
100029384:     	add	x29, sp, #80
100029388:     	mov	x20, x0
10002938c:     	adrp	x25, 0x100034000 <std::__1::basic_stringstream<char, std::__1::char_traits<char>, std::__1::allocator<char>>::basic_stringstream[abi:ue170006]()+0x4c>
100029390:     	ldr	x25, [x25, #744]
100029394:     	add	x24, x25, #104
100029398:     	mov	x19, x0
10002939c:     	str	x24, [x19, #128]!
1000293a0:     	add	x26, x25, #64
1000293a4:     	mov	x27, x0
1000293a8:     	str	x26, [x27, #16]!
1000293ac:     	add	x21, x0, #24
1000293b0:     	adrp	x23, 0x100034000 <std::__1::basic_stringstream<char, std::__1::char_traits<char>, std::__1::allocator<char>>::basic_stringstream[abi:ue170006]()+0x70>
1000293b4:     	ldr	x23, [x23, #704]
1000293b8:     	ldp	x8, x9, [x23, #16]
1000293bc:     	str	x8, [x0]
1000293c0:     	ldur	x8, [x8, #-24]
1000293c4:     	str	x9, [x0, x8]
1000293c8:     	str	xzr, [x0, #8]
1000293cc:     	ldr	x8, [x0]
1000293d0:     	ldur	x8, [x8, #-24]
1000293d4:     	add	x22, x0, x8
1000293d8:     	mov	x0, x22
1000293dc:     	mov	x1, x21
1000293e0:     	bl	0x10002efcc <_vsnprintf+0x10002efcc>
1000293e4:     	str	xzr, [x22, #136]
1000293e8:     	mov	w8, #-1
1000293ec:     	str	w8, [x22, #144]
1000293f0:     	ldp	x8, x9, [x23, #32]
1000293f4:     	str	x8, [x20, #16]
1000293f8:     	ldur	x8, [x8, #-24]
1000293fc:     	str	x9, [x27, x8]
100029400:     	ldr	x8, [x23, #8]
100029404:     	str	x8, [x20]
100029408:     	ldr	x9, [x23, #48]
10002940c:     	ldur	x8, [x8, #-24]
100029410:     	str	x9, [x20, x8]
100029414:     	add	x8, x25, #24
100029418:     	str	x8, [x20]
10002941c:     	str	x24, [x20, #128]
100029420:     	str	x26, [x20, #16]
100029424:     	mov	x0, x21
100029428:     	bl	0x10002eeac <_vsnprintf+0x10002eeac>
10002942c:     	adrp	x8, 0x100034000 <std::__1::basic_stringstream<char, std::__1::char_traits<char>, std::__1::allocator<char>>::basic_stringstream[abi:ue170006]()+0xec>
100029430:     	ldr	x8, [x8, #736]
100029434:     	add	x8, x8, #16
100029438:     	str	x8, [x20, #24]
10002943c:     	movi.2d	v0, #0000000000000000
100029440:     	stur	q0, [x20, #88]
100029444:     	stur	q0, [x20, #104]
100029448:     	mov	w8, #24
10002944c:     	str	w8, [x20, #120]
100029450:     	mov	x0, x20
100029454:     	ldp	x29, x30, [sp, #80]
100029458:     	ldp	x20, x19, [sp, #64]
10002945c:     	ldp	x22, x21, [sp, #48]
100029460:     	ldp	x24, x23, [sp, #32]
100029464:     	ldp	x26, x25, [sp, #16]
100029468:     	ldp	x28, x27, [sp], #96
10002946c:     	ret
100029470:     	mov	x21, x0
100029474:     	add	x1, x23, #8
100029478:     	mov	x0, x20
10002947c:     	bl	0x10002ee70 <_vsnprintf+0x10002ee70>
100029480:     	b	0x100029488 <std::__1::basic_stringstream<char, std::__1::char_traits<char>, std::__1::allocator<char>>::basic_stringstream[abi:ue170006]()+0x11c>
100029484:     	mov	x21, x0
100029488:     	mov	x0, x19
10002948c:     	bl	0x10002efe4 <_vsnprintf+0x10002efe4>
100029490:     	mov	x0, x21
100029494:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100029498 <std::__1::basic_stringstream<char, std::__1::char_traits<char>, std::__1::allocator<char>>::~basic_stringstream()>:
100029498:     	stp	x22, x21, [sp, #-48]!
10002949c:     	stp	x20, x19, [sp, #16]
1000294a0:     	stp	x29, x30, [sp, #32]
1000294a4:     	add	x29, sp, #32
1000294a8:     	mov	x19, x0
1000294ac:     	adrp	x21, 0x100034000 <std::__1::basic_stringstream<char, std::__1::char_traits<char>, std::__1::allocator<char>>::~basic_stringstream()+0x40>
1000294b0:     	ldr	x21, [x21, #704]
1000294b4:     	ldr	x8, [x21]
1000294b8:     	str	x8, [x0]
1000294bc:     	ldur	x8, [x8, #-24]
1000294c0:     	ldp	x9, x10, [x21, #64]
1000294c4:     	str	x9, [x0, x8]
1000294c8:     	adrp	x8, 0x100034000 <std::__1::basic_stringstream<char, std::__1::char_traits<char>, std::__1::allocator<char>>::~basic_stringstream()+0x5c>
1000294cc:     	ldr	x8, [x8, #736]
1000294d0:     	add	x8, x8, #16
1000294d4:     	mov	x20, x0
1000294d8:     	str	x8, [x20, #24]!
1000294dc:     	stur	x10, [x20, #-8]
1000294e0:     	ldrsb	w8, [x20, #87]
1000294e4:     	tbz	w8, #31, 0x1000294f0 <std::__1::basic_stringstream<char, std::__1::char_traits<char>, std::__1::allocator<char>>::~basic_stringstream()+0x58>
1000294e8:     	ldr	x0, [x19, #88]
1000294ec:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000294f0:     	mov	x0, x20
1000294f4:     	bl	0x10002eeb8 <_vsnprintf+0x10002eeb8>
1000294f8:     	add	x1, x21, #8
1000294fc:     	mov	x0, x19
100029500:     	bl	0x10002ee70 <_vsnprintf+0x10002ee70>
100029504:     	add	x0, x19, #128
100029508:     	bl	0x10002efe4 <_vsnprintf+0x10002efe4>
10002950c:     	mov	x0, x19
100029510:     	ldp	x29, x30, [sp, #32]
100029514:     	ldp	x20, x19, [sp, #16]
100029518:     	ldp	x22, x21, [sp], #48
10002951c:     	ret

0000000100029520 <__GLOBAL__sub_I_json_reporter.cc>:
100029520:     	b	0x10000363c <benchmark::internal::InitializeStreams()>

0000000100029524 <benchmark::internal::PerfCounters::Initialize()>:
100029524:     	mov	w0, #0
100029528:     	ret

000000010002952c <benchmark::internal::PerfCounterValues::Read(std::__1::vector<int, std::__1::allocator<int>> const&)>:
10002952c:     	mov	x0, #0
100029530:     	ret

0000000100029534 <benchmark::internal::PerfCounters::IsCounterSupported(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>:
100029534:     	mov	w0, #0
100029538:     	ret

000000010002953c <benchmark::internal::PerfCounters::Create(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)>:
10002953c:     	stp	x20, x19, [sp, #-32]!
100029540:     	stp	x29, x30, [sp, #16]
100029544:     	add	x29, sp, #16
100029548:     	mov	x19, x8
10002954c:     	ldp	x8, x9, [x0]
100029550:     	cmp	x8, x9
100029554:     	b.eq	0x100029584 <benchmark::internal::PerfCounters::Create(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x48>
100029558:     	adrp	x8, 0x100038000 <benchmark::internal::PerfCounters::Create(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x58>
10002955c:     	add	x8, x8, #24
100029560:     	ldaprb	w9, [x8]
100029564:     	adrp	x8, 0x100038000 <benchmark::internal::PerfCounters::Create(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x64>
100029568:     	tbz	w9, #0, 0x1000295a0 <benchmark::internal::PerfCounters::Create(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x64>
10002956c:     	ldr	x0, [x8, #16]
100029570:     	cbz	x0, 0x100029584 <benchmark::internal::PerfCounters::Create(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x48>
100029574:     	adrp	x1, 0x100032000 <benchmark::internal::PerfCounters::Create(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x5c>
100029578:     	add	x1, x1, #1942
10002957c:     	mov	w2, #35
100029580:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100029584:     	str	xzr, [x19, #64]
100029588:     	movi.2d	v0, #0000000000000000
10002958c:     	stp	q0, q0, [x19, #32]
100029590:     	stp	q0, q0, [x19]
100029594:     	ldp	x29, x30, [sp, #16]
100029598:     	ldp	x20, x19, [sp], #32
10002959c:     	ret
1000295a0:     	adrp	x0, 0x100038000 <benchmark::internal::PerfCountersMeasurement::PerfCountersMeasurement(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x4>
1000295a4:     	add	x0, x0, #24
1000295a8:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
1000295ac:     	adrp	x8, 0x100038000 <benchmark::internal::PerfCountersMeasurement::PerfCountersMeasurement(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x10>
1000295b0:     	cbz	w0, 0x10002956c <benchmark::internal::PerfCounters::Create(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x30>
1000295b4:     	adrp	x9, 0x100034000 <benchmark::internal::PerfCountersMeasurement::PerfCountersMeasurement(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x8>
1000295b8:     	ldr	x9, [x9, #464]
1000295bc:     	str	x9, [x8, #16]
1000295c0:     	adrp	x0, 0x100038000 <benchmark::internal::PerfCountersMeasurement::PerfCountersMeasurement(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x24>
1000295c4:     	add	x0, x0, #24
1000295c8:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
1000295cc:     	adrp	x8, 0x100038000 <benchmark::internal::PerfCountersMeasurement::PerfCountersMeasurement(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x30>
1000295d0:     	b	0x10002956c <benchmark::internal::PerfCounters::Create(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x30>

00000001000295d4 <benchmark::internal::PerfCounters::CloseCounters() const>:
1000295d4:     	ret

00000001000295d8 <benchmark::internal::PerfCountersMeasurement::PerfCountersMeasurement(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)>:
1000295d8:     	sub	sp, sp, #128
1000295dc:     	stp	x22, x21, [sp, #80]
1000295e0:     	stp	x20, x19, [sp, #96]
1000295e4:     	stp	x29, x30, [sp, #112]
1000295e8:     	add	x29, sp, #112
1000295ec:     	mov	x19, x0
1000295f0:     	str	xzr, [x0, #64]
1000295f4:     	movi.2d	v0, #0000000000000000
1000295f8:     	stp	q0, q0, [x0, #32]
1000295fc:     	stp	q0, q0, [x0]
100029600:     	mov	w8, #1
100029604:     	strb	w8, [x0, #72]
100029608:     	ldp	x9, x8, [x1]
10002960c:     	sub	x8, x8, x9
100029610:     	asr	x8, x8, #3
100029614:     	mov	x20, #-6148914691236517206
100029618:     	movk	x20, #43691
10002961c:     	mul	x8, x8, x20
100029620:     	str	x8, [x0, #352]
100029624:     	adrp	x8, 0x100038000 <benchmark::internal::PerfCountersMeasurement::PerfCountersMeasurement(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x88>
100029628:     	add	x8, x8, #8
10002962c:     	ldaprb	w9, [x8]
100029630:     	tbz	w9, #0, 0x100029728 <benchmark::internal::PerfCountersMeasurement::PerfCountersMeasurement(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x150>
100029634:     	ldp	x10, x9, [x1]
100029638:     	sub	x9, x9, x10
10002963c:     	asr	x9, x9, #3
100029640:     	mul	x9, x9, x20
100029644:     	str	x9, [x19, #632]
100029648:     	ldaprb	w8, [x8]
10002964c:     	tbz	w8, #0, 0x10002976c <benchmark::internal::PerfCountersMeasurement::PerfCountersMeasurement(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x194>
100029650:     	ldp	x8, x9, [x1]
100029654:     	cmp	x8, x9
100029658:     	b.eq	0x100029688 <benchmark::internal::PerfCountersMeasurement::PerfCountersMeasurement(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0xb0>
10002965c:     	adrp	x8, 0x100038000 <benchmark::internal::PerfCountersMeasurement::PerfCountersMeasurement(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0xc0>
100029660:     	add	x8, x8, #24
100029664:     	ldaprb	w8, [x8]
100029668:     	adrp	x20, 0x100038000 <benchmark::internal::PerfCountersMeasurement::PerfCountersMeasurement(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0xcc>
10002966c:     	tbz	w8, #0, 0x1000297a0 <benchmark::internal::PerfCountersMeasurement::PerfCountersMeasurement(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x1c8>
100029670:     	ldr	x0, [x20, #16]
100029674:     	cbz	x0, 0x100029688 <benchmark::internal::PerfCountersMeasurement::PerfCountersMeasurement(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0xb0>
100029678:     	adrp	x1, 0x100032000 <benchmark::internal::PerfCountersMeasurement::PerfCountersMeasurement(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0xc4>
10002967c:     	add	x1, x1, #1942
100029680:     	mov	w2, #35
100029684:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100029688:     	str	xzr, [sp, #64]
10002968c:     	movi.2d	v0, #0000000000000000
100029690:     	stp	q0, q0, [sp, #32]
100029694:     	stp	q0, q0, [sp]
100029698:     	mov	x1, sp
10002969c:     	mov	x0, x19
1000296a0:     	bl	0x1000297e0 <benchmark::internal::PerfCounters::operator=(benchmark::internal::PerfCounters&&)>
1000296a4:     	ldr	x20, [sp, #48]
1000296a8:     	cbz	x20, 0x1000296f0 <benchmark::internal::PerfCountersMeasurement::PerfCountersMeasurement(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x118>
1000296ac:     	ldr	x8, [sp, #56]
1000296b0:     	mov	x0, x20
1000296b4:     	cmp	x8, x20
1000296b8:     	b.ne	0x1000296cc <benchmark::internal::PerfCountersMeasurement::PerfCountersMeasurement(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0xf4>
1000296bc:     	b	0x1000296e8 <benchmark::internal::PerfCountersMeasurement::PerfCountersMeasurement(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x110>
1000296c0:     	mov	x8, x21
1000296c4:     	cmp	x21, x20
1000296c8:     	b.eq	0x1000296e4 <benchmark::internal::PerfCountersMeasurement::PerfCountersMeasurement(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x10c>
1000296cc:     	sub	x21, x8, #24
1000296d0:     	ldursb	w9, [x8, #-1]
1000296d4:     	tbz	w9, #31, 0x1000296c0 <benchmark::internal::PerfCountersMeasurement::PerfCountersMeasurement(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0xe8>
1000296d8:     	ldur	x0, [x8, #-24]
1000296dc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000296e0:     	b	0x1000296c0 <benchmark::internal::PerfCountersMeasurement::PerfCountersMeasurement(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0xe8>
1000296e4:     	ldr	x0, [sp, #48]
1000296e8:     	str	x20, [sp, #56]
1000296ec:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000296f0:     	ldr	x0, [sp, #24]
1000296f4:     	cbz	x0, 0x100029700 <benchmark::internal::PerfCountersMeasurement::PerfCountersMeasurement(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x128>
1000296f8:     	str	x0, [sp, #32]
1000296fc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100029700:     	ldr	x0, [sp]
100029704:     	cbz	x0, 0x100029710 <benchmark::internal::PerfCountersMeasurement::PerfCountersMeasurement(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x138>
100029708:     	str	x0, [sp, #8]
10002970c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100029710:     	mov	x0, x19
100029714:     	ldp	x29, x30, [sp, #112]
100029718:     	ldp	x20, x19, [sp, #96]
10002971c:     	ldp	x22, x21, [sp, #80]
100029720:     	add	sp, sp, #128
100029724:     	ret
100029728:     	adrp	x0, 0x100038000 <benchmark::internal::PerfCountersMeasurement::PerfCountersMeasurement(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x18c>
10002972c:     	add	x0, x0, #8
100029730:     	mov	x21, x1
100029734:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
100029738:     	adrp	x8, 0x100038000 <benchmark::internal::PerfCountersMeasurement::PerfCountersMeasurement(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x19c>
10002973c:     	add	x8, x8, #8
100029740:     	mov	x1, x21
100029744:     	cbz	w0, 0x100029634 <benchmark::internal::PerfCountersMeasurement::PerfCountersMeasurement(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x5c>
100029748:     	adrp	x8, 0x100038000 <benchmark::internal::PerfCountersMeasurement::PerfCountersMeasurement(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x1ac>
10002974c:     	str	xzr, [x8]
100029750:     	adrp	x0, 0x100038000 <benchmark::internal::PerfCountersMeasurement::PerfCountersMeasurement(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x1b4>
100029754:     	add	x0, x0, #8
100029758:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10002975c:     	adrp	x8, 0x100038000 <benchmark::internal::PerfCountersMeasurement::PerfCountersMeasurement(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x1c0>
100029760:     	add	x8, x8, #8
100029764:     	mov	x1, x21
100029768:     	b	0x100029634 <benchmark::internal::PerfCountersMeasurement::PerfCountersMeasurement(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x5c>
10002976c:     	adrp	x0, 0x100038000 <benchmark::internal::PerfCountersMeasurement::PerfCountersMeasurement(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x1d0>
100029770:     	add	x0, x0, #8
100029774:     	mov	x20, x1
100029778:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10002977c:     	mov	x1, x20
100029780:     	cbz	w0, 0x100029650 <benchmark::internal::PerfCountersMeasurement::PerfCountersMeasurement(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x78>
100029784:     	adrp	x8, 0x100038000 <benchmark::internal::PerfCountersMeasurement::PerfCountersMeasurement(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x1e8>
100029788:     	str	xzr, [x8]
10002978c:     	adrp	x0, 0x100038000 <benchmark::internal::PerfCountersMeasurement::PerfCountersMeasurement(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x1f0>
100029790:     	add	x0, x0, #8
100029794:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
100029798:     	mov	x1, x20
10002979c:     	b	0x100029650 <benchmark::internal::PerfCountersMeasurement::PerfCountersMeasurement(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x78>
1000297a0:     	adrp	x0, 0x100038000 <benchmark::internal::PerfCountersMeasurement::PerfCountersMeasurement(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x204>
1000297a4:     	add	x0, x0, #24
1000297a8:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
1000297ac:     	cbz	w0, 0x100029670 <benchmark::internal::PerfCountersMeasurement::PerfCountersMeasurement(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x98>
1000297b0:     	adrp	x8, 0x100034000 <benchmark::internal::PerfCountersMeasurement::PerfCountersMeasurement(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x204>
1000297b4:     	ldr	x8, [x8, #464]
1000297b8:     	str	x8, [x20, #16]
1000297bc:     	adrp	x0, 0x100038000 <benchmark::internal::PerfCounters::operator=(benchmark::internal::PerfCounters&&)+0x18>
1000297c0:     	add	x0, x0, #24
1000297c4:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
1000297c8:     	b	0x100029670 <benchmark::internal::PerfCountersMeasurement::PerfCountersMeasurement(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)+0x98>
1000297cc:     	mov	x20, x0
1000297d0:     	mov	x0, x19
1000297d4:     	bl	0x1000298f8 <benchmark::internal::PerfCounters::~PerfCounters()>
1000297d8:     	mov	x0, x20
1000297dc:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

00000001000297e0 <benchmark::internal::PerfCounters::operator=(benchmark::internal::PerfCounters&&)>:
1000297e0:     	stp	x24, x23, [sp, #-64]!
1000297e4:     	stp	x22, x21, [sp, #16]
1000297e8:     	stp	x20, x19, [sp, #32]
1000297ec:     	stp	x29, x30, [sp, #48]
1000297f0:     	add	x29, sp, #48
1000297f4:     	mov	x19, x0
1000297f8:     	cmp	x0, x1
1000297fc:     	b.eq	0x1000298e0 <benchmark::internal::PerfCounters::operator=(benchmark::internal::PerfCounters&&)+0x100>
100029800:     	mov	x20, x1
100029804:     	ldr	x0, [x19]
100029808:     	cbz	x0, 0x10002981c <benchmark::internal::PerfCounters::operator=(benchmark::internal::PerfCounters&&)+0x3c>
10002980c:     	str	x0, [x19, #8]
100029810:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100029814:     	stp	xzr, xzr, [x19]
100029818:     	str	xzr, [x19, #16]
10002981c:     	ldp	x8, x9, [x20]
100029820:     	stp	x8, x9, [x19]
100029824:     	ldr	x8, [x20, #16]
100029828:     	str	x8, [x19, #16]
10002982c:     	stp	xzr, xzr, [x20, #8]
100029830:     	str	xzr, [x20]
100029834:     	add	x21, x20, #24
100029838:     	mov	x22, x19
10002983c:     	ldr	x0, [x22, #24]!
100029840:     	cbz	x0, 0x100029854 <benchmark::internal::PerfCounters::operator=(benchmark::internal::PerfCounters&&)+0x74>
100029844:     	str	x0, [x19, #32]
100029848:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002984c:     	stp	xzr, xzr, [x22]
100029850:     	str	xzr, [x22, #16]
100029854:     	ldp	x8, x9, [x20, #24]
100029858:     	stp	x8, x9, [x19, #24]
10002985c:     	ldr	x8, [x20, #40]
100029860:     	str	x8, [x19, #40]
100029864:     	stp	xzr, xzr, [x21, #8]
100029868:     	str	xzr, [x21]
10002986c:     	add	x21, x20, #48
100029870:     	mov	x22, x19
100029874:     	ldr	x23, [x22, #48]!
100029878:     	cbz	x23, 0x1000298c8 <benchmark::internal::PerfCounters::operator=(benchmark::internal::PerfCounters&&)+0xe8>
10002987c:     	ldr	x8, [x19, #56]
100029880:     	mov	x0, x23
100029884:     	cmp	x8, x23
100029888:     	b.ne	0x10002989c <benchmark::internal::PerfCounters::operator=(benchmark::internal::PerfCounters&&)+0xbc>
10002988c:     	b	0x1000298b8 <benchmark::internal::PerfCounters::operator=(benchmark::internal::PerfCounters&&)+0xd8>
100029890:     	mov	x8, x24
100029894:     	cmp	x24, x23
100029898:     	b.eq	0x1000298b4 <benchmark::internal::PerfCounters::operator=(benchmark::internal::PerfCounters&&)+0xd4>
10002989c:     	sub	x24, x8, #24
1000298a0:     	ldursb	w9, [x8, #-1]
1000298a4:     	tbz	w9, #31, 0x100029890 <benchmark::internal::PerfCounters::operator=(benchmark::internal::PerfCounters&&)+0xb0>
1000298a8:     	ldur	x0, [x8, #-24]
1000298ac:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000298b0:     	b	0x100029890 <benchmark::internal::PerfCounters::operator=(benchmark::internal::PerfCounters&&)+0xb0>
1000298b4:     	ldr	x0, [x22]
1000298b8:     	str	x23, [x19, #56]
1000298bc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
1000298c0:     	stp	xzr, xzr, [x22]
1000298c4:     	str	xzr, [x22, #16]
1000298c8:     	ldp	x8, x9, [x20, #48]
1000298cc:     	stp	x8, x9, [x19, #48]
1000298d0:     	ldr	x8, [x20, #64]
1000298d4:     	str	x8, [x19, #64]
1000298d8:     	stp	xzr, xzr, [x21]
1000298dc:     	str	xzr, [x21, #16]
1000298e0:     	mov	x0, x19
1000298e4:     	ldp	x29, x30, [sp, #48]
1000298e8:     	ldp	x20, x19, [sp, #32]
1000298ec:     	ldp	x22, x21, [sp, #16]
1000298f0:     	ldp	x24, x23, [sp], #64
1000298f4:     	ret

00000001000298f8 <benchmark::internal::PerfCounters::~PerfCounters()>:
1000298f8:     	stp	x22, x21, [sp, #-48]!
1000298fc:     	stp	x20, x19, [sp, #16]
100029900:     	stp	x29, x30, [sp, #32]
100029904:     	add	x29, sp, #32
100029908:     	mov	x19, x0
10002990c:     	ldr	x20, [x0, #48]
100029910:     	cbz	x20, 0x100029958 <benchmark::internal::PerfCounters::~PerfCounters()+0x60>
100029914:     	ldr	x8, [x19, #56]
100029918:     	mov	x0, x20
10002991c:     	cmp	x8, x20
100029920:     	b.ne	0x100029934 <benchmark::internal::PerfCounters::~PerfCounters()+0x3c>
100029924:     	b	0x100029950 <benchmark::internal::PerfCounters::~PerfCounters()+0x58>
100029928:     	mov	x8, x21
10002992c:     	cmp	x21, x20
100029930:     	b.eq	0x10002994c <benchmark::internal::PerfCounters::~PerfCounters()+0x54>
100029934:     	sub	x21, x8, #24
100029938:     	ldursb	w9, [x8, #-1]
10002993c:     	tbz	w9, #31, 0x100029928 <benchmark::internal::PerfCounters::~PerfCounters()+0x30>
100029940:     	ldur	x0, [x8, #-24]
100029944:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100029948:     	b	0x100029928 <benchmark::internal::PerfCounters::~PerfCounters()+0x30>
10002994c:     	ldr	x0, [x19, #48]
100029950:     	str	x20, [x19, #56]
100029954:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100029958:     	ldr	x0, [x19, #24]
10002995c:     	cbz	x0, 0x100029968 <benchmark::internal::PerfCounters::~PerfCounters()+0x70>
100029960:     	str	x0, [x19, #32]
100029964:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100029968:     	ldr	x0, [x19]
10002996c:     	cbz	x0, 0x100029978 <benchmark::internal::PerfCounters::~PerfCounters()+0x80>
100029970:     	str	x0, [x19, #8]
100029974:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100029978:     	mov	x0, x19
10002997c:     	ldp	x29, x30, [sp, #32]
100029980:     	ldp	x20, x19, [sp, #16]
100029984:     	ldp	x22, x21, [sp], #48
100029988:     	ret

000000010002998c <benchmark::internal::PerfCountersMeasurement::PerfCountersMeasurement(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)>:
10002998c:     	b	0x1000295d8 <benchmark::internal::PerfCountersMeasurement::PerfCountersMeasurement(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&)>

0000000100029990 <__GLOBAL__sub_I_perf_counters.cc>:
100029990:     	b	0x10000363c <benchmark::internal::InitializeStreams()>

0000000100029994 <benchmark::BenchmarkReporter::BenchmarkReporter()>:
100029994:     	adrp	x8, 0x100034000 <benchmark::BenchmarkReporter::~BenchmarkReporter()>
100029998:     	add	x8, x8, #3656
10002999c:     	adrp	x9, 0x100034000 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x4>
1000299a0:     	ldr	x9, [x9, #472]
1000299a4:     	stp	x8, x9, [x0]
1000299a8:     	adrp	x8, 0x100034000 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x10>
1000299ac:     	ldr	x8, [x8, #456]
1000299b0:     	str	x8, [x0, #16]
1000299b4:     	ret

00000001000299b8 <benchmark::BenchmarkReporter::~BenchmarkReporter()>:
1000299b8:     	ret

00000001000299bc <benchmark::BenchmarkReporter::~BenchmarkReporter()>:
1000299bc:     	brk	#0x1

00000001000299c0 <benchmark::BenchmarkReporter::~BenchmarkReporter()>:
1000299c0:     	brk	#0x1

00000001000299c4 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)>:
1000299c4:     	sub	sp, sp, #128
1000299c8:     	stp	x28, x27, [sp, #32]
1000299cc:     	stp	x26, x25, [sp, #48]
1000299d0:     	stp	x24, x23, [sp, #64]
1000299d4:     	stp	x22, x21, [sp, #80]
1000299d8:     	stp	x20, x19, [sp, #96]
1000299dc:     	stp	x29, x30, [sp, #112]
1000299e0:     	add	x29, sp, #112
1000299e4:     	mov	x20, x1
1000299e8:     	mov	x19, x0
1000299ec:     	adrp	x8, 0x100038000 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x64>
1000299f0:     	add	x8, x8, #8
1000299f4:     	ldaprb	w8, [x8]
1000299f8:     	adrp	x21, 0x100038000 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x70>
1000299fc:     	tbz	w8, #0, 0x100029e30 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x46c>
100029a00:     	ldr	x0, [x21]
100029a04:     	cbz	x0, 0x100029a18 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x54>
100029a08:     	adrp	x1, 0x100032000 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x68>
100029a0c:     	add	x1, x1, #1978
100029a10:     	mov	w2, #14
100029a14:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100029a18:     	add	x21, sp, #8
100029a1c:     	add	x8, sp, #8
100029a20:     	bl	0x10002e88c <benchmark::LocalDateTimeString()>
100029a24:     	ldrb	w8, [sp, #31]
100029a28:     	sxtb	w9, w8
100029a2c:     	ldp	x10, x11, [sp, #8]
100029a30:     	cmp	w9, #0
100029a34:     	csel	x1, x10, x21, lt
100029a38:     	csel	x2, x11, x8, lt
100029a3c:     	mov	x0, x19
100029a40:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100029a44:     	adrp	x1, 0x100031000 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0xa0>
100029a48:     	add	x1, x1, #2523
100029a4c:     	mov	w2, #1
100029a50:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100029a54:     	ldrsb	w8, [sp, #31]
100029a58:     	tbz	w8, #31, 0x100029a64 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0xa0>
100029a5c:     	ldr	x0, [sp, #8]
100029a60:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100029a64:     	adrp	x22, 0x100038000 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0xdc>
100029a68:     	ldr	x8, [x22, #528]
100029a6c:     	cbz	x8, 0x100029ab4 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0xf0>
100029a70:     	adrp	x1, 0x100032000 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0xd0>
100029a74:     	add	x1, x1, #258
100029a78:     	mov	x0, x19
100029a7c:     	mov	w2, #8
100029a80:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100029a84:     	mov	x21, x0
100029a88:     	ldr	x22, [x22, #528]
100029a8c:     	mov	x0, x22
100029a90:     	bl	0x10002f254 <_vsnprintf+0x10002f254>
100029a94:     	mov	x2, x0
100029a98:     	mov	x0, x21
100029a9c:     	mov	x1, x22
100029aa0:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100029aa4:     	adrp	x1, 0x100031000 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x100>
100029aa8:     	add	x1, x1, #2523
100029aac:     	mov	w2, #1
100029ab0:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100029ab4:     	ldr	x26, [x20]
100029ab8:     	adrp	x1, 0x100032000 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x118>
100029abc:     	add	x1, x1, #1993
100029ac0:     	mov	x0, x19
100029ac4:     	mov	w2, #8
100029ac8:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100029acc:     	ldr	w1, [x26]
100029ad0:     	bl	0x10002ee28 <_vsnprintf+0x10002ee28>
100029ad4:     	adrp	x1, 0x100032000 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x134>
100029ad8:     	add	x1, x1, #2002
100029adc:     	mov	w2, #3
100029ae0:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100029ae4:     	ldr	d0, [x26, #8]
100029ae8:     	mov	x8, #145685290680320
100029aec:     	movk	x8, #16686, lsl #48
100029af0:     	fmov	d1, x8
100029af4:     	fdiv	d0, d0, d1
100029af8:     	bl	0x10002ee1c <_vsnprintf+0x10002ee1c>
100029afc:     	adrp	x1, 0x100032000 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x15c>
100029b00:     	add	x1, x1, #2006
100029b04:     	mov	w2, #9
100029b08:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100029b0c:     	ldr	w8, [x26]
100029b10:     	cmp	w8, #1
100029b14:     	cset	w2, gt
100029b18:     	adrp	x8, 0x100031000 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x174>
100029b1c:     	add	x8, x8, #1905
100029b20:     	adrp	x9, 0x100032000 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x180>
100029b24:     	add	x9, x9, #1134
100029b28:     	csel	x1, x9, x8, gt
100029b2c:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100029b30:     	adrp	x1, 0x100032000 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x190>
100029b34:     	add	x1, x1, #2016
100029b38:     	mov	w2, #2
100029b3c:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100029b40:     	ldp	x9, x8, [x26, #16]
100029b44:     	cmp	x8, x9
100029b48:     	b.eq	0x100029c64 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x2a0>
100029b4c:     	adrp	x1, 0x100032000 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x1ac>
100029b50:     	add	x1, x1, #2019
100029b54:     	mov	x0, x19
100029b58:     	mov	w2, #12
100029b5c:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100029b60:     	ldp	x27, x28, [x26, #16]
100029b64:     	cmp	x27, x28
100029b68:     	b.eq	0x100029c64 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x2a0>
100029b6c:     	adrp	x20, 0x100032000 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x1cc>
100029b70:     	add	x20, x20, #2032
100029b74:     	adrp	x21, 0x100032000 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x1d4>
100029b78:     	add	x21, x21, #2036
100029b7c:     	adrp	x22, 0x100032000 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x1dc>
100029b80:     	add	x22, x22, #2038
100029b84:     	adrp	x23, 0x100031000 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x1e0>
100029b88:     	add	x23, x23, #2523
100029b8c:     	adrp	x24, 0x100032000 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x1ec>
100029b90:     	add	x24, x24, #2043
100029b94:     	adrp	x25, 0x100032000 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x1f4>
100029b98:     	add	x25, x25, #2047
100029b9c:     	b	0x100029bbc <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x1f8>
100029ba0:     	mov	x0, x19
100029ba4:     	mov	x1, x23
100029ba8:     	mov	w2, #1
100029bac:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100029bb0:     	add	x27, x27, #40
100029bb4:     	cmp	x27, x28
100029bb8:     	b.eq	0x100029c64 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x2a0>
100029bbc:     	mov	x0, x19
100029bc0:     	mov	x1, x20
100029bc4:     	mov	w2, #3
100029bc8:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100029bcc:     	ldr	w1, [x27, #24]
100029bd0:     	bl	0x10002ee28 <_vsnprintf+0x10002ee28>
100029bd4:     	mov	x1, x21
100029bd8:     	mov	w2, #1
100029bdc:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100029be0:     	ldrb	w8, [x27, #23]
100029be4:     	sxtb	w9, w8
100029be8:     	ldp	x10, x11, [x27]
100029bec:     	cmp	w9, #0
100029bf0:     	csel	x1, x10, x27, lt
100029bf4:     	csel	x2, x11, x8, lt
100029bf8:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100029bfc:     	mov	x1, x21
100029c00:     	mov	w2, #1
100029c04:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100029c08:     	ldr	w8, [x27, #28]
100029c0c:     	add	w9, w8, #1023
100029c10:     	cmp	w8, #0
100029c14:     	csel	w8, w9, w8, lt
100029c18:     	asr	w1, w8, #10
100029c1c:     	bl	0x10002ee28 <_vsnprintf+0x10002ee28>
100029c20:     	mov	x1, x22
100029c24:     	mov	w2, #4
100029c28:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100029c2c:     	ldr	w8, [x27, #32]
100029c30:     	cbz	w8, 0x100029ba0 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x1dc>
100029c34:     	mov	x0, x19
100029c38:     	mov	x1, x24
100029c3c:     	mov	w2, #3
100029c40:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100029c44:     	ldr	w8, [x26]
100029c48:     	ldr	w9, [x27, #32]
100029c4c:     	sdiv	w1, w8, w9
100029c50:     	bl	0x10002ee28 <_vsnprintf+0x10002ee28>
100029c54:     	mov	x1, x25
100029c58:     	mov	w2, #1
100029c5c:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100029c60:     	b	0x100029ba0 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x1dc>
100029c64:     	ldp	x8, x9, [x26, #40]
100029c68:     	cmp	x8, x9
100029c6c:     	b.eq	0x100029d24 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x360>
100029c70:     	adrp	x1, 0x100032000 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x2d0>
100029c74:     	add	x1, x1, #2049
100029c78:     	mov	x0, x19
100029c7c:     	mov	w2, #14
100029c80:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100029c84:     	ldp	x22, x8, [x26, #40]
100029c88:     	cmp	x22, x8
100029c8c:     	b.eq	0x100029d10 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x34c>
100029c90:     	adrp	x20, 0x100032000 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x2f0>
100029c94:     	add	x20, x20, #1129
100029c98:     	add	x23, sp, #8
100029c9c:     	adrp	x21, 0x100032000 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x2fc>
100029ca0:     	add	x21, x21, #296
100029ca4:     	ldr	d0, [x22], #8
100029ca8:     	str	d0, [sp]
100029cac:     	add	x8, sp, #8
100029cb0:     	mov	x0, x20
100029cb4:     	bl	0x10002c6d0 <benchmark::StrFormat(char const*, ...)>
100029cb8:     	ldrb	w8, [sp, #31]
100029cbc:     	sxtb	w9, w8
100029cc0:     	ldp	x10, x11, [sp, #8]
100029cc4:     	cmp	w9, #0
100029cc8:     	csel	x1, x10, x23, lt
100029ccc:     	csel	x2, x11, x8, lt
100029cd0:     	mov	x0, x19
100029cd4:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100029cd8:     	ldrsb	w8, [sp, #31]
100029cdc:     	tbz	w8, #31, 0x100029ce8 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x324>
100029ce0:     	ldr	x0, [sp, #8]
100029ce4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100029ce8:     	ldr	x8, [x26, #48]
100029cec:     	cmp	x22, x8
100029cf0:     	b.eq	0x100029d10 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x34c>
100029cf4:     	mov	x0, x19
100029cf8:     	mov	x1, x21
100029cfc:     	mov	w2, #2
100029d00:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100029d04:     	ldr	x8, [x26, #48]
100029d08:     	cmp	x22, x8
100029d0c:     	b.ne	0x100029ca4 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x2e0>
100029d10:     	adrp	x1, 0x100031000 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x36c>
100029d14:     	add	x1, x1, #2523
100029d18:     	mov	x0, x19
100029d1c:     	mov	w2, #1
100029d20:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100029d24:     	bl	0x1000036f8 <benchmark::internal::GetGlobalContext()>
100029d28:     	ldr	x22, [x0]
100029d2c:     	cbz	x22, 0x100029df0 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x42c>
100029d30:     	ldr	x23, [x22], #8
100029d34:     	cmp	x23, x22
100029d38:     	b.eq	0x100029df0 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x42c>
100029d3c:     	adrp	x20, 0x100032000 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x39c>
100029d40:     	add	x20, x20, #2064
100029d44:     	adrp	x21, 0x100031000 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x3a0>
100029d48:     	add	x21, x21, #2523
100029d4c:     	b	0x100029d5c <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x398>
100029d50:     	mov	x23, x8
100029d54:     	cmp	x8, x22
100029d58:     	b.eq	0x100029df0 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x42c>
100029d5c:     	ldrb	w8, [x23, #55]
100029d60:     	sxtb	w9, w8
100029d64:     	mov	x10, x23
100029d68:     	ldr	x11, [x10, #32]!
100029d6c:     	ldr	x12, [x23, #40]
100029d70:     	cmp	w9, #0
100029d74:     	csel	x1, x11, x10, lt
100029d78:     	csel	x2, x12, x8, lt
100029d7c:     	mov	x0, x19
100029d80:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100029d84:     	mov	x1, x20
100029d88:     	mov	w2, #2
100029d8c:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100029d90:     	mov	x24, x23
100029d94:     	ldr	x8, [x24, #56]!
100029d98:     	ldrb	w9, [x24, #23]
100029d9c:     	sxtb	w10, w9
100029da0:     	ldr	x11, [x24, #8]
100029da4:     	cmp	w10, #0
100029da8:     	csel	x1, x8, x24, lt
100029dac:     	csel	x2, x11, x9, lt
100029db0:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100029db4:     	mov	x1, x21
100029db8:     	mov	w2, #1
100029dbc:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100029dc0:     	ldur	x9, [x24, #-48]
100029dc4:     	cbz	x9, 0x100029dd8 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x414>
100029dc8:     	mov	x8, x9
100029dcc:     	ldr	x9, [x9]
100029dd0:     	cbnz	x9, 0x100029dc8 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x404>
100029dd4:     	b	0x100029d50 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x38c>
100029dd8:     	ldr	x8, [x23, #16]
100029ddc:     	ldr	x9, [x8]
100029de0:     	cmp	x9, x23
100029de4:     	mov	x23, x8
100029de8:     	b.ne	0x100029dd8 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x414>
100029dec:     	b	0x100029d50 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x38c>
100029df0:     	ldr	w8, [x26, #4]
100029df4:     	cmp	w8, #1
100029df8:     	b.ne	0x100029e10 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x44c>
100029dfc:     	adrp	x1, 0x100032000 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x45c>
100029e00:     	add	x1, x1, #2067
100029e04:     	mov	x0, x19
100029e08:     	mov	w2, #119
100029e0c:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
100029e10:     	ldp	x29, x30, [sp, #112]
100029e14:     	ldp	x20, x19, [sp, #96]
100029e18:     	ldp	x22, x21, [sp, #80]
100029e1c:     	ldp	x24, x23, [sp, #64]
100029e20:     	ldp	x26, x25, [sp, #48]
100029e24:     	ldp	x28, x27, [sp, #32]
100029e28:     	add	sp, sp, #128
100029e2c:     	ret
100029e30:     	adrp	x0, 0x100038000 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x4a8>
100029e34:     	add	x0, x0, #8
100029e38:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
100029e3c:     	cbz	w0, 0x100029a00 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x3c>
100029e40:     	str	xzr, [x21]
100029e44:     	adrp	x0, 0x100038000 <benchmark::BenchmarkReporter::Context::Context()+0xc>
100029e48:     	add	x0, x0, #8
100029e4c:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
100029e50:     	b	0x100029a00 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x3c>
100029e54:     	b	0x100029e58 <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x494>
100029e58:     	mov	x19, x0
100029e5c:     	ldrsb	w8, [sp, #31]
100029e60:     	tbz	w8, #31, 0x100029e6c <benchmark::BenchmarkReporter::PrintBasicContext(std::__1::basic_ostream<char, std::__1::char_traits<char>>*, benchmark::BenchmarkReporter::Context const&)+0x4a8>
100029e64:     	ldr	x0, [sp, #8]
100029e68:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100029e6c:     	mov	x0, x19
100029e70:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100029e74 <benchmark::BenchmarkReporter::Context::Context()>:
100029e74:     	stp	x20, x19, [sp, #-32]!
100029e78:     	stp	x29, x30, [sp, #16]
100029e7c:     	add	x29, sp, #16
100029e80:     	mov	x19, x0
100029e84:     	bl	0x10002cb64 <benchmark::CPUInfo::Get()>
100029e88:     	str	x0, [x19]
100029e8c:     	bl	0x10002d990 <benchmark::SystemInfo::Get()>
100029e90:     	str	x0, [x19, #8]
100029e94:     	mov	x0, x19
100029e98:     	ldp	x29, x30, [sp, #16]
100029e9c:     	ldp	x20, x19, [sp], #32
100029ea0:     	ret

0000000100029ea4 <benchmark::BenchmarkReporter::Context::Context()>:
100029ea4:     	stp	x20, x19, [sp, #-32]!
100029ea8:     	stp	x29, x30, [sp, #16]
100029eac:     	add	x29, sp, #16
100029eb0:     	mov	x19, x0
100029eb4:     	bl	0x10002cb64 <benchmark::CPUInfo::Get()>
100029eb8:     	str	x0, [x19]
100029ebc:     	bl	0x10002d990 <benchmark::SystemInfo::Get()>
100029ec0:     	str	x0, [x19, #8]
100029ec4:     	mov	x0, x19
100029ec8:     	ldp	x29, x30, [sp, #16]
100029ecc:     	ldp	x20, x19, [sp], #32
100029ed0:     	ret

0000000100029ed4 <benchmark::BenchmarkReporter::Run::benchmark_name() const>:
100029ed4:     	sub	sp, sp, #64
100029ed8:     	stp	x20, x19, [sp, #32]
100029edc:     	stp	x29, x30, [sp, #48]
100029ee0:     	add	x29, sp, #48
100029ee4:     	mov	x20, x0
100029ee8:     	mov	x19, x8
100029eec:     	bl	0x10000ba9c <benchmark::BenchmarkName::str() const>
100029ef0:     	ldr	w8, [x20, #208]
100029ef4:     	cmp	w8, #1
100029ef8:     	b.ne	0x100029f3c <benchmark::BenchmarkReporter::Run::benchmark_name() const+0x68>
100029efc:     	add	x1, x20, #216
100029f00:     	adrp	x0, 0x100032000 <benchmark::BenchmarkReporter::Run::benchmark_name() const+0x50>
100029f04:     	add	x0, x0, #2187
100029f08:     	add	x20, sp, #8
100029f0c:     	add	x8, sp, #8
100029f10:     	bl	0x10002eff0 <_vsnprintf+0x10002eff0>
100029f14:     	ldrb	w8, [sp, #31]
100029f18:     	sxtb	w9, w8
100029f1c:     	ldp	x10, x11, [sp, #8]
100029f20:     	cmp	w9, #0
100029f24:     	csel	x1, x10, x20, lt
100029f28:     	csel	x2, x11, x8, lt
100029f2c:     	mov	x0, x19
100029f30:     	bl	0x10002ed38 <_vsnprintf+0x10002ed38>
100029f34:     	ldrsb	w8, [sp, #31]
100029f38:     	tbnz	w8, #31, 0x100029f4c <benchmark::BenchmarkReporter::Run::benchmark_name() const+0x78>
100029f3c:     	ldp	x29, x30, [sp, #48]
100029f40:     	ldp	x20, x19, [sp, #32]
100029f44:     	add	sp, sp, #64
100029f48:     	ret
100029f4c:     	ldr	x0, [sp, #8]
100029f50:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100029f54:     	ldp	x29, x30, [sp, #48]
100029f58:     	ldp	x20, x19, [sp, #32]
100029f5c:     	add	sp, sp, #64
100029f60:     	ret
100029f64:     	mov	x20, x0
100029f68:     	ldrsb	w8, [sp, #31]
100029f6c:     	tbnz	w8, #31, 0x100029f80 <benchmark::BenchmarkReporter::Run::benchmark_name() const+0xac>
100029f70:     	ldrsb	w8, [x19, #23]
100029f74:     	tbnz	w8, #31, 0x100029fa0 <benchmark::BenchmarkReporter::Run::benchmark_name() const+0xcc>
100029f78:     	mov	x0, x20
100029f7c:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
100029f80:     	ldr	x0, [sp, #8]
100029f84:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100029f88:     	ldrsb	w8, [x19, #23]
100029f8c:     	tbz	w8, #31, 0x100029f78 <benchmark::BenchmarkReporter::Run::benchmark_name() const+0xa4>
100029f90:     	b	0x100029fa0 <benchmark::BenchmarkReporter::Run::benchmark_name() const+0xcc>
100029f94:     	mov	x20, x0
100029f98:     	ldrsb	w8, [x19, #23]
100029f9c:     	tbz	w8, #31, 0x100029f78 <benchmark::BenchmarkReporter::Run::benchmark_name() const+0xa4>
100029fa0:     	ldr	x0, [x19]
100029fa4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
100029fa8:     	mov	x0, x20
100029fac:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

0000000100029fb0 <benchmark::BenchmarkReporter::Run::GetAdjustedRealTime() const>:
100029fb0:     	ldr	d0, [x0, #344]
100029fb4:     	ldrsw	x8, [x0, #336]
100029fb8:     	adrp	x9, 0x100033000 <benchmark::BenchmarkReporter::Run::GetAdjustedCPUTime() const+0x4>
100029fbc:     	add	x9, x9, #856
100029fc0:     	ldr	d1, [x9, x8, lsl #3]
100029fc4:     	fmul	d0, d0, d1
100029fc8:     	ldr	x8, [x0, #304]
100029fcc:     	cbz	x8, 0x100029fd8 <benchmark::BenchmarkReporter::Run::GetAdjustedRealTime() const+0x28>
100029fd0:     	scvtf	d1, x8
100029fd4:     	fdiv	d0, d0, d1
100029fd8:     	ret

0000000100029fdc <benchmark::BenchmarkReporter::Run::GetAdjustedCPUTime() const>:
100029fdc:     	ldr	d0, [x0, #352]
100029fe0:     	ldrsw	x8, [x0, #336]
100029fe4:     	adrp	x9, 0x100033000 <benchmark::StatisticsMean(std::__1::vector<double, std::__1::allocator<double>> const&)>
100029fe8:     	add	x9, x9, #856
100029fec:     	ldr	d1, [x9, x8, lsl #3]
100029ff0:     	fmul	d0, d0, d1
100029ff4:     	ldr	x8, [x0, #304]
100029ff8:     	cbz	x8, 0x10002a004 <benchmark::BenchmarkReporter::Run::GetAdjustedCPUTime() const+0x28>
100029ffc:     	scvtf	d1, x8
10002a000:     	fdiv	d0, d0, d1
10002a004:     	ret

000000010002a008 <__GLOBAL__sub_I_reporter.cc>:
10002a008:     	b	0x10000363c <benchmark::internal::InitializeStreams()>

000000010002a00c <benchmark::StatisticsMean(std::__1::vector<double, std::__1::allocator<double>> const&)>:
10002a00c:     	ldp	x13, x8, [x0]
10002a010:     	cmp	x13, x8
10002a014:     	b.eq	0x10002a034 <benchmark::StatisticsMean(std::__1::vector<double, std::__1::allocator<double>> const&)+0x28>
10002a018:     	sub	x9, x8, x13
10002a01c:     	sub	x10, x9, #8
10002a020:     	cmp	x10, #24
10002a024:     	b.hs	0x10002a03c <benchmark::StatisticsMean(std::__1::vector<double, std::__1::allocator<double>> const&)+0x30>
10002a028:     	movi	d0, #0000000000000000
10002a02c:     	mov	x10, x13
10002a030:     	b	0x10002a080 <benchmark::StatisticsMean(std::__1::vector<double, std::__1::allocator<double>> const&)+0x74>
10002a034:     	movi	d0, #0000000000000000
10002a038:     	ret
10002a03c:     	lsr	x10, x10, #3
10002a040:     	add	x11, x10, #1
10002a044:     	and	x12, x11, #0x3ffffffffffffffc
10002a048:     	add	x10, x13, x12, lsl #3
10002a04c:     	add	x13, x13, #16
10002a050:     	movi	d0, #0000000000000000
10002a054:     	mov	x14, x12
10002a058:     	ldp	d1, d2, [x13, #-16]
10002a05c:     	ldp	d3, d4, [x13], #32
10002a060:     	fadd	d0, d0, d1
10002a064:     	fadd	d0, d0, d2
10002a068:     	fadd	d0, d0, d3
10002a06c:     	fadd	d0, d0, d4
10002a070:     	subs	x14, x14, #4
10002a074:     	b.ne	0x10002a058 <benchmark::StatisticsMean(std::__1::vector<double, std::__1::allocator<double>> const&)+0x4c>
10002a078:     	cmp	x11, x12
10002a07c:     	b.eq	0x10002a090 <benchmark::StatisticsMean(std::__1::vector<double, std::__1::allocator<double>> const&)+0x84>
10002a080:     	ldr	d1, [x10], #8
10002a084:     	fadd	d0, d0, d1
10002a088:     	cmp	x10, x8
10002a08c:     	b.ne	0x10002a080 <benchmark::StatisticsMean(std::__1::vector<double, std::__1::allocator<double>> const&)+0x74>
10002a090:     	asr	x8, x9, #3
10002a094:     	ucvtf	d1, x8
10002a098:     	fmov	d2, #1.00000000
10002a09c:     	fdiv	d1, d2, d1
10002a0a0:     	fmul	d0, d1, d0
10002a0a4:     	ret

000000010002a0a8 <benchmark::StatisticsMedian(std::__1::vector<double, std::__1::allocator<double>> const&)>:
10002a0a8:     	sub	sp, sp, #112
10002a0ac:     	stp	d9, d8, [sp, #32]
10002a0b0:     	stp	x24, x23, [sp, #48]
10002a0b4:     	stp	x22, x21, [sp, #64]
10002a0b8:     	stp	x20, x19, [sp, #80]
10002a0bc:     	stp	x29, x30, [sp, #96]
10002a0c0:     	add	x29, sp, #96
10002a0c4:     	ldp	x11, x8, [x0]
10002a0c8:     	mov	x20, x11
10002a0cc:     	sub	x22, x8, x11
10002a0d0:     	asr	x24, x22, #3
10002a0d4:     	cmp	x22, #23
10002a0d8:     	b.hi	0x10002a15c <benchmark::StatisticsMedian(std::__1::vector<double, std::__1::allocator<double>> const&)+0xb4>
10002a0dc:     	cmp	x11, x8
10002a0e0:     	b.eq	0x10002a1ec <benchmark::StatisticsMedian(std::__1::vector<double, std::__1::allocator<double>> const&)+0x144>
10002a0e4:     	sub	x9, x22, #8
10002a0e8:     	movi	d0, #0000000000000000
10002a0ec:     	cmp	x9, #24
10002a0f0:     	b.lo	0x10002a138 <benchmark::StatisticsMedian(std::__1::vector<double, std::__1::allocator<double>> const&)+0x90>
10002a0f4:     	lsr	x9, x9, #3
10002a0f8:     	add	x9, x9, #1
10002a0fc:     	and	x10, x9, #0x3ffffffffffffffc
10002a100:     	add	x20, x11, x10, lsl #3
10002a104:     	add	x11, x11, #16
10002a108:     	movi	d0, #0000000000000000
10002a10c:     	mov	x12, x10
10002a110:     	ldp	d1, d2, [x11, #-16]
10002a114:     	ldp	d3, d4, [x11], #32
10002a118:     	fadd	d0, d0, d1
10002a11c:     	fadd	d0, d0, d2
10002a120:     	fadd	d0, d0, d3
10002a124:     	fadd	d0, d0, d4
10002a128:     	subs	x12, x12, #4
10002a12c:     	b.ne	0x10002a110 <benchmark::StatisticsMedian(std::__1::vector<double, std::__1::allocator<double>> const&)+0x68>
10002a130:     	cmp	x9, x10
10002a134:     	b.eq	0x10002a148 <benchmark::StatisticsMedian(std::__1::vector<double, std::__1::allocator<double>> const&)+0xa0>
10002a138:     	ldr	d1, [x20], #8
10002a13c:     	fadd	d0, d0, d1
10002a140:     	cmp	x20, x8
10002a144:     	b.ne	0x10002a138 <benchmark::StatisticsMedian(std::__1::vector<double, std::__1::allocator<double>> const&)+0x90>
10002a148:     	ucvtf	d1, x24
10002a14c:     	fmov	d2, #1.00000000
10002a150:     	fdiv	d1, d2, d1
10002a154:     	fmul	d8, d1, d0
10002a158:     	b	0x10002a23c <benchmark::StatisticsMedian(std::__1::vector<double, std::__1::allocator<double>> const&)+0x194>
10002a15c:     	mov	x21, x0
10002a160:     	stp	xzr, xzr, [sp]
10002a164:     	str	xzr, [sp, #16]
10002a168:     	cmp	x8, x11
10002a16c:     	b.eq	0x10002a1f4 <benchmark::StatisticsMedian(std::__1::vector<double, std::__1::allocator<double>> const&)+0x14c>
10002a170:     	tbnz	x22, #63, 0x10002a25c <benchmark::StatisticsMedian(std::__1::vector<double, std::__1::allocator<double>> const&)+0x1b4>
10002a174:     	mov	x0, x22
10002a178:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10002a17c:     	mov	x19, x0
10002a180:     	add	x23, x0, x24, lsl #3
10002a184:     	mov	x1, x20
10002a188:     	mov	x2, x22
10002a18c:     	bl	0x10002f1c4 <_vsnprintf+0x10002f1c4>
10002a190:     	lsl	x8, x24, #2
10002a194:     	and	x8, x8, #0xfffffffffffffff8
10002a198:     	add	x20, x19, x8
10002a19c:     	cmp	x20, x23
10002a1a0:     	b.ne	0x10002a210 <benchmark::StatisticsMedian(std::__1::vector<double, std::__1::allocator<double>> const&)+0x168>
10002a1a4:     	tbnz	w22, #3, 0x10002a230 <benchmark::StatisticsMedian(std::__1::vector<double, std::__1::allocator<double>> const&)+0x188>
10002a1a8:     	asr	x8, x22, #1
10002a1ac:     	and	x8, x8, #0xfffffffffffffff8
10002a1b0:     	add	x8, x19, x8
10002a1b4:     	sub	x21, x8, #8
10002a1b8:     	cmp	x21, x23
10002a1bc:     	b.eq	0x10002a1d4 <benchmark::StatisticsMedian(std::__1::vector<double, std::__1::allocator<double>> const&)+0x12c>
10002a1c0:     	add	x3, sp, #24
10002a1c4:     	mov	x0, x19
10002a1c8:     	mov	x1, x21
10002a1cc:     	mov	x2, x23
10002a1d0:     	bl	0x10002bb5c <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)>
10002a1d4:     	ldr	d0, [x20]
10002a1d8:     	ldr	d1, [x21]
10002a1dc:     	fadd	d0, d0, d1
10002a1e0:     	fmov	d1, #0.50000000
10002a1e4:     	fmul	d8, d0, d1
10002a1e8:     	b	0x10002a234 <benchmark::StatisticsMedian(std::__1::vector<double, std::__1::allocator<double>> const&)+0x18c>
10002a1ec:     	movi	d8, #0000000000000000
10002a1f0:     	b	0x10002a23c <benchmark::StatisticsMedian(std::__1::vector<double, std::__1::allocator<double>> const&)+0x194>
10002a1f4:     	mov	x23, #0
10002a1f8:     	mov	x19, #0
10002a1fc:     	lsl	x8, x24, #2
10002a200:     	and	x8, x8, #0xfffffffffffffff8
10002a204:     	add	x20, x19, x8
10002a208:     	cmp	x20, x23
10002a20c:     	b.eq	0x10002a1a4 <benchmark::StatisticsMedian(std::__1::vector<double, std::__1::allocator<double>> const&)+0xfc>
10002a210:     	add	x3, sp, #24
10002a214:     	mov	x0, x19
10002a218:     	mov	x1, x20
10002a21c:     	mov	x2, x23
10002a220:     	bl	0x10002bb5c <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)>
10002a224:     	ldp	x9, x8, [x21]
10002a228:     	sub	x22, x8, x9
10002a22c:     	tbz	w22, #3, 0x10002a1a8 <benchmark::StatisticsMedian(std::__1::vector<double, std::__1::allocator<double>> const&)+0x100>
10002a230:     	ldr	d8, [x20]
10002a234:     	mov	x0, x19
10002a238:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002a23c:     	fmov	d0, d8
10002a240:     	ldp	x29, x30, [sp, #96]
10002a244:     	ldp	x20, x19, [sp, #80]
10002a248:     	ldp	x22, x21, [sp, #64]
10002a24c:     	ldp	x24, x23, [sp, #48]
10002a250:     	ldp	d9, d8, [sp, #32]
10002a254:     	add	sp, sp, #112
10002a258:     	ret
10002a25c:     	mov	x0, sp
10002a260:     	bl	0x100023ac8 <std::__1::vector<double, std::__1::allocator<double>>::__throw_length_error[abi:ue170006]() const>
10002a264:     	brk	#0x1
10002a268:     	b	0x10002a26c <benchmark::StatisticsMedian(std::__1::vector<double, std::__1::allocator<double>> const&)+0x1c4>
10002a26c:     	mov	x20, x0
10002a270:     	cbz	x19, 0x10002a290 <benchmark::StatisticsMedian(std::__1::vector<double, std::__1::allocator<double>> const&)+0x1e8>
10002a274:     	mov	x0, x19
10002a278:     	b	0x10002a28c <benchmark::StatisticsMedian(std::__1::vector<double, std::__1::allocator<double>> const&)+0x1e4>
10002a27c:     	mov	x20, x0
10002a280:     	ldr	x0, [sp]
10002a284:     	cbz	x0, 0x10002a290 <benchmark::StatisticsMedian(std::__1::vector<double, std::__1::allocator<double>> const&)+0x1e8>
10002a288:     	str	x0, [sp, #8]
10002a28c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002a290:     	mov	x0, x20
10002a294:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010002a298 <benchmark::StatisticsStdDev(std::__1::vector<double, std::__1::allocator<double>> const&)>:
10002a298:     	ldp	x10, x8, [x0]
10002a29c:     	cmp	x10, x8
10002a2a0:     	b.eq	0x10002a3cc <benchmark::StatisticsStdDev(std::__1::vector<double, std::__1::allocator<double>> const&)+0x134>
10002a2a4:     	sub	x12, x8, x10
10002a2a8:     	sub	x11, x12, #8
10002a2ac:     	lsr	x9, x11, #3
10002a2b0:     	add	x9, x9, #1
10002a2b4:     	movi	d1, #0000000000000000
10002a2b8:     	mov	x13, x10
10002a2bc:     	cmp	x11, #24
10002a2c0:     	b.lo	0x10002a300 <benchmark::StatisticsStdDev(std::__1::vector<double, std::__1::allocator<double>> const&)+0x68>
10002a2c4:     	and	x14, x9, #0x3ffffffffffffffc
10002a2c8:     	add	x13, x10, x14, lsl #3
10002a2cc:     	add	x15, x10, #16
10002a2d0:     	movi	d1, #0000000000000000
10002a2d4:     	mov	x16, x14
10002a2d8:     	ldp	d0, d2, [x15, #-16]
10002a2dc:     	ldp	d3, d4, [x15], #32
10002a2e0:     	fadd	d0, d1, d0
10002a2e4:     	fadd	d0, d0, d2
10002a2e8:     	fadd	d0, d0, d3
10002a2ec:     	fadd	d1, d0, d4
10002a2f0:     	subs	x16, x16, #4
10002a2f4:     	b.ne	0x10002a2d8 <benchmark::StatisticsStdDev(std::__1::vector<double, std::__1::allocator<double>> const&)+0x40>
10002a2f8:     	cmp	x9, x14
10002a2fc:     	b.eq	0x10002a310 <benchmark::StatisticsStdDev(std::__1::vector<double, std::__1::allocator<double>> const&)+0x78>
10002a300:     	ldr	d0, [x13], #8
10002a304:     	fadd	d1, d1, d0
10002a308:     	cmp	x13, x8
10002a30c:     	b.ne	0x10002a300 <benchmark::StatisticsStdDev(std::__1::vector<double, std::__1::allocator<double>> const&)+0x68>
10002a310:     	movi	d0, #0000000000000000
10002a314:     	cmp	x12, #8
10002a318:     	b.eq	0x10002a3c8 <benchmark::StatisticsStdDev(std::__1::vector<double, std::__1::allocator<double>> const&)+0x130>
10002a31c:     	asr	x12, x12, #3
10002a320:     	ucvtf	d0, x12
10002a324:     	fmov	d2, #1.00000000
10002a328:     	fdiv	d2, d2, d0
10002a32c:     	fmul	d1, d2, d1
10002a330:     	movi	d3, #0000000000000000
10002a334:     	cmp	x11, #24
10002a338:     	b.lo	0x10002a38c <benchmark::StatisticsStdDev(std::__1::vector<double, std::__1::allocator<double>> const&)+0xf4>
10002a33c:     	and	x11, x9, #0x3ffffffffffffffc
10002a340:     	add	x12, x10, x11, lsl #3
10002a344:     	add	x10, x10, #16
10002a348:     	movi	d3, #0000000000000000
10002a34c:     	mov	x13, x11
10002a350:     	ldp	d4, d5, [x10, #-16]
10002a354:     	ldp	d6, d7, [x10], #32
10002a358:     	fmul	d4, d4, d4
10002a35c:     	fmul	d5, d5, d5
10002a360:     	fmul	d6, d6, d6
10002a364:     	fmul	d7, d7, d7
10002a368:     	fadd	d3, d3, d4
10002a36c:     	fadd	d3, d3, d5
10002a370:     	fadd	d3, d3, d6
10002a374:     	fadd	d3, d3, d7
10002a378:     	subs	x13, x13, #4
10002a37c:     	b.ne	0x10002a350 <benchmark::StatisticsStdDev(std::__1::vector<double, std::__1::allocator<double>> const&)+0xb8>
10002a380:     	mov	x10, x12
10002a384:     	cmp	x9, x11
10002a388:     	b.eq	0x10002a39c <benchmark::StatisticsStdDev(std::__1::vector<double, std::__1::allocator<double>> const&)+0x104>
10002a38c:     	ldr	d4, [x10], #8
10002a390:     	fmadd	d3, d4, d4, d3
10002a394:     	cmp	x10, x8
10002a398:     	b.ne	0x10002a38c <benchmark::StatisticsStdDev(std::__1::vector<double, std::__1::allocator<double>> const&)+0xf4>
10002a39c:     	fmul	d2, d2, d3
10002a3a0:     	fmov	d3, #-1.00000000
10002a3a4:     	fadd	d3, d0, d3
10002a3a8:     	fdiv	d0, d0, d3
10002a3ac:     	fmul	d1, d1, d1
10002a3b0:     	fsub	d1, d2, d1
10002a3b4:     	fmul	d0, d0, d1
10002a3b8:     	fsqrt	d1, d0
10002a3bc:     	fcmp	d0, #0.0
10002a3c0:     	movi	d0, #0000000000000000
10002a3c4:     	fcsel	d0, d0, d1, mi
10002a3c8:     	ret
10002a3cc:     	movi	d0, #0000000000000000
10002a3d0:     	ret

000000010002a3d4 <benchmark::StatisticsCV(std::__1::vector<double, std::__1::allocator<double>> const&)>:
10002a3d4:     	ldp	x9, x8, [x0]
10002a3d8:     	sub	x12, x8, x9
10002a3dc:     	movi	d0, #0000000000000000
10002a3e0:     	cmp	x12, #16
10002a3e4:     	b.lo	0x10002a574 <benchmark::StatisticsCV(std::__1::vector<double, std::__1::allocator<double>> const&)+0x1a0>
10002a3e8:     	cmp	x9, x8
10002a3ec:     	b.eq	0x10002a578 <benchmark::StatisticsCV(std::__1::vector<double, std::__1::allocator<double>> const&)+0x1a4>
10002a3f0:     	asr	x13, x12, #3
10002a3f4:     	sub	x11, x12, #8
10002a3f8:     	lsr	x10, x11, #3
10002a3fc:     	add	x10, x10, #1
10002a400:     	movi	d4, #0000000000000000
10002a404:     	mov	x14, x9
10002a408:     	cmp	x11, #24
10002a40c:     	b.lo	0x10002a44c <benchmark::StatisticsCV(std::__1::vector<double, std::__1::allocator<double>> const&)+0x78>
10002a410:     	and	x15, x10, #0x3ffffffffffffffc
10002a414:     	add	x14, x9, x15, lsl #3
10002a418:     	add	x16, x9, #16
10002a41c:     	movi	d4, #0000000000000000
10002a420:     	mov	x17, x15
10002a424:     	ldp	d0, d1, [x16, #-16]
10002a428:     	ldp	d2, d3, [x16], #32
10002a42c:     	fadd	d0, d4, d0
10002a430:     	fadd	d0, d0, d1
10002a434:     	fadd	d0, d0, d2
10002a438:     	fadd	d4, d0, d3
10002a43c:     	subs	x17, x17, #4
10002a440:     	b.ne	0x10002a424 <benchmark::StatisticsCV(std::__1::vector<double, std::__1::allocator<double>> const&)+0x50>
10002a444:     	cmp	x10, x15
10002a448:     	b.eq	0x10002a45c <benchmark::StatisticsCV(std::__1::vector<double, std::__1::allocator<double>> const&)+0x88>
10002a44c:     	ldr	d0, [x14], #8
10002a450:     	fadd	d4, d4, d0
10002a454:     	cmp	x14, x8
10002a458:     	b.ne	0x10002a44c <benchmark::StatisticsCV(std::__1::vector<double, std::__1::allocator<double>> const&)+0x78>
10002a45c:     	ucvtf	d2, x13
10002a460:     	fmov	d0, #1.00000000
10002a464:     	fdiv	d0, d0, d2
10002a468:     	movi	d1, #0000000000000000
10002a46c:     	movi	d3, #0000000000000000
10002a470:     	cmp	x12, #8
10002a474:     	b.eq	0x10002a514 <benchmark::StatisticsCV(std::__1::vector<double, std::__1::allocator<double>> const&)+0x140>
10002a478:     	fmul	d3, d0, d4
10002a47c:     	movi	d4, #0000000000000000
10002a480:     	mov	x12, x9
10002a484:     	cmp	x11, #24
10002a488:     	b.lo	0x10002a4d8 <benchmark::StatisticsCV(std::__1::vector<double, std::__1::allocator<double>> const&)+0x104>
10002a48c:     	and	x13, x10, #0x3ffffffffffffffc
10002a490:     	add	x12, x9, x13, lsl #3
10002a494:     	add	x14, x9, #16
10002a498:     	movi	d4, #0000000000000000
10002a49c:     	mov	x15, x13
10002a4a0:     	ldp	d5, d6, [x14, #-16]
10002a4a4:     	ldp	d7, d16, [x14], #32
10002a4a8:     	fmul	d5, d5, d5
10002a4ac:     	fmul	d6, d6, d6
10002a4b0:     	fmul	d7, d7, d7
10002a4b4:     	fmul	d16, d16, d16
10002a4b8:     	fadd	d4, d4, d5
10002a4bc:     	fadd	d4, d4, d6
10002a4c0:     	fadd	d4, d4, d7
10002a4c4:     	fadd	d4, d4, d16
10002a4c8:     	subs	x15, x15, #4
10002a4cc:     	b.ne	0x10002a4a0 <benchmark::StatisticsCV(std::__1::vector<double, std::__1::allocator<double>> const&)+0xcc>
10002a4d0:     	cmp	x10, x13
10002a4d4:     	b.eq	0x10002a4e8 <benchmark::StatisticsCV(std::__1::vector<double, std::__1::allocator<double>> const&)+0x114>
10002a4d8:     	ldr	d5, [x12], #8
10002a4dc:     	fmadd	d4, d5, d5, d4
10002a4e0:     	cmp	x12, x8
10002a4e4:     	b.ne	0x10002a4d8 <benchmark::StatisticsCV(std::__1::vector<double, std::__1::allocator<double>> const&)+0x104>
10002a4e8:     	fmul	d4, d0, d4
10002a4ec:     	fmov	d5, #-1.00000000
10002a4f0:     	fadd	d5, d2, d5
10002a4f4:     	fdiv	d2, d2, d5
10002a4f8:     	fmul	d3, d3, d3
10002a4fc:     	fsub	d3, d4, d3
10002a500:     	fmul	d2, d2, d3
10002a504:     	fsqrt	d3, d2
10002a508:     	fcmp	d2, #0.0
10002a50c:     	movi	d2, #0000000000000000
10002a510:     	fcsel	d3, d2, d3, mi
10002a514:     	cmp	x11, #24
10002a518:     	b.lo	0x10002a55c <benchmark::StatisticsCV(std::__1::vector<double, std::__1::allocator<double>> const&)+0x188>
10002a51c:     	and	x11, x10, #0x3ffffffffffffffc
10002a520:     	add	x12, x9, x11, lsl #3
10002a524:     	add	x9, x9, #16
10002a528:     	movi	d1, #0000000000000000
10002a52c:     	mov	x13, x11
10002a530:     	ldp	d2, d4, [x9, #-16]
10002a534:     	ldp	d5, d6, [x9], #32
10002a538:     	fadd	d1, d1, d2
10002a53c:     	fadd	d1, d1, d4
10002a540:     	fadd	d1, d1, d5
10002a544:     	fadd	d1, d1, d6
10002a548:     	subs	x13, x13, #4
10002a54c:     	b.ne	0x10002a530 <benchmark::StatisticsCV(std::__1::vector<double, std::__1::allocator<double>> const&)+0x15c>
10002a550:     	mov	x9, x12
10002a554:     	cmp	x10, x11
10002a558:     	b.eq	0x10002a56c <benchmark::StatisticsCV(std::__1::vector<double, std::__1::allocator<double>> const&)+0x198>
10002a55c:     	ldr	d2, [x9], #8
10002a560:     	fadd	d1, d1, d2
10002a564:     	cmp	x9, x8
10002a568:     	b.ne	0x10002a55c <benchmark::StatisticsCV(std::__1::vector<double, std::__1::allocator<double>> const&)+0x188>
10002a56c:     	fmul	d0, d0, d1
10002a570:     	fdiv	d0, d3, d0
10002a574:     	ret
10002a578:     	mov	x8, #9221120237041090560
10002a57c:     	fmov	d0, x8
10002a580:     	ret

000000010002a584 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)>:
10002a584:     	stp	d9, d8, [sp, #-112]!
10002a588:     	stp	x28, x27, [sp, #16]
10002a58c:     	stp	x26, x25, [sp, #32]
10002a590:     	stp	x24, x23, [sp, #48]
10002a594:     	stp	x22, x21, [sp, #64]
10002a598:     	stp	x20, x19, [sp, #80]
10002a59c:     	stp	x29, x30, [sp, #96]
10002a5a0:     	add	x29, sp, #96
10002a5a4:     	sub	sp, sp, #656
10002a5a8:     	str	x8, [sp, #64]
10002a5ac:     	stp	xzr, xzr, [x8]
10002a5b0:     	str	xzr, [x8, #16]
10002a5b4:     	ldp	x22, x21, [x0]
10002a5b8:     	str	x0, [sp, #48]
10002a5bc:     	cmp	x22, x21
10002a5c0:     	b.eq	0x10002a5e0 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x5c>
10002a5c4:     	sub	x8, x21, x22
10002a5c8:     	sub	x8, x8, #448
10002a5cc:     	cmp	x8, #1344
10002a5d0:     	b.hs	0x10002a5e8 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x64>
10002a5d4:     	mov	x9, #0
10002a5d8:     	mov	x8, x22
10002a5dc:     	b	0x10002a678 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xf4>
10002a5e0:     	mov	x9, #0
10002a5e4:     	b	0x10002a690 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x10c>
10002a5e8:     	mov	x12, #0
10002a5ec:     	mov	x13, #0
10002a5f0:     	mov	x11, #0
10002a5f4:     	mov	x9, #0
10002a5f8:     	lsr	x8, x8, #6
10002a5fc:     	mov	x10, #9363
10002a600:     	movk	x10, #37449, lsl #16
10002a604:     	movk	x10, #18724, lsl #32
10002a608:     	movk	x10, #9362, lsl #48
10002a60c:     	umulh	x8, x8, x10
10002a610:     	add	x10, x8, #1
10002a614:     	and	x14, x10, #0x1fffffffffffffc
10002a618:     	mov	w8, #448
10002a61c:     	madd	x8, x14, x8, x22
10002a620:     	mov	x15, x14
10002a624:     	mov	x16, x22
10002a628:     	ldr	w17, [x16, #272]
10002a62c:     	ldr	w0, [x16, #720]
10002a630:     	ldr	w1, [x16, #1168]
10002a634:     	ldr	w2, [x16, #1616]
10002a638:     	cmp	w17, #0
10002a63c:     	cinc	x12, x12, ne
10002a640:     	cmp	w0, #0
10002a644:     	cinc	x13, x13, ne
10002a648:     	cmp	w1, #0
10002a64c:     	cinc	x11, x11, ne
10002a650:     	cmp	w2, #0
10002a654:     	cinc	x9, x9, ne
10002a658:     	add	x16, x16, #1792
10002a65c:     	subs	x15, x15, #4
10002a660:     	b.ne	0x10002a628 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xa4>
10002a664:     	add	x12, x13, x12
10002a668:     	add	x11, x11, x12
10002a66c:     	add	x9, x9, x11
10002a670:     	cmp	x10, x14
10002a674:     	b.eq	0x10002a690 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x10c>
10002a678:     	ldr	w10, [x8, #272]
10002a67c:     	cmp	w10, #0
10002a680:     	cinc	x9, x9, ne
10002a684:     	add	x8, x8, #448
10002a688:     	cmp	x8, x21
10002a68c:     	b.ne	0x10002a678 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xf4>
10002a690:     	sub	x8, x21, x22
10002a694:     	asr	x8, x8, #6
10002a698:     	mov	x10, #28087
10002a69c:     	movk	x10, #46811, lsl #16
10002a6a0:     	movk	x10, #56173, lsl #32
10002a6a4:     	movk	x10, #28086, lsl #48
10002a6a8:     	mul	x20, x8, x10
10002a6ac:     	sub	x8, x20, x9
10002a6b0:     	cmp	x8, #2
10002a6b4:     	b.lo	0x10002b7e8 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x1264>
10002a6b8:     	stp	xzr, xzr, [x29, #-144]
10002a6bc:     	stur	xzr, [x29, #-128]
10002a6c0:     	stp	xzr, xzr, [x29, #-168]
10002a6c4:     	stur	xzr, [x29, #-152]
10002a6c8:     	cmp	x22, x21
10002a6cc:     	b.eq	0x10002a704 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x180>
10002a6d0:     	lsr	x8, x20, #61
10002a6d4:     	cbnz	x8, 0x10002b848 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x12c4>
10002a6d8:     	lsl	x19, x20, #3
10002a6dc:     	mov	x0, x19
10002a6e0:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10002a6e4:     	add	x8, x0, x20, lsl #3
10002a6e8:     	stp	x0, x0, [x29, #-144]
10002a6ec:     	stur	x8, [x29, #-128]
10002a6f0:     	mov	x0, x19
10002a6f4:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10002a6f8:     	add	x8, x0, x20, lsl #3
10002a6fc:     	stp	x0, x0, [x29, #-168]
10002a700:     	stur	x8, [x29, #-152]
10002a704:     	ldr	x8, [x22, #304]
10002a708:     	str	x8, [sp, #24]
10002a70c:     	sub	x8, x29, #192
10002a710:     	add	x8, x8, #8
10002a714:     	stp	xzr, xzr, [x29, #-184]
10002a718:     	str	x8, [sp, #72]
10002a71c:     	stur	x8, [x29, #-192]
10002a720:     	cmp	x22, x21
10002a724:     	b.eq	0x10002b340 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xdbc>
10002a728:     	mov	w25, #1
10002a72c:     	ldr	x20, [sp, #64]
10002a730:     	str	x21, [sp, #32]
10002a734:     	b	0x10002a748 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x1c4>
10002a738:     	ldp	x21, x22, [sp, #32]
10002a73c:     	add	x22, x22, #448
10002a740:     	cmp	x22, x21
10002a744:     	b.eq	0x10002ad34 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x7b0>
10002a748:     	ldr	x21, [x22, #408]
10002a74c:     	str	x22, [sp, #40]
10002a750:     	add	x8, x22, #416
10002a754:     	str	x8, [sp, #56]
10002a758:     	cmp	x21, x8
10002a75c:     	b.ne	0x10002a774 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x1f0>
10002a760:     	b	0x10002a738 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x1b4>
10002a764:     	mov	x21, x8
10002a768:     	ldr	x9, [sp, #56]
10002a76c:     	cmp	x8, x9
10002a770:     	b.eq	0x10002a738 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x1b4>
10002a774:     	add	x24, x21, #32
10002a778:     	ldur	x22, [x29, #-184]
10002a77c:     	cbz	x22, 0x10002a910 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x38c>
10002a780:     	ldrb	w8, [x21, #55]
10002a784:     	sxtb	w27, w8
10002a788:     	cmp	w27, #0
10002a78c:     	ldp	x9, x10, [x21, #32]
10002a790:     	csel	x28, x10, x8, lt
10002a794:     	csel	x19, x9, x24, lt
10002a798:     	ldr	x8, [sp, #72]
10002a79c:     	mov	x10, x22
10002a7a0:     	mov	x20, x10
10002a7a4:     	mov	x26, x8
10002a7a8:     	mov	x23, x10
10002a7ac:     	ldr	x8, [x23, #32]!
10002a7b0:     	ldrb	w9, [x10, #55]
10002a7b4:     	sxtb	w10, w9
10002a7b8:     	ldr	x11, [x20, #40]
10002a7bc:     	cmp	w10, #0
10002a7c0:     	csel	x25, x11, x9, lt
10002a7c4:     	csel	x0, x8, x23, lt
10002a7c8:     	cmp	x28, x25
10002a7cc:     	csel	x2, x28, x25, lo
10002a7d0:     	mov	x1, x19
10002a7d4:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
10002a7d8:     	cmp	x25, x28
10002a7dc:     	cset	w8, lo
10002a7e0:     	cmp	w0, #0
10002a7e4:     	cset	w9, lt
10002a7e8:     	csel	w9, w8, w9, eq
10002a7ec:     	add	x8, x20, #8
10002a7f0:     	cmp	w9, #0
10002a7f4:     	csel	x10, x8, x20, ne
10002a7f8:     	csel	x8, x26, x20, ne
10002a7fc:     	ldr	x10, [x10]
10002a800:     	cbnz	x10, 0x10002a7a0 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x21c>
10002a804:     	ldr	x10, [sp, #72]
10002a808:     	cmp	x8, x10
10002a80c:     	b.eq	0x10002a864 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x2e0>
10002a810:     	add	x10, x26, #32
10002a814:     	cmp	w9, #0
10002a818:     	csel	x9, x26, x20, ne
10002a81c:     	csel	x10, x10, x23, ne
10002a820:     	ldrb	w8, [x8, #55]
10002a824:     	sxtb	w11, w8
10002a828:     	ldp	x12, x9, [x9, #32]
10002a82c:     	cmp	w11, #0
10002a830:     	csel	x20, x9, x8, lt
10002a834:     	csel	x1, x12, x10, lt
10002a838:     	cmp	x20, x28
10002a83c:     	csel	x2, x20, x28, lo
10002a840:     	mov	x0, x19
10002a844:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
10002a848:     	cmp	x28, x20
10002a84c:     	cset	w8, lo
10002a850:     	cmp	w0, #0
10002a854:     	cset	w9, lt
10002a858:     	csel	w8, w8, w9, eq
10002a85c:     	cmp	w8, #1
10002a860:     	b.ne	0x10002a928 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x3a4>
10002a864:     	ldur	q0, [x21, #56]
10002a868:     	str	q0, [sp, #80]
10002a86c:     	mov	w25, #1
10002a870:     	b	0x10002a87c <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x2f8>
10002a874:     	ldr	x22, [x26]
10002a878:     	cbz	x22, 0x10002a968 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x3e4>
10002a87c:     	mov	x26, x22
10002a880:     	mov	x8, x22
10002a884:     	ldr	x9, [x8, #32]!
10002a888:     	ldrb	w10, [x8, #23]
10002a88c:     	sxtb	w11, w10
10002a890:     	ldr	x12, [x8, #8]
10002a894:     	cmp	w11, #0
10002a898:     	csel	x20, x12, x10, lt
10002a89c:     	csel	x22, x9, x8, lt
10002a8a0:     	cmp	x20, x28
10002a8a4:     	csel	x23, x20, x28, lo
10002a8a8:     	mov	x0, x19
10002a8ac:     	mov	x1, x22
10002a8b0:     	mov	x2, x23
10002a8b4:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
10002a8b8:     	cmp	x28, x20
10002a8bc:     	cset	w8, lo
10002a8c0:     	cmp	w0, #0
10002a8c4:     	cset	w9, lt
10002a8c8:     	csel	w8, w8, w9, eq
10002a8cc:     	cmp	w8, #1
10002a8d0:     	b.eq	0x10002a874 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x2f0>
10002a8d4:     	mov	x0, x22
10002a8d8:     	mov	x1, x19
10002a8dc:     	mov	x2, x23
10002a8e0:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
10002a8e4:     	cmp	x20, x28
10002a8e8:     	cset	w8, lo
10002a8ec:     	cmp	w0, #0
10002a8f0:     	cset	w9, lt
10002a8f4:     	csel	w8, w8, w9, eq
10002a8f8:     	cmp	w8, #1
10002a8fc:     	b.ne	0x10002a9ac <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x428>
10002a900:     	ldr	x22, [x26, #8]
10002a904:     	cbnz	x22, 0x10002a87c <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x2f8>
10002a908:     	add	x28, x26, #8
10002a90c:     	b	0x10002a96c <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x3e8>
10002a910:     	ldur	q0, [x21, #56]
10002a914:     	str	q0, [sp, #80]
10002a918:     	ldrb	w27, [x21, #55]
10002a91c:     	ldr	x26, [sp, #72]
10002a920:     	mov	x28, x26
10002a924:     	b	0x10002a970 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x3ec>
10002a928:     	adrp	x8, 0x100038000 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x3dc>
10002a92c:     	add	x8, x8, #8
10002a930:     	ldaprb	w8, [x8]
10002a934:     	ldr	x20, [sp, #64]
10002a938:     	mov	w25, #1
10002a93c:     	tbnz	w8, #0, 0x10002ac94 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x710>
10002a940:     	adrp	x0, 0x100038000 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x3f4>
10002a944:     	add	x0, x0, #8
10002a948:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10002a94c:     	cbz	w0, 0x10002ac94 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x710>
10002a950:     	adrp	x8, 0x100038000 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x404>
10002a954:     	str	xzr, [x8]
10002a958:     	adrp	x0, 0x100038000 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x40c>
10002a95c:     	add	x0, x0, #8
10002a960:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10002a964:     	b	0x10002ac94 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x710>
10002a968:     	mov	x28, x26
10002a96c:     	ldr	x20, [sp, #64]
10002a970:     	mov	w0, #96
10002a974:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10002a978:     	mov	x22, x0
10002a97c:     	add	x0, x0, #32
10002a980:     	tbnz	w27, #7, 0x10002a998 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x414>
10002a984:     	ldr	q0, [x24]
10002a988:     	ldr	x8, [x24, #16]
10002a98c:     	str	x8, [x0, #16]
10002a990:     	str	q0, [x0]
10002a994:     	b	0x10002a9f4 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x470>
10002a998:     	ldp	x19, x20, [x21, #32]
10002a99c:     	cmp	x20, #22
10002a9a0:     	b.hi	0x10002a9b8 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x434>
10002a9a4:     	strb	w20, [x22, #55]
10002a9a8:     	b	0x10002a9e4 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x460>
10002a9ac:     	mov	x22, x26
10002a9b0:     	ldr	x20, [sp, #64]
10002a9b4:     	b	0x10002ab7c <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x5f8>
10002a9b8:     	mov	x8, #-17
10002a9bc:     	movk	x8, #32767, lsl #48
10002a9c0:     	cmp	x20, x8
10002a9c4:     	b.hi	0x10002b814 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x1290>
10002a9c8:     	orr	x8, x20, #0xf
10002a9cc:     	add	x23, x8, #1
10002a9d0:     	mov	x0, x23
10002a9d4:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10002a9d8:     	orr	x8, x23, #0x8000000000000000
10002a9dc:     	stp	x20, x8, [x22, #40]
10002a9e0:     	str	x0, [x22, #32]
10002a9e4:     	add	x2, x20, #1
10002a9e8:     	mov	x1, x19
10002a9ec:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
10002a9f0:     	ldr	x20, [sp, #64]
10002a9f4:     	ldr	q0, [sp, #80]
10002a9f8:     	stur	q0, [x22, #56]
10002a9fc:     	stp	xzr, xzr, [x22]
10002aa00:     	stp	xzr, xzr, [x22, #80]
10002aa04:     	str	xzr, [x22, #72]
10002aa08:     	str	x26, [x22, #16]
10002aa0c:     	str	x22, [x28]
10002aa10:     	ldur	x8, [x29, #-192]
10002aa14:     	ldr	x8, [x8]
10002aa18:     	mov	x10, x22
10002aa1c:     	cbz	x8, 0x10002aa28 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x4a4>
10002aa20:     	stur	x8, [x29, #-192]
10002aa24:     	ldr	x10, [x28]
10002aa28:     	ldur	x11, [x29, #-184]
10002aa2c:     	cmp	x10, x11
10002aa30:     	cset	w8, eq
10002aa34:     	strb	w8, [x10, #24]
10002aa38:     	b.ne	0x10002aa5c <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x4d8>
10002aa3c:     	b	0x10002ab70 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x5ec>
10002aa40:     	strb	w25, [x9, #24]
10002aa44:     	mov	x10, x8
10002aa48:     	cmp	x8, x11
10002aa4c:     	cset	w9, eq
10002aa50:     	strb	w9, [x8, #24]
10002aa54:     	strb	w25, [x12]
10002aa58:     	b.eq	0x10002ab70 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x5ec>
10002aa5c:     	ldr	x9, [x10, #16]
10002aa60:     	ldrb	w8, [x9, #24]
10002aa64:     	cbnz	w8, 0x10002ab70 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x5ec>
10002aa68:     	ldr	x8, [x9, #16]
10002aa6c:     	ldr	x12, [x8]
10002aa70:     	cmp	x12, x9
10002aa74:     	b.eq	0x10002aa88 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x504>
10002aa78:     	cbz	x12, 0x10002ab20 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x59c>
10002aa7c:     	ldrb	w13, [x12, #24]!
10002aa80:     	cbz	w13, 0x10002aa40 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x4bc>
10002aa84:     	b	0x10002ab20 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x59c>
10002aa88:     	ldr	x12, [x8, #8]
10002aa8c:     	cbz	x12, 0x10002aa98 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x514>
10002aa90:     	ldrb	w13, [x12, #24]!
10002aa94:     	cbz	w13, 0x10002aa40 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x4bc>
10002aa98:     	ldr	x11, [x9]
10002aa9c:     	cmp	x11, x10
10002aaa0:     	b.eq	0x10002ad18 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x794>
10002aaa4:     	ldr	x10, [x9, #8]
10002aaa8:     	ldr	x11, [x10]
10002aaac:     	str	x11, [x9, #8]
10002aab0:     	cbz	x11, 0x10002aabc <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x538>
10002aab4:     	str	x9, [x11, #16]
10002aab8:     	ldr	x8, [x9, #16]
10002aabc:     	str	x8, [x10, #16]
10002aac0:     	ldr	x8, [x9, #16]
10002aac4:     	ldr	x11, [x8]
10002aac8:     	cmp	x11, x9
10002aacc:     	cset	w11, ne
10002aad0:     	str	x10, [x8, w11, uxtw #3]
10002aad4:     	str	x9, [x10]
10002aad8:     	str	x10, [x9, #16]
10002aadc:     	ldr	x8, [x10, #16]
10002aae0:     	ldr	x9, [x8]
10002aae4:     	strb	w25, [x10, #24]
10002aae8:     	strb	wzr, [x8, #24]
10002aaec:     	ldr	x10, [x9, #8]
10002aaf0:     	str	x10, [x8]
10002aaf4:     	cbz	x10, 0x10002aafc <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x578>
10002aaf8:     	str	x8, [x10, #16]
10002aafc:     	ldr	x10, [x8, #16]
10002ab00:     	str	x10, [x9, #16]
10002ab04:     	ldr	x10, [x8, #16]
10002ab08:     	ldr	x11, [x10]
10002ab0c:     	cmp	x11, x8
10002ab10:     	cset	w11, ne
10002ab14:     	str	x9, [x10, w11, uxtw #3]
10002ab18:     	str	x8, [x9, #8]
10002ab1c:     	b	0x10002ab6c <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x5e8>
10002ab20:     	ldr	x11, [x9]
10002ab24:     	cmp	x11, x10
10002ab28:     	b.eq	0x10002acc4 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x740>
10002ab2c:     	mov	x10, x9
10002ab30:     	strb	w25, [x9, #24]
10002ab34:     	strb	wzr, [x8, #24]
10002ab38:     	ldr	x9, [x8, #8]
10002ab3c:     	ldr	x10, [x9]
10002ab40:     	str	x10, [x8, #8]
10002ab44:     	cbz	x10, 0x10002ab4c <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x5c8>
10002ab48:     	str	x8, [x10, #16]
10002ab4c:     	ldr	x10, [x8, #16]
10002ab50:     	str	x10, [x9, #16]
10002ab54:     	ldr	x10, [x8, #16]
10002ab58:     	ldr	x11, [x10]
10002ab5c:     	cmp	x11, x8
10002ab60:     	cset	w11, ne
10002ab64:     	str	x9, [x10, w11, uxtw #3]
10002ab68:     	str	x8, [x9]
10002ab6c:     	str	x9, [x8, #16]
10002ab70:     	ldur	x8, [x29, #-176]
10002ab74:     	add	x8, x8, #1
10002ab78:     	stur	x8, [x29, #-176]
10002ab7c:     	mov	x0, x22
10002ab80:     	ldr	x19, [x0, #72]!
10002ab84:     	ldr	x9, [sp, #48]
10002ab88:     	ldp	x9, x8, [x9]
10002ab8c:     	sub	x8, x8, x9
10002ab90:     	asr	x8, x8, #6
10002ab94:     	mov	x9, #28087
10002ab98:     	movk	x9, #46811, lsl #16
10002ab9c:     	movk	x9, #56173, lsl #32
10002aba0:     	movk	x9, #28086, lsl #48
10002aba4:     	mul	x23, x8, x9
10002aba8:     	ldr	x8, [x0, #16]
10002abac:     	sub	x8, x8, x19
10002abb0:     	cmp	x23, x8, asr #3
10002abb4:     	b.ls	0x10002ac94 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x710>
10002abb8:     	lsr	x8, x23, #61
10002abbc:     	cbnz	x8, 0x10002b80c <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x1288>
10002abc0:     	ldr	x24, [x22, #80]
10002abc4:     	lsl	x0, x23, #3
10002abc8:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10002abcc:     	subs	x10, x24, x19
10002abd0:     	and	x8, x10, #0xfffffffffffffff8
10002abd4:     	add	x8, x0, x8
10002abd8:     	mov	x9, x8
10002abdc:     	b.eq	0x10002ac7c <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x6f8>
10002abe0:     	sub	x9, x24, #8
10002abe4:     	sub	x11, x9, x19
10002abe8:     	cmp	x11, #88
10002abec:     	b.hs	0x10002abf8 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x674>
10002abf0:     	mov	x9, x8
10002abf4:     	b	0x10002ac6c <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x6e8>
10002abf8:     	and	x12, x10, #0xfffffffffffffff8
10002abfc:     	sub	x9, x9, x12
10002ac00:     	sub	x9, x9, x0
10002ac04:     	add	x12, x9, #8
10002ac08:     	mov	x9, x8
10002ac0c:     	cmp	x12, #64
10002ac10:     	b.lo	0x10002ac6c <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x6e8>
10002ac14:     	asr	x14, x10, #3
10002ac18:     	lsr	x9, x11, #3
10002ac1c:     	add	x10, x9, #1
10002ac20:     	and	x11, x10, #0x3ffffffffffffff8
10002ac24:     	lsl	x9, x11, #3
10002ac28:     	sub	x12, x24, x9
10002ac2c:     	sub	x9, x8, x9
10002ac30:     	sub	x13, x24, #32
10002ac34:     	add	x14, x0, x14, lsl #3
10002ac38:     	sub	x14, x14, #32
10002ac3c:     	mov	x15, x11
10002ac40:     	ldp	q1, q0, [x13]
10002ac44:     	ldp	q3, q2, [x13, #-32]
10002ac48:     	stp	q1, q0, [x14]
10002ac4c:     	stp	q3, q2, [x14, #-32]
10002ac50:     	sub	x13, x13, #64
10002ac54:     	sub	x14, x14, #64
10002ac58:     	sub	x15, x15, #8
10002ac5c:     	cbnz	x15, 0x10002ac40 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x6bc>
10002ac60:     	mov	x24, x12
10002ac64:     	cmp	x10, x11
10002ac68:     	b.eq	0x10002ac7c <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x6f8>
10002ac6c:     	ldr	d0, [x24, #-8]!
10002ac70:     	str	d0, [x9, #-8]!
10002ac74:     	cmp	x24, x19
10002ac78:     	b.ne	0x10002ac6c <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x6e8>
10002ac7c:     	add	x10, x0, x23, lsl #3
10002ac80:     	stp	x9, x8, [x22, #72]
10002ac84:     	str	x10, [x22, #88]
10002ac88:     	cbz	x19, 0x10002ac94 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x710>
10002ac8c:     	mov	x0, x19
10002ac90:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002ac94:     	ldr	x9, [x21, #8]
10002ac98:     	cbz	x9, 0x10002acac <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x728>
10002ac9c:     	mov	x8, x9
10002aca0:     	ldr	x9, [x9]
10002aca4:     	cbnz	x9, 0x10002ac9c <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x718>
10002aca8:     	b	0x10002a764 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x1e0>
10002acac:     	ldr	x8, [x21, #16]
10002acb0:     	ldr	x9, [x8]
10002acb4:     	cmp	x9, x21
10002acb8:     	mov	x21, x8
10002acbc:     	b.ne	0x10002acac <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x728>
10002acc0:     	b	0x10002a764 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x1e0>
10002acc4:     	ldr	x11, [x10, #8]
10002acc8:     	str	x11, [x9]
10002accc:     	cbz	x11, 0x10002acd8 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x754>
10002acd0:     	str	x9, [x11, #16]
10002acd4:     	ldr	x8, [x9, #16]
10002acd8:     	str	x8, [x10, #16]
10002acdc:     	ldr	x8, [x9, #16]
10002ace0:     	ldr	x11, [x8]
10002ace4:     	cmp	x11, x9
10002ace8:     	cset	w11, ne
10002acec:     	str	x10, [x8, w11, uxtw #3]
10002acf0:     	str	x9, [x10, #8]
10002acf4:     	str	x10, [x9, #16]
10002acf8:     	ldr	x8, [x10, #16]
10002acfc:     	strb	w25, [x10, #24]
10002ad00:     	strb	wzr, [x8, #24]
10002ad04:     	ldr	x9, [x8, #8]
10002ad08:     	ldr	x10, [x9]
10002ad0c:     	str	x10, [x8, #8]
10002ad10:     	cbnz	x10, 0x10002ab48 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x5c4>
10002ad14:     	b	0x10002ab4c <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x5c8>
10002ad18:     	mov	x10, x9
10002ad1c:     	strb	w25, [x9, #24]
10002ad20:     	strb	wzr, [x8, #24]
10002ad24:     	ldr	x10, [x9, #8]
10002ad28:     	str	x10, [x8]
10002ad2c:     	cbnz	x10, 0x10002aaf8 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x574>
10002ad30:     	b	0x10002aafc <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x578>
10002ad34:     	ldr	x8, [sp, #48]
10002ad38:     	ldp	x22, x8, [x8]
10002ad3c:     	str	x8, [sp, #40]
10002ad40:     	cmp	x22, x8
10002ad44:     	b.ne	0x10002ad68 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x7e4>
10002ad48:     	ldr	x22, [sp, #40]
10002ad4c:     	ldrsb	w8, [x22, #271]
10002ad50:     	tbz	w8, #31, 0x10002b328 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xda4>
10002ad54:     	b	0x10002b34c <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xdc8>
10002ad58:     	add	x22, x22, #448
10002ad5c:     	ldr	x8, [sp, #40]
10002ad60:     	cmp	x22, x8
10002ad64:     	b.eq	0x10002b318 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xd94>
10002ad68:     	adrp	x19, 0x100038000 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x81c>
10002ad6c:     	add	x19, x19, #8
10002ad70:     	ldaprb	w8, [x19]
10002ad74:     	tbz	w8, #0, 0x10002b2d0 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xd4c>
10002ad78:     	ldaprb	w8, [x19]
10002ad7c:     	tbz	w8, #0, 0x10002b2f0 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xd6c>
10002ad80:     	ldr	w8, [x22, #272]
10002ad84:     	cbnz	w8, 0x10002ad58 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x7d4>
10002ad88:     	ldp	x24, x8, [x29, #-136]
10002ad8c:     	cmp	x24, x8
10002ad90:     	b.hs	0x10002ada4 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x820>
10002ad94:     	ldr	d0, [x22, #344]
10002ad98:     	str	d0, [x24], #8
10002ad9c:     	stur	x24, [x29, #-136]
10002ada0:     	b	0x10002aec8 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x944>
10002ada4:     	ldur	x19, [x29, #-144]
10002ada8:     	sub	x25, x24, x19
10002adac:     	asr	x23, x25, #3
10002adb0:     	add	x9, x23, #1
10002adb4:     	lsr	x10, x9, #61
10002adb8:     	cbnz	x10, 0x10002b834 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x12b0>
10002adbc:     	sub	x8, x8, x19
10002adc0:     	asr	x10, x8, #2
10002adc4:     	cmp	x10, x9
10002adc8:     	csel	x9, x10, x9, hi
10002adcc:     	mov	x10, #9223372036854775800
10002add0:     	cmp	x8, x10
10002add4:     	mov	x8, #2305843009213693951
10002add8:     	csel	x21, x9, x8, lo
10002addc:     	cbz	x21, 0x10002ae0c <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x888>
10002ade0:     	lsr	x8, x21, #61
10002ade4:     	cbnz	x8, 0x10002b82c <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x12a8>
10002ade8:     	lsl	x0, x21, #3
10002adec:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10002adf0:     	add	x8, x0, x23, lsl #3
10002adf4:     	ldr	d0, [x22, #344]
10002adf8:     	mov	x9, x8
10002adfc:     	str	d0, [x9], #8
10002ae00:     	cmp	x24, x19
10002ae04:     	b.ne	0x10002ae28 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x8a4>
10002ae08:     	b	0x10002aeb0 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x92c>
10002ae0c:     	mov	x0, #0
10002ae10:     	add	x8, x0, x23, lsl #3
10002ae14:     	ldr	d0, [x22, #344]
10002ae18:     	mov	x9, x8
10002ae1c:     	str	d0, [x9], #8
10002ae20:     	cmp	x24, x19
10002ae24:     	b.eq	0x10002aeb0 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x92c>
10002ae28:     	sub	x11, x24, #8
10002ae2c:     	sub	x10, x11, x19
10002ae30:     	cmp	x10, #88
10002ae34:     	b.lo	0x10002aea0 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x91c>
10002ae38:     	add	x12, x0, x25
10002ae3c:     	sub	x11, x11, x12
10002ae40:     	add	x11, x11, #8
10002ae44:     	cmp	x11, #64
10002ae48:     	b.lo	0x10002aea0 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x91c>
10002ae4c:     	lsr	x10, x10, #3
10002ae50:     	add	x10, x10, #1
10002ae54:     	and	x11, x10, #0x3ffffffffffffff8
10002ae58:     	lsl	x13, x11, #3
10002ae5c:     	sub	x12, x24, x13
10002ae60:     	sub	x8, x8, x13
10002ae64:     	sub	x13, x24, #32
10002ae68:     	add	x14, x0, x23, lsl #3
10002ae6c:     	sub	x14, x14, #32
10002ae70:     	mov	x15, x11
10002ae74:     	ldp	q1, q0, [x13]
10002ae78:     	ldp	q3, q2, [x13, #-32]
10002ae7c:     	stp	q1, q0, [x14]
10002ae80:     	stp	q3, q2, [x14, #-32]
10002ae84:     	sub	x13, x13, #64
10002ae88:     	sub	x14, x14, #64
10002ae8c:     	sub	x15, x15, #8
10002ae90:     	cbnz	x15, 0x10002ae74 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x8f0>
10002ae94:     	mov	x24, x12
10002ae98:     	cmp	x10, x11
10002ae9c:     	b.eq	0x10002aeb0 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x92c>
10002aea0:     	ldr	d0, [x24, #-8]!
10002aea4:     	str	d0, [x8, #-8]!
10002aea8:     	cmp	x24, x19
10002aeac:     	b.ne	0x10002aea0 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x91c>
10002aeb0:     	add	x10, x0, x21, lsl #3
10002aeb4:     	stp	x8, x9, [x29, #-144]
10002aeb8:     	stur	x10, [x29, #-128]
10002aebc:     	cbz	x19, 0x10002aec8 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x944>
10002aec0:     	mov	x0, x19
10002aec4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002aec8:     	ldp	x24, x8, [x29, #-160]
10002aecc:     	cmp	x24, x8
10002aed0:     	b.hs	0x10002aee4 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x960>
10002aed4:     	ldr	d0, [x22, #352]
10002aed8:     	str	d0, [x24], #8
10002aedc:     	stur	x24, [x29, #-160]
10002aee0:     	b	0x10002b008 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xa84>
10002aee4:     	ldur	x19, [x29, #-168]
10002aee8:     	sub	x25, x24, x19
10002aeec:     	asr	x23, x25, #3
10002aef0:     	add	x9, x23, #1
10002aef4:     	lsr	x10, x9, #61
10002aef8:     	cbnz	x10, 0x10002b83c <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x12b8>
10002aefc:     	sub	x8, x8, x19
10002af00:     	asr	x10, x8, #2
10002af04:     	cmp	x10, x9
10002af08:     	csel	x9, x10, x9, hi
10002af0c:     	mov	x10, #9223372036854775800
10002af10:     	cmp	x8, x10
10002af14:     	mov	x8, #2305843009213693951
10002af18:     	csel	x21, x9, x8, lo
10002af1c:     	cbz	x21, 0x10002af4c <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x9c8>
10002af20:     	lsr	x8, x21, #61
10002af24:     	cbnz	x8, 0x10002b82c <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x12a8>
10002af28:     	lsl	x0, x21, #3
10002af2c:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10002af30:     	add	x8, x0, x23, lsl #3
10002af34:     	ldr	d0, [x22, #352]
10002af38:     	mov	x9, x8
10002af3c:     	str	d0, [x9], #8
10002af40:     	cmp	x24, x19
10002af44:     	b.ne	0x10002af68 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x9e4>
10002af48:     	b	0x10002aff0 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xa6c>
10002af4c:     	mov	x0, #0
10002af50:     	add	x8, x0, x23, lsl #3
10002af54:     	ldr	d0, [x22, #352]
10002af58:     	mov	x9, x8
10002af5c:     	str	d0, [x9], #8
10002af60:     	cmp	x24, x19
10002af64:     	b.eq	0x10002aff0 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xa6c>
10002af68:     	sub	x11, x24, #8
10002af6c:     	sub	x10, x11, x19
10002af70:     	cmp	x10, #88
10002af74:     	b.lo	0x10002afe0 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xa5c>
10002af78:     	add	x12, x0, x25
10002af7c:     	sub	x11, x11, x12
10002af80:     	add	x11, x11, #8
10002af84:     	cmp	x11, #64
10002af88:     	b.lo	0x10002afe0 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xa5c>
10002af8c:     	lsr	x10, x10, #3
10002af90:     	add	x10, x10, #1
10002af94:     	and	x11, x10, #0x3ffffffffffffff8
10002af98:     	lsl	x13, x11, #3
10002af9c:     	sub	x12, x24, x13
10002afa0:     	sub	x8, x8, x13
10002afa4:     	sub	x13, x24, #32
10002afa8:     	add	x14, x0, x23, lsl #3
10002afac:     	sub	x14, x14, #32
10002afb0:     	mov	x15, x11
10002afb4:     	ldp	q1, q0, [x13]
10002afb8:     	ldp	q3, q2, [x13, #-32]
10002afbc:     	stp	q1, q0, [x14]
10002afc0:     	stp	q3, q2, [x14, #-32]
10002afc4:     	sub	x13, x13, #64
10002afc8:     	sub	x14, x14, #64
10002afcc:     	sub	x15, x15, #8
10002afd0:     	cbnz	x15, 0x10002afb4 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xa30>
10002afd4:     	mov	x24, x12
10002afd8:     	cmp	x10, x11
10002afdc:     	b.eq	0x10002aff0 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xa6c>
10002afe0:     	ldr	d0, [x24, #-8]!
10002afe4:     	str	d0, [x8, #-8]!
10002afe8:     	cmp	x24, x19
10002afec:     	b.ne	0x10002afe0 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xa5c>
10002aff0:     	add	x10, x0, x21, lsl #3
10002aff4:     	stp	x8, x9, [x29, #-168]
10002aff8:     	stur	x10, [x29, #-152]
10002affc:     	cbz	x19, 0x10002b008 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xa84>
10002b000:     	mov	x0, x19
10002b004:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002b008:     	ldr	x25, [x22, #408]
10002b00c:     	add	x21, x22, #416
10002b010:     	cmp	x25, x21
10002b014:     	b.ne	0x10002b028 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xaa4>
10002b018:     	b	0x10002ad58 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x7d4>
10002b01c:     	mov	x25, x8
10002b020:     	cmp	x8, x21
10002b024:     	b.eq	0x10002ad58 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x7d4>
10002b028:     	ldur	x8, [x29, #-184]
10002b02c:     	cbz	x8, 0x10002b118 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xb94>
10002b030:     	mov	x9, x25
10002b034:     	ldr	x10, [x9, #32]!
10002b038:     	ldrb	w11, [x9, #23]
10002b03c:     	sxtb	w12, w11
10002b040:     	ldr	x13, [x9, #8]
10002b044:     	cmp	w12, #0
10002b048:     	csel	x24, x13, x11, lt
10002b04c:     	csel	x19, x10, x9, lt
10002b050:     	ldr	x27, [sp, #72]
10002b054:     	mov	x23, x8
10002b058:     	mov	x26, x27
10002b05c:     	mov	x20, x8
10002b060:     	ldr	x8, [x20, #32]!
10002b064:     	ldrb	w9, [x23, #55]
10002b068:     	sxtb	w10, w9
10002b06c:     	ldr	x11, [x23, #40]
10002b070:     	cmp	w10, #0
10002b074:     	csel	x27, x11, x9, lt
10002b078:     	csel	x0, x8, x20, lt
10002b07c:     	cmp	x24, x27
10002b080:     	csel	x2, x24, x27, lo
10002b084:     	mov	x1, x19
10002b088:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
10002b08c:     	cmp	x27, x24
10002b090:     	cset	w8, lo
10002b094:     	cmp	w0, #0
10002b098:     	cset	w9, lt
10002b09c:     	csel	w9, w8, w9, eq
10002b0a0:     	add	x8, x23, #8
10002b0a4:     	cmp	w9, #0
10002b0a8:     	csel	x8, x8, x23, ne
10002b0ac:     	csel	x27, x26, x23, ne
10002b0b0:     	ldr	x8, [x8]
10002b0b4:     	cbnz	x8, 0x10002b054 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xad0>
10002b0b8:     	ldr	x8, [sp, #72]
10002b0bc:     	cmp	x27, x8
10002b0c0:     	b.eq	0x10002b118 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xb94>
10002b0c4:     	add	x8, x26, #32
10002b0c8:     	cmp	w9, #0
10002b0cc:     	csel	x9, x26, x23, ne
10002b0d0:     	csel	x8, x8, x20, ne
10002b0d4:     	ldrb	w10, [x27, #55]
10002b0d8:     	sxtb	w11, w10
10002b0dc:     	ldp	x12, x9, [x9, #32]
10002b0e0:     	cmp	w11, #0
10002b0e4:     	csel	x20, x9, x10, lt
10002b0e8:     	csel	x1, x12, x8, lt
10002b0ec:     	cmp	x20, x24
10002b0f0:     	csel	x2, x20, x24, lo
10002b0f4:     	mov	x0, x19
10002b0f8:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
10002b0fc:     	cmp	x24, x20
10002b100:     	cset	w8, lo
10002b104:     	cmp	w0, #0
10002b108:     	cset	w9, lt
10002b10c:     	csel	w8, w8, w9, eq
10002b110:     	cmp	w8, #1
10002b114:     	b.ne	0x10002b11c <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xb98>
10002b118:     	ldr	x27, [sp, #72]
10002b11c:     	adrp	x8, 0x100038000 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xbcc>
10002b120:     	add	x8, x8, #8
10002b124:     	ldaprb	w8, [x8]
10002b128:     	tbz	w8, #0, 0x10002b2a8 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xd24>
10002b12c:     	ldp	x26, x8, [x27, #80]
10002b130:     	cmp	x26, x8
10002b134:     	b.hs	0x10002b14c <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xbc8>
10002b138:     	ldr	d0, [x25, #56]
10002b13c:     	str	d0, [x26], #8
10002b140:     	str	x26, [x27, #80]
10002b144:     	ldr	x20, [sp, #64]
10002b148:     	b	0x10002b278 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xcf4>
10002b14c:     	add	x0, x27, #72
10002b150:     	ldr	x19, [x0]
10002b154:     	sub	x28, x26, x19
10002b158:     	asr	x23, x28, #3
10002b15c:     	add	x9, x23, #1
10002b160:     	lsr	x10, x9, #61
10002b164:     	cbnz	x10, 0x10002b81c <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x1298>
10002b168:     	sub	x8, x8, x19
10002b16c:     	asr	x10, x8, #2
10002b170:     	cmp	x10, x9
10002b174:     	csel	x9, x10, x9, hi
10002b178:     	mov	x10, #9223372036854775800
10002b17c:     	cmp	x8, x10
10002b180:     	mov	x8, #2305843009213693951
10002b184:     	csel	x24, x9, x8, lo
10002b188:     	ldr	x20, [sp, #64]
10002b18c:     	cbz	x24, 0x10002b1bc <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xc38>
10002b190:     	lsr	x8, x24, #61
10002b194:     	cbnz	x8, 0x10002b824 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x12a0>
10002b198:     	lsl	x0, x24, #3
10002b19c:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10002b1a0:     	add	x8, x0, x23, lsl #3
10002b1a4:     	ldr	d0, [x25, #56]
10002b1a8:     	mov	x9, x8
10002b1ac:     	str	d0, [x9], #8
10002b1b0:     	cmp	x26, x19
10002b1b4:     	b.ne	0x10002b1d8 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xc54>
10002b1b8:     	b	0x10002b260 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xcdc>
10002b1bc:     	mov	x0, #0
10002b1c0:     	add	x8, x0, x23, lsl #3
10002b1c4:     	ldr	d0, [x25, #56]
10002b1c8:     	mov	x9, x8
10002b1cc:     	str	d0, [x9], #8
10002b1d0:     	cmp	x26, x19
10002b1d4:     	b.eq	0x10002b260 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xcdc>
10002b1d8:     	sub	x11, x26, #8
10002b1dc:     	sub	x10, x11, x19
10002b1e0:     	cmp	x10, #88
10002b1e4:     	b.lo	0x10002b250 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xccc>
10002b1e8:     	sub	x11, x11, x0
10002b1ec:     	sub	x11, x11, x28
10002b1f0:     	add	x11, x11, #8
10002b1f4:     	cmp	x11, #64
10002b1f8:     	b.lo	0x10002b250 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xccc>
10002b1fc:     	lsr	x10, x10, #3
10002b200:     	add	x10, x10, #1
10002b204:     	and	x11, x10, #0x3ffffffffffffff8
10002b208:     	lsl	x13, x11, #3
10002b20c:     	sub	x12, x26, x13
10002b210:     	sub	x8, x8, x13
10002b214:     	sub	x13, x26, #32
10002b218:     	add	x14, x0, x23, lsl #3
10002b21c:     	sub	x14, x14, #32
10002b220:     	mov	x15, x11
10002b224:     	ldp	q1, q0, [x13]
10002b228:     	ldp	q3, q2, [x13, #-32]
10002b22c:     	stp	q1, q0, [x14]
10002b230:     	stp	q3, q2, [x14, #-32]
10002b234:     	sub	x13, x13, #64
10002b238:     	sub	x14, x14, #64
10002b23c:     	sub	x15, x15, #8
10002b240:     	cbnz	x15, 0x10002b224 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xca0>
10002b244:     	mov	x26, x12
10002b248:     	cmp	x10, x11
10002b24c:     	b.eq	0x10002b260 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xcdc>
10002b250:     	ldr	d0, [x26, #-8]!
10002b254:     	str	d0, [x8, #-8]!
10002b258:     	cmp	x26, x19
10002b25c:     	b.ne	0x10002b250 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xccc>
10002b260:     	add	x10, x0, x24, lsl #3
10002b264:     	stp	x8, x9, [x27, #72]
10002b268:     	str	x10, [x27, #88]
10002b26c:     	cbz	x19, 0x10002b278 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xcf4>
10002b270:     	mov	x0, x19
10002b274:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002b278:     	ldr	x9, [x25, #8]
10002b27c:     	cbz	x9, 0x10002b290 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xd0c>
10002b280:     	mov	x8, x9
10002b284:     	ldr	x9, [x9]
10002b288:     	cbnz	x9, 0x10002b280 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xcfc>
10002b28c:     	b	0x10002b01c <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xa98>
10002b290:     	ldr	x8, [x25, #16]
10002b294:     	ldr	x9, [x8]
10002b298:     	cmp	x9, x25
10002b29c:     	mov	x25, x8
10002b2a0:     	b.ne	0x10002b290 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xd0c>
10002b2a4:     	b	0x10002b01c <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xa98>
10002b2a8:     	adrp	x0, 0x100038000 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xd58>
10002b2ac:     	add	x0, x0, #8
10002b2b0:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10002b2b4:     	cbz	w0, 0x10002b12c <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xba8>
10002b2b8:     	adrp	x8, 0x100038000 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xd68>
10002b2bc:     	str	xzr, [x8]
10002b2c0:     	adrp	x0, 0x100038000 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xd70>
10002b2c4:     	add	x0, x0, #8
10002b2c8:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10002b2cc:     	b	0x10002b12c <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xba8>
10002b2d0:     	mov	x0, x19
10002b2d4:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10002b2d8:     	cbz	w0, 0x10002ad78 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x7f4>
10002b2dc:     	adrp	x8, 0x100038000 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xd8c>
10002b2e0:     	str	xzr, [x8]
10002b2e4:     	mov	x0, x19
10002b2e8:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10002b2ec:     	b	0x10002ad78 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x7f4>
10002b2f0:     	adrp	x0, 0x100038000 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xda0>
10002b2f4:     	add	x0, x0, #8
10002b2f8:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10002b2fc:     	cbz	w0, 0x10002ad80 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x7fc>
10002b300:     	adrp	x8, 0x100038000 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xdb0>
10002b304:     	str	xzr, [x8]
10002b308:     	adrp	x0, 0x100038000 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xdb8>
10002b30c:     	add	x0, x0, #8
10002b310:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10002b314:     	b	0x10002ad80 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x7fc>
10002b318:     	ldr	x8, [sp, #48]
10002b31c:     	ldr	x22, [x8]
10002b320:     	ldrsb	w8, [x22, #271]
10002b324:     	tbnz	w8, #31, 0x10002b34c <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xdc8>
10002b328:     	add	x8, x22, #248
10002b32c:     	ldr	q0, [x8]
10002b330:     	stur	q0, [x29, #-224]
10002b334:     	ldr	x8, [x8, #16]
10002b338:     	stur	x8, [x29, #-208]
10002b33c:     	b	0x10002b3a0 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xe1c>
10002b340:     	ldr	x20, [sp, #64]
10002b344:     	ldrsb	w8, [x22, #271]
10002b348:     	tbz	w8, #31, 0x10002b328 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xda4>
10002b34c:     	ldp	x19, x20, [x22, #248]
10002b350:     	cmp	x20, #22
10002b354:     	b.hi	0x10002b364 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xde0>
10002b358:     	sturb	w20, [x29, #-201]
10002b35c:     	sub	x0, x29, #224
10002b360:     	b	0x10002b390 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xe0c>
10002b364:     	mov	x8, #-17
10002b368:     	movk	x8, #32767, lsl #48
10002b36c:     	cmp	x20, x8
10002b370:     	b.hi	0x10002b854 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x12d0>
10002b374:     	orr	x8, x20, #0xf
10002b378:     	add	x21, x8, #1
10002b37c:     	mov	x0, x21
10002b380:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10002b384:     	orr	x8, x21, #0x8000000000000000
10002b388:     	stp	x20, x8, [x29, #-216]
10002b38c:     	stur	x0, [x29, #-224]
10002b390:     	add	x2, x20, #1
10002b394:     	mov	x1, x19
10002b398:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
10002b39c:     	ldr	x20, [sp, #64]
10002b3a0:     	ldr	x8, [sp, #48]
10002b3a4:     	ldr	x8, [x8, #8]
10002b3a8:     	sub	x8, x8, x22
10002b3ac:     	asr	x8, x8, #6
10002b3b0:     	mov	x9, #28087
10002b3b4:     	movk	x9, #46811, lsl #16
10002b3b8:     	movk	x9, #56173, lsl #32
10002b3bc:     	movk	x9, #28086, lsl #48
10002b3c0:     	mov	x11, x22
10002b3c4:     	mul	x22, x8, x9
10002b3c8:     	cmp	x22, #2
10002b3cc:     	b.lo	0x10002b4c0 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xf3c>
10002b3d0:     	ldurb	w8, [x29, #-201]
10002b3d4:     	sxtb	w9, w8
10002b3d8:     	cmp	w9, #0
10002b3dc:     	ldp	x10, x9, [x29, #-224]
10002b3e0:     	csel	x19, x9, x8, lt
10002b3e4:     	sub	x8, x29, #224
10002b3e8:     	csel	x21, x10, x8, lt
10002b3ec:     	mov	x26, x11
10002b3f0:     	add	x23, x11, #248
10002b3f4:     	mov	w24, #1
10002b3f8:     	mov	w25, #448
10002b3fc:     	b	0x10002b420 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xe9c>
10002b400:     	ldr	x0, [x8]
10002b404:     	mov	x1, x21
10002b408:     	mov	x2, x19
10002b40c:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
10002b410:     	cbnz	w0, 0x10002b470 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xeec>
10002b414:     	add	x24, x24, #1
10002b418:     	cmp	x24, x22
10002b41c:     	b.eq	0x10002b4a8 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xf24>
10002b420:     	madd	x8, x24, x25, x23
10002b424:     	ldrb	w9, [x8, #23]
10002b428:     	sxtb	w10, w9
10002b42c:     	ldr	x11, [x8, #8]
10002b430:     	cmp	w10, #0
10002b434:     	csel	x10, x11, x9, lt
10002b438:     	cmp	x10, x19
10002b43c:     	b.ne	0x10002b470 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xeec>
10002b440:     	tbnz	w9, #7, 0x10002b400 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xe7c>
10002b444:     	cbz	x19, 0x10002b414 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xe90>
10002b448:     	sub	x9, x9, #1
10002b44c:     	mov	x10, x21
10002b450:     	ldrb	w11, [x8], #1
10002b454:     	ldrb	w12, [x10], #1
10002b458:     	cmp	w11, w12
10002b45c:     	ccmp	x9, #0, #4, eq
10002b460:     	sub	x9, x9, #1
10002b464:     	b.ne	0x10002b450 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xecc>
10002b468:     	cmp	w11, w12
10002b46c:     	b.eq	0x10002b414 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xe90>
10002b470:     	adrp	x1, 0x100031000 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xf04>
10002b474:     	add	x1, x1, #1905
10002b478:     	sub	x0, x29, #224
10002b47c:     	bl	0x10002ed44 <_vsnprintf+0x10002ed44>
10002b480:     	ldr	x9, [sp, #48]
10002b484:     	ldp	x9, x8, [x9]
10002b488:     	mov	x26, x9
10002b48c:     	sub	x8, x8, x9
10002b490:     	asr	x8, x8, #6
10002b494:     	mov	x9, #28087
10002b498:     	movk	x9, #46811, lsl #16
10002b49c:     	movk	x9, #56173, lsl #32
10002b4a0:     	movk	x9, #28086, lsl #48
10002b4a4:     	mul	x22, x8, x9
10002b4a8:     	ldr	x8, [x26, #392]
10002b4ac:     	ldp	x21, x8, [x8]
10002b4b0:     	str	x8, [sp, #56]
10002b4b4:     	cmp	x21, x8
10002b4b8:     	b.ne	0x10002b4d8 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xf54>
10002b4bc:     	b	0x10002b7b0 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x122c>
10002b4c0:     	mov	x26, x11
10002b4c4:     	ldr	x8, [x11, #392]
10002b4c8:     	ldp	x21, x8, [x8]
10002b4cc:     	str	x8, [sp, #56]
10002b4d0:     	cmp	x21, x8
10002b4d4:     	b.eq	0x10002b7b0 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x122c>
10002b4d8:     	ucvtf	d0, x22
10002b4dc:     	ldr	x8, [sp, #24]
10002b4e0:     	scvtf	d1, x8
10002b4e4:     	add	x8, sp, #80
10002b4e8:     	add	x10, x8, #24
10002b4ec:     	add	x9, x8, #48
10002b4f0:     	stp	x9, x10, [sp, #32]
10002b4f4:     	add	x10, x8, #72
10002b4f8:     	add	x9, x8, #96
10002b4fc:     	stp	x9, x10, [sp, #16]
10002b500:     	add	x10, x8, #120
10002b504:     	add	x9, x8, #144
10002b508:     	stp	x9, x10, [sp]
10002b50c:     	add	x28, x8, #168
10002b510:     	fdiv	d9, d0, d1
10002b514:     	add	x19, x8, #216
10002b518:     	add	x22, x8, #248
10002b51c:     	add	x23, x8, #408
10002b520:     	adrp	x24, 0x100033000 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xfbc>
10002b524:     	add	x24, x24, #888
10002b528:     	b	0x10002b554 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xfd0>
10002b52c:     	ldr	x0, [sp, #328]
10002b530:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002b534:     	ldrsb	w8, [sp, #319]
10002b538:     	tbnz	w8, #31, 0x10002b790 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x120c>
10002b53c:     	add	x0, sp, #80
10002b540:     	bl	0x1000090c8 <benchmark::BenchmarkName::~BenchmarkName()>
10002b544:     	add	x21, x21, #40
10002b548:     	ldr	x8, [sp, #56]
10002b54c:     	cmp	x21, x8
10002b550:     	b.eq	0x10002b7b0 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x122c>
10002b554:     	add	x0, sp, #80
10002b558:     	bl	0x10001f994 <benchmark::BenchmarkReporter::Run::Run()>
10002b55c:     	ldr	x8, [sp, #48]
10002b560:     	ldr	x25, [x8]
10002b564:     	add	x0, sp, #80
10002b568:     	mov	x1, x25
10002b56c:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
10002b570:     	add	x1, x25, #24
10002b574:     	ldr	x0, [sp, #40]
10002b578:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
10002b57c:     	add	x1, x25, #48
10002b580:     	ldr	x0, [sp, #32]
10002b584:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
10002b588:     	add	x1, x25, #72
10002b58c:     	ldr	x0, [sp, #24]
10002b590:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
10002b594:     	add	x1, x25, #96
10002b598:     	ldr	x0, [sp, #16]
10002b59c:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
10002b5a0:     	add	x1, x25, #120
10002b5a4:     	ldr	x0, [sp, #8]
10002b5a8:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
10002b5ac:     	add	x1, x25, #144
10002b5b0:     	ldr	x0, [sp]
10002b5b4:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
10002b5b8:     	add	x1, x25, #168
10002b5bc:     	mov	x0, x28
10002b5c0:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
10002b5c4:     	ldr	x8, [sp, #48]
10002b5c8:     	ldr	x8, [x8]
10002b5cc:     	ldr	q0, [x8, #192]
10002b5d0:     	str	q0, [sp, #272]
10002b5d4:     	mov	w9, #1
10002b5d8:     	str	w9, [sp, #288]
10002b5dc:     	ldr	x9, [x8, #312]
10002b5e0:     	ldr	x10, [x8, #328]
10002b5e4:     	str	x9, [sp, #392]
10002b5e8:     	mov	x8, #-1
10002b5ec:     	stp	x8, x10, [sp, #400]
10002b5f0:     	mov	x0, x19
10002b5f4:     	mov	x1, x21
10002b5f8:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
10002b5fc:     	ldr	w8, [x21, #32]
10002b600:     	str	w8, [sp, #320]
10002b604:     	sub	x1, x29, #224
10002b608:     	mov	x0, x22
10002b60c:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
10002b610:     	ldr	x9, [sp, #48]
10002b614:     	ldp	x9, x8, [x9]
10002b618:     	sub	x8, x8, x9
10002b61c:     	asr	x8, x8, #6
10002b620:     	mov	x9, #28087
10002b624:     	movk	x9, #46811, lsl #16
10002b628:     	movk	x9, #56173, lsl #32
10002b62c:     	movk	x9, #28086, lsl #48
10002b630:     	mul	x8, x8, x9
10002b634:     	str	x8, [sp, #384]
10002b638:     	ldr	x8, [x21, #24]
10002b63c:     	sub	x0, x29, #144
10002b640:     	blr	x8
10002b644:     	str	d0, [sp, #424]
10002b648:     	ldr	x8, [x21, #24]
10002b64c:     	sub	x0, x29, #168
10002b650:     	blr	x8
10002b654:     	str	d0, [sp, #432]
10002b658:     	ldr	w8, [sp, #320]
10002b65c:     	cbnz	w8, 0x10002b670 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x10ec>
10002b660:     	ldr	d1, [sp, #424]
10002b664:     	fmul	d1, d9, d1
10002b668:     	fmul	d0, d9, d0
10002b66c:     	stp	d1, d0, [sp, #424]
10002b670:     	ldr	x8, [sp, #48]
10002b674:     	ldr	x8, [x8]
10002b678:     	ldr	w8, [x8, #336]
10002b67c:     	str	w8, [sp, #416]
10002b680:     	ldur	x26, [x29, #-192]
10002b684:     	ldr	x8, [sp, #72]
10002b688:     	cmp	x26, x8
10002b68c:     	b.ne	0x10002b6c4 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x1140>
10002b690:     	ldp	x25, x8, [x20, #8]
10002b694:     	cmp	x25, x8
10002b698:     	b.eq	0x10002b74c <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x11c8>
10002b69c:     	add	x1, sp, #80
10002b6a0:     	mov	x0, x25
10002b6a4:     	bl	0x1000081f0 <benchmark::BenchmarkReporter::Run::Run(benchmark::BenchmarkReporter::Run const&)>
10002b6a8:     	add	x8, x25, #448
10002b6ac:     	str	x8, [x20, #8]
10002b6b0:     	b	0x10002b758 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x11d4>
10002b6b4:     	mov	x26, x8
10002b6b8:     	ldp	x20, x9, [sp, #64]
10002b6bc:     	cmp	x8, x9
10002b6c0:     	b.eq	0x10002b690 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x110c>
10002b6c4:     	ldr	x8, [x21, #24]
10002b6c8:     	add	x0, x26, #72
10002b6cc:     	blr	x8
10002b6d0:     	fmov	d8, d0
10002b6d4:     	add	x25, x26, #32
10002b6d8:     	sub	x0, x29, #192
10002b6dc:     	mov	x1, x25
10002b6e0:     	bl	0x10002b960 <std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>>>::operator[](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
10002b6e4:     	ldr	w20, [x0, #8]
10002b6e8:     	sub	x0, x29, #192
10002b6ec:     	mov	x1, x25
10002b6f0:     	bl	0x10002b960 <std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>>>::operator[](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
10002b6f4:     	ldr	w27, [x0, #12]
10002b6f8:     	stur	x25, [x29, #-112]
10002b6fc:     	sub	x3, x29, #112
10002b700:     	sub	x4, x29, #120
10002b704:     	mov	x0, x23
10002b708:     	mov	x1, x25
10002b70c:     	mov	x2, x24
10002b710:     	bl	0x10000a2e0 <std::__1::pair<std::__1::__tree_iterator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*, long>, bool> std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::__emplace_unique_key_args<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>, std::__1::tuple<>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&>&&, std::__1::tuple<>&&)>
10002b714:     	str	d8, [x0, #56]
10002b718:     	stp	w20, w27, [x0, #64]
10002b71c:     	ldr	x9, [x26, #8]
10002b720:     	cbz	x9, 0x10002b734 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x11b0>
10002b724:     	mov	x8, x9
10002b728:     	ldr	x9, [x9]
10002b72c:     	cbnz	x9, 0x10002b724 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x11a0>
10002b730:     	b	0x10002b6b4 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x1130>
10002b734:     	ldr	x8, [x26, #16]
10002b738:     	ldr	x9, [x8]
10002b73c:     	cmp	x9, x26
10002b740:     	mov	x26, x8
10002b744:     	b.ne	0x10002b734 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x11b0>
10002b748:     	b	0x10002b6b4 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x1130>
10002b74c:     	add	x1, sp, #80
10002b750:     	mov	x0, x20
10002b754:     	bl	0x10001fd40 <void std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__push_back_slow_path<benchmark::BenchmarkReporter::Run const&>(benchmark::BenchmarkReporter::Run const&)>
10002b758:     	ldr	x1, [sp, #496]
10002b75c:     	mov	x0, x23
10002b760:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
10002b764:     	ldrsb	w8, [sp, #383]
10002b768:     	tbnz	w8, #31, 0x10002b778 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x11f4>
10002b76c:     	ldrsb	w8, [sp, #351]
10002b770:     	tbz	w8, #31, 0x10002b788 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x1204>
10002b774:     	b	0x10002b52c <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xfa8>
10002b778:     	ldr	x0, [sp, #360]
10002b77c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002b780:     	ldrsb	w8, [sp, #351]
10002b784:     	tbnz	w8, #31, 0x10002b52c <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xfa8>
10002b788:     	ldrsb	w8, [sp, #319]
10002b78c:     	tbz	w8, #31, 0x10002b53c <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xfb8>
10002b790:     	ldr	x0, [sp, #296]
10002b794:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002b798:     	add	x0, sp, #80
10002b79c:     	bl	0x1000090c8 <benchmark::BenchmarkName::~BenchmarkName()>
10002b7a0:     	add	x21, x21, #40
10002b7a4:     	ldr	x8, [sp, #56]
10002b7a8:     	cmp	x21, x8
10002b7ac:     	b.ne	0x10002b554 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0xfd0>
10002b7b0:     	ldursb	w8, [x29, #-201]
10002b7b4:     	tbz	w8, #31, 0x10002b7c0 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x123c>
10002b7b8:     	ldur	x0, [x29, #-224]
10002b7bc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002b7c0:     	ldur	x0, [x29, #-184]
10002b7c4:     	bl	0x10002bf10 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>, void*>*)>
10002b7c8:     	ldur	x0, [x29, #-168]
10002b7cc:     	cbz	x0, 0x10002b7d8 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x1254>
10002b7d0:     	stur	x0, [x29, #-160]
10002b7d4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002b7d8:     	ldur	x0, [x29, #-144]
10002b7dc:     	cbz	x0, 0x10002b7e8 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x1264>
10002b7e0:     	stur	x0, [x29, #-136]
10002b7e4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002b7e8:     	add	sp, sp, #656
10002b7ec:     	ldp	x29, x30, [sp, #96]
10002b7f0:     	ldp	x20, x19, [sp, #80]
10002b7f4:     	ldp	x22, x21, [sp, #64]
10002b7f8:     	ldp	x24, x23, [sp, #48]
10002b7fc:     	ldp	x26, x25, [sp, #32]
10002b800:     	ldp	x28, x27, [sp, #16]
10002b804:     	ldp	d9, d8, [sp], #112
10002b808:     	ret
10002b80c:     	bl	0x100023ac8 <std::__1::vector<double, std::__1::allocator<double>>::__throw_length_error[abi:ue170006]() const>
10002b810:     	b	0x10002b85c <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x12d8>
10002b814:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
10002b818:     	b	0x10002b85c <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x12d8>
10002b81c:     	bl	0x100023ac8 <std::__1::vector<double, std::__1::allocator<double>>::__throw_length_error[abi:ue170006]() const>
10002b820:     	b	0x10002b85c <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x12d8>
10002b824:     	bl	0x100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>
10002b828:     	b	0x10002b85c <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x12d8>
10002b82c:     	bl	0x100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>
10002b830:     	b	0x10002b85c <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x12d8>
10002b834:     	sub	x0, x29, #144
10002b838:     	b	0x10002b840 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x12bc>
10002b83c:     	sub	x0, x29, #168
10002b840:     	bl	0x100023ac8 <std::__1::vector<double, std::__1::allocator<double>>::__throw_length_error[abi:ue170006]() const>
10002b844:     	b	0x10002b85c <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x12d8>
10002b848:     	sub	x0, x29, #144
10002b84c:     	bl	0x100023ac8 <std::__1::vector<double, std::__1::allocator<double>>::__throw_length_error[abi:ue170006]() const>
10002b850:     	b	0x10002b85c <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x12d8>
10002b854:     	sub	x0, x29, #224
10002b858:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
10002b85c:     	brk	#0x1
10002b860:     	mov	x19, x0
10002b864:     	b	0x10002b8f8 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x1374>
10002b868:     	b	0x10002b8b8 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x1334>
10002b86c:     	mov	x19, x0
10002b870:     	ldr	x20, [sp, #64]
10002b874:     	b	0x10002b910 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x138c>
10002b878:     	mov	x19, x0
10002b87c:     	b	0x10002b908 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x1384>
10002b880:     	b	0x10002b8b8 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x1334>
10002b884:     	mov	x19, x0
10002b888:     	str	x25, [x20, #8]
10002b88c:     	b	0x10002b8f0 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x136c>
10002b890:     	mov	x19, x0
10002b894:     	b	0x10002b8f8 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x1374>
10002b898:     	mov	x19, x0
10002b89c:     	b	0x10002b908 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x1384>
10002b8a0:     	b	0x10002b8a4 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x1320>
10002b8a4:     	mov	x19, x0
10002b8a8:     	mov	x0, x22
10002b8ac:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002b8b0:     	ldr	x20, [sp, #64]
10002b8b4:     	b	0x10002b908 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x1384>
10002b8b8:     	mov	x19, x0
10002b8bc:     	ldr	x20, [sp, #64]
10002b8c0:     	b	0x10002b908 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x1384>
10002b8c4:     	mov	x19, x0
10002b8c8:     	b	0x10002b908 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x1384>
10002b8cc:     	mov	x19, x0
10002b8d0:     	b	0x10002b908 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x1384>
10002b8d4:     	b	0x10002b8e0 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x135c>
10002b8d8:     	mov	x19, x0
10002b8dc:     	b	0x10002b908 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x1384>
10002b8e0:     	mov	x19, x0
10002b8e4:     	b	0x10002b8f0 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x136c>
10002b8e8:     	mov	x19, x0
10002b8ec:     	ldr	x20, [sp, #64]
10002b8f0:     	add	x0, sp, #80
10002b8f4:     	bl	0x10001f8bc <benchmark::BenchmarkReporter::Run::~Run()>
10002b8f8:     	ldursb	w8, [x29, #-201]
10002b8fc:     	tbz	w8, #31, 0x10002b908 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x1384>
10002b900:     	ldur	x0, [x29, #-224]
10002b904:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002b908:     	ldur	x0, [x29, #-184]
10002b90c:     	bl	0x10002bf10 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>, void*>*)>
10002b910:     	ldur	x0, [x29, #-168]
10002b914:     	cbnz	x0, 0x10002b934 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x13b0>
10002b918:     	ldur	x0, [x29, #-144]
10002b91c:     	cbnz	x0, 0x10002b944 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x13c0>
10002b920:     	str	x20, [sp, #80]
10002b924:     	add	x0, sp, #80
10002b928:     	bl	0x100009fac <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__destroy_vector::operator()[abi:ue170006]()>
10002b92c:     	mov	x0, x19
10002b930:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
10002b934:     	stur	x0, [x29, #-160]
10002b938:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002b93c:     	ldur	x0, [x29, #-144]
10002b940:     	cbz	x0, 0x10002b920 <benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)+0x139c>
10002b944:     	stur	x0, [x29, #-136]
10002b948:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002b94c:     	str	x20, [sp, #80]
10002b950:     	add	x0, sp, #80
10002b954:     	bl	0x100009fac <std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>>::__destroy_vector::operator()[abi:ue170006]()>
10002b958:     	mov	x0, x19
10002b95c:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010002b960 <std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>>>::operator[](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>:
10002b960:     	stp	x28, x27, [sp, #-96]!
10002b964:     	stp	x26, x25, [sp, #16]
10002b968:     	stp	x24, x23, [sp, #32]
10002b96c:     	stp	x22, x21, [sp, #48]
10002b970:     	stp	x20, x19, [sp, #64]
10002b974:     	stp	x29, x30, [sp, #80]
10002b978:     	add	x29, sp, #80
10002b97c:     	mov	x21, x1
10002b980:     	mov	x19, x0
10002b984:     	mov	x23, x0
10002b988:     	ldr	x8, [x23, #8]!
10002b98c:     	ldrb	w25, [x1, #23]
10002b990:     	cbz	x8, 0x10002ba6c <std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>>>::operator[](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x10c>
10002b994:     	sxtb	w9, w25
10002b998:     	ldp	x11, x10, [x21]
10002b99c:     	cmp	w9, #0
10002b9a0:     	csel	x26, x10, x25, lt
10002b9a4:     	csel	x20, x11, x21, lt
10002b9a8:     	b	0x10002b9b8 <std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>>>::operator[](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x58>
10002b9ac:     	ldr	x8, [x24]
10002b9b0:     	mov	x23, x24
10002b9b4:     	cbz	x8, 0x10002ba44 <std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>>>::operator[](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xe4>
10002b9b8:     	mov	x24, x8
10002b9bc:     	ldr	x9, [x8, #32]!
10002b9c0:     	ldrb	w10, [x8, #23]
10002b9c4:     	sxtb	w11, w10
10002b9c8:     	ldr	x12, [x8, #8]
10002b9cc:     	cmp	w11, #0
10002b9d0:     	csel	x27, x12, x10, lt
10002b9d4:     	csel	x22, x9, x8, lt
10002b9d8:     	cmp	x27, x26
10002b9dc:     	csel	x23, x27, x26, lo
10002b9e0:     	mov	x0, x20
10002b9e4:     	mov	x1, x22
10002b9e8:     	mov	x2, x23
10002b9ec:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
10002b9f0:     	cmp	x26, x27
10002b9f4:     	cset	w8, lo
10002b9f8:     	cmp	w0, #0
10002b9fc:     	cset	w9, lt
10002ba00:     	csel	w8, w8, w9, eq
10002ba04:     	cmp	w8, #1
10002ba08:     	b.eq	0x10002b9ac <std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>>>::operator[](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x4c>
10002ba0c:     	mov	x0, x22
10002ba10:     	mov	x1, x20
10002ba14:     	mov	x2, x23
10002ba18:     	bl	0x10002f1b8 <_vsnprintf+0x10002f1b8>
10002ba1c:     	cmp	x27, x26
10002ba20:     	cset	w8, lo
10002ba24:     	cmp	w0, #0
10002ba28:     	cset	w9, lt
10002ba2c:     	csel	w8, w8, w9, eq
10002ba30:     	cmp	w8, #1
10002ba34:     	b.ne	0x10002ba98 <std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>>>::operator[](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x138>
10002ba38:     	ldr	x8, [x24, #8]
10002ba3c:     	cbnz	x8, 0x10002b9b8 <std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>>>::operator[](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x58>
10002ba40:     	add	x23, x24, #8
10002ba44:     	mov	w0, #96
10002ba48:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10002ba4c:     	mov	x20, x0
10002ba50:     	add	x0, x0, #32
10002ba54:     	tbnz	w25, #7, 0x10002ba84 <std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>>>::operator[](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x124>
10002ba58:     	ldr	q0, [x21]
10002ba5c:     	str	q0, [x0]
10002ba60:     	ldr	x8, [x21, #16]
10002ba64:     	str	x8, [x0, #16]
10002ba68:     	b	0x10002bad4 <std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>>>::operator[](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x174>
10002ba6c:     	mov	x24, x23
10002ba70:     	mov	w0, #96
10002ba74:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10002ba78:     	mov	x20, x0
10002ba7c:     	add	x0, x0, #32
10002ba80:     	tbz	w25, #7, 0x10002ba58 <std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>>>::operator[](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xf8>
10002ba84:     	ldp	x22, x25, [x21]
10002ba88:     	cmp	x25, #22
10002ba8c:     	b.hi	0x10002baa0 <std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>>>::operator[](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x140>
10002ba90:     	strb	w25, [x20, #55]
10002ba94:     	b	0x10002bac8 <std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>>>::operator[](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x168>
10002ba98:     	mov	x20, x24
10002ba9c:     	b	0x10002bb20 <std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>>>::operator[](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x1c0>
10002baa0:     	mov	x8, #9223372036854775792
10002baa4:     	cmp	x25, x8
10002baa8:     	b.hs	0x10002bb40 <std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>>>::operator[](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x1e0>
10002baac:     	orr	x8, x25, #0xf
10002bab0:     	add	x21, x8, #1
10002bab4:     	mov	x0, x21
10002bab8:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10002babc:     	orr	x8, x21, #0x8000000000000000
10002bac0:     	stp	x25, x8, [x20, #40]
10002bac4:     	str	x0, [x20, #32]
10002bac8:     	add	x2, x25, #1
10002bacc:     	mov	x1, x22
10002bad0:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
10002bad4:     	stp	xzr, xzr, [x20, #56]
10002bad8:     	mov	w8, #1000
10002badc:     	str	w8, [x20, #68]
10002bae0:     	stp	xzr, xzr, [x20, #80]
10002bae4:     	str	xzr, [x20, #72]
10002bae8:     	stp	xzr, xzr, [x20]
10002baec:     	str	x24, [x20, #16]
10002baf0:     	str	x20, [x23]
10002baf4:     	ldr	x8, [x19]
10002baf8:     	ldr	x8, [x8]
10002bafc:     	mov	x1, x20
10002bb00:     	cbz	x8, 0x10002bb0c <std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>>>::operator[](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x1ac>
10002bb04:     	str	x8, [x19]
10002bb08:     	ldr	x1, [x23]
10002bb0c:     	ldr	x0, [x19, #8]
10002bb10:     	bl	0x100006fe0 <void std::__1::__tree_balance_after_insert[abi:ue170006]<std::__1::__tree_node_base<void*>*>(std::__1::__tree_node_base<void*>*, std::__1::__tree_node_base<void*>*)>
10002bb14:     	ldr	x8, [x19, #16]
10002bb18:     	add	x8, x8, #1
10002bb1c:     	str	x8, [x19, #16]
10002bb20:     	add	x0, x20, #56
10002bb24:     	ldp	x29, x30, [sp, #80]
10002bb28:     	ldp	x20, x19, [sp, #64]
10002bb2c:     	ldp	x22, x21, [sp, #48]
10002bb30:     	ldp	x24, x23, [sp, #32]
10002bb34:     	ldp	x26, x25, [sp, #16]
10002bb38:     	ldp	x28, x27, [sp], #96
10002bb3c:     	ret
10002bb40:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
10002bb44:     	brk	#0x1
10002bb48:     	mov	x19, x0
10002bb4c:     	mov	x0, x20
10002bb50:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002bb54:     	mov	x0, x19
10002bb58:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010002bb5c <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)>:
10002bb5c:     	cmp	x2, x1
10002bb60:     	b.eq	0x10002be14 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x2b8>
10002bb64:     	sub	x9, x2, x0
10002bb68:     	asr	x8, x9, #3
10002bb6c:     	cmp	x8, #2
10002bb70:     	b.lo	0x10002be14 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x2b8>
10002bb74:     	cmp	x8, #3
10002bb78:     	b.eq	0x10002be34 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x2d8>
10002bb7c:     	cmp	x8, #2
10002bb80:     	b.eq	0x10002be18 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x2bc>
10002bb84:     	cmp	x9, #63
10002bb88:     	b.le	0x10002be58 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x2fc>
10002bb8c:     	lsl	x8, x8, #2
10002bb90:     	and	x8, x8, #0xfffffffffffffff8
10002bb94:     	add	x9, x0, x8
10002bb98:     	mov	x8, x2
10002bb9c:     	ldr	d1, [x8, #-8]!
10002bba0:     	ldr	d2, [x9]
10002bba4:     	ldr	d0, [x0]
10002bba8:     	fcmp	d2, d0
10002bbac:     	b.pl	0x10002bc24 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0xc8>
10002bbb0:     	fcmp	d1, d2
10002bbb4:     	b.pl	0x10002bc64 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x108>
10002bbb8:     	str	d1, [x0]
10002bbbc:     	str	d0, [x8]
10002bbc0:     	mov	w10, #1
10002bbc4:     	ldr	d0, [x0]
10002bbc8:     	ldr	d1, [x9]
10002bbcc:     	fcmp	d0, d1
10002bbd0:     	b.pl	0x10002bcac <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x150>
10002bbd4:     	add	x11, x0, #8
10002bbd8:     	cmp	x11, x8
10002bbdc:     	b.hs	0x10002bce4 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x188>
10002bbe0:     	mov	x13, x11
10002bbe4:     	ldr	d1, [x9]
10002bbe8:     	mov	x12, x13
10002bbec:     	ldr	d0, [x13], #8
10002bbf0:     	fcmp	d0, d1
10002bbf4:     	b.mi	0x10002bbe8 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x8c>
10002bbf8:     	ldr	d2, [x8, #-8]!
10002bbfc:     	fcmp	d2, d1
10002bc00:     	b.pl	0x10002bbf8 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x9c>
10002bc04:     	cmp	x12, x8
10002bc08:     	b.hs	0x10002bce8 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x18c>
10002bc0c:     	str	d2, [x12]
10002bc10:     	str	d0, [x8]
10002bc14:     	add	w10, w10, #1
10002bc18:     	cmp	x9, x12
10002bc1c:     	csel	x9, x8, x9, eq
10002bc20:     	b	0x10002bbe4 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x88>
10002bc24:     	fcmp	d1, d2
10002bc28:     	b.pl	0x10002bc98 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x13c>
10002bc2c:     	str	d1, [x9]
10002bc30:     	str	d2, [x8]
10002bc34:     	ldr	d0, [x9]
10002bc38:     	ldr	d1, [x0]
10002bc3c:     	fcmp	d0, d1
10002bc40:     	b.pl	0x10002bd84 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x228>
10002bc44:     	str	d0, [x0]
10002bc48:     	str	d1, [x9]
10002bc4c:     	mov	w10, #2
10002bc50:     	ldr	d0, [x0]
10002bc54:     	ldr	d1, [x9]
10002bc58:     	fcmp	d0, d1
10002bc5c:     	b.mi	0x10002bbd4 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x78>
10002bc60:     	b	0x10002bcac <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x150>
10002bc64:     	str	d2, [x0]
10002bc68:     	str	d0, [x9]
10002bc6c:     	ldr	d1, [x8]
10002bc70:     	fcmp	d1, d0
10002bc74:     	b.pl	0x10002bd84 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x228>
10002bc78:     	str	d1, [x9]
10002bc7c:     	str	d0, [x8]
10002bc80:     	mov	w10, #2
10002bc84:     	ldr	d0, [x0]
10002bc88:     	ldr	d1, [x9]
10002bc8c:     	fcmp	d0, d1
10002bc90:     	b.mi	0x10002bbd4 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x78>
10002bc94:     	b	0x10002bcac <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x150>
10002bc98:     	mov	w10, #0
10002bc9c:     	ldr	d0, [x0]
10002bca0:     	ldr	d1, [x9]
10002bca4:     	fcmp	d0, d1
10002bca8:     	b.mi	0x10002bbd4 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x78>
10002bcac:     	sub	x12, x2, #16
10002bcb0:     	cmp	x12, x0
10002bcb4:     	b.eq	0x10002bd50 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x1f4>
10002bcb8:     	mov	x11, x12
10002bcbc:     	ldr	d2, [x12], #-8
10002bcc0:     	fcmp	d2, d1
10002bcc4:     	b.pl	0x10002bcb0 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x154>
10002bcc8:     	str	d2, [x0]
10002bccc:     	str	d0, [x11]
10002bcd0:     	add	w10, w10, #1
10002bcd4:     	mov	x8, x11
10002bcd8:     	add	x11, x0, #8
10002bcdc:     	cmp	x11, x8
10002bce0:     	b.lo	0x10002bbe0 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x84>
10002bce4:     	mov	x12, x11
10002bce8:     	cmp	x12, x9
10002bcec:     	b.eq	0x10002bd0c <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x1b0>
10002bcf0:     	ldr	d0, [x9]
10002bcf4:     	ldr	d1, [x12]
10002bcf8:     	fcmp	d0, d1
10002bcfc:     	b.pl	0x10002bd0c <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x1b0>
10002bd00:     	str	d0, [x12]
10002bd04:     	str	d1, [x9]
10002bd08:     	add	w10, w10, #1
10002bd0c:     	cmp	x12, x1
10002bd10:     	b.eq	0x10002be14 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x2b8>
10002bd14:     	cbz	w10, 0x10002bd2c <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x1d0>
10002bd18:     	add	x8, x12, #8
10002bd1c:     	cmp	x12, x1
10002bd20:     	csel	x2, x12, x2, hi
10002bd24:     	csel	x10, x0, x8, hi
10002bd28:     	b	0x10002be08 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x2ac>
10002bd2c:     	cmp	x12, x1
10002bd30:     	b.ls	0x10002bd9c <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x240>
10002bd34:     	cmp	x11, x12
10002bd38:     	b.eq	0x10002be14 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x2b8>
10002bd3c:     	ldp	d1, d0, [x11, #-8]
10002bd40:     	add	x11, x11, #8
10002bd44:     	fcmp	d0, d1
10002bd48:     	b.pl	0x10002bd34 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x1d8>
10002bd4c:     	b	0x10002bd18 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x1bc>
10002bd50:     	add	x9, x0, #8
10002bd54:     	ldr	d1, [x8]
10002bd58:     	fcmp	d0, d1
10002bd5c:     	b.mi	0x10002bdc4 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x268>
10002bd60:     	cmp	x9, x8
10002bd64:     	b.eq	0x10002be14 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x2b8>
10002bd68:     	ldr	d2, [x9]
10002bd6c:     	fcmp	d0, d2
10002bd70:     	b.mi	0x10002bdbc <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x260>
10002bd74:     	add	x9, x9, #8
10002bd78:     	cmp	x9, x8
10002bd7c:     	b.ne	0x10002bd68 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x20c>
10002bd80:     	b	0x10002be14 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x2b8>
10002bd84:     	mov	w10, #1
10002bd88:     	ldr	d0, [x0]
10002bd8c:     	ldr	d1, [x9]
10002bd90:     	fcmp	d0, d1
10002bd94:     	b.pl	0x10002bcac <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x150>
10002bd98:     	b	0x10002bbd4 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x78>
10002bd9c:     	add	x8, x12, #8
10002bda0:     	cmp	x8, x2
10002bda4:     	b.eq	0x10002be14 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x2b8>
10002bda8:     	ldp	d1, d0, [x8, #-8]
10002bdac:     	add	x8, x8, #8
10002bdb0:     	fcmp	d0, d1
10002bdb4:     	b.pl	0x10002bda0 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x244>
10002bdb8:     	b	0x10002bd18 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x1bc>
10002bdbc:     	str	d1, [x9], #8
10002bdc0:     	str	d2, [x8]
10002bdc4:     	cmp	x9, x8
10002bdc8:     	b.ne	0x10002bdd8 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x27c>
10002bdcc:     	b	0x10002be14 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x2b8>
10002bdd0:     	str	d2, [x10]
10002bdd4:     	str	d0, [x8]
10002bdd8:     	ldr	d1, [x0]
10002bddc:     	mov	x10, x9
10002bde0:     	ldr	d0, [x9], #8
10002bde4:     	fcmp	d1, d0
10002bde8:     	b.pl	0x10002bddc <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x280>
10002bdec:     	ldr	d2, [x8, #-8]!
10002bdf0:     	fcmp	d1, d2
10002bdf4:     	b.mi	0x10002bdec <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x290>
10002bdf8:     	cmp	x10, x8
10002bdfc:     	b.lo	0x10002bdd0 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x274>
10002be00:     	cmp	x10, x1
10002be04:     	b.hi	0x10002be14 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x2b8>
10002be08:     	mov	x0, x10
10002be0c:     	cmp	x2, x1
10002be10:     	b.ne	0x10002bb64 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x8>
10002be14:     	ret
10002be18:     	ldur	d0, [x2, #-8]
10002be1c:     	ldr	d1, [x0]
10002be20:     	fcmp	d0, d1
10002be24:     	b.pl	0x10002be14 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x2b8>
10002be28:     	str	d0, [x0]
10002be2c:     	stur	d1, [x2, #-8]
10002be30:     	ret
10002be34:     	ldp	d0, d1, [x0]
10002be38:     	ldur	d2, [x2, #-8]
10002be3c:     	fcmp	d1, d0
10002be40:     	b.pl	0x10002bed0 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x374>
10002be44:     	fcmp	d2, d1
10002be48:     	b.pl	0x10002bef4 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x398>
10002be4c:     	str	d2, [x0]
10002be50:     	stur	d0, [x2, #-8]
10002be54:     	ret
10002be58:     	sub	x8, x2, #8
10002be5c:     	cmp	x8, x0
10002be60:     	b.ne	0x10002be70 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x314>
10002be64:     	b	0x10002be14 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x2b8>
10002be68:     	cmp	x0, x8
10002be6c:     	b.eq	0x10002be14 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x2b8>
10002be70:     	mov	x9, x0
10002be74:     	add	x0, x0, #8
10002be78:     	cmp	x9, x2
10002be7c:     	b.eq	0x10002be68 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x30c>
10002be80:     	cmp	x0, x2
10002be84:     	b.eq	0x10002be68 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x30c>
10002be88:     	ldr	d0, [x9]
10002be8c:     	fmov	d1, d0
10002be90:     	mov	x12, x0
10002be94:     	mov	x10, x9
10002be98:     	mov	x11, x0
10002be9c:     	ldr	d2, [x11], #8
10002bea0:     	fcmp	d2, d1
10002bea4:     	fcsel	d1, d2, d1, mi
10002bea8:     	csel	x10, x12, x10, mi
10002beac:     	mov	x12, x11
10002beb0:     	cmp	x11, x2
10002beb4:     	b.ne	0x10002be9c <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x340>
10002beb8:     	cmp	x10, x9
10002bebc:     	b.eq	0x10002be68 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x30c>
10002bec0:     	ldr	d1, [x10]
10002bec4:     	str	d1, [x9]
10002bec8:     	str	d0, [x10]
10002becc:     	b	0x10002be68 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x30c>
10002bed0:     	fcmp	d2, d1
10002bed4:     	b.pl	0x10002be14 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x2b8>
10002bed8:     	str	d2, [x0, #8]
10002bedc:     	stur	d1, [x2, #-8]
10002bee0:     	ldp	d1, d0, [x0]
10002bee4:     	fcmp	d0, d1
10002bee8:     	b.pl	0x10002be14 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x2b8>
10002beec:     	stp	d0, d1, [x0]
10002bef0:     	ret
10002bef4:     	stp	d1, d0, [x0]
10002bef8:     	ldur	d1, [x2, #-8]
10002befc:     	fcmp	d1, d0
10002bf00:     	b.pl	0x10002be14 <void std::__1::__nth_element[abi:ue170006]<std::__1::_ClassicAlgPolicy, std::__1::__less<void, void>&, std::__1::__wrap_iter<double*>>(std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__wrap_iter<double*>, std::__1::__less<void, void>&)+0x2b8>
10002bf04:     	str	d1, [x0, #8]
10002bf08:     	stur	d0, [x2, #-8]
10002bf0c:     	ret

000000010002bf10 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>, void*>*)>:
10002bf10:     	cbz	x0, 0x10002bf5c <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>, void*>*)+0x4c>
10002bf14:     	stp	x20, x19, [sp, #-32]!
10002bf18:     	stp	x29, x30, [sp, #16]
10002bf1c:     	add	x29, sp, #16
10002bf20:     	mov	x19, x0
10002bf24:     	ldr	x0, [x0]
10002bf28:     	bl	0x10002bf10 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>, void*>*)>
10002bf2c:     	ldr	x0, [x19, #8]
10002bf30:     	bl	0x10002bf10 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>, void*>*)>
10002bf34:     	ldr	x0, [x19, #72]
10002bf38:     	cbz	x0, 0x10002bf44 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>, void*>*)+0x34>
10002bf3c:     	str	x0, [x19, #80]
10002bf40:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002bf44:     	ldrsb	w8, [x19, #55]
10002bf48:     	tbnz	w8, #31, 0x10002bf60 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::ComputeStats(std::__1::vector<benchmark::BenchmarkReporter::Run, std::__1::allocator<benchmark::BenchmarkReporter::Run>> const&)::CounterStat>, void*>*)+0x50>
10002bf4c:     	mov	x0, x19
10002bf50:     	ldp	x29, x30, [sp, #16]
10002bf54:     	ldp	x20, x19, [sp], #32
10002bf58:     	b	0x10002f014 <_vsnprintf+0x10002f014>
10002bf5c:     	ret
10002bf60:     	ldr	x0, [x19, #32]
10002bf64:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002bf68:     	mov	x0, x19
10002bf6c:     	ldp	x29, x30, [sp, #16]
10002bf70:     	ldp	x20, x19, [sp], #32
10002bf74:     	b	0x10002f014 <_vsnprintf+0x10002f014>

000000010002bf78 <__GLOBAL__sub_I_statistics.cc>:
10002bf78:     	b	0x10000363c <benchmark::internal::InitializeStreams()>

000000010002bf7c <benchmark::AppendHumanReadable(int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)>:
10002bf7c:     	sub	sp, sp, #352
10002bf80:     	stp	x22, x21, [sp, #304]
10002bf84:     	stp	x20, x19, [sp, #320]
10002bf88:     	stp	x29, x30, [sp, #336]
10002bf8c:     	add	x29, sp, #336
10002bf90:     	mov	x19, x1
10002bf94:     	mov	x20, x0
10002bf98:     	add	x21, sp, #24
10002bf9c:     	add	x0, sp, #24
10002bfa0:     	bl	0x10002936c <std::__1::basic_stringstream<char, std::__1::char_traits<char>, std::__1::allocator<char>>::basic_stringstream[abi:ue170006]()>
10002bfa4:     	scvtf	d0, w20
10002bfa8:     	mov	x8, #4652218415073722368
10002bfac:     	fmov	d2, x8
10002bfb0:     	mov	x20, sp
10002bfb4:     	mov	x0, sp
10002bfb8:     	fmov	d1, #1.00000000
10002bfbc:     	mov	w1, #0
10002bfc0:     	bl	0x10002c0e0 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)>
10002bfc4:     	add	x0, x21, #16
10002bfc8:     	ldrb	w8, [sp, #23]
10002bfcc:     	sxtb	w9, w8
10002bfd0:     	ldp	x10, x11, [sp]
10002bfd4:     	cmp	w9, #0
10002bfd8:     	csel	x1, x10, x20, lt
10002bfdc:     	csel	x2, x11, x8, lt
10002bfe0:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10002bfe4:     	ldrsb	w8, [sp, #23]
10002bfe8:     	tbz	w8, #31, 0x10002bff4 <benchmark::AppendHumanReadable(int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x78>
10002bfec:     	ldr	x0, [sp]
10002bff0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002bff4:     	add	x8, sp, #24
10002bff8:     	add	x20, x8, #24
10002bffc:     	mov	x21, sp
10002c000:     	mov	x8, sp
10002c004:     	mov	x0, x20
10002c008:     	bl	0x10002ecd8 <_vsnprintf+0x10002ecd8>
10002c00c:     	ldrb	w8, [sp, #23]
10002c010:     	sxtb	w9, w8
10002c014:     	ldp	x10, x11, [sp]
10002c018:     	cmp	w9, #0
10002c01c:     	csel	x1, x10, x21, lt
10002c020:     	csel	x2, x11, x8, lt
10002c024:     	mov	x0, x19
10002c028:     	bl	0x10002ed38 <_vsnprintf+0x10002ed38>
10002c02c:     	ldrsb	w8, [sp, #23]
10002c030:     	tbz	w8, #31, 0x10002c03c <benchmark::AppendHumanReadable(int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0xc0>
10002c034:     	ldr	x0, [sp]
10002c038:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002c03c:     	adrp	x19, 0x100034000 <benchmark::AppendHumanReadable(int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0xe0>
10002c040:     	ldr	x19, [x19, #704]
10002c044:     	ldr	x8, [x19]
10002c048:     	str	x8, [sp, #24]
10002c04c:     	ldur	x8, [x8, #-24]
10002c050:     	add	x21, sp, #24
10002c054:     	ldp	x9, x10, [x19, #64]
10002c058:     	str	x9, [x21, x8]
10002c05c:     	adrp	x8, 0x100034000 <benchmark::AppendHumanReadable(int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x100>
10002c060:     	ldr	x8, [x8, #736]
10002c064:     	add	x8, x8, #16
10002c068:     	stp	x10, x8, [sp, #40]
10002c06c:     	ldrsb	w8, [sp, #135]
10002c070:     	tbz	w8, #31, 0x10002c07c <benchmark::AppendHumanReadable(int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x100>
10002c074:     	ldr	x0, [sp, #112]
10002c078:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002c07c:     	mov	x0, x20
10002c080:     	bl	0x10002eeb8 <_vsnprintf+0x10002eeb8>
10002c084:     	add	x1, x19, #8
10002c088:     	add	x0, sp, #24
10002c08c:     	bl	0x10002ee70 <_vsnprintf+0x10002ee70>
10002c090:     	add	x0, x21, #128
10002c094:     	bl	0x10002efe4 <_vsnprintf+0x10002efe4>
10002c098:     	ldp	x29, x30, [sp, #336]
10002c09c:     	ldp	x20, x19, [sp, #320]
10002c0a0:     	ldp	x22, x21, [sp, #304]
10002c0a4:     	add	sp, sp, #352
10002c0a8:     	ret
10002c0ac:     	b	0x10002c0b4 <benchmark::AppendHumanReadable(int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x138>
10002c0b0:     	b	0x10002c0cc <benchmark::AppendHumanReadable(int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x150>
10002c0b4:     	mov	x19, x0
10002c0b8:     	ldrsb	w8, [sp, #23]
10002c0bc:     	tbz	w8, #31, 0x10002c0d0 <benchmark::AppendHumanReadable(int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x154>
10002c0c0:     	ldr	x0, [sp]
10002c0c4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002c0c8:     	b	0x10002c0d0 <benchmark::AppendHumanReadable(int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+0x154>
10002c0cc:     	mov	x19, x0
10002c0d0:     	add	x0, sp, #24
10002c0d4:     	bl	0x100029498 <std::__1::basic_stringstream<char, std::__1::char_traits<char>, std::__1::allocator<char>>::~basic_stringstream()>
10002c0d8:     	mov	x0, x19
10002c0dc:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010002c0e0 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)>:
10002c0e0:     	sub	sp, sp, #432
10002c0e4:     	stp	d11, d10, [sp, #336]
10002c0e8:     	stp	d9, d8, [sp, #352]
10002c0ec:     	stp	x24, x23, [sp, #368]
10002c0f0:     	stp	x22, x21, [sp, #384]
10002c0f4:     	stp	x20, x19, [sp, #400]
10002c0f8:     	stp	x29, x30, [sp, #416]
10002c0fc:     	add	x29, sp, #416
10002c100:     	fmov	d9, d2
10002c104:     	mov	x20, x1
10002c108:     	fmov	d10, d1
10002c10c:     	fmov	d8, d0
10002c110:     	mov	x19, x0
10002c114:     	add	x21, sp, #56
10002c118:     	add	x0, sp, #56
10002c11c:     	bl	0x10002936c <std::__1::basic_stringstream<char, std::__1::char_traits<char>, std::__1::allocator<char>>::basic_stringstream[abi:ue170006]()>
10002c120:     	fcmp	d8, #0.0
10002c124:     	b.pl	0x10002c140 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x60>
10002c128:     	add	x0, x21, #16
10002c12c:     	adrp	x1, 0x100032000 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x64>
10002c130:     	add	x1, x1, #1927
10002c134:     	mov	w2, #1
10002c138:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10002c13c:     	fneg	d8, d8
10002c140:     	scvtf	d0, w20
10002c144:     	bl	0x10002f0bc <_vsnprintf+0x10002f0bc>
10002c148:     	fmov	d1, #1.00000000
10002c14c:     	fdiv	d0, d1, d0
10002c150:     	fcmp	d0, d10
10002c154:     	fcsel	d1, d0, d10, gt
10002c158:     	fmul	d2, d1, d9
10002c15c:     	fcmp	d8, d2
10002c160:     	b.le	0x10002c1e4 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x104>
10002c164:     	fdiv	d0, d8, d9
10002c168:     	fcmp	d0, d2
10002c16c:     	b.ls	0x10002c29c <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x1bc>
10002c170:     	fdiv	d0, d0, d9
10002c174:     	fcmp	d0, d2
10002c178:     	b.ls	0x10002c2a4 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x1c4>
10002c17c:     	fdiv	d0, d0, d9
10002c180:     	fcmp	d0, d2
10002c184:     	b.ls	0x10002c2b4 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x1d4>
10002c188:     	fdiv	d0, d0, d9
10002c18c:     	fcmp	d0, d2
10002c190:     	b.ls	0x10002c2c4 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x1e4>
10002c194:     	fdiv	d0, d0, d9
10002c198:     	fcmp	d0, d2
10002c19c:     	b.ls	0x10002c2d4 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x1f4>
10002c1a0:     	fdiv	d0, d0, d9
10002c1a4:     	fcmp	d0, d2
10002c1a8:     	b.ls	0x10002c2e4 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x204>
10002c1ac:     	fdiv	d0, d0, d9
10002c1b0:     	fcmp	d0, d2
10002c1b4:     	b.ls	0x10002c2f4 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x214>
10002c1b8:     	fdiv	d0, d0, d9
10002c1bc:     	fcmp	d0, d2
10002c1c0:     	b.ls	0x10002c304 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x224>
10002c1c4:     	fdiv	d0, d0, d9
10002c1c8:     	fcmp	d0, d2
10002c1cc:     	b.ls	0x10002c314 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x234>
10002c1d0:     	add	x8, sp, #56
10002c1d4:     	add	x0, x8, #16
10002c1d8:     	fmov	d0, d8
10002c1dc:     	bl	0x10002ee1c <_vsnprintf+0x10002ee1c>
10002c1e0:     	b	0x10002c284 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x1a4>
10002c1e4:     	mov	x8, #5243
10002c1e8:     	movk	x8, #18350, lsl #16
10002c1ec:     	movk	x8, #31457, lsl #32
10002c1f0:     	movk	x8, #16260, lsl #48
10002c1f4:     	fmov	d0, x8
10002c1f8:     	fcmp	d8, d0
10002c1fc:     	b.pl	0x10002c274 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x194>
10002c200:     	fcmp	d8, d1
10002c204:     	b.pl	0x10002c274 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x194>
10002c208:     	fmul	d0, d8, d9
10002c20c:     	fcmp	d0, d1
10002c210:     	b.ge	0x10002c2ac <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x1cc>
10002c214:     	fmul	d0, d0, d9
10002c218:     	fcmp	d0, d1
10002c21c:     	b.ge	0x10002c2bc <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x1dc>
10002c220:     	fmul	d0, d0, d9
10002c224:     	fcmp	d0, d1
10002c228:     	b.ge	0x10002c2cc <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x1ec>
10002c22c:     	fmul	d0, d0, d9
10002c230:     	fcmp	d0, d1
10002c234:     	b.ge	0x10002c2dc <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x1fc>
10002c238:     	fmul	d0, d0, d9
10002c23c:     	fcmp	d0, d1
10002c240:     	b.ge	0x10002c2ec <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x20c>
10002c244:     	fmul	d0, d0, d9
10002c248:     	fcmp	d0, d1
10002c24c:     	b.ge	0x10002c2fc <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x21c>
10002c250:     	fmul	d0, d0, d9
10002c254:     	fcmp	d0, d1
10002c258:     	b.ge	0x10002c30c <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x22c>
10002c25c:     	fmul	d0, d0, d9
10002c260:     	fcmp	d0, d1
10002c264:     	b.ge	0x10002c334 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x254>
10002c268:     	fmul	d0, d0, d9
10002c26c:     	fcmp	d0, d1
10002c270:     	b.ge	0x10002c33c <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x25c>
10002c274:     	add	x8, sp, #56
10002c278:     	add	x0, x8, #16
10002c27c:     	fmov	d0, d8
10002c280:     	bl	0x10002ee1c <_vsnprintf+0x10002ee1c>
10002c284:     	add	x8, sp, #56
10002c288:     	add	x0, x8, #24
10002c28c:     	add	x8, sp, #32
10002c290:     	bl	0x10002ecd8 <_vsnprintf+0x10002ecd8>
10002c294:     	mov	x21, #0
10002c298:     	b	0x10002c358 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x278>
10002c29c:     	mov	w21, #1
10002c2a0:     	b	0x10002c318 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x238>
10002c2a4:     	mov	w21, #2
10002c2a8:     	b	0x10002c318 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x238>
10002c2ac:     	mov	x21, #-1
10002c2b0:     	b	0x10002c340 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x260>
10002c2b4:     	mov	w21, #3
10002c2b8:     	b	0x10002c318 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x238>
10002c2bc:     	mov	x21, #-2
10002c2c0:     	b	0x10002c340 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x260>
10002c2c4:     	mov	w21, #4
10002c2c8:     	b	0x10002c318 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x238>
10002c2cc:     	mov	x21, #-3
10002c2d0:     	b	0x10002c340 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x260>
10002c2d4:     	mov	w21, #5
10002c2d8:     	b	0x10002c318 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x238>
10002c2dc:     	mov	x21, #-4
10002c2e0:     	b	0x10002c340 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x260>
10002c2e4:     	mov	w21, #6
10002c2e8:     	b	0x10002c318 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x238>
10002c2ec:     	mov	x21, #-5
10002c2f0:     	b	0x10002c340 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x260>
10002c2f4:     	mov	w21, #7
10002c2f8:     	b	0x10002c318 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x238>
10002c2fc:     	mov	x21, #-6
10002c300:     	b	0x10002c340 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x260>
10002c304:     	mov	w21, #8
10002c308:     	b	0x10002c318 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x238>
10002c30c:     	mov	x21, #-7
10002c310:     	b	0x10002c340 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x260>
10002c314:     	mov	w21, #9
10002c318:     	add	x20, sp, #56
10002c31c:     	add	x0, x20, #16
10002c320:     	bl	0x10002ee1c <_vsnprintf+0x10002ee1c>
10002c324:     	add	x0, x20, #24
10002c328:     	add	x8, sp, #32
10002c32c:     	bl	0x10002ecd8 <_vsnprintf+0x10002ecd8>
10002c330:     	b	0x10002c358 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x278>
10002c334:     	mov	x21, #-8
10002c338:     	b	0x10002c340 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x260>
10002c33c:     	mov	x21, #-9
10002c340:     	add	x20, sp, #56
10002c344:     	add	x0, x20, #16
10002c348:     	bl	0x10002ee1c <_vsnprintf+0x10002ee1c>
10002c34c:     	add	x0, x20, #24
10002c350:     	add	x8, sp, #32
10002c354:     	bl	0x10002ecd8 <_vsnprintf+0x10002ecd8>
10002c358:     	ldr	q0, [sp, #32]
10002c35c:     	str	q0, [sp]
10002c360:     	ldr	x8, [sp, #48]
10002c364:     	str	x8, [sp, #16]
10002c368:     	adrp	x22, 0x100034000 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x2a8>
10002c36c:     	ldr	x22, [x22, #704]
10002c370:     	ldr	x8, [x22]
10002c374:     	str	x8, [sp, #56]
10002c378:     	ldur	x8, [x8, #-24]
10002c37c:     	add	x23, sp, #56
10002c380:     	ldp	x9, x10, [x22, #64]
10002c384:     	str	x9, [x23, x8]
10002c388:     	add	x20, x23, #24
10002c38c:     	adrp	x8, 0x100034000 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x2cc>
10002c390:     	ldr	x8, [x8, #736]
10002c394:     	add	x8, x8, #16
10002c398:     	stp	x10, x8, [sp, #72]
10002c39c:     	ldrsb	w8, [sp, #167]
10002c3a0:     	tbz	w8, #31, 0x10002c3ac <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x2cc>
10002c3a4:     	ldr	x0, [sp, #144]
10002c3a8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002c3ac:     	mov	x0, x20
10002c3b0:     	bl	0x10002eeb8 <_vsnprintf+0x10002eeb8>
10002c3b4:     	add	x1, x22, #8
10002c3b8:     	add	x0, sp, #56
10002c3bc:     	bl	0x10002ee70 <_vsnprintf+0x10002ee70>
10002c3c0:     	add	x0, x23, #128
10002c3c4:     	bl	0x10002efe4 <_vsnprintf+0x10002efe4>
10002c3c8:     	cbz	x21, 0x10002c400 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x320>
10002c3cc:     	sub	x8, x21, #1
10002c3d0:     	adrp	x9, 0x100032000 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x308>
10002c3d4:     	add	x9, x9, #2198
10002c3d8:     	adrp	x10, 0x100032000 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x310>
10002c3dc:     	add	x10, x10, #2189
10002c3e0:     	cmp	x21, #0
10002c3e4:     	csel	x9, x10, x9, gt
10002c3e8:     	csinv	x8, x8, x21, gt
10002c3ec:     	ldrb	w8, [x9, x8]
10002c3f0:     	strb	w8, [sp, #56]
10002c3f4:     	strb	wzr, [sp, #57]
10002c3f8:     	mov	w8, #1
10002c3fc:     	b	0x10002c408 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x328>
10002c400:     	mov	w8, #0
10002c404:     	strb	wzr, [sp, #56]
10002c408:     	strb	w8, [sp, #79]
10002c40c:     	ldrb	w8, [sp, #23]
10002c410:     	sxtb	w9, w8
10002c414:     	ldp	x10, x11, [sp]
10002c418:     	cmp	w9, #0
10002c41c:     	mov	x9, sp
10002c420:     	csel	x2, x10, x9, lt
10002c424:     	csel	x3, x11, x8, lt
10002c428:     	add	x0, sp, #56
10002c42c:     	mov	x1, #0
10002c430:     	bl	0x10002ed50 <_vsnprintf+0x10002ed50>
10002c434:     	ldr	q0, [x0]
10002c438:     	str	q0, [x19]
10002c43c:     	ldr	x8, [x0, #16]
10002c440:     	str	x8, [x19, #16]
10002c444:     	stp	xzr, xzr, [x0, #8]
10002c448:     	str	xzr, [x0]
10002c44c:     	ldrsb	w8, [sp, #79]
10002c450:     	tbnz	w8, #31, 0x10002c47c <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x39c>
10002c454:     	ldrsb	w8, [sp, #23]
10002c458:     	tbnz	w8, #31, 0x10002c48c <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x3ac>
10002c45c:     	ldp	x29, x30, [sp, #416]
10002c460:     	ldp	x20, x19, [sp, #400]
10002c464:     	ldp	x22, x21, [sp, #384]
10002c468:     	ldp	x24, x23, [sp, #368]
10002c46c:     	ldp	d9, d8, [sp, #352]
10002c470:     	ldp	d11, d10, [sp, #336]
10002c474:     	add	sp, sp, #432
10002c478:     	ret
10002c47c:     	ldr	x0, [sp, #56]
10002c480:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002c484:     	ldrsb	w8, [sp, #23]
10002c488:     	tbz	w8, #31, 0x10002c45c <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x37c>
10002c48c:     	ldr	x0, [sp]
10002c490:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002c494:     	b	0x10002c45c <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x37c>
10002c498:     	b	0x10002c4b4 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x3d4>
10002c49c:     	b	0x10002c4b4 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x3d4>
10002c4a0:     	b	0x10002c4b4 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x3d4>
10002c4a4:     	b	0x10002c4b4 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x3d4>
10002c4a8:     	b	0x10002c4b4 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x3d4>
10002c4ac:     	b	0x10002c4b4 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x3d4>
10002c4b0:     	b	0x10002c4b4 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x3d4>
10002c4b4:     	mov	x19, x0
10002c4b8:     	add	x0, sp, #56
10002c4bc:     	bl	0x100029498 <std::__1::basic_stringstream<char, std::__1::char_traits<char>, std::__1::allocator<char>>::~basic_stringstream()>
10002c4c0:     	mov	x0, x19
10002c4c4:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
10002c4c8:     	mov	x19, x0
10002c4cc:     	ldrsb	w8, [sp, #79]
10002c4d0:     	tbnz	w8, #31, 0x10002c4e4 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x404>
10002c4d4:     	ldrsb	w8, [sp, #23]
10002c4d8:     	tbnz	w8, #31, 0x10002c4f4 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x414>
10002c4dc:     	mov	x0, x19
10002c4e0:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
10002c4e4:     	ldr	x0, [sp, #56]
10002c4e8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002c4ec:     	ldrsb	w8, [sp, #23]
10002c4f0:     	tbz	w8, #31, 0x10002c4dc <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)+0x3fc>
10002c4f4:     	ldr	x0, [sp]
10002c4f8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002c4fc:     	mov	x0, x19
10002c500:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010002c504 <benchmark::HumanReadableNumber(double, double)>:
10002c504:     	fmov	d2, d1
10002c508:     	mov	x0, x8
10002c50c:     	mov	x8, #-7378697629483820647
10002c510:     	movk	x8, #39322
10002c514:     	movk	x8, #16369, lsl #48
10002c518:     	fmov	d1, x8
10002c51c:     	mov	w1, #1
10002c520:     	b	0x10002c0e0 <benchmark::(anonymous namespace)::ToBinaryStringFullySpecified(double, double, int, double)>

000000010002c524 <benchmark::StrFormatImp(char const*, char*)>:
10002c524:     	sub	sp, sp, #352
10002c528:     	stp	x24, x23, [sp, #288]
10002c52c:     	stp	x22, x21, [sp, #304]
10002c530:     	stp	x20, x19, [sp, #320]
10002c534:     	stp	x29, x30, [sp, #336]
10002c538:     	add	x29, sp, #336
10002c53c:     	mov	x3, x1
10002c540:     	mov	x21, x0
10002c544:     	mov	x19, x8
10002c548:     	adrp	x8, 0x100034000 <benchmark::StrFormatImp(char const*, char*)+0x44>
10002c54c:     	ldr	x8, [x8, #928]
10002c550:     	ldr	x8, [x8]
10002c554:     	stur	x8, [x29, #-56]
10002c558:     	stp	x1, x1, [sp, #8]
10002c55c:     	add	x0, sp, #24
10002c560:     	mov	w1, #256
10002c564:     	mov	x2, x21
10002c568:     	bl	0x10002f2a8 <_vsnprintf+0x10002f2a8>
10002c56c:     	cbz	w0, 0x10002c5a8 <benchmark::StrFormatImp(char const*, char*)+0x84>
10002c570:     	mov	x23, #-17
10002c574:     	movk	x23, #32767, lsl #48
10002c578:     	cmp	w0, #255
10002c57c:     	b.hi	0x10002c5b4 <benchmark::StrFormatImp(char const*, char*)+0x90>
10002c580:     	add	x0, sp, #24
10002c584:     	bl	0x10002f254 <_vsnprintf+0x10002f254>
10002c588:     	cmp	x0, x23
10002c58c:     	b.hi	0x10002c6a8 <benchmark::StrFormatImp(char const*, char*)+0x184>
10002c590:     	mov	x20, x0
10002c594:     	cmp	x0, #23
10002c598:     	b.hs	0x10002c600 <benchmark::StrFormatImp(char const*, char*)+0xdc>
10002c59c:     	strb	w20, [x19, #23]
10002c5a0:     	cbnz	x20, 0x10002c620 <benchmark::StrFormatImp(char const*, char*)+0xfc>
10002c5a4:     	b	0x10002c630 <benchmark::StrFormatImp(char const*, char*)+0x10c>
10002c5a8:     	stp	xzr, xzr, [x19]
10002c5ac:     	str	xzr, [x19, #16]
10002c5b0:     	b	0x10002c674 <benchmark::StrFormatImp(char const*, char*)+0x150>
10002c5b4:     	sxtw	x8, w0
10002c5b8:     	add	x22, x8, #1
10002c5bc:     	mov	x0, x22
10002c5c0:     	bl	0x10002f020 <_vsnprintf+0x10002f020>
10002c5c4:     	mov	x20, x0
10002c5c8:     	ldr	x3, [sp, #16]
10002c5cc:     	mov	x1, x22
10002c5d0:     	mov	x2, x21
10002c5d4:     	bl	0x10002f2a8 <_vsnprintf+0x10002f2a8>
10002c5d8:     	mov	x0, x20
10002c5dc:     	bl	0x10002f254 <_vsnprintf+0x10002f254>
10002c5e0:     	cmp	x0, x23
10002c5e4:     	b.hi	0x10002c6b0 <benchmark::StrFormatImp(char const*, char*)+0x18c>
10002c5e8:     	mov	x21, x0
10002c5ec:     	cmp	x0, #23
10002c5f0:     	b.hs	0x10002c638 <benchmark::StrFormatImp(char const*, char*)+0x114>
10002c5f4:     	strb	w21, [x19, #23]
10002c5f8:     	cbnz	x21, 0x10002c658 <benchmark::StrFormatImp(char const*, char*)+0x134>
10002c5fc:     	b	0x10002c668 <benchmark::StrFormatImp(char const*, char*)+0x144>
10002c600:     	orr	x8, x20, #0xf
10002c604:     	add	x21, x8, #1
10002c608:     	mov	x0, x21
10002c60c:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10002c610:     	orr	x8, x21, #0x8000000000000000
10002c614:     	stp	x20, x8, [x19, #8]
10002c618:     	str	x0, [x19]
10002c61c:     	mov	x19, x0
10002c620:     	add	x1, sp, #24
10002c624:     	mov	x0, x19
10002c628:     	mov	x2, x20
10002c62c:     	bl	0x10002f1c4 <_vsnprintf+0x10002f1c4>
10002c630:     	strb	wzr, [x19, x20]
10002c634:     	b	0x10002c674 <benchmark::StrFormatImp(char const*, char*)+0x150>
10002c638:     	orr	x8, x21, #0xf
10002c63c:     	add	x22, x8, #1
10002c640:     	mov	x0, x22
10002c644:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10002c648:     	orr	x8, x22, #0x8000000000000000
10002c64c:     	stp	x21, x8, [x19, #8]
10002c650:     	str	x0, [x19]
10002c654:     	mov	x19, x0
10002c658:     	mov	x0, x19
10002c65c:     	mov	x1, x20
10002c660:     	mov	x2, x21
10002c664:     	bl	0x10002f1c4 <_vsnprintf+0x10002f1c4>
10002c668:     	strb	wzr, [x19, x21]
10002c66c:     	mov	x0, x20
10002c670:     	bl	0x10002f008 <_vsnprintf+0x10002f008>
10002c674:     	ldur	x8, [x29, #-56]
10002c678:     	adrp	x9, 0x100034000 <benchmark::StrFormatImp(char const*, char*)+0x174>
10002c67c:     	ldr	x9, [x9, #928]
10002c680:     	ldr	x9, [x9]
10002c684:     	cmp	x9, x8
10002c688:     	b.ne	0x10002c6a4 <benchmark::StrFormatImp(char const*, char*)+0x180>
10002c68c:     	ldp	x29, x30, [sp, #336]
10002c690:     	ldp	x20, x19, [sp, #320]
10002c694:     	ldp	x22, x21, [sp, #304]
10002c698:     	ldp	x24, x23, [sp, #288]
10002c69c:     	add	sp, sp, #352
10002c6a0:     	ret
10002c6a4:     	bl	0x10002f0d4 <_vsnprintf+0x10002f0d4>
10002c6a8:     	mov	x0, x19
10002c6ac:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
10002c6b0:     	mov	x0, x19
10002c6b4:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
10002c6b8:     	brk	#0x1
10002c6bc:     	mov	x19, x0
10002c6c0:     	mov	x0, x20
10002c6c4:     	bl	0x10002f008 <_vsnprintf+0x10002f008>
10002c6c8:     	mov	x0, x19
10002c6cc:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010002c6d0 <benchmark::StrFormat(char const*, ...)>:
10002c6d0:     	sub	sp, sp, #32
10002c6d4:     	stp	x29, x30, [sp, #16]
10002c6d8:     	add	x29, sp, #16
10002c6dc:     	add	x9, x29, #16
10002c6e0:     	str	x9, [sp, #8]
10002c6e4:     	add	x1, x29, #16
10002c6e8:     	bl	0x10002c524 <benchmark::StrFormatImp(char const*, char*)>
10002c6ec:     	ldp	x29, x30, [sp, #16]
10002c6f0:     	add	sp, sp, #32
10002c6f4:     	ret

000000010002c6f8 <benchmark::StrSplit(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char)>:
10002c6f8:     	sub	sp, sp, #128
10002c6fc:     	stp	x28, x27, [sp, #32]
10002c700:     	stp	x26, x25, [sp, #48]
10002c704:     	stp	x24, x23, [sp, #64]
10002c708:     	stp	x22, x21, [sp, #80]
10002c70c:     	stp	x20, x19, [sp, #96]
10002c710:     	stp	x29, x30, [sp, #112]
10002c714:     	add	x29, sp, #112
10002c718:     	mov	x19, x8
10002c71c:     	ldrb	w8, [x0, #23]
10002c720:     	sxtb	w9, w8
10002c724:     	ldr	x10, [x0, #8]
10002c728:     	cmp	w9, #0
10002c72c:     	stp	xzr, xzr, [x19, #8]
10002c730:     	csel	x8, x10, x8, lt
10002c734:     	str	xzr, [x19]
10002c738:     	cbz	x8, 0x10002c940 <benchmark::StrSplit(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char)+0x248>
10002c73c:     	mov	x21, x1
10002c740:     	mov	x20, x0
10002c744:     	mov	x27, #-17
10002c748:     	movk	x27, #32767, lsl #48
10002c74c:     	mov	x2, #0
10002c750:     	bl	0x10002eccc <_vsnprintf+0x10002eccc>
10002c754:     	cmn	x0, #1
10002c758:     	b.eq	0x10002c880 <benchmark::StrSplit(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char)+0x188>
10002c75c:     	mov	x23, x0
10002c760:     	mov	x22, #0
10002c764:     	b	0x10002c79c <benchmark::StrSplit(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char)+0xa4>
10002c768:     	ldur	q0, [sp, #8]
10002c76c:     	ldr	x9, [sp, #24]
10002c770:     	str	x9, [x8, #16]
10002c774:     	str	q0, [x8], #24
10002c778:     	str	x8, [x19, #8]
10002c77c:     	add	x22, x23, #1
10002c780:     	mov	x0, x20
10002c784:     	mov	x1, x21
10002c788:     	mov	x2, x22
10002c78c:     	bl	0x10002eccc <_vsnprintf+0x10002eccc>
10002c790:     	mov	x23, x0
10002c794:     	cmn	x0, #1
10002c798:     	b.eq	0x10002c884 <benchmark::StrSplit(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char)+0x18c>
10002c79c:     	ldrsb	w8, [x20, #23]
10002c7a0:     	tbnz	w8, #31, 0x10002c7d0 <benchmark::StrSplit(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char)+0xd8>
10002c7a4:     	and	x8, x8, #0xff
10002c7a8:     	mov	x28, x20
10002c7ac:     	cmp	x22, x8
10002c7b0:     	b.hi	0x10002c988 <benchmark::StrSplit(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char)+0x290>
10002c7b4:     	sub	x9, x23, x22
10002c7b8:     	sub	x8, x8, x22
10002c7bc:     	cmp	x8, x9
10002c7c0:     	csel	x24, x8, x9, lo
10002c7c4:     	cmp	x24, x27
10002c7c8:     	b.ls	0x10002c7f8 <benchmark::StrSplit(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char)+0x100>
10002c7cc:     	b	0x10002c994 <benchmark::StrSplit(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char)+0x29c>
10002c7d0:     	ldr	x8, [x20, #8]
10002c7d4:     	cmp	x8, x22
10002c7d8:     	b.lo	0x10002c988 <benchmark::StrSplit(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char)+0x290>
10002c7dc:     	ldr	x28, [x20]
10002c7e0:     	sub	x9, x23, x22
10002c7e4:     	sub	x8, x8, x22
10002c7e8:     	cmp	x8, x9
10002c7ec:     	csel	x24, x8, x9, lo
10002c7f0:     	cmp	x24, x27
10002c7f4:     	b.hi	0x10002c994 <benchmark::StrSplit(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char)+0x29c>
10002c7f8:     	cmp	x24, #23
10002c7fc:     	b.hs	0x10002c820 <benchmark::StrSplit(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char)+0x128>
10002c800:     	strb	w24, [sp, #31]
10002c804:     	add	x25, sp, #8
10002c808:     	cbnz	x24, 0x10002c840 <benchmark::StrSplit(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char)+0x148>
10002c80c:     	strb	wzr, [x25, x24]
10002c810:     	ldp	x8, x9, [x19, #8]
10002c814:     	cmp	x8, x9
10002c818:     	b.lo	0x10002c768 <benchmark::StrSplit(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char)+0x70>
10002c81c:     	b	0x10002c860 <benchmark::StrSplit(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char)+0x168>
10002c820:     	orr	x8, x24, #0xf
10002c824:     	add	x26, x8, #1
10002c828:     	mov	x0, x26
10002c82c:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10002c830:     	mov	x25, x0
10002c834:     	orr	x8, x26, #0x8000000000000000
10002c838:     	stp	x24, x8, [sp, #16]
10002c83c:     	str	x0, [sp, #8]
10002c840:     	add	x1, x28, x22
10002c844:     	mov	x0, x25
10002c848:     	mov	x2, x24
10002c84c:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
10002c850:     	strb	wzr, [x25, x24]
10002c854:     	ldp	x8, x9, [x19, #8]
10002c858:     	cmp	x8, x9
10002c85c:     	b.lo	0x10002c768 <benchmark::StrSplit(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char)+0x70>
10002c860:     	add	x1, sp, #8
10002c864:     	mov	x0, x19
10002c868:     	bl	0x10002c9f8 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__push_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&&)>
10002c86c:     	ldrsb	w8, [sp, #31]
10002c870:     	tbz	w8, #31, 0x10002c77c <benchmark::StrSplit(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char)+0x84>
10002c874:     	ldr	x0, [sp, #8]
10002c878:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002c87c:     	b	0x10002c77c <benchmark::StrSplit(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char)+0x84>
10002c880:     	mov	x22, #0
10002c884:     	ldrsb	w8, [x20, #23]
10002c888:     	tbnz	w8, #31, 0x10002c960 <benchmark::StrSplit(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char)+0x268>
10002c88c:     	and	x8, x8, #0xff
10002c890:     	cmp	x22, x8
10002c894:     	b.hi	0x10002c9a0 <benchmark::StrSplit(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char)+0x2a8>
10002c898:     	sub	x21, x8, x22
10002c89c:     	cmp	x21, x27
10002c8a0:     	b.hi	0x10002c97c <benchmark::StrSplit(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char)+0x284>
10002c8a4:     	cmp	x21, #23
10002c8a8:     	b.hs	0x10002c8e4 <benchmark::StrSplit(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char)+0x1ec>
10002c8ac:     	strb	w21, [sp, #31]
10002c8b0:     	add	x23, sp, #8
10002c8b4:     	cmp	x8, x22
10002c8b8:     	b.ne	0x10002c904 <benchmark::StrSplit(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char)+0x20c>
10002c8bc:     	strb	wzr, [x23, x21]
10002c8c0:     	ldp	x8, x9, [x19, #8]
10002c8c4:     	cmp	x8, x9
10002c8c8:     	b.hs	0x10002c924 <benchmark::StrSplit(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char)+0x22c>
10002c8cc:     	ldur	q0, [sp, #8]
10002c8d0:     	ldr	x9, [sp, #24]
10002c8d4:     	str	x9, [x8, #16]
10002c8d8:     	str	q0, [x8], #24
10002c8dc:     	str	x8, [x19, #8]
10002c8e0:     	b	0x10002c940 <benchmark::StrSplit(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char)+0x248>
10002c8e4:     	orr	x8, x21, #0xf
10002c8e8:     	add	x24, x8, #1
10002c8ec:     	mov	x0, x24
10002c8f0:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10002c8f4:     	mov	x23, x0
10002c8f8:     	orr	x8, x24, #0x8000000000000000
10002c8fc:     	stp	x21, x8, [sp, #16]
10002c900:     	str	x0, [sp, #8]
10002c904:     	add	x1, x20, x22
10002c908:     	mov	x0, x23
10002c90c:     	mov	x2, x21
10002c910:     	bl	0x10002f1d0 <_vsnprintf+0x10002f1d0>
10002c914:     	strb	wzr, [x23, x21]
10002c918:     	ldp	x8, x9, [x19, #8]
10002c91c:     	cmp	x8, x9
10002c920:     	b.lo	0x10002c8cc <benchmark::StrSplit(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char)+0x1d4>
10002c924:     	add	x1, sp, #8
10002c928:     	mov	x0, x19
10002c92c:     	bl	0x10002c9f8 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__push_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&&)>
10002c930:     	ldrsb	w8, [sp, #31]
10002c934:     	tbz	w8, #31, 0x10002c940 <benchmark::StrSplit(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char)+0x248>
10002c938:     	ldr	x0, [sp, #8]
10002c93c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002c940:     	ldp	x29, x30, [sp, #112]
10002c944:     	ldp	x20, x19, [sp, #96]
10002c948:     	ldp	x22, x21, [sp, #80]
10002c94c:     	ldp	x24, x23, [sp, #64]
10002c950:     	ldp	x26, x25, [sp, #48]
10002c954:     	ldp	x28, x27, [sp, #32]
10002c958:     	add	sp, sp, #128
10002c95c:     	ret
10002c960:     	ldr	x8, [x20, #8]
10002c964:     	cmp	x8, x22
10002c968:     	b.lo	0x10002c9a0 <benchmark::StrSplit(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char)+0x2a8>
10002c96c:     	ldr	x20, [x20]
10002c970:     	sub	x21, x8, x22
10002c974:     	cmp	x21, x27
10002c978:     	b.ls	0x10002c8a4 <benchmark::StrSplit(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char)+0x1ac>
10002c97c:     	add	x0, sp, #8
10002c980:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
10002c984:     	b	0x10002c9a8 <benchmark::StrSplit(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char)+0x2b0>
10002c988:     	add	x0, sp, #8
10002c98c:     	bl	0x10002c9e4 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_out_of_range[abi:ue170006]() const>
10002c990:     	b	0x10002c9a8 <benchmark::StrSplit(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char)+0x2b0>
10002c994:     	add	x0, sp, #8
10002c998:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
10002c99c:     	b	0x10002c9a8 <benchmark::StrSplit(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char)+0x2b0>
10002c9a0:     	add	x0, sp, #8
10002c9a4:     	bl	0x10002c9e4 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_out_of_range[abi:ue170006]() const>
10002c9a8:     	brk	#0x1
10002c9ac:     	b	0x10002c9b8 <benchmark::StrSplit(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char)+0x2c0>
10002c9b0:     	b	0x10002c9d0 <benchmark::StrSplit(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char)+0x2d8>
10002c9b4:     	b	0x10002c9d0 <benchmark::StrSplit(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char)+0x2d8>
10002c9b8:     	mov	x20, x0
10002c9bc:     	ldrsb	w8, [sp, #31]
10002c9c0:     	tbz	w8, #31, 0x10002c9d4 <benchmark::StrSplit(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char)+0x2dc>
10002c9c4:     	ldr	x0, [sp, #8]
10002c9c8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002c9cc:     	b	0x10002c9d4 <benchmark::StrSplit(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, char)+0x2dc>
10002c9d0:     	mov	x20, x0
10002c9d4:     	mov	x0, x19
10002c9d8:     	bl	0x100006bdc <std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::~vector[abi:ue170006]()>
10002c9dc:     	mov	x0, x20
10002c9e0:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010002c9e4 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_out_of_range[abi:ue170006]() const>:
10002c9e4:     	stp	x29, x30, [sp, #-16]!
10002c9e8:     	mov	x29, sp
10002c9ec:     	adrp	x0, 0x100031000 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__push_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&&)+0x8>
10002c9f0:     	add	x0, x0, #3691
10002c9f4:     	bl	0x100025c6c <std::__1::__throw_out_of_range[abi:ue170006](char const*)>

000000010002c9f8 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__push_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&&)>:
10002c9f8:     	stp	x22, x21, [sp, #-48]!
10002c9fc:     	stp	x20, x19, [sp, #16]
10002ca00:     	stp	x29, x30, [sp, #32]
10002ca04:     	add	x29, sp, #32
10002ca08:     	mov	x19, x0
10002ca0c:     	mov	x8, #-6148914691236517206
10002ca10:     	movk	x8, #2730, lsl #48
10002ca14:     	ldp	x9, x10, [x0]
10002ca18:     	sub	x10, x10, x9
10002ca1c:     	asr	x10, x10, #3
10002ca20:     	mov	x11, #-6148914691236517206
10002ca24:     	movk	x11, #43691
10002ca28:     	mul	x21, x10, x11
10002ca2c:     	add	x10, x21, #1
10002ca30:     	cmp	x10, x8
10002ca34:     	b.hi	0x10002cb58 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__push_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&&)+0x160>
10002ca38:     	mov	x20, x1
10002ca3c:     	ldr	x12, [x19, #16]
10002ca40:     	sub	x9, x12, x9
10002ca44:     	asr	x9, x9, #3
10002ca48:     	mul	x9, x9, x11
10002ca4c:     	lsl	x11, x9, #1
10002ca50:     	cmp	x11, x10
10002ca54:     	csel	x10, x11, x10, hi
10002ca58:     	mov	x11, #6148914691236517205
10002ca5c:     	movk	x11, #1365, lsl #48
10002ca60:     	cmp	x9, x11
10002ca64:     	csel	x22, x10, x8, lo
10002ca68:     	cbz	x22, 0x10002ca84 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__push_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&&)+0x8c>
10002ca6c:     	cmp	x22, x8
10002ca70:     	b.hi	0x10002cb60 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__push_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&&)+0x168>
10002ca74:     	add	x8, x22, x22, lsl #1
10002ca78:     	lsl	x0, x8, #3
10002ca7c:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10002ca80:     	b	0x10002ca88 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__push_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&&)+0x90>
10002ca84:     	mov	x0, #0
10002ca88:     	mov	w8, #24
10002ca8c:     	madd	x9, x21, x8, x0
10002ca90:     	madd	x8, x22, x8, x0
10002ca94:     	ldr	q0, [x20]
10002ca98:     	str	q0, [x9]
10002ca9c:     	ldr	x10, [x20, #16]
10002caa0:     	str	x10, [x9, #16]
10002caa4:     	stp	xzr, xzr, [x20, #8]
10002caa8:     	str	xzr, [x20]
10002caac:     	add	x10, x9, #24
10002cab0:     	ldp	x11, x0, [x19]
10002cab4:     	cmp	x0, x11
10002cab8:     	b.eq	0x10002cb3c <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__push_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&&)+0x144>
10002cabc:     	ldur	q0, [x0, #-24]
10002cac0:     	ldur	x12, [x0, #-8]
10002cac4:     	stur	x12, [x9, #-8]
10002cac8:     	stur	q0, [x9, #-24]
10002cacc:     	sub	x9, x9, #24
10002cad0:     	stp	xzr, xzr, [x0, #-16]
10002cad4:     	stur	xzr, [x0, #-24]
10002cad8:     	sub	x12, x0, #24
10002cadc:     	mov	x0, x12
10002cae0:     	cmp	x12, x11
10002cae4:     	b.ne	0x10002cabc <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__push_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&&)+0xc4>
10002cae8:     	ldp	x20, x0, [x19]
10002caec:     	stp	x9, x10, [x19]
10002caf0:     	str	x8, [x19, #16]
10002caf4:     	cmp	x0, x20
10002caf8:     	b.ne	0x10002cb0c <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__push_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&&)+0x114>
10002cafc:     	b	0x10002cb28 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__push_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&&)+0x130>
10002cb00:     	mov	x0, x19
10002cb04:     	cmp	x19, x20
10002cb08:     	b.eq	0x10002cb24 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__push_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&&)+0x12c>
10002cb0c:     	sub	x19, x0, #24
10002cb10:     	ldursb	w8, [x0, #-1]
10002cb14:     	tbz	w8, #31, 0x10002cb00 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__push_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&&)+0x108>
10002cb18:     	ldur	x0, [x0, #-24]
10002cb1c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002cb20:     	b	0x10002cb00 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__push_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&&)+0x108>
10002cb24:     	mov	x0, x20
10002cb28:     	cbz	x0, 0x10002cb48 <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__push_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&&)+0x150>
10002cb2c:     	ldp	x29, x30, [sp, #32]
10002cb30:     	ldp	x20, x19, [sp, #16]
10002cb34:     	ldp	x22, x21, [sp], #48
10002cb38:     	b	0x10002f014 <_vsnprintf+0x10002f014>
10002cb3c:     	stp	x9, x10, [x19]
10002cb40:     	str	x8, [x19, #16]
10002cb44:     	cbnz	x0, 0x10002cb2c <void std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__push_back_slow_path<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&&)+0x134>
10002cb48:     	ldp	x29, x30, [sp, #32]
10002cb4c:     	ldp	x20, x19, [sp, #16]
10002cb50:     	ldp	x22, x21, [sp], #48
10002cb54:     	ret
10002cb58:     	mov	x0, x19
10002cb5c:     	bl	0x100017a60 <std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__throw_length_error[abi:ue170006]() const>
10002cb60:     	bl	0x100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>

000000010002cb64 <benchmark::CPUInfo::Get()>:
10002cb64:     	stp	x20, x19, [sp, #-32]!
10002cb68:     	stp	x29, x30, [sp, #16]
10002cb6c:     	add	x29, sp, #16
10002cb70:     	adrp	x8, 0x100038000 <benchmark::CPUInfo::Get()+0x3c>
10002cb74:     	add	x8, x8, #224
10002cb78:     	ldaprb	w8, [x8]
10002cb7c:     	tbz	w8, #0, 0x10002cb94 <benchmark::CPUInfo::Get()+0x30>
10002cb80:     	adrp	x8, 0x100038000 <benchmark::CPUInfo::Get()+0x4c>
10002cb84:     	ldr	x0, [x8, #216]
10002cb88:     	ldp	x29, x30, [sp, #16]
10002cb8c:     	ldp	x20, x19, [sp], #32
10002cb90:     	ret
10002cb94:     	adrp	x0, 0x100038000 <benchmark::CPUInfo::Get()+0x60>
10002cb98:     	add	x0, x0, #224
10002cb9c:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10002cba0:     	cbz	w0, 0x10002cb80 <benchmark::CPUInfo::Get()+0x1c>
10002cba4:     	mov	w0, #64
10002cba8:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10002cbac:     	mov	x19, x0
10002cbb0:     	bl	0x10002cc04 <benchmark::CPUInfo::CPUInfo()>
10002cbb4:     	adrp	x0, 0x100038000 <benchmark::CPUInfo::Get()+0x80>
10002cbb8:     	add	x0, x0, #216
10002cbbc:     	str	x19, [x0], #8
10002cbc0:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10002cbc4:     	adrp	x8, 0x100038000 <benchmark::CPUInfo::Get()+0x90>
10002cbc8:     	ldr	x0, [x8, #216]
10002cbcc:     	ldp	x29, x30, [sp, #16]
10002cbd0:     	ldp	x20, x19, [sp], #32
10002cbd4:     	ret
10002cbd8:     	mov	x20, x0
10002cbdc:     	mov	x0, x19
10002cbe0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002cbe4:     	b	0x10002cbec <benchmark::CPUInfo::Get()+0x88>
10002cbe8:     	mov	x20, x0
10002cbec:     	adrp	x0, 0x100038000 <benchmark::CPUInfo::CPUInfo()+0x18>
10002cbf0:     	add	x0, x0, #224
10002cbf4:     	bl	0x10002f074 <_vsnprintf+0x10002f074>
10002cbf8:     	mov	x0, x20
10002cbfc:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010002cc00 <benchmark::CPUInfo::CPUInfo()>:
10002cc00:     	b	0x10002cc04 <benchmark::CPUInfo::CPUInfo()>

000000010002cc04 <benchmark::CPUInfo::CPUInfo()>:
10002cc04:     	stp	d9, d8, [sp, #-112]!
10002cc08:     	stp	x28, x27, [sp, #16]
10002cc0c:     	stp	x26, x25, [sp, #32]
10002cc10:     	stp	x24, x23, [sp, #48]
10002cc14:     	stp	x22, x21, [sp, #64]
10002cc18:     	stp	x20, x19, [sp, #80]
10002cc1c:     	stp	x29, x30, [sp, #96]
10002cc20:     	add	x29, sp, #96
10002cc24:     	sub	sp, sp, #688
10002cc28:     	mov	x28, x0
10002cc2c:     	adrp	x8, 0x100034000 <benchmark::CPUInfo::CPUInfo()+0x48>
10002cc30:     	ldr	x8, [x8, #928]
10002cc34:     	ldr	x8, [x8]
10002cc38:     	stur	x8, [x29, #-112]
10002cc3c:     	mov	w8, #7
10002cc40:     	strb	w8, [sp, #79]
10002cc44:     	mov	w8, #30568
10002cc48:     	movk	w8, #28206, lsl #16
10002cc4c:     	str	w8, [sp, #56]
10002cc50:     	mov	w8, #25454
10002cc54:     	movk	w8, #30064, lsl #16
10002cc58:     	stur	w8, [sp, #59]
10002cc5c:     	strb	wzr, [sp, #63]
10002cc60:     	add	x0, sp, #96
10002cc64:     	add	x1, sp, #56
10002cc68:     	bl	0x10002dc1c <benchmark::(anonymous namespace)::GetSysctlImp(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
10002cc6c:     	ldr	x20, [sp, #104]
10002cc70:     	cbz	x20, 0x10002ce80 <benchmark::CPUInfo::CPUInfo()+0x27c>
10002cc74:     	ldr	x8, [sp, #96]
10002cc78:     	cmp	x8, #4
10002cc7c:     	ldr	w24, [x20]
10002cc80:     	ldr	x8, [sp, #112]
10002cc84:     	mov	x0, x20
10002cc88:     	blr	x8
10002cc8c:     	ldrsb	w8, [sp, #79]
10002cc90:     	tbnz	w8, #31, 0x10002ce8c <benchmark::CPUInfo::CPUInfo()+0x288>
10002cc94:     	cbz	x20, 0x10002ce98 <benchmark::CPUInfo::CPUInfo()+0x294>
10002cc98:     	str	w24, [x28]
10002cc9c:     	cmp	w24, #1
10002cca0:     	b.lt	0x10002cecc <benchmark::CPUInfo::CPUInfo()+0x2c8>
10002cca4:     	str	x28, [sp, #16]
10002cca8:     	stp	xzr, xzr, [sp, #56]
10002ccac:     	str	xzr, [sp, #72]
10002ccb0:     	str	wzr, [sp, #52]
10002ccb4:     	adrp	x25, 0x100034000 <benchmark::CPUInfo::CPUInfo()+0xd0>
10002ccb8:     	ldr	x25, [x25, #688]
10002ccbc:     	ldr	x26, [x25]
10002ccc0:     	add	x27, sp, #96
10002ccc4:     	add	x20, x27, #16
10002ccc8:     	ldr	x28, [x25, #24]
10002cccc:     	add	x22, x27, #424
10002ccd0:     	adrp	x23, 0x100032000 <benchmark::CPUInfo::CPUInfo()+0xe4>
10002ccd4:     	add	x23, x23, #2252
10002ccd8:     	add	x19, sp, #24
10002ccdc:     	b	0x10002cd24 <benchmark::CPUInfo::CPUInfo()+0x120>
10002cce0:     	str	x26, [sp, #96]
10002cce4:     	ldur	x8, [x26, #-24]
10002cce8:     	str	x28, [x27, x8]
10002ccec:     	mov	x0, x20
10002ccf0:     	bl	0x10002edb0 <_vsnprintf+0x10002edb0>
10002ccf4:     	add	x1, x25, #8
10002ccf8:     	add	x0, sp, #96
10002ccfc:     	bl	0x10002edc8 <_vsnprintf+0x10002edc8>
10002cd00:     	mov	x0, x22
10002cd04:     	bl	0x10002efe4 <_vsnprintf+0x10002efe4>
10002cd08:     	ldrsb	w8, [sp, #47]
10002cd0c:     	tbnz	w8, #31, 0x10002cdd8 <benchmark::CPUInfo::CPUInfo()+0x1d4>
10002cd10:     	ldr	w8, [sp, #52]
10002cd14:     	add	w8, w8, #1
10002cd18:     	str	w8, [sp, #52]
10002cd1c:     	cmp	w8, w24
10002cd20:     	b.ge	0x10002ce64 <benchmark::CPUInfo::CPUInfo()+0x260>
10002cd24:     	add	x8, sp, #24
10002cd28:     	add	x1, sp, #52
10002cd2c:     	adrp	x0, 0x100032000 <benchmark::CPUInfo::CPUInfo()+0x140>
10002cd30:     	add	x0, x0, #2224
10002cd34:     	mov	x2, x23
10002cd38:     	bl	0x10002dd50 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> benchmark::StrCat<char const (&) [28], int&, char const (&) [26]>(char const (&) [28], int&, char const (&) [26])>
10002cd3c:     	ldrsb	w8, [sp, #79]
10002cd40:     	tbz	w8, #31, 0x10002cd4c <benchmark::CPUInfo::CPUInfo()+0x148>
10002cd44:     	ldr	x0, [sp, #56]
10002cd48:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002cd4c:     	stp	xzr, xzr, [sp, #56]
10002cd50:     	str	xzr, [sp, #72]
10002cd54:     	ldrsb	w8, [sp, #47]
10002cd58:     	ldr	x9, [sp, #24]
10002cd5c:     	cmp	w8, #0
10002cd60:     	csel	x1, x9, x19, lt
10002cd64:     	add	x0, sp, #96
10002cd68:     	mov	w2, #8
10002cd6c:     	bl	0x10002df84 <std::__1::basic_ifstream<char, std::__1::char_traits<char>>::basic_ifstream(char const*, unsigned int)>
10002cd70:     	ldr	x8, [sp, #232]
10002cd74:     	cbz	x8, 0x10002cce0 <benchmark::CPUInfo::CPUInfo()+0xdc>
10002cd78:     	add	x0, sp, #96
10002cd7c:     	add	x1, sp, #56
10002cd80:     	bl	0x10002e090 <std::__1::basic_istream<char, std::__1::char_traits<char>>& std::__1::operator>>[abi:ue170006]<char, std::__1::char_traits<char>, std::__1::allocator<char>>(std::__1::basic_istream<char, std::__1::char_traits<char>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&)>
10002cd84:     	ldr	x8, [sp, #96]
10002cd88:     	ldur	x8, [x8, #-24]
10002cd8c:     	add	x8, x27, x8
10002cd90:     	ldr	w21, [x8, #32]
10002cd94:     	str	x26, [sp, #96]
10002cd98:     	ldur	x8, [x26, #-24]
10002cd9c:     	str	x28, [x27, x8]
10002cda0:     	mov	x0, x20
10002cda4:     	bl	0x10002edb0 <_vsnprintf+0x10002edb0>
10002cda8:     	add	x1, x25, #8
10002cdac:     	add	x0, sp, #96
10002cdb0:     	bl	0x10002edc8 <_vsnprintf+0x10002edc8>
10002cdb4:     	mov	x0, x22
10002cdb8:     	bl	0x10002efe4 <_vsnprintf+0x10002efe4>
10002cdbc:     	cbnz	w21, 0x10002cd08 <benchmark::CPUInfo::CPUInfo()+0x104>
10002cdc0:     	ldrsb	w8, [sp, #79]
10002cdc4:     	tbnz	w8, #31, 0x10002cdf8 <benchmark::CPUInfo::CPUInfo()+0x1f4>
10002cdc8:     	cmp	w8, #11
10002cdcc:     	b.ne	0x10002ce40 <benchmark::CPUInfo::CPUInfo()+0x23c>
10002cdd0:     	add	x8, sp, #56
10002cdd4:     	b	0x10002ce08 <benchmark::CPUInfo::CPUInfo()+0x204>
10002cdd8:     	ldr	x0, [sp, #24]
10002cddc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002cde0:     	ldr	w8, [sp, #52]
10002cde4:     	add	w8, w8, #1
10002cde8:     	str	w8, [sp, #52]
10002cdec:     	cmp	w8, w24
10002cdf0:     	b.lt	0x10002cd24 <benchmark::CPUInfo::CPUInfo()+0x120>
10002cdf4:     	b	0x10002ce64 <benchmark::CPUInfo::CPUInfo()+0x260>
10002cdf8:     	ldr	x8, [sp, #64]
10002cdfc:     	cmp	x8, #11
10002ce00:     	b.ne	0x10002ce40 <benchmark::CPUInfo::CPUInfo()+0x23c>
10002ce04:     	ldr	x8, [sp, #56]
10002ce08:     	ldr	x9, [x8]
10002ce0c:     	mov	x10, #25968
10002ce10:     	movk	x10, #26226, lsl #16
10002ce14:     	movk	x10, #29295, lsl #32
10002ce18:     	movk	x10, #24941, lsl #48
10002ce1c:     	eor	x9, x9, x10
10002ce20:     	ldur	x8, [x8, #3]
10002ce24:     	mov	x10, #28518
10002ce28:     	movk	x10, #28018, lsl #16
10002ce2c:     	movk	x10, #28257, lsl #32
10002ce30:     	movk	x10, #25955, lsl #48
10002ce34:     	eor	x8, x8, x10
10002ce38:     	orr	x8, x9, x8
10002ce3c:     	cbz	x8, 0x10002cd08 <benchmark::CPUInfo::CPUInfo()+0x104>
10002ce40:     	ldrsb	w8, [sp, #47]
10002ce44:     	tbz	w8, #31, 0x10002ce50 <benchmark::CPUInfo::CPUInfo()+0x24c>
10002ce48:     	ldr	x0, [sp, #24]
10002ce4c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002ce50:     	mov	w19, #1
10002ce54:     	ldr	x28, [sp, #16]
10002ce58:     	ldrsb	w8, [sp, #79]
10002ce5c:     	tbz	w8, #31, 0x10002ced0 <benchmark::CPUInfo::CPUInfo()+0x2cc>
10002ce60:     	b	0x10002ce74 <benchmark::CPUInfo::CPUInfo()+0x270>
10002ce64:     	mov	w19, #2
10002ce68:     	ldr	x28, [sp, #16]
10002ce6c:     	ldrsb	w8, [sp, #79]
10002ce70:     	tbz	w8, #31, 0x10002ced0 <benchmark::CPUInfo::CPUInfo()+0x2cc>
10002ce74:     	ldr	x0, [sp, #56]
10002ce78:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002ce7c:     	b	0x10002ced0 <benchmark::CPUInfo::CPUInfo()+0x2cc>
10002ce80:     	mov	w24, #0
10002ce84:     	ldrsb	w8, [sp, #79]
10002ce88:     	tbz	w8, #31, 0x10002cc94 <benchmark::CPUInfo::CPUInfo()+0x90>
10002ce8c:     	ldr	x0, [sp, #56]
10002ce90:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002ce94:     	cbnz	x20, 0x10002cc98 <benchmark::CPUInfo::CPUInfo()+0x94>
10002ce98:     	adrp	x8, 0x100034000 <benchmark::CPUInfo::CPUInfo()+0x2b4>
10002ce9c:     	ldr	x8, [x8, #936]
10002cea0:     	ldr	x19, [x8]
10002cea4:     	bl	0x10002f0b0 <_vsnprintf+0x10002f0b0>
10002cea8:     	ldr	w0, [x0]
10002ceac:     	bl	0x10002f23c <_vsnprintf+0x10002f23c>
10002ceb0:     	str	x0, [sp]
10002ceb4:     	adrp	x1, 0x100032000 <benchmark::CPUInfo::CPUInfo()+0x2c8>
10002ceb8:     	add	x1, x1, #2215
10002cebc:     	mov	x0, x19
10002cec0:     	bl	0x10002f11c <_vsnprintf+0x10002f11c>
10002cec4:     	mov	w0, #1
10002cec8:     	bl	0x10002f104 <_vsnprintf+0x10002f104>
10002cecc:     	mov	w19, #0
10002ced0:     	str	w19, [x28, #4]
10002ced4:     	mov	w8, #15
10002ced8:     	adrp	x19, 0x100032000 <benchmark::CPUInfo::CPUInfo()+0x2ec>
10002cedc:     	add	x19, x19, #2290
10002cee0:     	strb	w8, [sp, #79]
10002cee4:     	ldr	x8, [x19]
10002cee8:     	str	x8, [sp, #56]
10002ceec:     	ldur	x8, [x19, #7]
10002cef0:     	stur	x8, [sp, #63]
10002cef4:     	strb	wzr, [sp, #71]
10002cef8:     	add	x0, sp, #96
10002cefc:     	add	x1, sp, #56
10002cf00:     	bl	0x10002dc1c <benchmark::(anonymous namespace)::GetSysctlImp(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
10002cf04:     	ldr	x20, [sp, #104]
10002cf08:     	cbz	x20, 0x10002cf20 <benchmark::CPUInfo::CPUInfo()+0x31c>
10002cf0c:     	ldr	x8, [sp, #96]
10002cf10:     	cmp	x8, #4
10002cf14:     	b.ne	0x10002cf28 <benchmark::CPUInfo::CPUInfo()+0x324>
10002cf18:     	ldrsw	x21, [x20]
10002cf1c:     	b	0x10002cf2c <benchmark::CPUInfo::CPUInfo()+0x328>
10002cf20:     	mov	x21, #0
10002cf24:     	b	0x10002cf38 <benchmark::CPUInfo::CPUInfo()+0x334>
10002cf28:     	ldr	x21, [x20]
10002cf2c:     	ldr	x8, [sp, #112]
10002cf30:     	mov	x0, x20
10002cf34:     	blr	x8
10002cf38:     	ldrsb	w8, [sp, #79]
10002cf3c:     	tbnz	w8, #31, 0x10002cf4c <benchmark::CPUInfo::CPUInfo()+0x348>
10002cf40:     	cbz	x20, 0x10002cf58 <benchmark::CPUInfo::CPUInfo()+0x354>
10002cf44:     	ucvtf	d0, x21
10002cf48:     	b	0x10002d124 <benchmark::CPUInfo::CPUInfo()+0x520>
10002cf4c:     	ldr	x0, [sp, #56]
10002cf50:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002cf54:     	cbnz	x20, 0x10002cf44 <benchmark::CPUInfo::CPUInfo()+0x340>
10002cf58:     	adrp	x21, 0x100034000 <benchmark::CPUInfo::CPUInfo()+0x374>
10002cf5c:     	ldr	x21, [x21, #936]
10002cf60:     	ldr	x20, [x21]
10002cf64:     	bl	0x10002f0b0 <_vsnprintf+0x10002f0b0>
10002cf68:     	ldr	w0, [x0]
10002cf6c:     	bl	0x10002f23c <_vsnprintf+0x10002f23c>
10002cf70:     	stp	x19, x0, [sp]
10002cf74:     	adrp	x1, 0x100032000 <benchmark::CPUInfo::CPUInfo()+0x388>
10002cf78:     	add	x1, x1, #2306
10002cf7c:     	mov	x0, x20
10002cf80:     	bl	0x10002f11c <_vsnprintf+0x10002f11c>
10002cf84:     	ldr	x3, [x21]
10002cf88:     	adrp	x0, 0x100032000 <benchmark::CPUInfo::CPUInfo()+0x39c>
10002cf8c:     	add	x0, x0, #2358
10002cf90:     	mov	w1, #71
10002cf94:     	mov	w2, #1
10002cf98:     	bl	0x10002f128 <_vsnprintf+0x10002f128>
10002cf9c:     	strb	wzr, [sp, #56]
10002cfa0:     	adrp	x0, 0x100034000 <benchmark::CPUInfo::CPUInfo()+0x3bc>
10002cfa4:     	ldr	x0, [x0, #456]
10002cfa8:     	adrp	x1, 0x100032000 <benchmark::CPUInfo::CPUInfo()+0x3bc>
10002cfac:     	add	x1, x1, #2430
10002cfb0:     	mov	w2, #86
10002cfb4:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10002cfb8:     	mov	x20, x0
10002cfbc:     	ldr	x8, [x0]
10002cfc0:     	ldur	x8, [x8, #-24]
10002cfc4:     	add	x0, x0, x8
10002cfc8:     	add	x8, sp, #96
10002cfcc:     	bl	0x10002ecfc <_vsnprintf+0x10002ecfc>
10002cfd0:     	adrp	x1, 0x100034000 <benchmark::CPUInfo::CPUInfo()+0x3ec>
10002cfd4:     	ldr	x1, [x1, #480]
10002cfd8:     	add	x0, sp, #96
10002cfdc:     	bl	0x10002ecf0 <_vsnprintf+0x10002ecf0>
10002cfe0:     	ldr	x8, [x0]
10002cfe4:     	ldr	x8, [x8, #56]
10002cfe8:     	mov	w1, #10
10002cfec:     	blr	x8
10002cff0:     	mov	x21, x0
10002cff4:     	add	x0, sp, #96
10002cff8:     	bl	0x10002ef84 <_vsnprintf+0x10002ef84>
10002cffc:     	mov	x0, x20
10002d000:     	mov	x1, x21
10002d004:     	bl	0x10002edd4 <_vsnprintf+0x10002edd4>
10002d008:     	mov	x0, x20
10002d00c:     	bl	0x10002ede0 <_vsnprintf+0x10002ede0>
10002d010:     	bl	0x10002ef48 <_vsnprintf+0x10002ef48>
10002d014:     	mov	x21, x0
10002d018:     	bl	0x10002f194 <_vsnprintf+0x10002f194>
10002d01c:     	mov	x20, x0
10002d020:     	mov	w19, #0
10002d024:     	scvtf	d0, x21
10002d028:     	mov	x8, #225833675390976
10002d02c:     	movk	x8, #16845, lsl #48
10002d030:     	fmov	d1, x8
10002d034:     	and	x8, x0, #0xffffffff
10002d038:     	add	x8, x8, w20, uxtw #1
10002d03c:     	lsr	x8, x8, #32
10002d040:     	sub	w9, w20, w8
10002d044:     	add	w8, w8, w9, lsr #1
10002d048:     	lsr	w8, w8, #30
10002d04c:     	bfi	w8, w8, #31, #1
10002d050:     	fdiv	d8, d0, d1
10002d054:     	adds	w8, w20, w8
10002d058:     	csinc	w27, w8, wzr, ne
10002d05c:     	mov	w21, #5009
10002d060:     	movk	w21, #48271, lsl #16
10002d064:     	mov	w22, #44488
10002d068:     	mov	w23, #48271
10002d06c:     	mov	w24, #3399
10002d070:     	mov	w25, #2147483647
10002d074:     	mov	x26, #225833675390976
10002d078:     	movk	x26, #16845, lsl #48
10002d07c:     	fmov	d9, #1.00000000
10002d080:     	mov	x8, #-10000
10002d084:     	umull	x9, w27, w21
10002d088:     	lsr	x9, x9, #47
10002d08c:     	msub	w10, w9, w22, w27
10002d090:     	mul	w10, w10, w23
10002d094:     	mul	w9, w9, w24
10002d098:     	subs	w9, w10, w9
10002d09c:     	csel	w10, w25, wzr, lo
10002d0a0:     	add	w27, w10, w9
10002d0a4:     	adds	x8, x8, #1
10002d0a8:     	b.lo	0x10002d084 <benchmark::CPUInfo::CPUInfo()+0x480>
10002d0ac:     	umull	x8, w27, w21
10002d0b0:     	lsr	x8, x8, #47
10002d0b4:     	msub	w9, w8, w22, w27
10002d0b8:     	mul	w9, w9, w23
10002d0bc:     	mul	w8, w8, w24
10002d0c0:     	subs	w8, w9, w8
10002d0c4:     	csel	w9, w25, wzr, lo
10002d0c8:     	add	w27, w9, w8
10002d0cc:     	add	w19, w27, w19
10002d0d0:     	str	w19, [sp, #96]
10002d0d4:     	bl	0x10002ef48 <_vsnprintf+0x10002ef48>
10002d0d8:     	scvtf	d0, x0
10002d0dc:     	fmov	d1, x26
10002d0e0:     	fdiv	d0, d0, d1
10002d0e4:     	fsub	d0, d0, d8
10002d0e8:     	fcmp	d0, d9
10002d0ec:     	b.mi	0x10002d080 <benchmark::CPUInfo::CPUInfo()+0x47c>
10002d0f0:     	add	x8, sp, #96
10002d0f4:     	bl	0x10002f194 <_vsnprintf+0x10002f194>
10002d0f8:     	mov	x21, x0
10002d0fc:     	bl	0x10002ef48 <_vsnprintf+0x10002ef48>
10002d100:     	sub	x8, x21, x20
10002d104:     	scvtf	d0, x8
10002d108:     	scvtf	d1, x0
10002d10c:     	mov	x8, #225833675390976
10002d110:     	movk	x8, #16845, lsl #48
10002d114:     	fmov	d2, x8
10002d118:     	fdiv	d1, d1, d2
10002d11c:     	fsub	d1, d1, d8
10002d120:     	fdiv	d0, d0, d1
10002d124:     	mov	x20, x28
10002d128:     	str	xzr, [x20, #16]!
10002d12c:     	stur	d0, [x20, #-8]
10002d130:     	stp	xzr, xzr, [x20, #8]
10002d134:     	mov	w8, #14
10002d138:     	adrp	x9, 0x100032000 <benchmark::CPUInfo::CPUInfo()+0x548>
10002d13c:     	add	x9, x9, #2549
10002d140:     	strb	w8, [sp, #79]
10002d144:     	ldr	x8, [x9]
10002d148:     	str	x8, [sp, #56]
10002d14c:     	ldur	x8, [x9, #6]
10002d150:     	stur	x8, [sp, #62]
10002d154:     	strb	wzr, [sp, #70]
10002d158:     	add	x0, sp, #96
10002d15c:     	add	x1, sp, #56
10002d160:     	bl	0x10002dc1c <benchmark::(anonymous namespace)::GetSysctlImp(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
10002d164:     	ldr	x8, [sp, #104]
10002d168:     	cbz	x8, 0x10002d350 <benchmark::CPUInfo::CPUInfo()+0x74c>
10002d16c:     	adrp	x8, 0x100038000 <benchmark::CPUInfo::CPUInfo()+0x594>
10002d170:     	add	x8, x8, #8
10002d174:     	ldaprb	w8, [x8]
10002d178:     	tbz	w8, #0, 0x10002d6f8 <benchmark::CPUInfo::CPUInfo()+0xaf4>
10002d17c:     	ldp	x0, x8, [sp, #104]
10002d180:     	ldr	w23, [x0, #4]
10002d184:     	ldr	x19, [x0, #8]
10002d188:     	blr	x8
10002d18c:     	add	x22, sp, #96
10002d190:     	ldrsb	w8, [sp, #79]
10002d194:     	tbnz	w8, #31, 0x10002d364 <benchmark::CPUInfo::CPUInfo()+0x760>
10002d198:     	mov	w8, #15
10002d19c:     	strb	w8, [sp, #119]
10002d1a0:     	adrp	x9, 0x100032000 <benchmark::CPUInfo::CPUInfo()+0x5b0>
10002d1a4:     	add	x9, x9, #2564
10002d1a8:     	ldr	x10, [x9]
10002d1ac:     	str	x10, [sp, #96]
10002d1b0:     	ldur	x9, [x9, #7]
10002d1b4:     	stur	x9, [sp, #103]
10002d1b8:     	strb	wzr, [sp, #111]
10002d1bc:     	add	x21, sp, #96
10002d1c0:     	mov	w9, #4
10002d1c4:     	strb	w9, [sp, #143]
10002d1c8:     	mov	w9, #24900
10002d1cc:     	movk	w9, #24948, lsl #16
10002d1d0:     	str	w9, [sp, #120]
10002d1d4:     	strb	wzr, [sp, #124]
10002d1d8:     	mov	w9, #1
10002d1dc:     	stp	w9, w23, [sp, #144]
10002d1e0:     	strb	w8, [sp, #175]
10002d1e4:     	adrp	x8, 0x100032000 <benchmark::CPUInfo::CPUInfo()+0x5f4>
10002d1e8:     	add	x8, x8, #2580
10002d1ec:     	ldr	x10, [x8]
10002d1f0:     	str	x10, [sp, #152]
10002d1f4:     	ldur	x8, [x8, #7]
10002d1f8:     	stur	x8, [x22, #63]
10002d1fc:     	strb	wzr, [sp, #167]
10002d200:     	mov	w8, #11
10002d204:     	strb	w8, [sp, #199]
10002d208:     	mov	w8, #26996
10002d20c:     	movk	w8, #28271, lsl #16
10002d210:     	stur	w8, [x22, #87]
10002d214:     	adrp	x8, 0x100032000 <benchmark::CPUInfo::CPUInfo()+0x624>
10002d218:     	add	x8, x8, #2596
10002d21c:     	ldr	x8, [x8]
10002d220:     	str	x8, [sp, #176]
10002d224:     	strb	wzr, [sp, #187]
10002d228:     	stp	w9, w23, [sp, #200]
10002d22c:     	mov	w8, #14
10002d230:     	strb	w8, [sp, #231]
10002d234:     	adrp	x9, 0x100032000 <benchmark::CPUInfo::CPUInfo()+0x644>
10002d238:     	add	x9, x9, #2608
10002d23c:     	ldr	x10, [x9]
10002d240:     	str	x10, [sp, #208]
10002d244:     	ldur	x9, [x9, #6]
10002d248:     	stur	x9, [x22, #118]
10002d24c:     	strb	wzr, [sp, #222]
10002d250:     	mov	w9, #7
10002d254:     	strb	w9, [sp, #255]
10002d258:     	mov	w10, #28245
10002d25c:     	movk	w10, #26217, lsl #16
10002d260:     	str	w10, [sp, #232]
10002d264:     	mov	w11, #26982
10002d268:     	movk	w11, #25701, lsl #16
10002d26c:     	stur	w11, [x22, #139]
10002d270:     	strb	wzr, [sp, #239]
10002d274:     	mov	w12, #2
10002d278:     	str	w12, [sp, #256]
10002d27c:     	str	w19, [sp, #260]
10002d280:     	strb	w8, [sp, #287]
10002d284:     	adrp	x8, 0x100032000 <benchmark::CPUInfo::CPUInfo()+0x694>
10002d288:     	add	x8, x8, #2631
10002d28c:     	ldur	x12, [x8, #6]
10002d290:     	stur	x12, [x22, #174]
10002d294:     	ldr	x8, [x8]
10002d298:     	str	x8, [sp, #264]
10002d29c:     	strb	wzr, [sp, #278]
10002d2a0:     	strb	w9, [sp, #311]
10002d2a4:     	str	w10, [sp, #288]
10002d2a8:     	stur	w11, [x22, #195]
10002d2ac:     	strb	wzr, [sp, #295]
10002d2b0:     	mov	w8, #3
10002d2b4:     	lsr	x9, x19, #32
10002d2b8:     	str	w8, [sp, #312]
10002d2bc:     	str	w9, [sp, #316]
10002d2c0:     	add	x0, sp, #56
10002d2c4:     	add	x1, sp, #96
10002d2c8:     	bl	0x10002dc1c <benchmark::(anonymous namespace)::GetSysctlImp(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
10002d2cc:     	add	x8, sp, #56
10002d2d0:     	add	x22, x8, #24
10002d2d4:     	ldr	x0, [sp, #64]
10002d2d8:     	cbz	x0, 0x10002d38c <benchmark::CPUInfo::CPUInfo()+0x788>
10002d2dc:     	ldr	x8, [sp, #56]
10002d2e0:     	cmp	x8, #4
10002d2e4:     	ldr	w19, [x0]
10002d2e8:     	ldr	x8, [sp, #72]
10002d2ec:     	blr	x8
10002d2f0:     	add	x1, x21, #24
10002d2f4:     	stp	xzr, xzr, [sp, #56]
10002d2f8:     	str	xzr, [sp, #72]
10002d2fc:     	add	x0, sp, #56
10002d300:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
10002d304:     	ldp	w8, w9, [sp, #144]
10002d308:     	stp	w8, w19, [sp, #80]
10002d30c:     	str	w9, [sp, #88]
10002d310:     	ldp	x8, x9, [x28, #24]
10002d314:     	cmp	x8, x9
10002d318:     	b.hs	0x10002d370 <benchmark::CPUInfo::CPUInfo()+0x76c>
10002d31c:     	ldur	q0, [sp, #56]
10002d320:     	ldr	x9, [sp, #72]
10002d324:     	str	x9, [x8, #16]
10002d328:     	str	q0, [x8]
10002d32c:     	stp	xzr, xzr, [sp, #64]
10002d330:     	str	xzr, [sp, #56]
10002d334:     	ldr	w9, [x22, #8]
10002d338:     	ldr	x10, [x22]
10002d33c:     	str	x10, [x8, #24]
10002d340:     	str	w9, [x8, #32]
10002d344:     	add	x8, x8, #40
10002d348:     	str	x8, [x28, #24]
10002d34c:     	b	0x10002d38c <benchmark::CPUInfo::CPUInfo()+0x788>
10002d350:     	mov	w23, #0
10002d354:     	mov	x19, #0
10002d358:     	add	x22, sp, #96
10002d35c:     	ldrsb	w8, [sp, #79]
10002d360:     	tbz	w8, #31, 0x10002d198 <benchmark::CPUInfo::CPUInfo()+0x594>
10002d364:     	ldr	x0, [sp, #56]
10002d368:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002d36c:     	b	0x10002d198 <benchmark::CPUInfo::CPUInfo()+0x594>
10002d370:     	add	x1, sp, #56
10002d374:     	mov	x0, x20
10002d378:     	bl	0x10002e3f4 <void std::__1::vector<benchmark::CPUInfo::CacheInfo, std::__1::allocator<benchmark::CPUInfo::CacheInfo>>::__push_back_slow_path<benchmark::CPUInfo::CacheInfo>(benchmark::CPUInfo::CacheInfo&&)>
10002d37c:     	ldrsb	w8, [sp, #79]
10002d380:     	tbz	w8, #31, 0x10002d38c <benchmark::CPUInfo::CPUInfo()+0x788>
10002d384:     	ldr	x0, [sp, #56]
10002d388:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002d38c:     	add	x1, x21, #56
10002d390:     	add	x0, sp, #56
10002d394:     	bl	0x10002dc1c <benchmark::(anonymous namespace)::GetSysctlImp(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
10002d398:     	ldr	x0, [sp, #64]
10002d39c:     	cbz	x0, 0x10002d430 <benchmark::CPUInfo::CPUInfo()+0x82c>
10002d3a0:     	ldr	x8, [sp, #56]
10002d3a4:     	cmp	x8, #4
10002d3a8:     	ldr	w19, [x0]
10002d3ac:     	ldr	x8, [sp, #72]
10002d3b0:     	blr	x8
10002d3b4:     	add	x1, x21, #80
10002d3b8:     	stp	xzr, xzr, [sp, #56]
10002d3bc:     	str	xzr, [sp, #72]
10002d3c0:     	add	x0, sp, #56
10002d3c4:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
10002d3c8:     	ldp	w8, w9, [sp, #200]
10002d3cc:     	stp	w8, w19, [sp, #80]
10002d3d0:     	str	w9, [sp, #88]
10002d3d4:     	ldp	x8, x9, [x28, #24]
10002d3d8:     	cmp	x8, x9
10002d3dc:     	b.hs	0x10002d414 <benchmark::CPUInfo::CPUInfo()+0x810>
10002d3e0:     	ldur	q0, [sp, #56]
10002d3e4:     	ldr	x9, [sp, #72]
10002d3e8:     	str	x9, [x8, #16]
10002d3ec:     	str	q0, [x8]
10002d3f0:     	stp	xzr, xzr, [sp, #64]
10002d3f4:     	str	xzr, [sp, #56]
10002d3f8:     	ldr	w9, [x22, #8]
10002d3fc:     	ldr	x10, [x22]
10002d400:     	str	x10, [x8, #24]
10002d404:     	str	w9, [x8, #32]
10002d408:     	add	x8, x8, #40
10002d40c:     	str	x8, [x28, #24]
10002d410:     	b	0x10002d430 <benchmark::CPUInfo::CPUInfo()+0x82c>
10002d414:     	add	x1, sp, #56
10002d418:     	mov	x0, x20
10002d41c:     	bl	0x10002e3f4 <void std::__1::vector<benchmark::CPUInfo::CacheInfo, std::__1::allocator<benchmark::CPUInfo::CacheInfo>>::__push_back_slow_path<benchmark::CPUInfo::CacheInfo>(benchmark::CPUInfo::CacheInfo&&)>
10002d420:     	ldrsb	w8, [sp, #79]
10002d424:     	tbz	w8, #31, 0x10002d430 <benchmark::CPUInfo::CPUInfo()+0x82c>
10002d428:     	ldr	x0, [sp, #56]
10002d42c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002d430:     	add	x1, x21, #112
10002d434:     	add	x0, sp, #56
10002d438:     	bl	0x10002dc1c <benchmark::(anonymous namespace)::GetSysctlImp(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
10002d43c:     	ldr	x0, [sp, #64]
10002d440:     	cbz	x0, 0x10002d4d8 <benchmark::CPUInfo::CPUInfo()+0x8d4>
10002d444:     	ldr	x8, [sp, #56]
10002d448:     	cmp	x8, #4
10002d44c:     	ldr	w19, [x0]
10002d450:     	ldr	x8, [sp, #72]
10002d454:     	blr	x8
10002d458:     	add	x1, x21, #136
10002d45c:     	stp	xzr, xzr, [sp, #56]
10002d460:     	str	xzr, [sp, #72]
10002d464:     	add	x0, sp, #56
10002d468:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
10002d46c:     	ldr	w8, [sp, #256]
10002d470:     	ldr	w9, [sp, #260]
10002d474:     	stp	w8, w19, [sp, #80]
10002d478:     	str	w9, [sp, #88]
10002d47c:     	ldp	x8, x9, [x28, #24]
10002d480:     	cmp	x8, x9
10002d484:     	b.hs	0x10002d4bc <benchmark::CPUInfo::CPUInfo()+0x8b8>
10002d488:     	ldur	q0, [sp, #56]
10002d48c:     	ldr	x9, [sp, #72]
10002d490:     	str	x9, [x8, #16]
10002d494:     	str	q0, [x8]
10002d498:     	stp	xzr, xzr, [sp, #64]
10002d49c:     	str	xzr, [sp, #56]
10002d4a0:     	ldr	w9, [x22, #8]
10002d4a4:     	ldr	x10, [x22]
10002d4a8:     	str	x10, [x8, #24]
10002d4ac:     	str	w9, [x8, #32]
10002d4b0:     	add	x8, x8, #40
10002d4b4:     	str	x8, [x28, #24]
10002d4b8:     	b	0x10002d4d8 <benchmark::CPUInfo::CPUInfo()+0x8d4>
10002d4bc:     	add	x1, sp, #56
10002d4c0:     	mov	x0, x20
10002d4c4:     	bl	0x10002e3f4 <void std::__1::vector<benchmark::CPUInfo::CacheInfo, std::__1::allocator<benchmark::CPUInfo::CacheInfo>>::__push_back_slow_path<benchmark::CPUInfo::CacheInfo>(benchmark::CPUInfo::CacheInfo&&)>
10002d4c8:     	ldrsb	w8, [sp, #79]
10002d4cc:     	tbz	w8, #31, 0x10002d4d8 <benchmark::CPUInfo::CPUInfo()+0x8d4>
10002d4d0:     	ldr	x0, [sp, #56]
10002d4d4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002d4d8:     	add	x1, x21, #168
10002d4dc:     	add	x0, sp, #56
10002d4e0:     	bl	0x10002dc1c <benchmark::(anonymous namespace)::GetSysctlImp(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>
10002d4e4:     	ldr	x0, [sp, #64]
10002d4e8:     	cbz	x0, 0x10002d580 <benchmark::CPUInfo::CPUInfo()+0x97c>
10002d4ec:     	ldr	x8, [sp, #56]
10002d4f0:     	cmp	x8, #4
10002d4f4:     	ldr	w19, [x0]
10002d4f8:     	ldr	x8, [sp, #72]
10002d4fc:     	blr	x8
10002d500:     	add	x1, x21, #192
10002d504:     	stp	xzr, xzr, [sp, #56]
10002d508:     	str	xzr, [sp, #72]
10002d50c:     	add	x0, sp, #56
10002d510:     	bl	0x10002ed80 <_vsnprintf+0x10002ed80>
10002d514:     	ldr	w8, [sp, #312]
10002d518:     	ldr	w9, [sp, #316]
10002d51c:     	stp	w8, w19, [sp, #80]
10002d520:     	str	w9, [sp, #88]
10002d524:     	ldp	x8, x9, [x28, #24]
10002d528:     	cmp	x8, x9
10002d52c:     	b.hs	0x10002d56c <benchmark::CPUInfo::CPUInfo()+0x968>
10002d530:     	ldur	q0, [sp, #56]
10002d534:     	ldr	x9, [sp, #72]
10002d538:     	str	x9, [x8, #16]
10002d53c:     	str	q0, [x8]
10002d540:     	stp	xzr, xzr, [sp, #64]
10002d544:     	str	xzr, [sp, #56]
10002d548:     	ldr	w9, [x22, #8]
10002d54c:     	ldr	x10, [x22]
10002d550:     	str	x10, [x8, #24]
10002d554:     	str	w9, [x8, #32]
10002d558:     	add	x8, x8, #40
10002d55c:     	str	x8, [x28, #24]
10002d560:     	ldrsb	w8, [sp, #311]
10002d564:     	tbz	w8, #31, 0x10002d588 <benchmark::CPUInfo::CPUInfo()+0x984>
10002d568:     	b	0x10002d678 <benchmark::CPUInfo::CPUInfo()+0xa74>
10002d56c:     	add	x1, sp, #56
10002d570:     	mov	x0, x20
10002d574:     	bl	0x10002e3f4 <void std::__1::vector<benchmark::CPUInfo::CacheInfo, std::__1::allocator<benchmark::CPUInfo::CacheInfo>>::__push_back_slow_path<benchmark::CPUInfo::CacheInfo>(benchmark::CPUInfo::CacheInfo&&)>
10002d578:     	ldrsb	w8, [sp, #79]
10002d57c:     	tbnz	w8, #31, 0x10002d668 <benchmark::CPUInfo::CPUInfo()+0xa64>
10002d580:     	ldrsb	w8, [sp, #311]
10002d584:     	tbnz	w8, #31, 0x10002d678 <benchmark::CPUInfo::CPUInfo()+0xa74>
10002d588:     	ldrsb	w8, [sp, #287]
10002d58c:     	tbnz	w8, #31, 0x10002d688 <benchmark::CPUInfo::CPUInfo()+0xa84>
10002d590:     	ldrsb	w8, [sp, #255]
10002d594:     	tbnz	w8, #31, 0x10002d698 <benchmark::CPUInfo::CPUInfo()+0xa94>
10002d598:     	ldrsb	w8, [sp, #231]
10002d59c:     	tbnz	w8, #31, 0x10002d6a8 <benchmark::CPUInfo::CPUInfo()+0xaa4>
10002d5a0:     	ldrsb	w8, [sp, #199]
10002d5a4:     	tbnz	w8, #31, 0x10002d6b8 <benchmark::CPUInfo::CPUInfo()+0xab4>
10002d5a8:     	ldrsb	w8, [sp, #175]
10002d5ac:     	tbnz	w8, #31, 0x10002d6c8 <benchmark::CPUInfo::CPUInfo()+0xac4>
10002d5b0:     	ldrsb	w8, [sp, #143]
10002d5b4:     	tbnz	w8, #31, 0x10002d6d8 <benchmark::CPUInfo::CPUInfo()+0xad4>
10002d5b8:     	ldrsb	w8, [sp, #119]
10002d5bc:     	tbnz	w8, #31, 0x10002d6e8 <benchmark::CPUInfo::CPUInfo()+0xae4>
10002d5c0:     	mov	x22, x28
10002d5c4:     	stp	xzr, xzr, [x22, #40]!
10002d5c8:     	str	xzr, [x22, #16]
10002d5cc:     	mov	w0, #24
10002d5d0:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10002d5d4:     	mov	x21, x0
10002d5d8:     	add	x8, x0, #24
10002d5dc:     	stp	x8, x8, [x28, #48]
10002d5e0:     	stp	xzr, xzr, [x0, #8]
10002d5e4:     	str	xzr, [x0]
10002d5e8:     	str	x0, [x28, #40]
10002d5ec:     	mov	w1, #3
10002d5f0:     	bl	0x10002f14c <_vsnprintf+0x10002f14c>
10002d5f4:     	cmp	w0, #1
10002d5f8:     	b.lt	0x10002d624 <benchmark::CPUInfo::CPUInfo()+0xa20>
10002d5fc:     	mov	w8, w0
10002d600:     	cmp	w0, #4
10002d604:     	b.lo	0x10002d618 <benchmark::CPUInfo::CPUInfo()+0xa14>
10002d608:     	sub	x1, x8, #3
10002d60c:     	mov	x0, x22
10002d610:     	bl	0x10002e5a0 <std::__1::vector<double, std::__1::allocator<double>>::__append(unsigned long)>
10002d614:     	b	0x10002d628 <benchmark::CPUInfo::CPUInfo()+0xa24>
10002d618:     	cmp	w0, #3
10002d61c:     	b.eq	0x10002d628 <benchmark::CPUInfo::CPUInfo()+0xa24>
10002d620:     	add	x21, x21, x8, lsl #3
10002d624:     	str	x21, [x28, #48]
10002d628:     	ldur	x8, [x29, #-112]
10002d62c:     	adrp	x9, 0x100034000 <benchmark::CPUInfo::CPUInfo()+0xa44>
10002d630:     	ldr	x9, [x9, #928]
10002d634:     	ldr	x9, [x9]
10002d638:     	cmp	x9, x8
10002d63c:     	b.ne	0x10002d6f4 <benchmark::CPUInfo::CPUInfo()+0xaf0>
10002d640:     	mov	x0, x28
10002d644:     	add	sp, sp, #688
10002d648:     	ldp	x29, x30, [sp, #96]
10002d64c:     	ldp	x20, x19, [sp, #80]
10002d650:     	ldp	x22, x21, [sp, #64]
10002d654:     	ldp	x24, x23, [sp, #48]
10002d658:     	ldp	x26, x25, [sp, #32]
10002d65c:     	ldp	x28, x27, [sp, #16]
10002d660:     	ldp	d9, d8, [sp], #112
10002d664:     	ret
10002d668:     	ldr	x0, [sp, #56]
10002d66c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002d670:     	ldrsb	w8, [sp, #311]
10002d674:     	tbz	w8, #31, 0x10002d588 <benchmark::CPUInfo::CPUInfo()+0x984>
10002d678:     	ldr	x0, [sp, #288]
10002d67c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002d680:     	ldrsb	w8, [sp, #287]
10002d684:     	tbz	w8, #31, 0x10002d590 <benchmark::CPUInfo::CPUInfo()+0x98c>
10002d688:     	ldr	x0, [sp, #264]
10002d68c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002d690:     	ldrsb	w8, [sp, #255]
10002d694:     	tbz	w8, #31, 0x10002d598 <benchmark::CPUInfo::CPUInfo()+0x994>
10002d698:     	ldr	x0, [sp, #232]
10002d69c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002d6a0:     	ldrsb	w8, [sp, #231]
10002d6a4:     	tbz	w8, #31, 0x10002d5a0 <benchmark::CPUInfo::CPUInfo()+0x99c>
10002d6a8:     	ldr	x0, [sp, #208]
10002d6ac:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002d6b0:     	ldrsb	w8, [sp, #199]
10002d6b4:     	tbz	w8, #31, 0x10002d5a8 <benchmark::CPUInfo::CPUInfo()+0x9a4>
10002d6b8:     	ldr	x0, [sp, #176]
10002d6bc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002d6c0:     	ldrsb	w8, [sp, #175]
10002d6c4:     	tbz	w8, #31, 0x10002d5b0 <benchmark::CPUInfo::CPUInfo()+0x9ac>
10002d6c8:     	ldr	x0, [sp, #152]
10002d6cc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002d6d0:     	ldrsb	w8, [sp, #143]
10002d6d4:     	tbz	w8, #31, 0x10002d5b8 <benchmark::CPUInfo::CPUInfo()+0x9b4>
10002d6d8:     	ldr	x0, [sp, #120]
10002d6dc:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002d6e0:     	ldrsb	w8, [sp, #119]
10002d6e4:     	tbz	w8, #31, 0x10002d5c0 <benchmark::CPUInfo::CPUInfo()+0x9bc>
10002d6e8:     	ldr	x0, [sp, #96]
10002d6ec:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002d6f0:     	b	0x10002d5c0 <benchmark::CPUInfo::CPUInfo()+0x9bc>
10002d6f4:     	bl	0x10002f0d4 <_vsnprintf+0x10002f0d4>
10002d6f8:     	adrp	x0, 0x100038000 <benchmark::CPUInfo::CPUInfo()+0xb20>
10002d6fc:     	add	x0, x0, #8
10002d700:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10002d704:     	cbz	w0, 0x10002d17c <benchmark::CPUInfo::CPUInfo()+0x578>
10002d708:     	adrp	x8, 0x100038000 <benchmark::CPUInfo::CPUInfo()+0xb30>
10002d70c:     	str	xzr, [x8]
10002d710:     	adrp	x0, 0x100038000 <benchmark::CPUInfo::CPUInfo()+0xb38>
10002d714:     	add	x0, x0, #8
10002d718:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10002d71c:     	b	0x10002d17c <benchmark::CPUInfo::CPUInfo()+0x578>
10002d720:     	b	0x10002d724 <benchmark::CPUInfo::CPUInfo()+0xb20>
10002d724:     	mov	x21, x0
10002d728:     	add	x0, sp, #56
10002d72c:     	bl	0x10002e310 <benchmark::(anonymous namespace)::ThreadAffinityGuard::~ThreadAffinityGuard()>
10002d730:     	mov	x0, x21
10002d734:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
10002d738:     	bl	0x100006a3c <___clang_call_terminate>
10002d73c:     	bl	0x100006a3c <___clang_call_terminate>
10002d740:     	bl	0x100006a3c <___clang_call_terminate>
10002d744:     	mov	x21, x0
10002d748:     	add	x0, sp, #96
10002d74c:     	bl	0x10002ef84 <_vsnprintf+0x10002ef84>
10002d750:     	mov	x0, x21
10002d754:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
10002d758:     	mov	x21, x0
10002d75c:     	b	0x10002d790 <benchmark::CPUInfo::CPUInfo()+0xb8c>
10002d760:     	mov	x21, x0
10002d764:     	ldrsb	w8, [sp, #79]
10002d768:     	tbz	w8, #31, 0x10002d88c <benchmark::CPUInfo::CPUInfo()+0xc88>
10002d76c:     	ldr	x0, [sp, #56]
10002d770:     	b	0x10002d888 <benchmark::CPUInfo::CPUInfo()+0xc84>
10002d774:     	b	0x10002d900 <benchmark::CPUInfo::CPUInfo()+0xcfc>
10002d778:     	b	0x10002d900 <benchmark::CPUInfo::CPUInfo()+0xcfc>
10002d77c:     	mov	x21, x0
10002d780:     	ldr	x0, [x22]
10002d784:     	cbz	x0, 0x10002d790 <benchmark::CPUInfo::CPUInfo()+0xb8c>
10002d788:     	str	x0, [x28, #48]
10002d78c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002d790:     	mov	x0, x20
10002d794:     	bl	0x10002d91c <std::__1::vector<benchmark::CPUInfo::CacheInfo, std::__1::allocator<benchmark::CPUInfo::CacheInfo>>::~vector[abi:ue170006]()>
10002d798:     	mov	x0, x21
10002d79c:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
10002d7a0:     	bl	0x100006a3c <___clang_call_terminate>
10002d7a4:     	mov	x21, x0
10002d7a8:     	ldrsb	w8, [sp, #79]
10002d7ac:     	tbnz	w8, #31, 0x10002d7f4 <benchmark::CPUInfo::CPUInfo()+0xbf0>
10002d7b0:     	ldrsb	w8, [sp, #311]
10002d7b4:     	tbnz	w8, #31, 0x10002d814 <benchmark::CPUInfo::CPUInfo()+0xc10>
10002d7b8:     	ldrsb	w8, [sp, #287]
10002d7bc:     	tbnz	w8, #31, 0x10002d824 <benchmark::CPUInfo::CPUInfo()+0xc20>
10002d7c0:     	ldrsb	w8, [sp, #255]
10002d7c4:     	tbnz	w8, #31, 0x10002d834 <benchmark::CPUInfo::CPUInfo()+0xc30>
10002d7c8:     	ldrsb	w8, [sp, #231]
10002d7cc:     	tbnz	w8, #31, 0x10002d844 <benchmark::CPUInfo::CPUInfo()+0xc40>
10002d7d0:     	ldrsb	w8, [sp, #199]
10002d7d4:     	tbnz	w8, #31, 0x10002d854 <benchmark::CPUInfo::CPUInfo()+0xc50>
10002d7d8:     	ldrsb	w8, [sp, #175]
10002d7dc:     	tbnz	w8, #31, 0x10002d864 <benchmark::CPUInfo::CPUInfo()+0xc60>
10002d7e0:     	ldrsb	w8, [sp, #143]
10002d7e4:     	tbnz	w8, #31, 0x10002d874 <benchmark::CPUInfo::CPUInfo()+0xc70>
10002d7e8:     	ldrsb	w8, [sp, #119]
10002d7ec:     	tbnz	w8, #31, 0x10002d884 <benchmark::CPUInfo::CPUInfo()+0xc80>
10002d7f0:     	b	0x10002d88c <benchmark::CPUInfo::CPUInfo()+0xc88>
10002d7f4:     	ldr	x0, [sp, #56]
10002d7f8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002d7fc:     	ldrsb	w8, [sp, #311]
10002d800:     	tbz	w8, #31, 0x10002d7b8 <benchmark::CPUInfo::CPUInfo()+0xbb4>
10002d804:     	b	0x10002d814 <benchmark::CPUInfo::CPUInfo()+0xc10>
10002d808:     	mov	x21, x0
10002d80c:     	ldrsb	w8, [sp, #311]
10002d810:     	tbz	w8, #31, 0x10002d7b8 <benchmark::CPUInfo::CPUInfo()+0xbb4>
10002d814:     	ldr	x0, [sp, #288]
10002d818:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002d81c:     	ldrsb	w8, [sp, #287]
10002d820:     	tbz	w8, #31, 0x10002d7c0 <benchmark::CPUInfo::CPUInfo()+0xbbc>
10002d824:     	ldr	x0, [sp, #264]
10002d828:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002d82c:     	ldrsb	w8, [sp, #255]
10002d830:     	tbz	w8, #31, 0x10002d7c8 <benchmark::CPUInfo::CPUInfo()+0xbc4>
10002d834:     	ldr	x0, [sp, #232]
10002d838:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002d83c:     	ldrsb	w8, [sp, #231]
10002d840:     	tbz	w8, #31, 0x10002d7d0 <benchmark::CPUInfo::CPUInfo()+0xbcc>
10002d844:     	ldr	x0, [sp, #208]
10002d848:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002d84c:     	ldrsb	w8, [sp, #199]
10002d850:     	tbz	w8, #31, 0x10002d7d8 <benchmark::CPUInfo::CPUInfo()+0xbd4>
10002d854:     	ldr	x0, [sp, #176]
10002d858:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002d85c:     	ldrsb	w8, [sp, #175]
10002d860:     	tbz	w8, #31, 0x10002d7e0 <benchmark::CPUInfo::CPUInfo()+0xbdc>
10002d864:     	ldr	x0, [sp, #152]
10002d868:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002d86c:     	ldrsb	w8, [sp, #143]
10002d870:     	tbz	w8, #31, 0x10002d7e8 <benchmark::CPUInfo::CPUInfo()+0xbe4>
10002d874:     	ldr	x0, [sp, #120]
10002d878:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002d87c:     	ldrsb	w8, [sp, #119]
10002d880:     	tbz	w8, #31, 0x10002d88c <benchmark::CPUInfo::CPUInfo()+0xc88>
10002d884:     	ldr	x0, [sp, #96]
10002d888:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002d88c:     	ldr	x19, [x20]
10002d890:     	cbz	x19, 0x10002d914 <benchmark::CPUInfo::CPUInfo()+0xd10>
10002d894:     	ldr	x8, [x28, #24]
10002d898:     	mov	x0, x19
10002d89c:     	cmp	x8, x19
10002d8a0:     	b.ne	0x10002d8b4 <benchmark::CPUInfo::CPUInfo()+0xcb0>
10002d8a4:     	b	0x10002d8d0 <benchmark::CPUInfo::CPUInfo()+0xccc>
10002d8a8:     	mov	x8, x22
10002d8ac:     	cmp	x22, x19
10002d8b0:     	b.eq	0x10002d8cc <benchmark::CPUInfo::CPUInfo()+0xcc8>
10002d8b4:     	sub	x22, x8, #40
10002d8b8:     	ldursb	w9, [x8, #-17]
10002d8bc:     	tbz	w9, #31, 0x10002d8a8 <benchmark::CPUInfo::CPUInfo()+0xca4>
10002d8c0:     	ldur	x0, [x8, #-40]
10002d8c4:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002d8c8:     	b	0x10002d8a8 <benchmark::CPUInfo::CPUInfo()+0xca4>
10002d8cc:     	ldr	x0, [x20]
10002d8d0:     	str	x19, [x28, #24]
10002d8d4:     	b	0x10002d910 <benchmark::CPUInfo::CPUInfo()+0xd0c>
10002d8d8:     	mov	x21, x0
10002d8dc:     	add	x0, sp, #96
10002d8e0:     	bl	0x10002e2b8 <std::__1::basic_ifstream<char, std::__1::char_traits<char>>::~basic_ifstream()>
10002d8e4:     	b	0x10002d8ec <benchmark::CPUInfo::CPUInfo()+0xce8>
10002d8e8:     	mov	x21, x0
10002d8ec:     	ldrsb	w8, [sp, #47]
10002d8f0:     	tbz	w8, #31, 0x10002d904 <benchmark::CPUInfo::CPUInfo()+0xd00>
10002d8f4:     	ldr	x0, [sp, #24]
10002d8f8:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002d8fc:     	b	0x10002d904 <benchmark::CPUInfo::CPUInfo()+0xd00>
10002d900:     	mov	x21, x0
10002d904:     	ldrsb	w8, [sp, #79]
10002d908:     	tbz	w8, #31, 0x10002d914 <benchmark::CPUInfo::CPUInfo()+0xd10>
10002d90c:     	ldr	x0, [sp, #56]
10002d910:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002d914:     	mov	x0, x21
10002d918:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010002d91c <std::__1::vector<benchmark::CPUInfo::CacheInfo, std::__1::allocator<benchmark::CPUInfo::CacheInfo>>::~vector[abi:ue170006]()>:
10002d91c:     	stp	x22, x21, [sp, #-48]!
10002d920:     	stp	x20, x19, [sp, #16]
10002d924:     	stp	x29, x30, [sp, #32]
10002d928:     	add	x29, sp, #32
10002d92c:     	mov	x19, x0
10002d930:     	ldr	x20, [x0]
10002d934:     	cbz	x20, 0x10002d97c <std::__1::vector<benchmark::CPUInfo::CacheInfo, std::__1::allocator<benchmark::CPUInfo::CacheInfo>>::~vector[abi:ue170006]()+0x60>
10002d938:     	ldr	x8, [x19, #8]
10002d93c:     	mov	x0, x20
10002d940:     	cmp	x8, x20
10002d944:     	b.ne	0x10002d958 <std::__1::vector<benchmark::CPUInfo::CacheInfo, std::__1::allocator<benchmark::CPUInfo::CacheInfo>>::~vector[abi:ue170006]()+0x3c>
10002d948:     	b	0x10002d974 <std::__1::vector<benchmark::CPUInfo::CacheInfo, std::__1::allocator<benchmark::CPUInfo::CacheInfo>>::~vector[abi:ue170006]()+0x58>
10002d94c:     	mov	x8, x21
10002d950:     	cmp	x21, x20
10002d954:     	b.eq	0x10002d970 <std::__1::vector<benchmark::CPUInfo::CacheInfo, std::__1::allocator<benchmark::CPUInfo::CacheInfo>>::~vector[abi:ue170006]()+0x54>
10002d958:     	sub	x21, x8, #40
10002d95c:     	ldursb	w9, [x8, #-17]
10002d960:     	tbz	w9, #31, 0x10002d94c <std::__1::vector<benchmark::CPUInfo::CacheInfo, std::__1::allocator<benchmark::CPUInfo::CacheInfo>>::~vector[abi:ue170006]()+0x30>
10002d964:     	ldur	x0, [x8, #-40]
10002d968:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002d96c:     	b	0x10002d94c <std::__1::vector<benchmark::CPUInfo::CacheInfo, std::__1::allocator<benchmark::CPUInfo::CacheInfo>>::~vector[abi:ue170006]()+0x30>
10002d970:     	ldr	x0, [x19]
10002d974:     	str	x20, [x19, #8]
10002d978:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002d97c:     	mov	x0, x19
10002d980:     	ldp	x29, x30, [sp, #32]
10002d984:     	ldp	x20, x19, [sp, #16]
10002d988:     	ldp	x22, x21, [sp], #48
10002d98c:     	ret

000000010002d990 <benchmark::SystemInfo::Get()>:
10002d990:     	stp	x20, x19, [sp, #-32]!
10002d994:     	stp	x29, x30, [sp, #16]
10002d998:     	add	x29, sp, #16
10002d99c:     	adrp	x8, 0x100038000 <benchmark::SystemInfo::Get()+0x38>
10002d9a0:     	add	x8, x8, #240
10002d9a4:     	ldaprb	w8, [x8]
10002d9a8:     	tbz	w8, #0, 0x10002d9c0 <benchmark::SystemInfo::Get()+0x30>
10002d9ac:     	adrp	x8, 0x100038000 <benchmark::SystemInfo::Get()+0x48>
10002d9b0:     	ldr	x0, [x8, #232]
10002d9b4:     	ldp	x29, x30, [sp, #16]
10002d9b8:     	ldp	x20, x19, [sp], #32
10002d9bc:     	ret
10002d9c0:     	adrp	x0, 0x100038000 <benchmark::SystemInfo::Get()+0x5c>
10002d9c4:     	add	x0, x0, #240
10002d9c8:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10002d9cc:     	cbz	w0, 0x10002d9ac <benchmark::SystemInfo::Get()+0x1c>
10002d9d0:     	mov	w0, #24
10002d9d4:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10002d9d8:     	mov	x19, x0
10002d9dc:     	bl	0x10002da2c <benchmark::SystemInfo::SystemInfo()>
10002d9e0:     	adrp	x0, 0x100038000 <benchmark::SystemInfo::Get()+0x7c>
10002d9e4:     	add	x0, x0, #232
10002d9e8:     	str	x19, [x0], #8
10002d9ec:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10002d9f0:     	adrp	x8, 0x100038000 <benchmark::SystemInfo::Get()+0x8c>
10002d9f4:     	ldr	x0, [x8, #232]
10002d9f8:     	ldp	x29, x30, [sp, #16]
10002d9fc:     	ldp	x20, x19, [sp], #32
10002da00:     	ret
10002da04:     	mov	x20, x0
10002da08:     	mov	x0, x19
10002da0c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002da10:     	b	0x10002da18 <benchmark::SystemInfo::Get()+0x88>
10002da14:     	mov	x20, x0
10002da18:     	adrp	x0, 0x100038000 <benchmark::SystemInfo::SystemInfo()+0x18>
10002da1c:     	add	x0, x0, #240
10002da20:     	bl	0x10002f074 <_vsnprintf+0x10002f074>
10002da24:     	mov	x0, x20
10002da28:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010002da2c <benchmark::SystemInfo::SystemInfo()>:
10002da2c:     	sub	sp, sp, #128
10002da30:     	stp	x22, x21, [sp, #80]
10002da34:     	stp	x20, x19, [sp, #96]
10002da38:     	stp	x29, x30, [sp, #112]
10002da3c:     	add	x29, sp, #112
10002da40:     	mov	x19, x0
10002da44:     	adrp	x8, 0x100034000 <benchmark::SystemInfo::SystemInfo()+0x34>
10002da48:     	ldr	x8, [x8, #928]
10002da4c:     	ldr	x8, [x8]
10002da50:     	stur	x8, [x29, #-40]
10002da54:     	add	x0, sp, #8
10002da58:     	mov	w1, #64
10002da5c:     	bl	0x10002f140 <_vsnprintf+0x10002f140>
10002da60:     	cbz	w0, 0x10002da9c <benchmark::SystemInfo::SystemInfo()+0x70>
10002da64:     	strb	wzr, [x19, #23]
10002da68:     	strb	wzr, [x19]
10002da6c:     	ldur	x8, [x29, #-40]
10002da70:     	adrp	x9, 0x100034000 <benchmark::SystemInfo::SystemInfo()+0x60>
10002da74:     	ldr	x9, [x9, #928]
10002da78:     	ldr	x9, [x9]
10002da7c:     	cmp	x9, x8
10002da80:     	b.ne	0x10002db18 <benchmark::SystemInfo::SystemInfo()+0xec>
10002da84:     	mov	x0, x19
10002da88:     	ldp	x29, x30, [sp, #112]
10002da8c:     	ldp	x20, x19, [sp, #96]
10002da90:     	ldp	x22, x21, [sp, #80]
10002da94:     	add	sp, sp, #128
10002da98:     	ret
10002da9c:     	add	x0, sp, #8
10002daa0:     	bl	0x10002f254 <_vsnprintf+0x10002f254>
10002daa4:     	mov	x8, #9223372036854775792
10002daa8:     	cmp	x0, x8
10002daac:     	b.hs	0x10002db1c <benchmark::SystemInfo::SystemInfo()+0xf0>
10002dab0:     	mov	x20, x0
10002dab4:     	cmp	x0, #23
10002dab8:     	b.hs	0x10002dacc <benchmark::SystemInfo::SystemInfo()+0xa0>
10002dabc:     	strb	w20, [x19, #23]
10002dac0:     	mov	x21, x19
10002dac4:     	cbnz	x20, 0x10002daec <benchmark::SystemInfo::SystemInfo()+0xc0>
10002dac8:     	b	0x10002dafc <benchmark::SystemInfo::SystemInfo()+0xd0>
10002dacc:     	orr	x8, x20, #0xf
10002dad0:     	add	x22, x8, #1
10002dad4:     	mov	x0, x22
10002dad8:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10002dadc:     	mov	x21, x0
10002dae0:     	orr	x8, x22, #0x8000000000000000
10002dae4:     	stp	x20, x8, [x19, #8]
10002dae8:     	str	x0, [x19]
10002daec:     	add	x1, sp, #8
10002daf0:     	mov	x0, x21
10002daf4:     	mov	x2, x20
10002daf8:     	bl	0x10002f1c4 <_vsnprintf+0x10002f1c4>
10002dafc:     	strb	wzr, [x21, x20]
10002db00:     	ldur	x8, [x29, #-40]
10002db04:     	adrp	x9, 0x100034000 <benchmark::SystemInfo::SystemInfo()+0xf4>
10002db08:     	ldr	x9, [x9, #928]
10002db0c:     	ldr	x9, [x9]
10002db10:     	cmp	x9, x8
10002db14:     	b.eq	0x10002da84 <benchmark::SystemInfo::SystemInfo()+0x58>
10002db18:     	bl	0x10002f0d4 <_vsnprintf+0x10002f0d4>
10002db1c:     	mov	x0, x19
10002db20:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>

000000010002db24 <benchmark::SystemInfo::SystemInfo()>:
10002db24:     	sub	sp, sp, #128
10002db28:     	stp	x22, x21, [sp, #80]
10002db2c:     	stp	x20, x19, [sp, #96]
10002db30:     	stp	x29, x30, [sp, #112]
10002db34:     	add	x29, sp, #112
10002db38:     	mov	x19, x0
10002db3c:     	adrp	x8, 0x100034000 <benchmark::SystemInfo::SystemInfo()+0x34>
10002db40:     	ldr	x8, [x8, #928]
10002db44:     	ldr	x8, [x8]
10002db48:     	stur	x8, [x29, #-40]
10002db4c:     	add	x0, sp, #8
10002db50:     	mov	w1, #64
10002db54:     	bl	0x10002f140 <_vsnprintf+0x10002f140>
10002db58:     	cbz	w0, 0x10002db94 <benchmark::SystemInfo::SystemInfo()+0x70>
10002db5c:     	strb	wzr, [x19, #23]
10002db60:     	strb	wzr, [x19]
10002db64:     	ldur	x8, [x29, #-40]
10002db68:     	adrp	x9, 0x100034000 <benchmark::SystemInfo::SystemInfo()+0x60>
10002db6c:     	ldr	x9, [x9, #928]
10002db70:     	ldr	x9, [x9]
10002db74:     	cmp	x9, x8
10002db78:     	b.ne	0x10002dc10 <benchmark::SystemInfo::SystemInfo()+0xec>
10002db7c:     	mov	x0, x19
10002db80:     	ldp	x29, x30, [sp, #112]
10002db84:     	ldp	x20, x19, [sp, #96]
10002db88:     	ldp	x22, x21, [sp, #80]
10002db8c:     	add	sp, sp, #128
10002db90:     	ret
10002db94:     	add	x0, sp, #8
10002db98:     	bl	0x10002f254 <_vsnprintf+0x10002f254>
10002db9c:     	mov	x8, #9223372036854775792
10002dba0:     	cmp	x0, x8
10002dba4:     	b.hs	0x10002dc14 <benchmark::SystemInfo::SystemInfo()+0xf0>
10002dba8:     	mov	x20, x0
10002dbac:     	cmp	x0, #23
10002dbb0:     	b.hs	0x10002dbc4 <benchmark::SystemInfo::SystemInfo()+0xa0>
10002dbb4:     	strb	w20, [x19, #23]
10002dbb8:     	mov	x21, x19
10002dbbc:     	cbnz	x20, 0x10002dbe4 <benchmark::SystemInfo::SystemInfo()+0xc0>
10002dbc0:     	b	0x10002dbf4 <benchmark::SystemInfo::SystemInfo()+0xd0>
10002dbc4:     	orr	x8, x20, #0xf
10002dbc8:     	add	x22, x8, #1
10002dbcc:     	mov	x0, x22
10002dbd0:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10002dbd4:     	mov	x21, x0
10002dbd8:     	orr	x8, x22, #0x8000000000000000
10002dbdc:     	stp	x20, x8, [x19, #8]
10002dbe0:     	str	x0, [x19]
10002dbe4:     	add	x1, sp, #8
10002dbe8:     	mov	x0, x21
10002dbec:     	mov	x2, x20
10002dbf0:     	bl	0x10002f1c4 <_vsnprintf+0x10002f1c4>
10002dbf4:     	strb	wzr, [x21, x20]
10002dbf8:     	ldur	x8, [x29, #-40]
10002dbfc:     	adrp	x9, 0x100034000 <benchmark::SystemInfo::SystemInfo()+0xf4>
10002dc00:     	ldr	x9, [x9, #928]
10002dc04:     	ldr	x9, [x9]
10002dc08:     	cmp	x9, x8
10002dc0c:     	b.eq	0x10002db7c <benchmark::SystemInfo::SystemInfo()+0x58>
10002dc10:     	bl	0x10002f0d4 <_vsnprintf+0x10002f0d4>
10002dc14:     	mov	x0, x19
10002dc18:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>

000000010002dc1c <benchmark::(anonymous namespace)::GetSysctlImp(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>:
10002dc1c:     	sub	sp, sp, #80
10002dc20:     	stp	x22, x21, [sp, #32]
10002dc24:     	stp	x20, x19, [sp, #48]
10002dc28:     	stp	x29, x30, [sp, #64]
10002dc2c:     	add	x29, sp, #64
10002dc30:     	mov	x20, x1
10002dc34:     	mov	x19, x0
10002dc38:     	str	xzr, [sp, #24]
10002dc3c:     	ldrsb	w8, [x1, #23]
10002dc40:     	ldr	x9, [x1]
10002dc44:     	cmp	w8, #0
10002dc48:     	csel	x0, x9, x1, lt
10002dc4c:     	add	x2, sp, #24
10002dc50:     	mov	x1, #0
10002dc54:     	mov	x3, #0
10002dc58:     	mov	x4, #0
10002dc5c:     	bl	0x10002f290 <_vsnprintf+0x10002f290>
10002dc60:     	cmn	w0, #1
10002dc64:     	b.eq	0x10002dce0 <benchmark::(anonymous namespace)::GetSysctlImp(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xc4>
10002dc68:     	ldr	x8, [sp, #24]
10002dc6c:     	add	x0, x8, #8
10002dc70:     	str	x0, [sp]
10002dc74:     	bl	0x10002f1a0 <_vsnprintf+0x10002f1a0>
10002dc78:     	mov	x1, x0
10002dc7c:     	str	xzr, [x0]
10002dc80:     	adrp	x21, 0x100034000 <benchmark::(anonymous namespace)::GetSysctlImp(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x80>
10002dc84:     	ldr	x21, [x21, #1000]
10002dc88:     	stp	x0, x21, [sp, #8]
10002dc8c:     	ldrsb	w8, [x20, #23]
10002dc90:     	ldr	x9, [x20]
10002dc94:     	cmp	w8, #0
10002dc98:     	csel	x0, x9, x20, lt
10002dc9c:     	mov	x2, sp
10002dca0:     	mov	x3, #0
10002dca4:     	mov	x4, #0
10002dca8:     	bl	0x10002f290 <_vsnprintf+0x10002f290>
10002dcac:     	cbz	w0, 0x10002dd04 <benchmark::(anonymous namespace)::GetSysctlImp(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xe8>
10002dcb0:     	stp	xzr, xzr, [x19]
10002dcb4:     	str	x21, [x19, #16]
10002dcb8:     	ldr	x0, [sp, #8]
10002dcbc:     	str	xzr, [sp, #8]
10002dcc0:     	cbz	x0, 0x10002dccc <benchmark::(anonymous namespace)::GetSysctlImp(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xb0>
10002dcc4:     	ldr	x8, [sp, #16]
10002dcc8:     	blr	x8
10002dccc:     	ldp	x29, x30, [sp, #64]
10002dcd0:     	ldp	x20, x19, [sp, #48]
10002dcd4:     	ldp	x22, x21, [sp, #32]
10002dcd8:     	add	sp, sp, #80
10002dcdc:     	ret
10002dce0:     	stp	xzr, xzr, [x19]
10002dce4:     	adrp	x8, 0x100034000 <benchmark::(anonymous namespace)::GetSysctlImp(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0xe4>
10002dce8:     	ldr	x8, [x8, #1000]
10002dcec:     	str	x8, [x19, #16]
10002dcf0:     	ldp	x29, x30, [sp, #64]
10002dcf4:     	ldp	x20, x19, [sp, #48]
10002dcf8:     	ldp	x22, x21, [sp, #32]
10002dcfc:     	add	sp, sp, #80
10002dd00:     	ret
10002dd04:     	ldr	q0, [sp]
10002dd08:     	str	q0, [x19]
10002dd0c:     	ldr	x8, [sp, #16]
10002dd10:     	str	x8, [x19, #16]
10002dd14:     	ldp	x29, x30, [sp, #64]
10002dd18:     	ldp	x20, x19, [sp, #48]
10002dd1c:     	ldp	x22, x21, [sp, #32]
10002dd20:     	add	sp, sp, #80
10002dd24:     	ret
10002dd28:     	bl	0x100006a3c <___clang_call_terminate>
10002dd2c:     	mov	x19, x0
10002dd30:     	ldr	x0, [sp, #8]
10002dd34:     	str	xzr, [sp, #8]
10002dd38:     	cbz	x0, 0x10002dd44 <benchmark::(anonymous namespace)::GetSysctlImp(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)+0x128>
10002dd3c:     	ldr	x8, [sp, #16]
10002dd40:     	blr	x8
10002dd44:     	mov	x0, x19
10002dd48:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
10002dd4c:     	bl	0x100006a3c <___clang_call_terminate>

000000010002dd50 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> benchmark::StrCat<char const (&) [28], int&, char const (&) [26]>(char const (&) [28], int&, char const (&) [26])>:
10002dd50:     	sub	sp, sp, #368
10002dd54:     	stp	x28, x27, [sp, #272]
10002dd58:     	stp	x26, x25, [sp, #288]
10002dd5c:     	stp	x24, x23, [sp, #304]
10002dd60:     	stp	x22, x21, [sp, #320]
10002dd64:     	stp	x20, x19, [sp, #336]
10002dd68:     	stp	x29, x30, [sp, #352]
10002dd6c:     	add	x29, sp, #352
10002dd70:     	mov	x22, x2
10002dd74:     	mov	x23, x1
10002dd78:     	mov	x24, x0
10002dd7c:     	mov	x21, x8
10002dd80:     	mov	x8, sp
10002dd84:     	add	x19, x8, #112
10002dd88:     	adrp	x28, 0x100034000 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> benchmark::StrCat<char const (&) [28], int&, char const (&) [26]>(char const (&) [28], int&, char const (&) [26])+0x54>
10002dd8c:     	ldr	x28, [x28, #752]
10002dd90:     	add	x27, x28, #64
10002dd94:     	add	x20, x8, #8
10002dd98:     	adrp	x26, 0x100034000 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> benchmark::StrCat<char const (&) [28], int&, char const (&) [26]>(char const (&) [28], int&, char const (&) [26])+0x64>
10002dd9c:     	ldr	x26, [x26, #712]
10002dda0:     	ldp	x9, x10, [x26, #8]
10002dda4:     	str	x27, [sp, #112]
10002dda8:     	str	x9, [sp]
10002ddac:     	ldur	x9, [x9, #-24]
10002ddb0:     	str	x10, [x8, x9]
10002ddb4:     	ldr	x9, [sp]
10002ddb8:     	ldur	x9, [x9, #-24]
10002ddbc:     	add	x25, x8, x9
10002ddc0:     	mov	x0, x25
10002ddc4:     	mov	x1, x20
10002ddc8:     	bl	0x10002efcc <_vsnprintf+0x10002efcc>
10002ddcc:     	str	xzr, [x25, #136]
10002ddd0:     	mov	w8, #-1
10002ddd4:     	str	w8, [x25, #144]
10002ddd8:     	add	x8, x28, #24
10002dddc:     	str	x8, [sp]
10002dde0:     	str	x27, [sp, #112]
10002dde4:     	mov	x0, x20
10002dde8:     	bl	0x10002eeac <_vsnprintf+0x10002eeac>
10002ddec:     	adrp	x25, 0x100034000 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> benchmark::StrCat<char const (&) [28], int&, char const (&) [26]>(char const (&) [28], int&, char const (&) [26])+0xb8>
10002ddf0:     	ldr	x25, [x25, #736]
10002ddf4:     	add	x8, x25, #16
10002ddf8:     	str	x8, [sp, #8]
10002ddfc:     	movi.2d	v0, #0000000000000000
10002de00:     	stur	q0, [sp, #72]
10002de04:     	stur	q0, [sp, #88]
10002de08:     	mov	w8, #16
10002de0c:     	str	w8, [sp, #104]
10002de10:     	mov	x0, x24
10002de14:     	bl	0x10002f254 <_vsnprintf+0x10002f254>
10002de18:     	mov	x2, x0
10002de1c:     	mov	x0, sp
10002de20:     	mov	x1, x24
10002de24:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10002de28:     	ldr	w1, [x23]
10002de2c:     	mov	x0, sp
10002de30:     	bl	0x10002ee28 <_vsnprintf+0x10002ee28>
10002de34:     	mov	x0, x22
10002de38:     	bl	0x10002f254 <_vsnprintf+0x10002f254>
10002de3c:     	mov	x2, x0
10002de40:     	mov	x0, sp
10002de44:     	mov	x1, x22
10002de48:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10002de4c:     	mov	x8, x21
10002de50:     	mov	x0, x20
10002de54:     	bl	0x10002ecd8 <_vsnprintf+0x10002ecd8>
10002de58:     	ldr	x8, [x26]
10002de5c:     	str	x8, [sp]
10002de60:     	ldr	x9, [x26, #24]
10002de64:     	ldur	x8, [x8, #-24]
10002de68:     	mov	x10, sp
10002de6c:     	str	x9, [x10, x8]
10002de70:     	add	x8, x25, #16
10002de74:     	str	x8, [sp, #8]
10002de78:     	ldrsb	w8, [sp, #95]
10002de7c:     	tbz	w8, #31, 0x10002de88 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> benchmark::StrCat<char const (&) [28], int&, char const (&) [26]>(char const (&) [28], int&, char const (&) [26])+0x138>
10002de80:     	ldr	x0, [sp, #72]
10002de84:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002de88:     	mov	x0, x20
10002de8c:     	bl	0x10002eeb8 <_vsnprintf+0x10002eeb8>
10002de90:     	add	x1, x26, #8
10002de94:     	mov	x0, sp
10002de98:     	bl	0x10002ee04 <_vsnprintf+0x10002ee04>
10002de9c:     	mov	x0, x19
10002dea0:     	bl	0x10002efe4 <_vsnprintf+0x10002efe4>
10002dea4:     	ldp	x29, x30, [sp, #352]
10002dea8:     	ldp	x20, x19, [sp, #336]
10002deac:     	ldp	x22, x21, [sp, #320]
10002deb0:     	ldp	x24, x23, [sp, #304]
10002deb4:     	ldp	x26, x25, [sp, #288]
10002deb8:     	ldp	x28, x27, [sp, #272]
10002debc:     	add	sp, sp, #368
10002dec0:     	ret
10002dec4:     	mov	x20, x0
10002dec8:     	add	x1, x26, #8
10002decc:     	mov	x0, sp
10002ded0:     	bl	0x10002ee04 <_vsnprintf+0x10002ee04>
10002ded4:     	b	0x10002dedc <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> benchmark::StrCat<char const (&) [28], int&, char const (&) [26]>(char const (&) [28], int&, char const (&) [26])+0x18c>
10002ded8:     	mov	x20, x0
10002dedc:     	mov	x0, x19
10002dee0:     	bl	0x10002efe4 <_vsnprintf+0x10002efe4>
10002dee4:     	mov	x0, x20
10002dee8:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
10002deec:     	mov	x20, x0
10002def0:     	mov	x0, sp
10002def4:     	bl	0x10002df00 <std::__1::basic_ostringstream<char, std::__1::char_traits<char>, std::__1::allocator<char>>::~basic_ostringstream()>
10002def8:     	mov	x0, x20
10002defc:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010002df00 <std::__1::basic_ostringstream<char, std::__1::char_traits<char>, std::__1::allocator<char>>::~basic_ostringstream()>:
10002df00:     	stp	x22, x21, [sp, #-48]!
10002df04:     	stp	x20, x19, [sp, #16]
10002df08:     	stp	x29, x30, [sp, #32]
10002df0c:     	add	x29, sp, #32
10002df10:     	mov	x19, x0
10002df14:     	adrp	x21, 0x100034000 <std::__1::basic_ostringstream<char, std::__1::char_traits<char>, std::__1::allocator<char>>::~basic_ostringstream()+0x30>
10002df18:     	ldr	x21, [x21, #712]
10002df1c:     	ldr	x8, [x21]
10002df20:     	str	x8, [x0]
10002df24:     	ldr	x9, [x21, #24]
10002df28:     	ldur	x8, [x8, #-24]
10002df2c:     	str	x9, [x0, x8]
10002df30:     	adrp	x8, 0x100034000 <std::__1::basic_ostringstream<char, std::__1::char_traits<char>, std::__1::allocator<char>>::~basic_ostringstream()+0x4c>
10002df34:     	ldr	x8, [x8, #736]
10002df38:     	add	x8, x8, #16
10002df3c:     	mov	x20, x0
10002df40:     	str	x8, [x20, #8]!
10002df44:     	ldrsb	w8, [x20, #87]
10002df48:     	tbz	w8, #31, 0x10002df54 <std::__1::basic_ostringstream<char, std::__1::char_traits<char>, std::__1::allocator<char>>::~basic_ostringstream()+0x54>
10002df4c:     	ldr	x0, [x19, #72]
10002df50:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002df54:     	mov	x0, x20
10002df58:     	bl	0x10002eeb8 <_vsnprintf+0x10002eeb8>
10002df5c:     	add	x1, x21, #8
10002df60:     	mov	x0, x19
10002df64:     	bl	0x10002ee04 <_vsnprintf+0x10002ee04>
10002df68:     	add	x0, x19, #112
10002df6c:     	bl	0x10002efe4 <_vsnprintf+0x10002efe4>
10002df70:     	mov	x0, x19
10002df74:     	ldp	x29, x30, [sp, #32]
10002df78:     	ldp	x20, x19, [sp, #16]
10002df7c:     	ldp	x22, x21, [sp], #48
10002df80:     	ret

000000010002df84 <std::__1::basic_ifstream<char, std::__1::char_traits<char>>::basic_ifstream(char const*, unsigned int)>:
10002df84:     	stp	x26, x25, [sp, #-80]!
10002df88:     	stp	x24, x23, [sp, #16]
10002df8c:     	stp	x22, x21, [sp, #32]
10002df90:     	stp	x20, x19, [sp, #48]
10002df94:     	stp	x29, x30, [sp, #64]
10002df98:     	add	x29, sp, #64
10002df9c:     	mov	x22, x2
10002dfa0:     	mov	x21, x1
10002dfa4:     	mov	x19, x0
10002dfa8:     	adrp	x26, 0x100034000 <std::__1::basic_ifstream<char, std::__1::char_traits<char>>::basic_ifstream(char const*, unsigned int)+0x40>
10002dfac:     	ldr	x26, [x26, #720]
10002dfb0:     	add	x25, x26, #64
10002dfb4:     	str	x25, [x0, #424]
10002dfb8:     	add	x20, x0, #16
10002dfbc:     	adrp	x24, 0x100034000 <std::__1::basic_ifstream<char, std::__1::char_traits<char>>::basic_ifstream(char const*, unsigned int)+0x54>
10002dfc0:     	ldr	x24, [x24, #688]
10002dfc4:     	ldp	x8, x9, [x24, #8]
10002dfc8:     	str	x8, [x0]
10002dfcc:     	ldur	x8, [x8, #-24]
10002dfd0:     	str	x9, [x0, x8]
10002dfd4:     	str	xzr, [x0, #8]
10002dfd8:     	ldr	x8, [x0]
10002dfdc:     	ldur	x8, [x8, #-24]
10002dfe0:     	add	x23, x0, x8
10002dfe4:     	mov	x0, x23
10002dfe8:     	mov	x1, x20
10002dfec:     	bl	0x10002efcc <_vsnprintf+0x10002efcc>
10002dff0:     	str	xzr, [x23, #136]
10002dff4:     	mov	w8, #-1
10002dff8:     	str	w8, [x23, #144]
10002dffc:     	add	x8, x26, #24
10002e000:     	str	x8, [x19]
10002e004:     	str	x25, [x19, #424]
10002e008:     	mov	x0, x20
10002e00c:     	bl	0x10002eda4 <_vsnprintf+0x10002eda4>
10002e010:     	orr	w2, w22, #0x8
10002e014:     	mov	x0, x20
10002e018:     	mov	x1, x21
10002e01c:     	bl	0x10002ed98 <_vsnprintf+0x10002ed98>
10002e020:     	cbnz	x0, 0x10002e03c <std::__1::basic_ifstream<char, std::__1::char_traits<char>>::basic_ifstream(char const*, unsigned int)+0xb8>
10002e024:     	ldr	x8, [x19]
10002e028:     	ldur	x8, [x8, #-24]
10002e02c:     	add	x0, x19, x8
10002e030:     	ldr	w8, [x0, #32]
10002e034:     	orr	w1, w8, #0x4
10002e038:     	bl	0x10002efd8 <_vsnprintf+0x10002efd8>
10002e03c:     	mov	x0, x19
10002e040:     	ldp	x29, x30, [sp, #64]
10002e044:     	ldp	x20, x19, [sp, #48]
10002e048:     	ldp	x22, x21, [sp, #32]
10002e04c:     	ldp	x24, x23, [sp, #16]
10002e050:     	ldp	x26, x25, [sp], #80
10002e054:     	ret
10002e058:     	mov	x21, x0
10002e05c:     	b	0x10002e074 <std::__1::basic_ifstream<char, std::__1::char_traits<char>>::basic_ifstream(char const*, unsigned int)+0xf0>
10002e060:     	mov	x21, x0
10002e064:     	b	0x10002e080 <std::__1::basic_ifstream<char, std::__1::char_traits<char>>::basic_ifstream(char const*, unsigned int)+0xfc>
10002e068:     	mov	x21, x0
10002e06c:     	mov	x0, x20
10002e070:     	bl	0x10002edb0 <_vsnprintf+0x10002edb0>
10002e074:     	add	x1, x24, #8
10002e078:     	mov	x0, x19
10002e07c:     	bl	0x10002edc8 <_vsnprintf+0x10002edc8>
10002e080:     	add	x0, x19, #424
10002e084:     	bl	0x10002efe4 <_vsnprintf+0x10002efe4>
10002e088:     	mov	x0, x21
10002e08c:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010002e090 <std::__1::basic_istream<char, std::__1::char_traits<char>>& std::__1::operator>>[abi:ue170006]<char, std::__1::char_traits<char>, std::__1::allocator<char>>(std::__1::basic_istream<char, std::__1::char_traits<char>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&)>:
10002e090:     	sub	sp, sp, #80
10002e094:     	stp	x24, x23, [sp, #16]
10002e098:     	stp	x22, x21, [sp, #32]
10002e09c:     	stp	x20, x19, [sp, #48]
10002e0a0:     	stp	x29, x30, [sp, #64]
10002e0a4:     	add	x29, sp, #64
10002e0a8:     	mov	x20, x1
10002e0ac:     	mov	x19, x0
10002e0b0:     	add	x0, sp, #8
10002e0b4:     	mov	x1, x19
10002e0b8:     	mov	w2, #0
10002e0bc:     	bl	0x10002edbc <_vsnprintf+0x10002edbc>
10002e0c0:     	ldrb	w8, [sp, #8]
10002e0c4:     	cbz	w8, 0x10002e224 <std::__1::basic_istream<char, std::__1::char_traits<char>>& std::__1::operator>>[abi:ue170006]<char, std::__1::char_traits<char>, std::__1::allocator<char>>(std::__1::basic_istream<char, std::__1::char_traits<char>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&)+0x194>
10002e0c8:     	ldrsb	w8, [x20, #23]
10002e0cc:     	tbnz	w8, #31, 0x10002e0dc <std::__1::basic_istream<char, std::__1::char_traits<char>>& std::__1::operator>>[abi:ue170006]<char, std::__1::char_traits<char>, std::__1::allocator<char>>(std::__1::basic_istream<char, std::__1::char_traits<char>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&)+0x4c>
10002e0d0:     	strb	wzr, [x20]
10002e0d4:     	strb	wzr, [x20, #23]
10002e0d8:     	b	0x10002e0e8 <std::__1::basic_istream<char, std::__1::char_traits<char>>& std::__1::operator>>[abi:ue170006]<char, std::__1::char_traits<char>, std::__1::allocator<char>>(std::__1::basic_istream<char, std::__1::char_traits<char>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&)+0x58>
10002e0dc:     	ldr	x8, [x20]
10002e0e0:     	strb	wzr, [x8]
10002e0e4:     	str	xzr, [x20, #8]
10002e0e8:     	ldr	x8, [x19]
10002e0ec:     	ldur	x8, [x8, #-24]
10002e0f0:     	add	x0, x19, x8
10002e0f4:     	ldr	x23, [x0, #24]
10002e0f8:     	mov	x8, sp
10002e0fc:     	bl	0x10002ecfc <_vsnprintf+0x10002ecfc>
10002e100:     	adrp	x1, 0x100034000 <std::__1::basic_istream<char, std::__1::char_traits<char>>& std::__1::operator>>[abi:ue170006]<char, std::__1::char_traits<char>, std::__1::allocator<char>>(std::__1::basic_istream<char, std::__1::char_traits<char>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&)+0x88>
10002e104:     	ldr	x1, [x1, #480]
10002e108:     	mov	x0, sp
10002e10c:     	bl	0x10002ecf0 <_vsnprintf+0x10002ecf0>
10002e110:     	mov	x21, x0
10002e114:     	mov	x0, sp
10002e118:     	bl	0x10002ef84 <_vsnprintf+0x10002ef84>
10002e11c:     	mov	x22, #0
10002e120:     	mov	x8, #-17
10002e124:     	movk	x8, #32767, lsl #48
10002e128:     	cmp	x23, #1
10002e12c:     	csinc	x9, x23, xzr, gt
10002e130:     	csel	x23, x8, x9, lt
10002e134:     	b	0x10002e14c <std::__1::basic_istream<char, std::__1::char_traits<char>>& std::__1::operator>>[abi:ue170006]<char, std::__1::char_traits<char>, std::__1::allocator<char>>(std::__1::basic_istream<char, std::__1::char_traits<char>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&)+0xbc>
10002e138:     	add	x8, x8, #1
10002e13c:     	str	x8, [x0, #24]
10002e140:     	add	x22, x22, #1
10002e144:     	cmp	x23, x22
10002e148:     	b.eq	0x10002e1d0 <std::__1::basic_istream<char, std::__1::char_traits<char>>& std::__1::operator>>[abi:ue170006]<char, std::__1::char_traits<char>, std::__1::allocator<char>>(std::__1::basic_istream<char, std::__1::char_traits<char>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&)+0x140>
10002e14c:     	ldr	x8, [x19]
10002e150:     	ldur	x8, [x8, #-24]
10002e154:     	add	x8, x19, x8
10002e158:     	ldr	x0, [x8, #40]
10002e15c:     	ldp	x8, x9, [x0, #24]
10002e160:     	cmp	x8, x9
10002e164:     	b.eq	0x10002e170 <std::__1::basic_istream<char, std::__1::char_traits<char>>& std::__1::operator>>[abi:ue170006]<char, std::__1::char_traits<char>, std::__1::allocator<char>>(std::__1::basic_istream<char, std::__1::char_traits<char>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&)+0xe0>
10002e168:     	ldrb	w0, [x8]
10002e16c:     	b	0x10002e184 <std::__1::basic_istream<char, std::__1::char_traits<char>>& std::__1::operator>>[abi:ue170006]<char, std::__1::char_traits<char>, std::__1::allocator<char>>(std::__1::basic_istream<char, std::__1::char_traits<char>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&)+0xf4>
10002e170:     	ldr	x8, [x0]
10002e174:     	ldr	x8, [x8, #72]
10002e178:     	blr	x8
10002e17c:     	cmn	w0, #1
10002e180:     	b.eq	0x10002e1f0 <std::__1::basic_istream<char, std::__1::char_traits<char>>& std::__1::operator>>[abi:ue170006]<char, std::__1::char_traits<char>, std::__1::allocator<char>>(std::__1::basic_istream<char, std::__1::char_traits<char>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&)+0x160>
10002e184:     	tbnz	w0, #7, 0x10002e198 <std::__1::basic_istream<char, std::__1::char_traits<char>>& std::__1::operator>>[abi:ue170006]<char, std::__1::char_traits<char>, std::__1::allocator<char>>(std::__1::basic_istream<char, std::__1::char_traits<char>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&)+0x108>
10002e188:     	ldr	x8, [x21, #16]
10002e18c:     	and	w9, w0, #0xff
10002e190:     	ldr	w8, [x8, w9, uxtw #2]
10002e194:     	tbnz	w8, #14, 0x10002e1e8 <std::__1::basic_istream<char, std::__1::char_traits<char>>& std::__1::operator>>[abi:ue170006]<char, std::__1::char_traits<char>, std::__1::allocator<char>>(std::__1::basic_istream<char, std::__1::char_traits<char>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&)+0x158>
10002e198:     	sxtb	w1, w0
10002e19c:     	mov	x0, x20
10002e1a0:     	bl	0x10002ed74 <_vsnprintf+0x10002ed74>
10002e1a4:     	ldr	x8, [x19]
10002e1a8:     	ldur	x8, [x8, #-24]
10002e1ac:     	add	x8, x19, x8
10002e1b0:     	ldr	x0, [x8, #40]
10002e1b4:     	ldp	x8, x9, [x0, #24]
10002e1b8:     	cmp	x8, x9
10002e1bc:     	b.ne	0x10002e138 <std::__1::basic_istream<char, std::__1::char_traits<char>>& std::__1::operator>>[abi:ue170006]<char, std::__1::char_traits<char>, std::__1::allocator<char>>(std::__1::basic_istream<char, std::__1::char_traits<char>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&)+0xa8>
10002e1c0:     	ldr	x8, [x0]
10002e1c4:     	ldr	x8, [x8, #80]
10002e1c8:     	blr	x8
10002e1cc:     	b	0x10002e140 <std::__1::basic_istream<char, std::__1::char_traits<char>>& std::__1::operator>>[abi:ue170006]<char, std::__1::char_traits<char>, std::__1::allocator<char>>(std::__1::basic_istream<char, std::__1::char_traits<char>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&)+0xb0>
10002e1d0:     	mov	w9, #0
10002e1d4:     	ldr	x8, [x19]
10002e1d8:     	ldur	x10, [x8, #-24]
10002e1dc:     	add	x10, x19, x10
10002e1e0:     	str	xzr, [x10, #24]
10002e1e4:     	b	0x10002e210 <std::__1::basic_istream<char, std::__1::char_traits<char>>& std::__1::operator>>[abi:ue170006]<char, std::__1::char_traits<char>, std::__1::allocator<char>>(std::__1::basic_istream<char, std::__1::char_traits<char>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&)+0x180>
10002e1e8:     	mov	w9, #0
10002e1ec:     	b	0x10002e1f4 <std::__1::basic_istream<char, std::__1::char_traits<char>>& std::__1::operator>>[abi:ue170006]<char, std::__1::char_traits<char>, std::__1::allocator<char>>(std::__1::basic_istream<char, std::__1::char_traits<char>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&)+0x164>
10002e1f0:     	mov	w9, #2
10002e1f4:     	ldr	x8, [x19]
10002e1f8:     	ldur	x10, [x8, #-24]
10002e1fc:     	add	x10, x19, x10
10002e200:     	str	xzr, [x10, #24]
10002e204:     	orr	w10, w9, #0x4
10002e208:     	cmp	x22, #0
10002e20c:     	csel	w9, w10, w9, eq
10002e210:     	ldur	x8, [x8, #-24]
10002e214:     	add	x0, x19, x8
10002e218:     	ldr	w8, [x0, #32]
10002e21c:     	orr	w1, w8, w9
10002e220:     	bl	0x10002efd8 <_vsnprintf+0x10002efd8>
10002e224:     	mov	x0, x19
10002e228:     	ldp	x29, x30, [sp, #64]
10002e22c:     	ldp	x20, x19, [sp, #48]
10002e230:     	ldp	x22, x21, [sp, #32]
10002e234:     	ldp	x24, x23, [sp, #16]
10002e238:     	add	sp, sp, #80
10002e23c:     	ret
10002e240:     	mov	x20, x0
10002e244:     	mov	x0, sp
10002e248:     	bl	0x10002ef84 <_vsnprintf+0x10002ef84>
10002e24c:     	b	0x10002e25c <std::__1::basic_istream<char, std::__1::char_traits<char>>& std::__1::operator>>[abi:ue170006]<char, std::__1::char_traits<char>, std::__1::allocator<char>>(std::__1::basic_istream<char, std::__1::char_traits<char>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&)+0x1cc>
10002e250:     	b	0x10002e258 <std::__1::basic_istream<char, std::__1::char_traits<char>>& std::__1::operator>>[abi:ue170006]<char, std::__1::char_traits<char>, std::__1::allocator<char>>(std::__1::basic_istream<char, std::__1::char_traits<char>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&)+0x1c8>
10002e254:     	b	0x10002e258 <std::__1::basic_istream<char, std::__1::char_traits<char>>& std::__1::operator>>[abi:ue170006]<char, std::__1::char_traits<char>, std::__1::allocator<char>>(std::__1::basic_istream<char, std::__1::char_traits<char>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&)+0x1c8>
10002e258:     	mov	x20, x0
10002e25c:     	mov	x0, x20
10002e260:     	bl	0x10002f050 <_vsnprintf+0x10002f050>
10002e264:     	ldr	x8, [x19]
10002e268:     	ldur	x9, [x8, #-24]
10002e26c:     	add	x9, x19, x9
10002e270:     	ldr	w10, [x9, #32]
10002e274:     	orr	w10, w10, #0x1
10002e278:     	str	w10, [x9, #32]
10002e27c:     	ldur	x8, [x8, #-24]
10002e280:     	add	x8, x19, x8
10002e284:     	ldrb	w8, [x8, #36]
10002e288:     	tbnz	w8, #0, 0x10002e29c <std::__1::basic_istream<char, std::__1::char_traits<char>>& std::__1::operator>>[abi:ue170006]<char, std::__1::char_traits<char>, std::__1::allocator<char>>(std::__1::basic_istream<char, std::__1::char_traits<char>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&)+0x20c>
10002e28c:     	bl	0x10002f05c <_vsnprintf+0x10002f05c>
10002e290:     	ldr	x8, [x19]
10002e294:     	mov	w9, #1
10002e298:     	b	0x10002e210 <std::__1::basic_istream<char, std::__1::char_traits<char>>& std::__1::operator>>[abi:ue170006]<char, std::__1::char_traits<char>, std::__1::allocator<char>>(std::__1::basic_istream<char, std::__1::char_traits<char>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&)+0x180>
10002e29c:     	bl	0x10002f098 <_vsnprintf+0x10002f098>
10002e2a0:     	brk	#0x1
10002e2a4:     	mov	x19, x0
10002e2a8:     	bl	0x10002f05c <_vsnprintf+0x10002f05c>
10002e2ac:     	mov	x0, x19
10002e2b0:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>
10002e2b4:     	bl	0x100006a3c <___clang_call_terminate>

000000010002e2b8 <std::__1::basic_ifstream<char, std::__1::char_traits<char>>::~basic_ifstream()>:
10002e2b8:     	stp	x20, x19, [sp, #-32]!
10002e2bc:     	stp	x29, x30, [sp, #16]
10002e2c0:     	add	x29, sp, #16
10002e2c4:     	mov	x19, x0
10002e2c8:     	adrp	x20, 0x100034000 <std::__1::basic_ifstream<char, std::__1::char_traits<char>>::~basic_ifstream()+0x28>
10002e2cc:     	ldr	x20, [x20, #688]
10002e2d0:     	ldr	x8, [x20]
10002e2d4:     	str	x8, [x0]
10002e2d8:     	ldr	x9, [x20, #24]
10002e2dc:     	ldur	x8, [x8, #-24]
10002e2e0:     	str	x9, [x0, x8]
10002e2e4:     	add	x0, x0, #16
10002e2e8:     	bl	0x10002edb0 <_vsnprintf+0x10002edb0>
10002e2ec:     	add	x1, x20, #8
10002e2f0:     	mov	x0, x19
10002e2f4:     	bl	0x10002edc8 <_vsnprintf+0x10002edc8>
10002e2f8:     	add	x0, x19, #424
10002e2fc:     	bl	0x10002efe4 <_vsnprintf+0x10002efe4>
10002e300:     	mov	x0, x19
10002e304:     	ldp	x29, x30, [sp, #16]
10002e308:     	ldp	x20, x19, [sp], #32
10002e30c:     	ret

000000010002e310 <benchmark::(anonymous namespace)::ThreadAffinityGuard::~ThreadAffinityGuard()>:
10002e310:     	stp	x29, x30, [sp, #-16]!
10002e314:     	mov	x29, sp
10002e318:     	ldrb	w8, [x0]
10002e31c:     	cbnz	w8, 0x10002e328 <benchmark::(anonymous namespace)::ThreadAffinityGuard::~ThreadAffinityGuard()+0x18>
10002e320:     	ldp	x29, x30, [sp], #16
10002e324:     	ret
10002e328:     	bl	0x10002e334 <void benchmark::(anonymous namespace)::PrintErrorAndDie<char const (&) [32]>(char const (&) [32])>
10002e32c:     	brk	#0x1
10002e330:     	bl	0x100006a3c <___clang_call_terminate>

000000010002e334 <void benchmark::(anonymous namespace)::PrintErrorAndDie<char const (&) [32]>(char const (&) [32])>:
10002e334:     	stp	x29, x30, [sp, #-16]!
10002e338:     	mov	x29, sp
10002e33c:     	bl	0x10002e348 <void benchmark::(anonymous namespace)::PrintImp<char const (&) [32]>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const (&) [32])>
10002e340:     	mov	w0, #1
10002e344:     	bl	0x10002f104 <_vsnprintf+0x10002f104>

000000010002e348 <void benchmark::(anonymous namespace)::PrintImp<char const (&) [32]>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const (&) [32])>:
10002e348:     	sub	sp, sp, #48
10002e34c:     	stp	x20, x19, [sp, #16]
10002e350:     	stp	x29, x30, [sp, #32]
10002e354:     	add	x29, sp, #32
10002e358:     	adrp	x19, 0x100034000 <void benchmark::(anonymous namespace)::PrintImp<char const (&) [32]>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const (&) [32])+0x28>
10002e35c:     	ldr	x19, [x19, #456]
10002e360:     	adrp	x1, 0x100032000 <void benchmark::(anonymous namespace)::PrintImp<char const (&) [32]>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const (&) [32])+0x28>
10002e364:     	add	x1, x1, #2517
10002e368:     	mov	x0, x19
10002e36c:     	mov	w2, #31
10002e370:     	bl	0x10000a4d0 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::__put_character_sequence[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*, unsigned long)>
10002e374:     	ldr	x8, [x19]
10002e378:     	ldur	x8, [x8, #-24]
10002e37c:     	add	x0, x19, x8
10002e380:     	add	x8, sp, #8
10002e384:     	bl	0x10002ecfc <_vsnprintf+0x10002ecfc>
10002e388:     	adrp	x1, 0x100034000 <void benchmark::(anonymous namespace)::PrintImp<char const (&) [32]>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const (&) [32])+0x58>
10002e38c:     	ldr	x1, [x1, #480]
10002e390:     	add	x0, sp, #8
10002e394:     	bl	0x10002ecf0 <_vsnprintf+0x10002ecf0>
10002e398:     	ldr	x8, [x0]
10002e39c:     	ldr	x8, [x8, #56]
10002e3a0:     	mov	w1, #10
10002e3a4:     	blr	x8
10002e3a8:     	mov	x19, x0
10002e3ac:     	add	x0, sp, #8
10002e3b0:     	bl	0x10002ef84 <_vsnprintf+0x10002ef84>
10002e3b4:     	adrp	x20, 0x100034000 <void benchmark::(anonymous namespace)::PrintImp<char const (&) [32]>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const (&) [32])+0x84>
10002e3b8:     	ldr	x20, [x20, #456]
10002e3bc:     	mov	x0, x20
10002e3c0:     	mov	x1, x19
10002e3c4:     	bl	0x10002edd4 <_vsnprintf+0x10002edd4>
10002e3c8:     	mov	x0, x20
10002e3cc:     	bl	0x10002ede0 <_vsnprintf+0x10002ede0>
10002e3d0:     	ldp	x29, x30, [sp, #32]
10002e3d4:     	ldp	x20, x19, [sp, #16]
10002e3d8:     	add	sp, sp, #48
10002e3dc:     	ret
10002e3e0:     	mov	x19, x0
10002e3e4:     	add	x0, sp, #8
10002e3e8:     	bl	0x10002ef84 <_vsnprintf+0x10002ef84>
10002e3ec:     	mov	x0, x19
10002e3f0:     	bl	0x10002ecc0 <_vsnprintf+0x10002ecc0>

000000010002e3f4 <void std::__1::vector<benchmark::CPUInfo::CacheInfo, std::__1::allocator<benchmark::CPUInfo::CacheInfo>>::__push_back_slow_path<benchmark::CPUInfo::CacheInfo>(benchmark::CPUInfo::CacheInfo&&)>:
10002e3f4:     	stp	x24, x23, [sp, #-64]!
10002e3f8:     	stp	x22, x21, [sp, #16]
10002e3fc:     	stp	x20, x19, [sp, #32]
10002e400:     	stp	x29, x30, [sp, #48]
10002e404:     	add	x29, sp, #48
10002e408:     	mov	x19, x0
10002e40c:     	mov	x8, #7378697629483820646
10002e410:     	movk	x8, #1638, lsl #48
10002e414:     	ldp	x9, x10, [x0]
10002e418:     	sub	x21, x10, x9
10002e41c:     	asr	x10, x21, #3
10002e420:     	mov	x11, #-3689348814741910324
10002e424:     	movk	x11, #52429
10002e428:     	mul	x22, x10, x11
10002e42c:     	add	x10, x22, #1
10002e430:     	cmp	x10, x8
10002e434:     	b.hi	0x10002e580 <void std::__1::vector<benchmark::CPUInfo::CacheInfo, std::__1::allocator<benchmark::CPUInfo::CacheInfo>>::__push_back_slow_path<benchmark::CPUInfo::CacheInfo>(benchmark::CPUInfo::CacheInfo&&)+0x18c>
10002e438:     	mov	x20, x1
10002e43c:     	ldr	x12, [x19, #16]
10002e440:     	sub	x9, x12, x9
10002e444:     	asr	x9, x9, #3
10002e448:     	mul	x9, x9, x11
10002e44c:     	lsl	x11, x9, #1
10002e450:     	cmp	x11, x10
10002e454:     	csel	x10, x11, x10, hi
10002e458:     	mov	x11, #3689348814741910323
10002e45c:     	movk	x11, #819, lsl #48
10002e460:     	cmp	x9, x11
10002e464:     	csel	x23, x10, x8, lo
10002e468:     	cbz	x23, 0x10002e484 <void std::__1::vector<benchmark::CPUInfo::CacheInfo, std::__1::allocator<benchmark::CPUInfo::CacheInfo>>::__push_back_slow_path<benchmark::CPUInfo::CacheInfo>(benchmark::CPUInfo::CacheInfo&&)+0x90>
10002e46c:     	cmp	x23, x8
10002e470:     	b.hi	0x10002e588 <void std::__1::vector<benchmark::CPUInfo::CacheInfo, std::__1::allocator<benchmark::CPUInfo::CacheInfo>>::__push_back_slow_path<benchmark::CPUInfo::CacheInfo>(benchmark::CPUInfo::CacheInfo&&)+0x194>
10002e474:     	add	x8, x23, x23, lsl #2
10002e478:     	lsl	x0, x8, #3
10002e47c:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10002e480:     	b	0x10002e488 <void std::__1::vector<benchmark::CPUInfo::CacheInfo, std::__1::allocator<benchmark::CPUInfo::CacheInfo>>::__push_back_slow_path<benchmark::CPUInfo::CacheInfo>(benchmark::CPUInfo::CacheInfo&&)+0x94>
10002e484:     	mov	x0, #0
10002e488:     	mov	w8, #40
10002e48c:     	madd	x9, x22, x8, x0
10002e490:     	madd	x8, x23, x8, x0
10002e494:     	ldp	x10, x11, [x20, #16]
10002e498:     	str	x10, [x9, #16]
10002e49c:     	ldr	q0, [x20]
10002e4a0:     	str	q0, [x9]
10002e4a4:     	stp	xzr, xzr, [x20, #8]
10002e4a8:     	str	xzr, [x20]
10002e4ac:     	add	x10, x0, x21
10002e4b0:     	str	x11, [x10, #24]
10002e4b4:     	ldr	w11, [x20, #32]
10002e4b8:     	str	w11, [x10, #32]
10002e4bc:     	add	x10, x9, #40
10002e4c0:     	ldp	x11, x0, [x19]
10002e4c4:     	cmp	x0, x11
10002e4c8:     	b.eq	0x10002e560 <void std::__1::vector<benchmark::CPUInfo::CacheInfo, std::__1::allocator<benchmark::CPUInfo::CacheInfo>>::__push_back_slow_path<benchmark::CPUInfo::CacheInfo>(benchmark::CPUInfo::CacheInfo&&)+0x16c>
10002e4cc:     	ldur	q0, [x0, #-40]
10002e4d0:     	ldur	x12, [x0, #-24]
10002e4d4:     	stur	x12, [x9, #-24]
10002e4d8:     	stur	q0, [x9, #-40]
10002e4dc:     	stp	xzr, xzr, [x0, #-32]
10002e4e0:     	stur	xzr, [x0, #-40]
10002e4e4:     	ldur	x12, [x0, #-16]
10002e4e8:     	ldur	w13, [x0, #-8]
10002e4ec:     	stur	w13, [x9, #-8]
10002e4f0:     	stur	x12, [x9, #-16]
10002e4f4:     	sub	x9, x9, #40
10002e4f8:     	sub	x12, x0, #40
10002e4fc:     	mov	x0, x12
10002e500:     	cmp	x12, x11
10002e504:     	b.ne	0x10002e4cc <void std::__1::vector<benchmark::CPUInfo::CacheInfo, std::__1::allocator<benchmark::CPUInfo::CacheInfo>>::__push_back_slow_path<benchmark::CPUInfo::CacheInfo>(benchmark::CPUInfo::CacheInfo&&)+0xd8>
10002e508:     	ldp	x20, x0, [x19]
10002e50c:     	stp	x9, x10, [x19]
10002e510:     	str	x8, [x19, #16]
10002e514:     	cmp	x0, x20
10002e518:     	b.ne	0x10002e52c <void std::__1::vector<benchmark::CPUInfo::CacheInfo, std::__1::allocator<benchmark::CPUInfo::CacheInfo>>::__push_back_slow_path<benchmark::CPUInfo::CacheInfo>(benchmark::CPUInfo::CacheInfo&&)+0x138>
10002e51c:     	b	0x10002e548 <void std::__1::vector<benchmark::CPUInfo::CacheInfo, std::__1::allocator<benchmark::CPUInfo::CacheInfo>>::__push_back_slow_path<benchmark::CPUInfo::CacheInfo>(benchmark::CPUInfo::CacheInfo&&)+0x154>
10002e520:     	mov	x0, x19
10002e524:     	cmp	x19, x20
10002e528:     	b.eq	0x10002e544 <void std::__1::vector<benchmark::CPUInfo::CacheInfo, std::__1::allocator<benchmark::CPUInfo::CacheInfo>>::__push_back_slow_path<benchmark::CPUInfo::CacheInfo>(benchmark::CPUInfo::CacheInfo&&)+0x150>
10002e52c:     	sub	x19, x0, #40
10002e530:     	ldursb	w8, [x0, #-17]
10002e534:     	tbz	w8, #31, 0x10002e520 <void std::__1::vector<benchmark::CPUInfo::CacheInfo, std::__1::allocator<benchmark::CPUInfo::CacheInfo>>::__push_back_slow_path<benchmark::CPUInfo::CacheInfo>(benchmark::CPUInfo::CacheInfo&&)+0x12c>
10002e538:     	ldur	x0, [x0, #-40]
10002e53c:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002e540:     	b	0x10002e520 <void std::__1::vector<benchmark::CPUInfo::CacheInfo, std::__1::allocator<benchmark::CPUInfo::CacheInfo>>::__push_back_slow_path<benchmark::CPUInfo::CacheInfo>(benchmark::CPUInfo::CacheInfo&&)+0x12c>
10002e544:     	mov	x0, x20
10002e548:     	cbz	x0, 0x10002e56c <void std::__1::vector<benchmark::CPUInfo::CacheInfo, std::__1::allocator<benchmark::CPUInfo::CacheInfo>>::__push_back_slow_path<benchmark::CPUInfo::CacheInfo>(benchmark::CPUInfo::CacheInfo&&)+0x178>
10002e54c:     	ldp	x29, x30, [sp, #48]
10002e550:     	ldp	x20, x19, [sp, #32]
10002e554:     	ldp	x22, x21, [sp, #16]
10002e558:     	ldp	x24, x23, [sp], #64
10002e55c:     	b	0x10002f014 <_vsnprintf+0x10002f014>
10002e560:     	stp	x9, x10, [x19]
10002e564:     	str	x8, [x19, #16]
10002e568:     	cbnz	x0, 0x10002e54c <void std::__1::vector<benchmark::CPUInfo::CacheInfo, std::__1::allocator<benchmark::CPUInfo::CacheInfo>>::__push_back_slow_path<benchmark::CPUInfo::CacheInfo>(benchmark::CPUInfo::CacheInfo&&)+0x158>
10002e56c:     	ldp	x29, x30, [sp, #48]
10002e570:     	ldp	x20, x19, [sp, #32]
10002e574:     	ldp	x22, x21, [sp, #16]
10002e578:     	ldp	x24, x23, [sp], #64
10002e57c:     	ret
10002e580:     	mov	x0, x19
10002e584:     	bl	0x10002e58c <std::__1::vector<benchmark::CPUInfo::CacheInfo, std::__1::allocator<benchmark::CPUInfo::CacheInfo>>::__throw_length_error[abi:ue170006]() const>
10002e588:     	bl	0x100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>

000000010002e58c <std::__1::vector<benchmark::CPUInfo::CacheInfo, std::__1::allocator<benchmark::CPUInfo::CacheInfo>>::__throw_length_error[abi:ue170006]() const>:
10002e58c:     	stp	x29, x30, [sp, #-16]!
10002e590:     	mov	x29, sp
10002e594:     	adrp	x0, 0x100031000 <std::__1::vector<double, std::__1::allocator<double>>::__append(unsigned long)>
10002e598:     	add	x0, x0, #3485
10002e59c:     	bl	0x100006a48 <std::__1::__throw_length_error[abi:ue170006](char const*)>

000000010002e5a0 <std::__1::vector<double, std::__1::allocator<double>>::__append(unsigned long)>:
10002e5a0:     	stp	x28, x27, [sp, #-96]!
10002e5a4:     	stp	x26, x25, [sp, #16]
10002e5a8:     	stp	x24, x23, [sp, #32]
10002e5ac:     	stp	x22, x21, [sp, #48]
10002e5b0:     	stp	x20, x19, [sp, #64]
10002e5b4:     	stp	x29, x30, [sp, #80]
10002e5b8:     	add	x29, sp, #80
10002e5bc:     	mov	x23, x1
10002e5c0:     	mov	x19, x0
10002e5c4:     	ldp	x26, x8, [x0, #8]
10002e5c8:     	mov	x20, x26
10002e5cc:     	sub	x9, x8, x26
10002e5d0:     	cmp	x1, x9, asr #3
10002e5d4:     	b.ls	0x10002e62c <std::__1::vector<double, std::__1::allocator<double>>::__append(unsigned long)+0x8c>
10002e5d8:     	ldr	x21, [x19]
10002e5dc:     	sub	x28, x26, x21
10002e5e0:     	asr	x27, x28, #3
10002e5e4:     	add	x9, x27, x23
10002e5e8:     	lsr	x10, x9, #61
10002e5ec:     	cbnz	x10, 0x10002e738 <std::__1::vector<double, std::__1::allocator<double>>::__append(unsigned long)+0x198>
10002e5f0:     	mov	x10, #9223372036854775800
10002e5f4:     	sub	x8, x8, x21
10002e5f8:     	asr	x11, x8, #2
10002e5fc:     	cmp	x11, x9
10002e600:     	csel	x9, x11, x9, hi
10002e604:     	cmp	x8, x10
10002e608:     	mov	x8, #2305843009213693951
10002e60c:     	csel	x25, x9, x8, lo
10002e610:     	cbz	x25, 0x10002e64c <std::__1::vector<double, std::__1::allocator<double>>::__append(unsigned long)+0xac>
10002e614:     	lsr	x8, x25, #61
10002e618:     	cbnz	x8, 0x10002e740 <std::__1::vector<double, std::__1::allocator<double>>::__append(unsigned long)+0x1a0>
10002e61c:     	lsl	x0, x25, #3
10002e620:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10002e624:     	mov	x24, x0
10002e628:     	b	0x10002e650 <std::__1::vector<double, std::__1::allocator<double>>::__append(unsigned long)+0xb0>
10002e62c:     	cbz	x23, 0x10002e644 <std::__1::vector<double, std::__1::allocator<double>>::__append(unsigned long)+0xa4>
10002e630:     	lsl	x21, x23, #3
10002e634:     	mov	x0, x20
10002e638:     	mov	x1, x21
10002e63c:     	bl	0x10002f0f8 <_vsnprintf+0x10002f0f8>
10002e640:     	add	x20, x26, x21
10002e644:     	str	x20, [x19, #8]
10002e648:     	b	0x10002e71c <std::__1::vector<double, std::__1::allocator<double>>::__append(unsigned long)+0x17c>
10002e64c:     	mov	x24, #0
10002e650:     	add	x22, x24, x27, lsl #3
10002e654:     	lsl	x23, x23, #3
10002e658:     	add	x25, x24, x25, lsl #3
10002e65c:     	mov	x0, x22
10002e660:     	mov	x1, x23
10002e664:     	bl	0x10002f0f8 <_vsnprintf+0x10002f0f8>
10002e668:     	add	x8, x22, x23
10002e66c:     	subs	x9, x26, x21
10002e670:     	b.eq	0x10002e6f0 <std::__1::vector<double, std::__1::allocator<double>>::__append(unsigned long)+0x150>
10002e674:     	sub	x9, x9, #8
10002e678:     	cmp	x9, #88
10002e67c:     	b.lo	0x10002e6e0 <std::__1::vector<double, std::__1::allocator<double>>::__append(unsigned long)+0x140>
10002e680:     	sub	x10, x26, x24
10002e684:     	sub	x10, x10, x28
10002e688:     	cmp	x10, #64
10002e68c:     	b.lo	0x10002e6e0 <std::__1::vector<double, std::__1::allocator<double>>::__append(unsigned long)+0x140>
10002e690:     	lsr	x9, x9, #3
10002e694:     	add	x9, x9, #1
10002e698:     	and	x10, x9, #0x3ffffffffffffff8
10002e69c:     	lsl	x11, x10, #3
10002e6a0:     	sub	x20, x26, x11
10002e6a4:     	sub	x22, x22, x11
10002e6a8:     	sub	x11, x26, #32
10002e6ac:     	add	x12, x24, x27, lsl #3
10002e6b0:     	sub	x12, x12, #32
10002e6b4:     	mov	x13, x10
10002e6b8:     	ldp	q1, q0, [x11]
10002e6bc:     	ldp	q3, q2, [x11, #-32]
10002e6c0:     	stp	q1, q0, [x12]
10002e6c4:     	stp	q3, q2, [x12, #-32]
10002e6c8:     	sub	x11, x11, #64
10002e6cc:     	sub	x12, x12, #64
10002e6d0:     	sub	x13, x13, #8
10002e6d4:     	cbnz	x13, 0x10002e6b8 <std::__1::vector<double, std::__1::allocator<double>>::__append(unsigned long)+0x118>
10002e6d8:     	cmp	x9, x10
10002e6dc:     	b.eq	0x10002e6f0 <std::__1::vector<double, std::__1::allocator<double>>::__append(unsigned long)+0x150>
10002e6e0:     	ldr	d0, [x20, #-8]!
10002e6e4:     	str	d0, [x22, #-8]!
10002e6e8:     	cmp	x20, x21
10002e6ec:     	b.ne	0x10002e6e0 <std::__1::vector<double, std::__1::allocator<double>>::__append(unsigned long)+0x140>
10002e6f0:     	stp	x22, x8, [x19]
10002e6f4:     	str	x25, [x19, #16]
10002e6f8:     	cbz	x21, 0x10002e71c <std::__1::vector<double, std::__1::allocator<double>>::__append(unsigned long)+0x17c>
10002e6fc:     	mov	x0, x21
10002e700:     	ldp	x29, x30, [sp, #80]
10002e704:     	ldp	x20, x19, [sp, #64]
10002e708:     	ldp	x22, x21, [sp, #48]
10002e70c:     	ldp	x24, x23, [sp, #32]
10002e710:     	ldp	x26, x25, [sp, #16]
10002e714:     	ldp	x28, x27, [sp], #96
10002e718:     	b	0x10002f014 <_vsnprintf+0x10002f014>
10002e71c:     	ldp	x29, x30, [sp, #80]
10002e720:     	ldp	x20, x19, [sp, #64]
10002e724:     	ldp	x22, x21, [sp, #48]
10002e728:     	ldp	x24, x23, [sp, #32]
10002e72c:     	ldp	x26, x25, [sp, #16]
10002e730:     	ldp	x28, x27, [sp], #96
10002e734:     	ret
10002e738:     	mov	x0, x19
10002e73c:     	bl	0x100023ac8 <std::__1::vector<double, std::__1::allocator<double>>::__throw_length_error[abi:ue170006]() const>
10002e740:     	bl	0x100006abc <std::__throw_bad_array_new_length[abi:ue170006]()>

000000010002e744 <__GLOBAL__sub_I_sysinfo.cc>:
10002e744:     	b	0x10000363c <benchmark::internal::InitializeStreams()>

000000010002e748 <benchmark::ProcessCPUUsage()>:
10002e748:     	sub	sp, sp, #160
10002e74c:     	stp	x29, x30, [sp, #144]
10002e750:     	add	x29, sp, #144
10002e754:     	mov	x1, sp
10002e758:     	mov	w0, #0
10002e75c:     	bl	0x10002f158 <_vsnprintf+0x10002f158>
10002e760:     	cbnz	w0, 0x10002e7b8 <benchmark::ProcessCPUUsage()+0x70>
10002e764:     	ldr	d0, [sp]
10002e768:     	scvtf	d0, d0
10002e76c:     	ldr	s1, [sp, #8]
10002e770:     	sshll.2d	v1, v1, #0
10002e774:     	scvtf	d1, d1
10002e778:     	mov	x8, #60813
10002e77c:     	movk	x8, #41141, lsl #16
10002e780:     	movk	x8, #50935, lsl #32
10002e784:     	movk	x8, #16048, lsl #48
10002e788:     	fmov	d2, x8
10002e78c:     	fmadd	d0, d1, d2, d0
10002e790:     	ldr	d1, [sp, #16]
10002e794:     	scvtf	d1, d1
10002e798:     	fadd	d0, d0, d1
10002e79c:     	ldr	s1, [sp, #24]
10002e7a0:     	sshll.2d	v1, v1, #0
10002e7a4:     	scvtf	d1, d1
10002e7a8:     	fmadd	d0, d1, d2, d0
10002e7ac:     	ldp	x29, x30, [sp, #144]
10002e7b0:     	add	sp, sp, #160
10002e7b4:     	ret
10002e7b8:     	adrp	x0, 0x100032000 <benchmark::(anonymous namespace)::DiagnoseAndExit(char const*)+0x4>
10002e7bc:     	add	x0, x0, #2646
10002e7c0:     	bl	0x10002e7c4 <benchmark::(anonymous namespace)::DiagnoseAndExit(char const*)>

000000010002e7c4 <benchmark::(anonymous namespace)::DiagnoseAndExit(char const*)>:
10002e7c4:     	stp	x20, x19, [sp, #-32]!
10002e7c8:     	stp	x29, x30, [sp, #16]
10002e7cc:     	add	x29, sp, #16
10002e7d0:     	mov	x19, x0
10002e7d4:     	adrp	x0, 0x100034000 <benchmark::(anonymous namespace)::DiagnoseAndExit(char const*)+0x28>
10002e7d8:     	ldr	x0, [x0, #456]
10002e7dc:     	adrp	x1, 0x100032000 <benchmark::(anonymous namespace)::DiagnoseAndExit(char const*)+0x28>
10002e7e0:     	add	x1, x1, #2775
10002e7e4:     	bl	0x100005c54 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::operator<<[abi:ue170006]<std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*)>
10002e7e8:     	mov	x1, x19
10002e7ec:     	bl	0x100005c54 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::operator<<[abi:ue170006]<std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, char const*)>
10002e7f0:     	bl	0x100005c88 <std::__1::basic_ostream<char, std::__1::char_traits<char>>& std::__1::endl[abi:ue170006]<char, std::__1::char_traits<char>>(std::__1::basic_ostream<char, std::__1::char_traits<char>>&)>
10002e7f4:     	mov	w0, #1
10002e7f8:     	bl	0x10002f104 <_vsnprintf+0x10002f104>

000000010002e7fc <benchmark::ThreadCPUUsage()>:
10002e7fc:     	sub	sp, sp, #64
10002e800:     	stp	x29, x30, [sp, #48]
10002e804:     	add	x29, sp, #48
10002e808:     	mov	w8, #10
10002e80c:     	stur	w8, [x29, #-4]
10002e810:     	bl	0x10002f20c <_vsnprintf+0x10002f20c>
10002e814:     	bl	0x10002f200 <_vsnprintf+0x10002f200>
10002e818:     	mov	x2, sp
10002e81c:     	sub	x3, x29, #4
10002e820:     	mov	w1, #3
10002e824:     	bl	0x10002f29c <_vsnprintf+0x10002f29c>
10002e828:     	cbnz	w0, 0x10002e880 <benchmark::ThreadCPUUsage()+0x84>
10002e82c:     	ldp	s0, s1, [sp]
10002e830:     	sshll.2d	v0, v0, #0
10002e834:     	scvtf	d0, d0
10002e838:     	sshll.2d	v1, v1, #0
10002e83c:     	scvtf	d1, d1
10002e840:     	mov	x8, #60813
10002e844:     	movk	x8, #41141, lsl #16
10002e848:     	movk	x8, #50935, lsl #32
10002e84c:     	movk	x8, #16048, lsl #48
10002e850:     	fmov	d2, x8
10002e854:     	fmadd	d0, d1, d2, d0
10002e858:     	ldp	s1, s3, [sp, #8]
10002e85c:     	sshll.2d	v1, v1, #0
10002e860:     	scvtf	d1, d1
10002e864:     	fadd	d0, d0, d1
10002e868:     	sshll.2d	v1, v3, #0
10002e86c:     	scvtf	d1, d1
10002e870:     	fmadd	d0, d1, d2, d0
10002e874:     	ldp	x29, x30, [sp, #48]
10002e878:     	add	sp, sp, #64
10002e87c:     	ret
10002e880:     	adrp	x0, 0x100032000 <benchmark::LocalDateTimeString()+0x4>
10002e884:     	add	x0, x0, #2681
10002e888:     	bl	0x10002e7c4 <benchmark::(anonymous namespace)::DiagnoseAndExit(char const*)>

000000010002e88c <benchmark::LocalDateTimeString()>:
10002e88c:     	sub	sp, sp, #320
10002e890:     	stp	x22, x21, [sp, #272]
10002e894:     	stp	x20, x19, [sp, #288]
10002e898:     	stp	x29, x30, [sp, #304]
10002e89c:     	add	x29, sp, #304
10002e8a0:     	mov	x19, x8
10002e8a4:     	adrp	x8, 0x100034000 <benchmark::LocalDateTimeString()+0x30>
10002e8a8:     	ldr	x8, [x8, #928]
10002e8ac:     	ldr	x8, [x8]
10002e8b0:     	stur	x8, [x29, #-40]
10002e8b4:     	bl	0x10002ef54 <_vsnprintf+0x10002ef54>
10002e8b8:     	str	x0, [sp, #88]
10002e8bc:     	add	x0, sp, #88
10002e8c0:     	bl	0x10002ef60 <_vsnprintf+0x10002ef60>
10002e8c4:     	str	x0, [sp, #80]
10002e8c8:     	add	x0, sp, #80
10002e8cc:     	add	x1, sp, #24
10002e8d0:     	bl	0x10002f17c <_vsnprintf+0x10002f17c>
10002e8d4:     	adrp	x2, 0x100032000 <benchmark::LocalDateTimeString()+0x58>
10002e8d8:     	add	x2, x2, #2733
10002e8dc:     	sub	x0, x29, #84
10002e8e0:     	add	x3, sp, #24
10002e8e4:     	mov	w1, #41
10002e8e8:     	bl	0x10002f248 <_vsnprintf+0x10002f248>
10002e8ec:     	sub	x8, x0, #2
10002e8f0:     	adrp	x21, 0x100038000 <benchmark::LocalDateTimeString()+0x8c>
10002e8f4:     	add	x21, x21, #8
10002e8f8:     	cmp	x8, #3
10002e8fc:     	b.hi	0x10002e994 <benchmark::LocalDateTimeString()+0x108>
10002e900:     	sub	x0, x29, #84
10002e904:     	mov	x1, #0
10002e908:     	mov	w2, #10
10002e90c:     	bl	0x10002f284 <_vsnprintf+0x10002f284>
10002e910:     	mov	w8, #43
10002e914:     	mov	w9, #45
10002e918:     	cmp	x0, #0
10002e91c:     	csel	x8, x9, x8, lt
10002e920:     	cneg	x9, x0, mi
10002e924:     	lsr	x10, x9, #2
10002e928:     	mov	x11, #62915
10002e92c:     	movk	x11, #23592, lsl #16
10002e930:     	movk	x11, #49807, lsl #32
10002e934:     	movk	x11, #10485, lsl #48
10002e938:     	umulh	x10, x10, x11
10002e93c:     	lsr	x10, x10, #2
10002e940:     	mov	w11, #100
10002e944:     	msub	x9, x10, x11, x9
10002e948:     	stp	x8, x10, [sp]
10002e94c:     	str	x9, [sp, #16]
10002e950:     	adrp	x2, 0x100032000 <benchmark::LocalDateTimeString()+0xd4>
10002e954:     	add	x2, x2, #2736
10002e958:     	sub	x0, x29, #84
10002e95c:     	mov	w1, #41
10002e960:     	bl	0x10002f224 <_vsnprintf+0x10002f224>
10002e964:     	ldaprb	w8, [x21]
10002e968:     	tbnz	w8, #0, 0x10002e9b8 <benchmark::LocalDateTimeString()+0x12c>
10002e96c:     	adrp	x0, 0x100038000 <benchmark::LocalDateTimeString()+0x108>
10002e970:     	add	x0, x0, #8
10002e974:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10002e978:     	cbz	w0, 0x10002e9b8 <benchmark::LocalDateTimeString()+0x12c>
10002e97c:     	adrp	x8, 0x100038000 <benchmark::LocalDateTimeString()+0x118>
10002e980:     	str	xzr, [x8]
10002e984:     	adrp	x0, 0x100038000 <benchmark::LocalDateTimeString()+0x120>
10002e988:     	add	x0, x0, #8
10002e98c:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10002e990:     	b	0x10002e9b8 <benchmark::LocalDateTimeString()+0x12c>
10002e994:     	add	x0, sp, #80
10002e998:     	add	x1, sp, #24
10002e99c:     	bl	0x10002f164 <_vsnprintf+0x10002f164>
10002e9a0:     	mov	w8, #12333
10002e9a4:     	movk	w8, #14896, lsl #16
10002e9a8:     	stur	w8, [x29, #-84]
10002e9ac:     	mov	w8, #12346
10002e9b0:     	movk	w8, #48, lsl #16
10002e9b4:     	stur	w8, [x29, #-81]
10002e9b8:     	adrp	x2, 0x100032000 <benchmark::LocalDateTimeString()+0x13c>
10002e9bc:     	add	x2, x2, #2757
10002e9c0:     	add	x0, sp, #88
10002e9c4:     	add	x3, sp, #24
10002e9c8:     	mov	w1, #128
10002e9cc:     	bl	0x10002f248 <_vsnprintf+0x10002f248>
10002e9d0:     	mov	x20, x0
10002e9d4:     	ldaprb	w8, [x21]
10002e9d8:     	tbz	w8, #0, 0x10002ea7c <benchmark::LocalDateTimeString()+0x1f0>
10002e9dc:     	mov	w8, #127
10002e9e0:     	sub	x2, x8, x20
10002e9e4:     	add	x0, sp, #88
10002e9e8:     	sub	x1, x29, #84
10002e9ec:     	bl	0x10002f260 <_vsnprintf+0x10002f260>
10002e9f0:     	add	x0, sp, #88
10002e9f4:     	bl	0x10002f254 <_vsnprintf+0x10002f254>
10002e9f8:     	mov	x8, #9223372036854775792
10002e9fc:     	cmp	x0, x8
10002ea00:     	b.hs	0x10002eaa4 <benchmark::LocalDateTimeString()+0x218>
10002ea04:     	mov	x20, x0
10002ea08:     	cmp	x0, #23
10002ea0c:     	b.hs	0x10002ea1c <benchmark::LocalDateTimeString()+0x190>
10002ea10:     	strb	w20, [x19, #23]
10002ea14:     	cbnz	x20, 0x10002ea3c <benchmark::LocalDateTimeString()+0x1b0>
10002ea18:     	b	0x10002ea4c <benchmark::LocalDateTimeString()+0x1c0>
10002ea1c:     	orr	x8, x20, #0xf
10002ea20:     	add	x21, x8, #1
10002ea24:     	mov	x0, x21
10002ea28:     	bl	0x10002f02c <_vsnprintf+0x10002f02c>
10002ea2c:     	orr	x8, x21, #0x8000000000000000
10002ea30:     	stp	x20, x8, [x19, #8]
10002ea34:     	str	x0, [x19]
10002ea38:     	mov	x19, x0
10002ea3c:     	add	x1, sp, #88
10002ea40:     	mov	x0, x19
10002ea44:     	mov	x2, x20
10002ea48:     	bl	0x10002f1c4 <_vsnprintf+0x10002f1c4>
10002ea4c:     	strb	wzr, [x19, x20]
10002ea50:     	ldur	x8, [x29, #-40]
10002ea54:     	adrp	x9, 0x100034000 <benchmark::LocalDateTimeString()+0x1e0>
10002ea58:     	ldr	x9, [x9, #928]
10002ea5c:     	ldr	x9, [x9]
10002ea60:     	cmp	x9, x8
10002ea64:     	b.ne	0x10002eaac <benchmark::LocalDateTimeString()+0x220>
10002ea68:     	ldp	x29, x30, [sp, #304]
10002ea6c:     	ldp	x20, x19, [sp, #288]
10002ea70:     	ldp	x22, x21, [sp, #272]
10002ea74:     	add	sp, sp, #320
10002ea78:     	ret
10002ea7c:     	adrp	x0, 0x100038000 <benchmark::LocalDateTimeString()+0x218>
10002ea80:     	add	x0, x0, #8
10002ea84:     	bl	0x10002f080 <_vsnprintf+0x10002f080>
10002ea88:     	cbz	w0, 0x10002e9dc <benchmark::LocalDateTimeString()+0x150>
10002ea8c:     	adrp	x8, 0x100038000 <benchmark::BenchmarkReporter::Run* std::__1::__uninitialized_allocator_copy[abi:ue170006]<std::__1::allocator<benchmark::BenchmarkReporter::Run>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, benchmark::BenchmarkReporter::Run*>(std::__1::allocator<benchmark::BenchmarkReporter::Run>&, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, benchmark::BenchmarkReporter::Run*) (.cold.1)+0x4>
10002ea90:     	str	xzr, [x8]
10002ea94:     	adrp	x0, 0x100038000 <benchmark::BenchmarkReporter::Run* std::__1::__uninitialized_allocator_copy[abi:ue170006]<std::__1::allocator<benchmark::BenchmarkReporter::Run>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, benchmark::BenchmarkReporter::Run*>(std::__1::allocator<benchmark::BenchmarkReporter::Run>&, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, benchmark::BenchmarkReporter::Run*) (.cold.1)+0xc>
10002ea98:     	add	x0, x0, #8
10002ea9c:     	bl	0x10002f08c <_vsnprintf+0x10002f08c>
10002eaa0:     	b	0x10002e9dc <benchmark::LocalDateTimeString()+0x150>
10002eaa4:     	mov	x0, x19
10002eaa8:     	bl	0x10000a240 <std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__throw_length_error[abi:ue170006]() const>
10002eaac:     	bl	0x10002f0d4 <_vsnprintf+0x10002f0d4>

000000010002eab0 <benchmark::BenchmarkReporter::Run* std::__1::__uninitialized_allocator_copy[abi:ue170006]<std::__1::allocator<benchmark::BenchmarkReporter::Run>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, benchmark::BenchmarkReporter::Run*>(std::__1::allocator<benchmark::BenchmarkReporter::Run>&, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, benchmark::BenchmarkReporter::Run*) (.cold.1)>:
10002eab0:     	stp	x22, x21, [sp, #-48]!
10002eab4:     	stp	x20, x19, [sp, #16]
10002eab8:     	stp	x29, x30, [sp, #32]
10002eabc:     	add	x29, sp, #32
10002eac0:     	mov	x19, x1
10002eac4:     	sub	x21, x0, #209
10002eac8:     	add	x0, x21, #169
10002eacc:     	ldur	x1, [x21, #177]
10002ead0:     	bl	0x100009068 <std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>>>::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, benchmark::Counter>, void*>*)>
10002ead4:     	ldrsb	w8, [x21, #64]
10002ead8:     	tbz	w8, #31, 0x10002eae4 <benchmark::BenchmarkReporter::Run* std::__1::__uninitialized_allocator_copy[abi:ue170006]<std::__1::allocator<benchmark::BenchmarkReporter::Run>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, benchmark::BenchmarkReporter::Run*>(std::__1::allocator<benchmark::BenchmarkReporter::Run>&, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, benchmark::BenchmarkReporter::Run*) (.cold.1)+0x34>
10002eadc:     	ldur	x0, [x21, #41]
10002eae0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002eae4:     	ldrsb	w8, [x21, #32]
10002eae8:     	tbz	w8, #31, 0x10002eaf4 <benchmark::BenchmarkReporter::Run* std::__1::__uninitialized_allocator_copy[abi:ue170006]<std::__1::allocator<benchmark::BenchmarkReporter::Run>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, benchmark::BenchmarkReporter::Run*>(std::__1::allocator<benchmark::BenchmarkReporter::Run>&, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, benchmark::BenchmarkReporter::Run*) (.cold.1)+0x44>
10002eaec:     	ldur	x0, [x21, #9]
10002eaf0:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002eaf4:     	sub	x20, x21, #239
10002eaf8:     	ldrsb	w8, [x21]
10002eafc:     	tbz	w8, #31, 0x10002eb08 <benchmark::BenchmarkReporter::Run* std::__1::__uninitialized_allocator_copy[abi:ue170006]<std::__1::allocator<benchmark::BenchmarkReporter::Run>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, benchmark::BenchmarkReporter::Run*>(std::__1::allocator<benchmark::BenchmarkReporter::Run>&, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, benchmark::BenchmarkReporter::Run*) (.cold.1)+0x58>
10002eb00:     	ldur	x0, [x21, #-23]
10002eb04:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002eb08:     	mov	x0, x20
10002eb0c:     	bl	0x1000090c8 <benchmark::BenchmarkName::~BenchmarkName()>
10002eb10:     	sub	x21, x21, #448
10002eb14:     	cmp	x20, x19
10002eb18:     	b.ne	0x10002eac8 <benchmark::BenchmarkReporter::Run* std::__1::__uninitialized_allocator_copy[abi:ue170006]<std::__1::allocator<benchmark::BenchmarkReporter::Run>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, benchmark::BenchmarkReporter::Run*>(std::__1::allocator<benchmark::BenchmarkReporter::Run>&, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, std::__1::__wrap_iter<benchmark::BenchmarkReporter::Run*>, benchmark::BenchmarkReporter::Run*) (.cold.1)+0x18>
10002eb1c:     	ldp	x29, x30, [sp, #32]
10002eb20:     	ldp	x20, x19, [sp, #16]
10002eb24:     	ldp	x22, x21, [sp], #48
10002eb28:     	ret

000000010002eb2c <std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::vector(unsigned long) (.cold.1)>:
10002eb2c:     	stp	x22, x21, [sp, #-48]!
10002eb30:     	stp	x20, x19, [sp, #16]
10002eb34:     	stp	x29, x30, [sp, #32]
10002eb38:     	add	x29, sp, #32
10002eb3c:     	mov	x19, x1
10002eb40:     	mov	x20, x0
10002eb44:     	ldr	x8, [x0]
10002eb48:     	mov	x0, x1
10002eb4c:     	cmp	x8, x1
10002eb50:     	b.eq	0x10002eb7c <std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::vector(unsigned long) (.cold.1)+0x50>
10002eb54:     	mov	x21, x2
10002eb58:     	mov	x22, x8
10002eb5c:     	ldr	x0, [x22, #-24]!
10002eb60:     	cbz	x0, 0x10002eb6c <std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::vector(unsigned long) (.cold.1)+0x40>
10002eb64:     	stur	x0, [x8, #-16]
10002eb68:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002eb6c:     	mov	x8, x22
10002eb70:     	cmp	x22, x19
10002eb74:     	b.ne	0x10002eb5c <std::__1::vector<std::__1::vector<long long, std::__1::allocator<long long>>, std::__1::allocator<std::__1::vector<long long, std::__1::allocator<long long>>>>::vector(unsigned long) (.cold.1)+0x30>
10002eb78:     	ldr	x0, [x21]
10002eb7c:     	str	x19, [x20]
10002eb80:     	ldp	x29, x30, [sp, #32]
10002eb84:     	ldp	x20, x19, [sp, #16]
10002eb88:     	ldp	x22, x21, [sp], #48
10002eb8c:     	b	0x10002f014 <_vsnprintf+0x10002f014>

000000010002eb90 <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*) (.cold.1)>:
10002eb90:     	stp	x22, x21, [sp, #-48]!
10002eb94:     	stp	x20, x19, [sp, #16]
10002eb98:     	stp	x29, x30, [sp, #32]
10002eb9c:     	add	x29, sp, #32
10002eba0:     	mov	x19, x1
10002eba4:     	mov	x20, x0
10002eba8:     	ldr	x0, [x0]
10002ebac:     	mov	x8, x1
10002ebb0:     	cmp	x0, x1
10002ebb4:     	b.eq	0x10002ebd0 <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*) (.cold.1)+0x40>
10002ebb8:     	mov	x21, x2
10002ebbc:     	sub	x0, x0, #8
10002ebc0:     	bl	0x10002efa8 <_vsnprintf+0x10002efa8>
10002ebc4:     	cmp	x0, x19
10002ebc8:     	b.ne	0x10002ebbc <benchmark::internal::BenchmarkRunner::BenchmarkRunner(benchmark::internal::BenchmarkInstance const&, benchmark::internal::PerfCountersMeasurement*, benchmark::BenchmarkReporter::PerFamilyRunReports*) (.cold.1)+0x2c>
10002ebcc:     	ldr	x8, [x21]
10002ebd0:     	str	x19, [x20]
10002ebd4:     	mov	x0, x8
10002ebd8:     	ldp	x29, x30, [sp, #32]
10002ebdc:     	ldp	x20, x19, [sp, #16]
10002ebe0:     	ldp	x22, x21, [sp], #48
10002ebe4:     	b	0x10002f014 <_vsnprintf+0x10002f014>

000000010002ebe8 <benchmark::BenchmarkReporter::Run::Run() (.cold.1)>:
10002ebe8:     	stp	x20, x19, [sp, #-32]!
10002ebec:     	stp	x29, x30, [sp, #16]
10002ebf0:     	add	x29, sp, #16
10002ebf4:     	mov	x19, x2
10002ebf8:     	mov	x20, x0
10002ebfc:     	ldrsb	w8, [x0, #271]
10002ec00:     	tbz	w8, #31, 0x10002ec0c <benchmark::BenchmarkReporter::Run::Run() (.cold.1)+0x24>
10002ec04:     	ldr	x0, [x1]
10002ec08:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002ec0c:     	ldrsb	w8, [x20, #239]
10002ec10:     	tbnz	w8, #31, 0x10002ec20 <benchmark::BenchmarkReporter::Run::Run() (.cold.1)+0x38>
10002ec14:     	ldp	x29, x30, [sp, #16]
10002ec18:     	ldp	x20, x19, [sp], #32
10002ec1c:     	ret
10002ec20:     	ldr	x0, [x19]
10002ec24:     	ldp	x29, x30, [sp, #16]
10002ec28:     	ldp	x20, x19, [sp], #32
10002ec2c:     	b	0x10002f014 <_vsnprintf+0x10002f014>

000000010002ec30 <benchmark::BenchmarkReporter::Run::Run() (.cold.1)>:
10002ec30:     	stp	x20, x19, [sp, #-32]!
10002ec34:     	stp	x29, x30, [sp, #16]
10002ec38:     	add	x29, sp, #16
10002ec3c:     	mov	x19, x2
10002ec40:     	mov	x20, x0
10002ec44:     	ldrsb	w8, [x0, #271]
10002ec48:     	tbz	w8, #31, 0x10002ec54 <benchmark::BenchmarkReporter::Run::Run() (.cold.1)+0x24>
10002ec4c:     	ldr	x0, [x1]
10002ec50:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002ec54:     	ldrsb	w8, [x20, #239]
10002ec58:     	tbnz	w8, #31, 0x10002ec68 <benchmark::BenchmarkReporter::Run::Run() (.cold.1)+0x38>
10002ec5c:     	ldp	x29, x30, [sp, #16]
10002ec60:     	ldp	x20, x19, [sp], #32
10002ec64:     	ret
10002ec68:     	ldr	x0, [x19]
10002ec6c:     	ldp	x29, x30, [sp, #16]
10002ec70:     	ldp	x20, x19, [sp], #32
10002ec74:     	b	0x10002f014 <_vsnprintf+0x10002f014>

000000010002ec78 <benchmark::BenchmarkReporter::Run::Run() (.cold.1)>:
10002ec78:     	stp	x20, x19, [sp, #-32]!
10002ec7c:     	stp	x29, x30, [sp, #16]
10002ec80:     	add	x29, sp, #16
10002ec84:     	mov	x19, x2
10002ec88:     	mov	x20, x0
10002ec8c:     	ldrsb	w8, [x0, #271]
10002ec90:     	tbz	w8, #31, 0x10002ec9c <benchmark::BenchmarkReporter::Run::Run() (.cold.1)+0x24>
10002ec94:     	ldr	x0, [x1]
10002ec98:     	bl	0x10002f014 <_vsnprintf+0x10002f014>
10002ec9c:     	ldrsb	w8, [x20, #239]
10002eca0:     	tbnz	w8, #31, 0x10002ecb0 <benchmark::BenchmarkReporter::Run::Run() (.cold.1)+0x38>
10002eca4:     	ldp	x29, x30, [sp, #16]
10002eca8:     	ldp	x20, x19, [sp], #32
10002ecac:     	ret
10002ecb0:     	ldr	x0, [x19]
10002ecb4:     	ldp	x29, x30, [sp, #16]
10002ecb8:     	ldp	x20, x19, [sp], #32
10002ecbc:     	b	0x10002f014 <_vsnprintf+0x10002f014>

Disassembly of section __TEXT,__stubs:

000000010002ecc0 <__stubs>:
10002ecc0:     	adrp	x16, 0x100034000 <__stubs+0x18>
10002ecc4:     	ldr	x16, [x16, #8]
10002ecc8:     	br	x16
10002eccc:     	adrp	x16, 0x100034000 <__stubs+0x24>
10002ecd0:     	ldr	x16, [x16, #16]
10002ecd4:     	br	x16
10002ecd8:     	adrp	x16, 0x100034000 <__stubs+0x30>
10002ecdc:     	ldr	x16, [x16, #24]
10002ece0:     	br	x16
10002ece4:     	adrp	x16, 0x100034000 <__stubs+0x3c>
10002ece8:     	ldr	x16, [x16, #32]
10002ecec:     	br	x16
10002ecf0:     	adrp	x16, 0x100034000 <__stubs+0x48>
10002ecf4:     	ldr	x16, [x16, #40]
10002ecf8:     	br	x16
10002ecfc:     	adrp	x16, 0x100034000 <__stubs+0x54>
10002ed00:     	ldr	x16, [x16, #48]
10002ed04:     	br	x16
10002ed08:     	adrp	x16, 0x100034000 <__stubs+0x60>
10002ed0c:     	ldr	x16, [x16, #56]
10002ed10:     	br	x16
10002ed14:     	adrp	x16, 0x100034000 <__stubs+0x6c>
10002ed18:     	ldr	x16, [x16, #80]
10002ed1c:     	br	x16
10002ed20:     	adrp	x16, 0x100034000 <__stubs+0x78>
10002ed24:     	ldr	x16, [x16, #96]
10002ed28:     	br	x16
10002ed2c:     	adrp	x16, 0x100034000 <__stubs+0x84>
10002ed30:     	ldr	x16, [x16, #112]
10002ed34:     	br	x16
10002ed38:     	adrp	x16, 0x100034000 <__stubs+0x90>
10002ed3c:     	ldr	x16, [x16, #120]
10002ed40:     	br	x16
10002ed44:     	adrp	x16, 0x100034000 <__stubs+0x9c>
10002ed48:     	ldr	x16, [x16, #128]
10002ed4c:     	br	x16
10002ed50:     	adrp	x16, 0x100034000 <__stubs+0xa8>
10002ed54:     	ldr	x16, [x16, #136]
10002ed58:     	br	x16
10002ed5c:     	adrp	x16, 0x100034000 <__stubs+0xb4>
10002ed60:     	ldr	x16, [x16, #144]
10002ed64:     	br	x16
10002ed68:     	adrp	x16, 0x100034000 <__stubs+0xc0>
10002ed6c:     	ldr	x16, [x16, #152]
10002ed70:     	br	x16
10002ed74:     	adrp	x16, 0x100034000 <__stubs+0xcc>
10002ed78:     	ldr	x16, [x16, #160]
10002ed7c:     	br	x16
10002ed80:     	adrp	x16, 0x100034000 <__stubs+0xd8>
10002ed84:     	ldr	x16, [x16, #176]
10002ed88:     	br	x16
10002ed8c:     	adrp	x16, 0x100034000 <__stubs+0xe4>
10002ed90:     	ldr	x16, [x16, #184]
10002ed94:     	br	x16
10002ed98:     	adrp	x16, 0x100034000 <__stubs+0xf0>
10002ed9c:     	ldr	x16, [x16, #192]
10002eda0:     	br	x16
10002eda4:     	adrp	x16, 0x100034000 <__stubs+0xfc>
10002eda8:     	ldr	x16, [x16, #200]
10002edac:     	br	x16
10002edb0:     	adrp	x16, 0x100034000 <__stubs+0x108>
10002edb4:     	ldr	x16, [x16, #208]
10002edb8:     	br	x16
10002edbc:     	adrp	x16, 0x100034000 <__stubs+0x114>
10002edc0:     	ldr	x16, [x16, #216]
10002edc4:     	br	x16
10002edc8:     	adrp	x16, 0x100034000 <__stubs+0x120>
10002edcc:     	ldr	x16, [x16, #224]
10002edd0:     	br	x16
10002edd4:     	adrp	x16, 0x100034000 <__stubs+0x12c>
10002edd8:     	ldr	x16, [x16, #232]
10002eddc:     	br	x16
10002ede0:     	adrp	x16, 0x100034000 <__stubs+0x138>
10002ede4:     	ldr	x16, [x16, #240]
10002ede8:     	br	x16
10002edec:     	adrp	x16, 0x100034000 <__stubs+0x144>
10002edf0:     	ldr	x16, [x16, #248]
10002edf4:     	br	x16
10002edf8:     	adrp	x16, 0x100034000 <__stubs+0x150>
10002edfc:     	ldr	x16, [x16, #256]
10002ee00:     	br	x16
10002ee04:     	adrp	x16, 0x100034000 <__stubs+0x15c>
10002ee08:     	ldr	x16, [x16, #264]
10002ee0c:     	br	x16
10002ee10:     	adrp	x16, 0x100034000 <__stubs+0x168>
10002ee14:     	ldr	x16, [x16, #272]
10002ee18:     	br	x16
10002ee1c:     	adrp	x16, 0x100034000 <__stubs+0x174>
10002ee20:     	ldr	x16, [x16, #280]
10002ee24:     	br	x16
10002ee28:     	adrp	x16, 0x100034000 <__stubs+0x180>
10002ee2c:     	ldr	x16, [x16, #288]
10002ee30:     	br	x16
10002ee34:     	adrp	x16, 0x100034000 <__stubs+0x18c>
10002ee38:     	ldr	x16, [x16, #296]
10002ee3c:     	br	x16
10002ee40:     	adrp	x16, 0x100034000 <__stubs+0x198>
10002ee44:     	ldr	x16, [x16, #304]
10002ee48:     	br	x16
10002ee4c:     	adrp	x16, 0x100034000 <__stubs+0x1a4>
10002ee50:     	ldr	x16, [x16, #312]
10002ee54:     	br	x16
10002ee58:     	adrp	x16, 0x100034000 <__stubs+0x1b0>
10002ee5c:     	ldr	x16, [x16, #320]
10002ee60:     	br	x16
10002ee64:     	adrp	x16, 0x100034000 <__stubs+0x1bc>
10002ee68:     	ldr	x16, [x16, #328]
10002ee6c:     	br	x16
10002ee70:     	adrp	x16, 0x100034000 <__stubs+0x1c8>
10002ee74:     	ldr	x16, [x16, #336]
10002ee78:     	br	x16
10002ee7c:     	adrp	x16, 0x100034000 <__stubs+0x1d4>
10002ee80:     	ldr	x16, [x16, #344]
10002ee84:     	br	x16
10002ee88:     	adrp	x16, 0x100034000 <__stubs+0x1e0>
10002ee8c:     	ldr	x16, [x16, #352]
10002ee90:     	br	x16
10002ee94:     	adrp	x16, 0x100034000 <__stubs+0x1ec>
10002ee98:     	ldr	x16, [x16, #360]
10002ee9c:     	br	x16
10002eea0:     	adrp	x16, 0x100034000 <__stubs+0x1f8>
10002eea4:     	ldr	x16, [x16, #368]
10002eea8:     	br	x16
10002eeac:     	adrp	x16, 0x100034000 <__stubs+0x204>
10002eeb0:     	ldr	x16, [x16, #376]
10002eeb4:     	br	x16
10002eeb8:     	adrp	x16, 0x100034000 <__stubs+0x210>
10002eebc:     	ldr	x16, [x16, #384]
10002eec0:     	br	x16
10002eec4:     	adrp	x16, 0x100034000 <__stubs+0x21c>
10002eec8:     	ldr	x16, [x16, #392]
10002eecc:     	br	x16
10002eed0:     	adrp	x16, 0x100034000 <__stubs+0x228>
10002eed4:     	ldr	x16, [x16, #400]
10002eed8:     	br	x16
10002eedc:     	adrp	x16, 0x100034000 <__stubs+0x234>
10002eee0:     	ldr	x16, [x16, #408]
10002eee4:     	br	x16
10002eee8:     	adrp	x16, 0x100034000 <__stubs+0x240>
10002eeec:     	ldr	x16, [x16, #416]
10002eef0:     	br	x16
10002eef4:     	adrp	x16, 0x100034000 <__stubs+0x24c>
10002eef8:     	ldr	x16, [x16, #424]
10002eefc:     	br	x16
10002ef00:     	adrp	x16, 0x100034000 <__stubs+0x258>
10002ef04:     	ldr	x16, [x16, #432]
10002ef08:     	br	x16
10002ef0c:     	adrp	x16, 0x100034000 <__stubs+0x264>
10002ef10:     	ldr	x16, [x16, #440]
10002ef14:     	br	x16
10002ef18:     	adrp	x16, 0x100034000 <__stubs+0x270>
10002ef1c:     	ldr	x16, [x16, #448]
10002ef20:     	br	x16
10002ef24:     	adrp	x16, 0x100034000 <__stubs+0x27c>
10002ef28:     	ldr	x16, [x16, #488]
10002ef2c:     	br	x16
10002ef30:     	adrp	x16, 0x100034000 <__stubs+0x288>
10002ef34:     	ldr	x16, [x16, #496]
10002ef38:     	br	x16
10002ef3c:     	adrp	x16, 0x100034000 <__stubs+0x294>
10002ef40:     	ldr	x16, [x16, #504]
10002ef44:     	br	x16
10002ef48:     	adrp	x16, 0x100034000 <__stubs+0x2a0>
10002ef4c:     	ldr	x16, [x16, #512]
10002ef50:     	br	x16
10002ef54:     	adrp	x16, 0x100034000 <__stubs+0x2ac>
10002ef58:     	ldr	x16, [x16, #520]
10002ef5c:     	br	x16
10002ef60:     	adrp	x16, 0x100034000 <__stubs+0x2b8>
10002ef64:     	ldr	x16, [x16, #528]
10002ef68:     	br	x16
10002ef6c:     	adrp	x16, 0x100034000 <__stubs+0x2c4>
10002ef70:     	ldr	x16, [x16, #536]
10002ef74:     	br	x16
10002ef78:     	adrp	x16, 0x100034000 <__stubs+0x2d0>
10002ef7c:     	ldr	x16, [x16, #544]
10002ef80:     	br	x16
10002ef84:     	adrp	x16, 0x100034000 <__stubs+0x2dc>
10002ef88:     	ldr	x16, [x16, #552]
10002ef8c:     	br	x16
10002ef90:     	adrp	x16, 0x100034000 <__stubs+0x2e8>
10002ef94:     	ldr	x16, [x16, #560]
10002ef98:     	br	x16
10002ef9c:     	adrp	x16, 0x100034000 <__stubs+0x2f4>
10002efa0:     	ldr	x16, [x16, #568]
10002efa4:     	br	x16
10002efa8:     	adrp	x16, 0x100034000 <__stubs+0x300>
10002efac:     	ldr	x16, [x16, #576]
10002efb0:     	br	x16
10002efb4:     	adrp	x16, 0x100034000 <__stubs+0x30c>
10002efb8:     	ldr	x16, [x16, #592]
10002efbc:     	br	x16
10002efc0:     	adrp	x16, 0x100034000 <__stubs+0x318>
10002efc4:     	ldr	x16, [x16, #600]
10002efc8:     	br	x16
10002efcc:     	adrp	x16, 0x100034000 <__stubs+0x324>
10002efd0:     	ldr	x16, [x16, #616]
10002efd4:     	br	x16
10002efd8:     	adrp	x16, 0x100034000 <__stubs+0x330>
10002efdc:     	ldr	x16, [x16, #624]
10002efe0:     	br	x16
10002efe4:     	adrp	x16, 0x100034000 <__stubs+0x33c>
10002efe8:     	ldr	x16, [x16, #632]
10002efec:     	br	x16
10002eff0:     	adrp	x16, 0x100034000 <__stubs+0x348>
10002eff4:     	ldr	x16, [x16, #640]
10002eff8:     	br	x16
10002effc:     	adrp	x16, 0x100034000 <__stubs+0x354>
10002f000:     	ldr	x16, [x16, #648]
10002f004:     	br	x16
10002f008:     	adrp	x16, 0x100034000 <__stubs+0x35c>
10002f00c:     	ldr	x16, [x16, #776]
10002f010:     	br	x16
10002f014:     	adrp	x16, 0x100034000 <__stubs+0x368>
10002f018:     	ldr	x16, [x16, #784]
10002f01c:     	br	x16
10002f020:     	adrp	x16, 0x100034000 <__stubs+0x374>
10002f024:     	ldr	x16, [x16, #792]
10002f028:     	br	x16
10002f02c:     	adrp	x16, 0x100034000 <__stubs+0x380>
10002f030:     	ldr	x16, [x16, #800]
10002f034:     	br	x16
10002f038:     	adrp	x16, 0x100034000 <__stubs+0x38c>
10002f03c:     	ldr	x16, [x16, #808]
10002f040:     	br	x16
10002f044:     	adrp	x16, 0x100034000 <__stubs+0x398>
10002f048:     	ldr	x16, [x16, #816]
10002f04c:     	br	x16
10002f050:     	adrp	x16, 0x100034000 <__stubs+0x3a4>
10002f054:     	ldr	x16, [x16, #824]
10002f058:     	br	x16
10002f05c:     	adrp	x16, 0x100034000 <__stubs+0x3b0>
10002f060:     	ldr	x16, [x16, #832]
10002f064:     	br	x16
10002f068:     	adrp	x16, 0x100034000 <__stubs+0x3bc>
10002f06c:     	ldr	x16, [x16, #840]
10002f070:     	br	x16
10002f074:     	adrp	x16, 0x100034000 <__stubs+0x3c8>
10002f078:     	ldr	x16, [x16, #848]
10002f07c:     	br	x16
10002f080:     	adrp	x16, 0x100034000 <__stubs+0x3d4>
10002f084:     	ldr	x16, [x16, #856]
10002f088:     	br	x16
10002f08c:     	adrp	x16, 0x100034000 <__stubs+0x3e0>
10002f090:     	ldr	x16, [x16, #864]
10002f094:     	br	x16
10002f098:     	adrp	x16, 0x100034000 <__stubs+0x3ec>
10002f09c:     	ldr	x16, [x16, #872]
10002f0a0:     	br	x16
10002f0a4:     	adrp	x16, 0x100034000 <__stubs+0x3f8>
10002f0a8:     	ldr	x16, [x16, #880]
10002f0ac:     	br	x16
10002f0b0:     	adrp	x16, 0x100034000 <__stubs+0x404>
10002f0b4:     	ldr	x16, [x16, #888]
10002f0b8:     	br	x16
10002f0bc:     	adrp	x16, 0x100034000 <__stubs+0x410>
10002f0c0:     	ldr	x16, [x16, #896]
10002f0c4:     	br	x16
10002f0c8:     	adrp	x16, 0x100034000 <__stubs+0x41c>
10002f0cc:     	ldr	x16, [x16, #912]
10002f0d0:     	br	x16
10002f0d4:     	adrp	x16, 0x100034000 <__stubs+0x428>
10002f0d8:     	ldr	x16, [x16, #920]
10002f0dc:     	br	x16
10002f0e0:     	adrp	x16, 0x100034000 <__stubs+0x434>
10002f0e4:     	ldr	x16, [x16, #952]
10002f0e8:     	br	x16
10002f0ec:     	adrp	x16, 0x100034000 <__stubs+0x440>
10002f0f0:     	ldr	x16, [x16, #960]
10002f0f4:     	br	x16
10002f0f8:     	adrp	x16, 0x100034000 <__stubs+0x44c>
10002f0fc:     	ldr	x16, [x16, #968]
10002f100:     	br	x16
10002f104:     	adrp	x16, 0x100034000 <__stubs+0x458>
10002f108:     	ldr	x16, [x16, #976]
10002f10c:     	br	x16
10002f110:     	adrp	x16, 0x100034000 <__stubs+0x464>
10002f114:     	ldr	x16, [x16, #984]
10002f118:     	br	x16
10002f11c:     	adrp	x16, 0x100034000 <__stubs+0x470>
10002f120:     	ldr	x16, [x16, #992]
10002f124:     	br	x16
10002f128:     	adrp	x16, 0x100034000 <__stubs+0x47c>
10002f12c:     	ldr	x16, [x16, #1008]
10002f130:     	br	x16
10002f134:     	adrp	x16, 0x100034000 <__stubs+0x488>
10002f138:     	ldr	x16, [x16, #1016]
10002f13c:     	br	x16
10002f140:     	adrp	x16, 0x100034000 <__stubs+0x494>
10002f144:     	ldr	x16, [x16, #1024]
10002f148:     	br	x16
10002f14c:     	adrp	x16, 0x100034000 <__stubs+0x4a0>
10002f150:     	ldr	x16, [x16, #1032]
10002f154:     	br	x16
10002f158:     	adrp	x16, 0x100034000 <__stubs+0x4ac>
10002f15c:     	ldr	x16, [x16, #1040]
10002f160:     	br	x16
10002f164:     	adrp	x16, 0x100034000 <__stubs+0x4b8>
10002f168:     	ldr	x16, [x16, #1048]
10002f16c:     	br	x16
10002f170:     	adrp	x16, 0x100034000 <__stubs+0x4c4>
10002f174:     	ldr	x16, [x16, #1056]
10002f178:     	br	x16
10002f17c:     	adrp	x16, 0x100034000 <__stubs+0x4d0>
10002f180:     	ldr	x16, [x16, #1064]
10002f184:     	br	x16
10002f188:     	adrp	x16, 0x100034000 <__stubs+0x4dc>
10002f18c:     	ldr	x16, [x16, #1072]
10002f190:     	br	x16
10002f194:     	adrp	x16, 0x100034000 <__stubs+0x4e8>
10002f198:     	ldr	x16, [x16, #1080]
10002f19c:     	br	x16
10002f1a0:     	adrp	x16, 0x100034000 <__stubs+0x4f4>
10002f1a4:     	ldr	x16, [x16, #1088]
10002f1a8:     	br	x16
10002f1ac:     	adrp	x16, 0x100034000 <__stubs+0x500>
10002f1b0:     	ldr	x16, [x16, #1096]
10002f1b4:     	br	x16
10002f1b8:     	adrp	x16, 0x100034000 <__stubs+0x50c>
10002f1bc:     	ldr	x16, [x16, #1104]
10002f1c0:     	br	x16
10002f1c4:     	adrp	x16, 0x100034000 <__stubs+0x518>
10002f1c8:     	ldr	x16, [x16, #1112]
10002f1cc:     	br	x16
10002f1d0:     	adrp	x16, 0x100034000 <__stubs+0x524>
10002f1d4:     	ldr	x16, [x16, #1120]
10002f1d8:     	br	x16
10002f1dc:     	adrp	x16, 0x100034000 <__stubs+0x530>
10002f1e0:     	ldr	x16, [x16, #1128]
10002f1e4:     	br	x16
10002f1e8:     	adrp	x16, 0x100034000 <__stubs+0x53c>
10002f1ec:     	ldr	x16, [x16, #1136]
10002f1f0:     	br	x16
10002f1f4:     	adrp	x16, 0x100034000 <__stubs+0x548>
10002f1f8:     	ldr	x16, [x16, #1144]
10002f1fc:     	br	x16
10002f200:     	adrp	x16, 0x100034000 <__stubs+0x554>
10002f204:     	ldr	x16, [x16, #1152]
10002f208:     	br	x16
10002f20c:     	adrp	x16, 0x100034000 <__stubs+0x560>
10002f210:     	ldr	x16, [x16, #1160]
10002f214:     	br	x16
10002f218:     	adrp	x16, 0x100034000 <__stubs+0x56c>
10002f21c:     	ldr	x16, [x16, #1168]
10002f220:     	br	x16
10002f224:     	adrp	x16, 0x100034000 <__stubs+0x578>
10002f228:     	ldr	x16, [x16, #1176]
10002f22c:     	br	x16
10002f230:     	adrp	x16, 0x100034000 <__stubs+0x584>
10002f234:     	ldr	x16, [x16, #1184]
10002f238:     	br	x16
10002f23c:     	adrp	x16, 0x100034000 <__stubs+0x590>
10002f240:     	ldr	x16, [x16, #1192]
10002f244:     	br	x16
10002f248:     	adrp	x16, 0x100034000 <__stubs+0x59c>
10002f24c:     	ldr	x16, [x16, #1200]
10002f250:     	br	x16
10002f254:     	adrp	x16, 0x100034000 <__stubs+0x5a8>
10002f258:     	ldr	x16, [x16, #1208]
10002f25c:     	br	x16
10002f260:     	adrp	x16, 0x100034000 <__stubs+0x5b4>
10002f264:     	ldr	x16, [x16, #1216]
10002f268:     	br	x16
10002f26c:     	adrp	x16, 0x100034000 <__stubs+0x5c0>
10002f270:     	ldr	x16, [x16, #1224]
10002f274:     	br	x16
10002f278:     	adrp	x16, 0x100034000 <__stubs+0x5cc>
10002f27c:     	ldr	x16, [x16, #1232]
10002f280:     	br	x16
10002f284:     	adrp	x16, 0x100034000 <__stubs+0x5d8>
10002f288:     	ldr	x16, [x16, #1240]
10002f28c:     	br	x16
10002f290:     	adrp	x16, 0x100034000 <__stubs+0x5e4>
10002f294:     	ldr	x16, [x16, #1248]
10002f298:     	br	x16
10002f29c:     	adrp	x16, 0x100034000 <__stubs+0x5f0>
10002f2a0:     	ldr	x16, [x16, #1256]
10002f2a4:     	br	x16
10002f2a8:     	adrp	x16, 0x100034000 <_vsnprintf+0x10002f2bc>
10002f2ac:     	ldr	x16, [x16, #1264]
10002f2b0:     	br	x16
